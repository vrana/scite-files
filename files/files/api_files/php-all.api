self
parent
$this
$GLOBALS
$_SERVER
$_GET
$_POST
$_FILES
$_REQUEST
$_SESSION
$_ENV
$_COOKIE
$php_errormsg
$http_response_header
$argc
$argv
abstract
and
as
break
callable
case
catch
class
clone
const
continue
declare
default
do
echo
else
elseif
enddeclare
endfor
endforeach
endif
endswitch
endwhile
extends
final
finally
fn
for
foreach
function
global
goto
if
implements
include
include_once
instanceof
insteadof
interface
match
namespace
new
or
print
private
protected
public
readonly
require
require_once
return
static
switch
throw
trait
try
use
var
while
xor
yield
from
__CLASS__
__DIR__
__FILE__
__FUNCTION__
__LINE__
__METHOD__
__PROPERTY__
__NAMESPACE__
__TRAIT__
PHP_VERSION
PHP_MAJOR_VERSION
PHP_MINOR_VERSION
PHP_RELEASE_VERSION
PHP_VERSION_ID
PHP_EXTRA_VERSION
ZEND_THREAD_SAFE
ZEND_DEBUG_BUILD
PHP_ZTS
PHP_DEBUG
DEBUG_BACKTRACE_PROVIDE_OBJECT
DEBUG_BACKTRACE_IGNORE_ARGS
PHP_MAXPATHLEN
PHP_OS
PHP_OS_FAMILY
PHP_SAPI
PHP_EOL
PHP_INT_MAX
PHP_INT_MIN
PHP_INT_SIZE
PHP_FLOAT_DIG
PHP_FLOAT_EPSILON
PHP_FLOAT_MIN
PHP_FLOAT_MAX
DEFAULT_INCLUDE_PATH
PHP_PREFIX
PHP_BINDIR
PHP_SBINDIR
PHP_BINARY
PHP_MANDIR
PHP_LIBDIR
PHP_DATADIR
PHP_SYSCONFDIR
PHP_LOCALSTATEDIR
PHP_CONFIG_FILE_PATH
PHP_CONFIG_FILE_SCAN_DIR
PHP_SHLIB_SUFFIX
PHP_FD_SETSIZE
PHP_WINDOWS_EVENT_CTRL_C
PHP_WINDOWS_EVENT_CTRL_BREAK
PHP_CLI_PROCESS_TITLE
STDERR
STDIN
STDOUT
int
float
bool
string
true
false
null
void
iterable
object
mixed
never
enum
resource
numeric
__construct(mixed ...$values)	Object constructor
__destruct()	Object destructor
__call(string $name, array $arguments): mixed	Triggered when invoking inaccessible methods in an object context
__callStatic(string $name, array $arguments): mixed	Triggered when invoking inaccessible methods in a static context
__get(string $name): mixed	Utilized for reading data from inaccessible properties
__set(string $name, mixed $value): void	Run when writing data to inaccessible properties
__isset(string $name): bool	Triggered by calling isset() or empty() on inaccessible properties
__unset(string $name): void	Invoked when unset() is used on inaccessible properties
__sleep(): array	Called by serialize()
__wakeup(): void	Called by unserialize()
__serialize(): array	Called by serialize()
__unserialize(array $data): void	Called by unserialize()
__toString(): string	Decide how to react when object is converted to a string
__invoke(mixed ...$values): mixed	Called when a script tries to call an object as a function
__set_state(array $properties): object	Called by var_export() result
__clone(): void	Called after cloning
__debugInfo(): array	Called by var_dump()
apache_child_terminate(): void	Terminate apache process after this request
apache_get_modules(): array	Get a list of loaded Apache modules
apache_get_version(): string|false	Fetch Apache version
apache_getenv(string $variable, bool $walk_to_top = false): string|false	Get an Apache subprocess_env variable
apache_lookup_uri(string $filename): object|false	Perform a partial request for the specified URI and return all info about it
apache_note(string $note_name, string|null $note_value = null): string|false	Get and set apache request notes
apache_request_headers(): array	Fetch all HTTP request headers
apache_response_headers(): array	Fetch all HTTP response headers
apache_setenv(string $variable, string $value, bool $walk_to_top = false): bool	Set an Apache subprocess_env variable
getallheaders(): array	Fetch all HTTP request headers
virtual(string $uri): bool	Perform an Apache sub-request
APCUIterator(array|string|null $search = null, int $format = APC_ITER_ALL, int $chunk_size = 100, int $list = APC_LIST_ACTIVE)	(new) Constructs an APCUIterator iterator object
>current(): mixed	(APCUIterator) Get current item
>getTotalCount(): int	(APCUIterator) Get total count
>getTotalHits(): int	(APCUIterator) Get total cache hits
>getTotalSize(): int	(APCUIterator) Get total cache size
>key(): string	(APCUIterator) Get iterator key
>next(): bool	(APCUIterator) Move pointer to next item
>rewind(): void	(APCUIterator) Rewinds iterator
>valid(): bool	(APCUIterator) Checks if current position is valid
apcu_add(string $key, mixed $var, int $ttl = ?): bool	Cache a new variable in the data store
apcu_add(array $values, mixed $unused = NULL, int $ttl = ?): array	Cache a new variable in the data store
apcu_cache_info(bool $limited = false): array|false	Retrieves cached information from APCu's data store
apcu_cas(string $key, int $old, int $new): bool	Updates an old value with a new value
apcu_clear_cache(): bool	Clears the APCu cache
apcu_dec(string $key, int $step = 1, bool $success = ?, int $ttl = ?): int|false	Decrease a stored number
apcu_delete(mixed $key): mixed	Removes a stored variable from the cache
apcu_enabled(): bool	Whether APCu is usable in the current environment
apcu_entry(string $key, callable $generator, int $ttl = ?): mixed	Atomically fetch or generate a cache entry
apcu_exists(string|array $keys): bool|array	Checks if entry exists
apcu_fetch(mixed $key, bool $success = ?): mixed	Fetch a stored variable from the cache
apcu_inc(string $key, int $step = 1, bool $success = ?, int $ttl = ?): int|false	Increase a stored number
apcu_key_info(string $key): array|null	Get detailed information about the cache key
apcu_sma_info(bool $limited = false): array|false	Retrieves APCu Shared Memory Allocation information
apcu_store(string $key, mixed $var, int $ttl = ?): bool	Cache a variable in the data store
apcu_store(array $values, mixed $unused = NULL, int $ttl = ?): array	Cache a variable in the data store
array_all(array $array, callable $callback): bool	Checks if all array elements satisfy a callback function
array_any(array $array, callable $callback): bool	Checks if at least one array element satisfies a callback function
array_change_key_case(array $array, int $case = CASE_LOWER): array	Changes the case of all keys in an array
array_chunk(array $array, int $length, bool $preserve_keys = false): array	Split an array into chunks
array_column(array $array, int|string|null $column_key, int|string|null $index_key = null): array	Return the values from a single column in the input array
array_combine(array $keys, array $values): array	Creates an array by using one array for keys and another for its values
array_count_values(array $array): array	Counts the occurrences of each distinct value in an array
array_diff_assoc(array $array, array ...$arrays): array	Computes the difference of arrays with additional index check
array_diff_key(array $array, array ...$arrays): array	Computes the difference of arrays using keys for comparison
array_diff_uassoc(array $array, array ...$arrays, callable $key_compare_func): array	Computes the difference of arrays with additional index check which is performed by a user supplied callback function
array_diff_ukey(array $array, array ...$arrays, callable $key_compare_func): array	Computes the difference of arrays using a callback function on the keys for comparison
array_diff(array $array, array ...$arrays): array	Computes the difference of arrays
array_fill_keys(array $keys, mixed $value): array	Fill an array with values, specifying keys
array_fill(int $start_index, int $count, mixed $value): array	Fill an array with values
array_filter(array $array, callable|null $callback = null, int $mode = ?): array	Filters elements of an array using a callback function
array_find_key(array $array, callable $callback): mixed	Returns the key of the first element satisfying a callback function
array_find(array $array, callable $callback): mixed	Returns the first element satisfying a callback function
array_flip(array $array): array	Exchanges all keys with their associated values in an array
array_intersect_assoc(array $array, array ...$arrays): array	Computes the intersection of arrays with additional index check
array_intersect_key(array $array, array ...$arrays): array	Computes the intersection of arrays using keys for comparison
array_intersect_uassoc(array $array, array ...$arrays, callable $key_compare_func): array	Computes the intersection of arrays with additional index check, compares indexes by a callback function
array_intersect_ukey(array $array, array ...$arrays, callable $key_compare_func): array	Computes the intersection of arrays using a callback function on the keys for comparison
array_intersect(array $array, array ...$arrays): array	Computes the intersection of arrays
array_is_list(array $array): bool	Checks whether a given $array is a list
array_key_exists(string|int|float|bool|resource|null $key, array $array): bool	Checks if the given key or index exists in the array
array_key_first(array $array): int|string|null	Gets the first key of an array
array_key_last(array $array): int|string|null	Gets the last key of an array
array_keys(array $array): array	Return all the keys or a subset of the keys of an array
array_keys(array $array, mixed $filter_value, bool $strict = false): array	Return all the keys or a subset of the keys of an array
array_map(callable|null $callback, array $array, array ...$arrays): array	Applies the callback to the elements of the given arrays
array_merge_recursive(array ...$arrays): array	Merge one or more arrays recursively
array_merge(array ...$arrays): array	Merge one or more arrays
array_multisort(array $array1, mixed $array1_sort_order = SORT_ASC, mixed $array1_sort_flags = SORT_REGULAR, mixed ...$rest): bool	Sort multiple or multi-dimensional arrays
array_pad(array $array, int $length, mixed $value): array	Pad array to the specified length with a value
array_pop(array $array): mixed	Pop the element off the end of array
array_product(array $array): int|float	Calculate the product of values in an array
array_push(array $array, mixed ...$values): int	Push one or more elements onto the end of array
array_rand(array $array, int $num = 1): int|string|array	Pick one or more random keys out of an array
array_reduce(array $array, callable $callback, mixed $initial = null): mixed	Iteratively reduce the array to a single value using a callback function
array_replace_recursive(array $array, array ...$replacements): array	Replaces elements from passed arrays into the first array recursively
array_replace(array $array, array ...$replacements): array	Replaces elements from passed arrays into the first array
array_reverse(array $array, bool $preserve_keys = false): array	Return an array with elements in reverse order
array_search(mixed $needle, array $haystack, bool $strict = false): int|string|false	Searches the array for a given value and returns the first corresponding key if successful
array_shift(array $array): mixed	Shift an element off the beginning of array
array_slice(array $array, int $offset, int|null $length = null, bool $preserve_keys = false): array	Extract a slice of the array
array_splice(array $array, int $offset, int|null $length = null, mixed $replacement = []): array	Remove a portion of the array and replace it with something else
array_sum(array $array): int|float	Calculate the sum of values in an array
array_udiff_assoc(array $array, array ...$arrays, callable $value_compare_func): array	Computes the difference of arrays with additional index check, compares data by a callback function
array_udiff_uassoc(array $array, array ...$arrays, callable $value_compare_func, callable $key_compare_func): array	Computes the difference of arrays with additional index check, compares data and indexes by a callback function
array_udiff(array $array, array ...$arrays, callable $value_compare_func): array	Computes the difference of arrays by using a callback function for data comparison
array_uintersect_assoc(array $array, array ...$arrays, callable $value_compare_func): array	Computes the intersection of arrays with additional index check, compares data by a callback function
array_uintersect_uassoc(array $array1, array ...$arrays, callable $value_compare_func, callable $key_compare_func): array	Computes the intersection of arrays with additional index check, compares data and indexes by separate callback functions
array_uintersect(array $array, array ...$arrays, callable $value_compare_func): array	Computes the intersection of arrays, compares data by a callback function
array_unique(array $array, int $flags = SORT_STRING): array	Removes duplicate values from an array
array_unshift(array $array, mixed ...$values): int	Prepend one or more elements to the beginning of an array
array_values(array $array): array	Return all the values of an array
array_walk_recursive(array|object $array, callable $callback, mixed $arg = null): true	Apply a user function recursively to every member of an array
array_walk(array|object $array, callable $callback, mixed $arg = null): true	Apply a user supplied function to every member of an array
array(mixed ...$values): array	Create an array
arsort(array $array, int $flags = SORT_REGULAR): true	Sort an array in descending order and maintain index association
asort(array $array, int $flags = SORT_REGULAR): true	Sort an array in ascending order and maintain index association
compact(array|string $var_name, array|string ...$var_names): array	Create array containing variables and their values
count(Countable|array $value, int $mode = COUNT_NORMAL): int	Counts all elements in an array or in a Countable object
current(array|object $array): mixed	Return the current element in an array
each(array|object $array): array	Return the current key and value pair from an array and advance the array cursor
end(array|object $array): mixed	Set the internal pointer of an array to its last element
extract(array $array, int $flags = EXTR_OVERWRITE, string $prefix = ""): int	Import variables into the current symbol table from an array
in_array(mixed $needle, array $haystack, bool $strict = false): bool	Checks if a value exists in an array
key_exists()	Alias of array_key_exists
key(array|object $array): int|string|null	Fetch a key from an array
krsort(array $array, int $flags = SORT_REGULAR): true	Sort an array by key in descending order
ksort(array $array, int $flags = SORT_REGULAR): true	Sort an array by key in ascending order
list(mixed $var, mixed ...$vars = ?): array	Assign variables as if they were an array
natcasesort(array $array): true	Sort an array using a case insensitive "natural order" algorithm
natsort(array $array): true	Sort an array using a "natural order" algorithm
next(array|object $array): mixed	Advance the internal pointer of an array
pos()	Alias of current
prev(array|object $array): mixed	Rewind the internal array pointer
range(string|int|float $start, string|int|float $end, int|float $step = 1): array	Create an array containing a range of elements
reset(array|object $array): mixed	Set the internal pointer of an array to its first element
rsort(array $array, int $flags = SORT_REGULAR): true	Sort an array in descending order
shuffle(array $array): true	Shuffle an array
sizeof()	Alias of count
sort(array $array, int $flags = SORT_REGULAR): true	Sort an array in ascending order
uasort(array $array, callable $callback): true	Sort an array with a user-defined comparison function and maintain index association
uksort(array $array, callable $callback): true	Sort an array by keys using a user-defined comparison function
usort(array $array, callable $callback): true	Sort an array by values using a user-defined comparison function
>add(BcMath\Number|string|int $num, int|null $scale = null): BcMath\Number	(BcMath\Number) Adds an arbitrary precision number
>ceil(): BcMath\Number	(BcMath\Number) Rounds up an arbitrary precision number
>compare(BcMath\Number|string|int $num, int|null $scale = null): int	(BcMath\Number) Compares two arbitrary precision numbers
BcMath\Number(string|int $num)	(new) Creates a BcMath\Number object
>div(BcMath\Number|string|int $num, int|null $scale = null): BcMath\Number	(BcMath\Number) Divides by an arbitrary precision number
>divmod(BcMath\Number|string|int $num, int|null $scale = null): array	(BcMath\Number) Gets the quotient and modulus of an arbitrary precision number
>floor(): BcMath\Number	(BcMath\Number) Rounds down an arbitrary precision number
>mod(BcMath\Number|string|int $num, int|null $scale = null): BcMath\Number	(BcMath\Number) Gets the modulus of an arbitrary precision number
>mul(BcMath\Number|string|int $num, int|null $scale = null): BcMath\Number	(BcMath\Number) Multiplies an arbitrary precision number
>pow(BcMath\Number|string|int $exponent, int|null $scale = null): BcMath\Number	(BcMath\Number) Raises an arbitrary precision number
>powmod(BcMath\Number|string|int $exponent, BcMath\Number|string|int $modulus, int|null $scale = null): BcMath\Number	(BcMath\Number) Raises an arbitrary precision number, reduced by a specified modulus
>round(int $precision = ?, RoundingMode $mode = RoundingMode::HalfAwayFromZero): BcMath\Number	(BcMath\Number) Rounds an arbitrary precision number
>__serialize(): array	(BcMath\Number) Serializes a BcMath\Number object
>sqrt(int|null $scale = null): BcMath\Number	(BcMath\Number) Gets the square root of an arbitrary precision number
>sub(BcMath\Number|string|int $num, int|null $scale = null): BcMath\Number	(BcMath\Number) Subtracts an arbitrary precision number
>__toString(): string	(BcMath\Number) Converts BcMath\Number to string
>__unserialize(array $data): void	(BcMath\Number) Deserializes a data parameter into a BcMath\Number object
bcadd(string $num1, string $num2, int|null $scale = null): string	Add two arbitrary precision numbers
bcceil(string $num): string	Round up arbitrary precision number
bccomp(string $num1, string $num2, int|null $scale = null): int	Compare two arbitrary precision numbers
bcdiv(string $num1, string $num2, int|null $scale = null): string	Divide two arbitrary precision numbers
bcdivmod(string $num1, string $num2, int|null $scale = null): array	Get the quotient and modulus of an arbitrary precision number
bcfloor(string $num): string	Round down arbitrary precision number
bcmod(string $num1, string $num2, int|null $scale = null): string	Get modulus of an arbitrary precision number
bcmul(string $num1, string $num2, int|null $scale = null): string	Multiply two arbitrary precision numbers
bcpow(string $num, string $exponent, int|null $scale = null): string	Raise an arbitrary precision number to another
bcpowmod(string $num, string $exponent, string $modulus, int|null $scale = null): string	Raise an arbitrary precision number to another, reduced by a specified modulus
bcround(string $num, int $precision = ?, RoundingMode $mode = RoundingMode::HalfAwayFromZero): string	Round arbitrary precision number
bcscale(int $scale): int	Set or get default scale parameter for all bc math functions
bcscale(null $scale = null): int	Set or get default scale parameter for all bc math functions
bcsqrt(string $num, int|null $scale = null): string	Get the square root of an arbitrary precision number
bcsub(string $num1, string $num2, int|null $scale = null): string	Subtract one arbitrary precision number from another
bzclose(resource $bz): bool	Close a bzip2 file
bzcompress(string $data, int $block_size = 4, int $work_factor = ?): string|int	Compress a string into bzip2 encoded data
bzdecompress(string $data, bool $use_less_memory = false): string|int|false	Decompresses bzip2 encoded data
bzerrno(resource $bz): int	Returns a bzip2 error number
bzerror(resource $bz): array	Returns the bzip2 error number and error string in an array
bzerrstr(resource $bz): string	Returns a bzip2 error string
bzflush(resource $bz): bool	Do nothing
bzopen(string|resource $file, string $mode): resource|false	Opens a bzip2 compressed file
bzread(resource $bz, int $length = 1024): string|false	Binary safe bzip2 file read
bzwrite(resource $bz, string $data, int|null $length = null): int|false	Binary safe bzip2 file write
cal_days_in_month(int $calendar, int $month, int $year): int	Return the number of days in a month for a given year and calendar
cal_from_jd(int $julian_day, int $calendar): array	Converts from Julian Day Count to a supported calendar
cal_info(int $calendar = -1): array	Returns information about a particular calendar
cal_to_jd(int $calendar, int $month, int $day, int $year): int	Converts from a supported calendar to Julian Day Count
easter_date(int|null $year = null, int $mode = CAL_EASTER_DEFAULT): int	Get Unix timestamp for local midnight on Easter of a given year
easter_days(int|null $year = null, int $mode = CAL_EASTER_DEFAULT): int	Get number of days after March 21 on which Easter falls for a given year
frenchtojd(int $month, int $day, int $year): int	Converts a date from the French Republican Calendar to a Julian Day Count
gregoriantojd(int $month, int $day, int $year): int	Converts a Gregorian date to Julian Day Count
jddayofweek(int $julian_day, int $mode = CAL_DOW_DAYNO): int|string	Returns the day of the week
jdmonthname(int $julian_day, int $mode): string	Returns a month name
jdtofrench(int $julian_day): string	Converts a Julian Day Count to the French Republican Calendar
jdtogregorian(int $julian_day): string	Converts Julian Day Count to Gregorian date
jdtojewish(int $julian_day, bool $hebrew = false, int $flags = ?): string	Converts a Julian day count to a Jewish calendar date
jdtojulian(int $julian_day): string	Converts a Julian Day Count to a Julian Calendar Date
jdtounix(int $julian_day): int	Convert Julian Day to Unix timestamp
jewishtojd(int $month, int $day, int $year): int	Converts a date in the Jewish Calendar to Julian Day Count
juliantojd(int $month, int $day, int $year): int	Converts a Julian Calendar date to Julian Day Count
unixtojd(int|null $timestamp = null): int|false	Convert Unix timestamp to Julian Day
__autoload(string $class): void	Attempt to load undefined class
class_alias(string $class, string $alias, bool $autoload = true): bool	Creates an alias for a class
class_exists(string $class, bool $autoload = true): bool	Checks if the class has been defined
enum_exists(string $enum, bool $autoload = true): bool	Checks if the enum has been defined
get_called_class(): string	The "Late Static Binding" class name
get_class_methods(object|string $object_or_class): array	Gets the class methods' names
get_class_vars(string $class): array	Get the default properties of the class
get_class(object $object = ?): string	Returns the name of the class of an object
get_declared_classes(): array	Returns an array with the name of the defined classes
get_declared_interfaces(): array	Returns an array of all declared interfaces
get_declared_traits(): array	Returns an array of all declared traits
get_mangled_object_vars(object $object): array	Returns an array of mangled object properties
get_object_vars(object $object): array	Gets the properties of the given object
get_parent_class(object|string $object_or_class = ?): string|false	Retrieves the parent class name for object or class
interface_exists(string $interface, bool $autoload = true): bool	Checks if the interface has been defined
is_a(mixed $object_or_class, string $class, bool $allow_string = false): bool	Checks whether the object is of a given type or subtype
is_subclass_of(mixed $object_or_class, string $class, bool $allow_string = true): bool	Checks if the object has this class as one of its parents or implements it
method_exists(object|string $object_or_class, string $method): bool	Checks if the class method exists
property_exists(object|string $object_or_class, string $property): bool	Checks if the object or class has a property
trait_exists(string $trait, bool $autoload = true): bool	Checks if the trait exists
CommonMark\CQL(string $query)	(new) CQL Construction
>__invoke(CommonMark\Node $root, callable $handler)	(CommonMark\CQL) CQL Execution
>accept(CommonMark\Interfaces\IVisitor $visitor): void	(CommonMark\Interfaces\IVisitable) Visitation
>enter(IVisitable $visitable): int|IVisitable|null	(CommonMark\Interfaces\IVisitor) Visitation
>leave(IVisitable $visitable): int|IVisitable|null	(CommonMark\Interfaces\IVisitor) Visitation
>accept(CommonMark\Interfaces\IVisitor $visitor): void	(CommonMark\Node) Visitation
>appendChild(CommonMark\Node $child): CommonMark\Node	(CommonMark\Node) AST Manipulation
>insertAfter(CommonMark\Node $sibling): CommonMark\Node	(CommonMark\Node) AST Manipulation
>insertBefore(CommonMark\Node $sibling): CommonMark\Node	(CommonMark\Node) AST Manipulation
>prependChild(CommonMark\Node $child): CommonMark\Node	(CommonMark\Node) AST Manipulation
>replace(CommonMark\Node $target): CommonMark\Node	(CommonMark\Node) AST Manipulation
>unlink(): void	(CommonMark\Node) AST Manipulation
CommonMark\Node\BulletList()	(new) BulletList Construction
CommonMark\Node\BulletList(int $tight)	(new) BulletList Construction
CommonMark\Node\BulletList(int $tight, int $delimiter)	(new) BulletList Construction
CommonMark\Node\CodeBlock(string $fence, string $literal)	(new) CodeBlock Construction
CommonMark\Node\Heading()	(new) Heading Construction
CommonMark\Node\Heading(int $level)	(new) Heading Construction
CommonMark\Node\Image()	(new) Image Construction
CommonMark\Node\Image(string $url)	(new) Image Construction
CommonMark\Node\Image(string $url, string $title)	(new) Image Construction
CommonMark\Node\Link()	(new) Link Construction
CommonMark\Node\Link(string $url)	(new) Link Construction
CommonMark\Node\Link(string $url, string $title)	(new) Link Construction
CommonMark\Node\OrderedList()	(new) OrderedList Construction
CommonMark\Node\OrderedList(int $tight)	(new) OrderedList Construction
CommonMark\Node\OrderedList(int $tight, int $delimiter)	(new) OrderedList Construction
CommonMark\Node\OrderedList(int $tight, int $delimiter, int $start)	(new) OrderedList Construction
CommonMark\Node\Text()	(new) Text Construction
CommonMark\Node\Text(string $literal)	(new) Text Construction
CommonMark\Parser(int $options = ?)	(new) Parsing
>finish(): CommonMark\Node	(CommonMark\Parser) Parsing
>parse(string $buffer): void	(CommonMark\Parser) Parsing
CommonMark\Parse(string $content, int $options = ?): CommonMark\Node	Parsing
CommonMark\Render\HTML(CommonMark\Node $node, int $options = ?): string	Rendering
CommonMark\Render\Latex(CommonMark\Node $node, int $options = ?, int $width = ?): string	Rendering
CommonMark\Render\Man(CommonMark\Node $node, int $options = ?, int $width = ?): string	Rendering
CommonMark\Render(CommonMark\Node $node, int $options = ?, int $width = ?): string	Rendering
CommonMark\Render\XML(CommonMark\Node $node, int $options = ?): string	Rendering
CommonMark\Interfaces\IVisitable()	(new) 
CommonMark\Interfaces\IVisitor()	(new) 
CommonMark\Node\BlockQuote()	(new) 
CommonMark\Node\Code()	(new) 
CommonMark\Node\CustomBlock()	(new) 
CommonMark\Node\CustomInline()	(new) 
CommonMark\Node\Document()	(new) 
CommonMark\Node\HTMLBlock()	(new) 
CommonMark\Node\HTMLInline()	(new) 
CommonMark\Node\Item()	(new) 
CommonMark\Node\LineBreak()	(new) 
CommonMark\Node\Paragraph()	(new) 
CommonMark\Node\SoftBreak()	(new) 
CommonMark\Node\Text\Emphasis()	(new) 
CommonMark\Node\Text\Strong()	(new) 
CommonMark\Node\ThematicBreak()	(new) 
CommonMark\Node()	(new) Represents an Abstract Node, this final abstract is not for direct use by the programmer
com(string $module_name, array|string|null $server_name = null, int $codepage = CP_ACP, string $typelib = "")	(new) com class constructor
COMPersistHelper(variant|null $variant = null)	(new) Construct a COMPersistHelper object
>GetCurFileName(): string|false	(COMPersistHelper) Get current filename
>GetMaxStreamSize(): int	(COMPersistHelper) Get maximum stream size
>InitNew(): bool	(COMPersistHelper) Initialize object to default state
>LoadFromFile(string $filename, int $flags = ?): bool	(COMPersistHelper) Load object from file
>LoadFromStream(resource $stream): bool	(COMPersistHelper) Load object from stream
>SaveToFile(string|null $filename, bool $remember = true): bool	(COMPersistHelper) Save object to file
>SaveToStream(resource $stream): bool	(COMPersistHelper) Save object to stream
dotnet(string $assembly_name, string $datatype_name, int $codepage = CP_ACP)	(new) dotnet class constructor
com_create_guid(): string|false	Generate a globally unique identifier (GUID)
com_event_sink(variant $variant, object $sink_object, array|string|null $sink_interface = null): bool	Connect events from a COM object to a PHP object
com_get_active_object(string $prog_id, int|null $codepage = null): variant	Returns a handle to an already running instance of a COM object
com_load_typelib(string $typelib, bool $case_insensitive = true): bool	Loads a Typelib
com_message_pump(int $timeout_milliseconds = ?): bool	Process COM messages, sleeping for up to timeoutms milliseconds
com_print_typeinfo(variant|string $variant, string|null $dispatch_interface = null, bool $display_sink = false): bool	Print out a PHP class definition for a dispatchable interface
variant_abs(mixed $value): variant	Returns the absolute value of a variant
variant_add(mixed $left, mixed $right): variant	"Adds" two variant values together and returns the result
variant_and(mixed $left, mixed $right): variant	Performs a bitwise AND operation between two variants
variant_cast(variant $variant, int $type): variant	Convert a variant into a new variant object of another type
variant_cat(mixed $left, mixed $right): variant	Concatenates two variant values together and returns the result
variant_cmp(mixed $left, mixed $right, int $locale_id = LOCALE_SYSTEM_DEFAULT, int $flags = ?): int	Compares two variants
variant_date_from_timestamp(int $timestamp): variant	Returns a variant date representation of a Unix timestamp
variant_date_to_timestamp(variant $variant): int|null	Converts a variant date/time value to Unix timestamp
variant_div(mixed $left, mixed $right): variant	Returns the result from dividing two variants
variant_eqv(mixed $left, mixed $right): variant	Performs a bitwise equivalence on two variants
variant_fix(mixed $value): variant	Returns the integer portion of a variant
variant_get_type(variant $variant): int	Returns the type of a variant object
variant_idiv(mixed $left, mixed $right): variant	Converts variants to integers and then returns the result from dividing them
variant_imp(mixed $left, mixed $right): variant	Performs a bitwise implication on two variants
variant_int(mixed $value): variant	Returns the integer portion of a variant
variant_mod(mixed $left, mixed $right): variant	Divides two variants and returns only the remainder
variant_mul(mixed $left, mixed $right): variant	Multiplies the values of the two variants
variant_neg(mixed $value): variant	Performs logical negation on a variant
variant_not(mixed $value): variant	Performs bitwise not negation on a variant
variant_or(mixed $left, mixed $right): variant	Performs a logical disjunction on two variants
variant_pow(mixed $left, mixed $right): variant	Returns the result of performing the power function with two variants
variant_round(mixed $value, int $decimals): variant|null	Rounds a variant to the specified number of decimal places
variant_set_type(variant $variant, int $type): void	Convert a variant into another type "in-place"
variant_set(variant $variant, mixed $value): void	Assigns a new value for a variant object
variant_sub(mixed $left, mixed $right): variant	Subtracts the value of the right variant from the left variant value
variant_xor(mixed $left, mixed $right): variant	Performs a logical exclusion on two variants
variant(mixed $value = null, int $type = VT_EMPTY, int $codepage = CP_ACP)	(new) variant class constructor
com_exception()	(new) 
com_safearray_proxy()	(new) com_safearray_proxy is an internal class used for resolving multi-dimensional array accesses on SafeArray types
>addInterface(string $interface): Definition	(Componere\Abstract\Definition) Add Interface
>addMethod(string $name, Componere\Method $method): Definition	(Componere\Abstract\Definition) Add Method
>addTrait(string $trait): Definition	(Componere\Abstract\Definition) Add Trait
>getReflector(): ReflectionClass	(Componere\Abstract\Definition) Reflection
>addConstant(string $name, Componere\Value $value): Definition	(Componere\Definition) Add Constant
>addProperty(string $name, Componere\Value $value): Definition	(Componere\Definition) Add Property
Componere\Definition(string $name)	(new) Definition Construction
Componere\Definition(string $name, string $parent)	(new) Definition Construction
Componere\Definition(string $name, array $interfaces)	(new) Definition Construction
Componere\Definition(string $name, string $parent, array $interfaces)	(new) Definition Construction
>getClosure(string $name): Closure	(Componere\Definition) Get Closure
>getClosures(): array	(Componere\Definition) Get Closures
>isRegistered(): bool	(Componere\Definition) State Detection
>register(): void	(Componere\Definition) Registration
Componere\Method(Closure $closure)	(new) Method Construction
>getReflector(): ReflectionMethod	(Componere\Method) Reflection
>setPrivate(): Method	(Componere\Method) Accessibility Modification
>setProtected(): Method	(Componere\Method) Accessibility Modification
>setStatic(): Method	(Componere\Method) Accessibility Modification
>apply(): void	(Componere\Patch) Application
Componere\Patch(object $instance)	(new) Patch Construction
Componere\Patch(object $instance, array $interfaces)	(new) Patch Construction
>derive(object $instance): Patch	(Componere\Patch) Patch Derivation
>getClosure(string $name): Closure	(Componere\Patch) Get Closure
>getClosures(): array	(Componere\Patch) Get Closures
>isApplied(): bool	(Componere\Patch) State Detection
>revert(): void	(Componere\Patch) Reversal
Componere\Value(mixed $default = ?)	(new) Value Construction
>hasDefault(): bool	(Componere\Value) Value Interaction
>isPrivate(): bool	(Componere\Value) Accessibility Detection
>isProtected(): bool	(Componere\Value) Accessibility Detection
>isStatic(): bool	(Componere\Value) Accessibility Detection
>setPrivate(): Value	(Componere\Value) Accessibility Modification
>setProtected(): Value	(Componere\Value) Accessibility Modification
>setStatic(): Value	(Componere\Value) Accessibility Modification
Componere\cast(string $type, object $object): object	Casting
Componere\cast_by_ref(string $type, object $object): object	Casting
Componere\Abstract\Definition()	(new) This final abstract represents a class entry, and should not be used by the programmer
ctype_alnum(mixed $text): bool	Check for alphanumeric character(s)
ctype_alpha(mixed $text): bool	Check for alphabetic character(s)
ctype_cntrl(mixed $text): bool	Check for control character(s)
ctype_digit(mixed $text): bool	Check for numeric character(s)
ctype_graph(mixed $text): bool	Check for any printable character(s) except space
ctype_lower(mixed $text): bool	Check for lowercase character(s)
ctype_print(mixed $text): bool	Check for printable character(s)
ctype_punct(mixed $text): bool	Check for any printable character which is not whitespace or an alphanumeric character
ctype_space(mixed $text): bool	Check for whitespace character(s)
ctype_upper(mixed $text): bool	Check for uppercase character(s)
ctype_xdigit(mixed $text): bool	Check for character(s) representing a hexadecimal digit
cubrid_affected_rows(resource $conn_identifier = ?): int	Return the number of rows affected by the last SQL statement
cubrid_affected_rows(resource $req_identifier = ?): int	Return the number of rows affected by the last SQL statement
cubrid_client_encoding(resource $conn_identifier = ?): string	Return the current CUBRID connection charset
cubrid_close(resource $conn_identifier = ?): bool	Close CUBRID connection
cubrid_data_seek(resource $result, int $row_number): bool	Move the internal row pointer of the CUBRID result
cubrid_db_name(array $result, int $index): string	Get db name from results of cubrid_list_dbs
cubrid_errno(resource $conn_identifier = ?): int	Return the numerical value of the error message from previous CUBRID operation
cubrid_error(resource $connection = ?): string	Get the error message
cubrid_fetch_array(resource $result, int $type = CUBRID_BOTH): array	Fetch a result row as an associative array, a numeric array, or both
cubrid_fetch_assoc(resource $result, int $type = ?): array	Return the associative array that corresponds to the fetched row
cubrid_fetch_field(resource $result, int $field_offset = ?): object	Get column information from a result and return as an object
cubrid_fetch_lengths(resource $result): array	Return an array with the lengths of the values of each field from the current row
cubrid_fetch_object(resource $result, string $class_name = ?, array $params = ?, int $type = ?): object	Fetch the next row and return it as an object
cubrid_fetch_row(resource $result, int $type = ?): array	Return a numerical array with the values of the current row
cubrid_field_flags(resource $result, int $field_offset): string	Return a string with the flags of the given field offset
cubrid_field_len(resource $result, int $field_offset): int	Get the maximum length of the specified field
cubrid_field_name(resource $result, int $field_offset): string	Return the name of the specified field index
cubrid_field_seek(resource $result, int $field_offset = ?): bool	Move the result set cursor to the specified field offset
cubrid_field_table(resource $result, int $field_offset): string	Return the name of the table of the specified field
cubrid_field_type(resource $result, int $field_offset): string	Return the type of the column corresponding to the given field offset
cubrid_list_dbs(resource $conn_identifier = ?): array	Return an array with the list of all existing CUBRID databases
cubrid_num_fields(resource $result): int	Return the number of columns in the result set
cubrid_ping(resource $conn_identifier = ?): bool	Ping a server connection or reconnect if there is no connection
cubrid_query(string $query, resource $conn_identifier = ?): resource	Send a CUBRID query
cubrid_real_escape_string(string $unescaped_string, resource $conn_identifier = ?): string	Escape special characters in a string for use in an SQL statement
cubrid_result(resource $result, int $row, mixed $field = ?): string	Return the value of a specific field in a specific row
cubrid_unbuffered_query(string $query, resource $conn_identifier = ?): resource	Perform a query without fetching the results into memory
cubrid_bind(resource $req_identifier, int $bind_index, mixed $bind_value, string $bind_value_type = ?): bool	Bind variables to a prepared statement as parameters
cubrid_close_prepare(resource $req_identifier): bool	Close the request handle
cubrid_close_request(resource $req_identifier): bool	Close the request handle
cubrid_col_get(resource $conn_identifier, string $oid, string $attr_name): array	Get contents of collection type column using OID
cubrid_col_size(resource $conn_identifier, string $oid, string $attr_name): int	Get the number of elements in collection type column using OID
cubrid_column_names(resource $req_identifier): array	Get the column names in result
cubrid_column_types(resource $req_identifier): array	Get column types in result
cubrid_commit(resource $conn_identifier): bool	Commit a transaction
cubrid_connect_with_url(string $conn_url, string $userid = ?, string $passwd = ?, bool $new_link = false): resource	Establish the environment for connecting to CUBRID server
cubrid_connect(string $host, int $port, string $dbname, string $userid = ?, string $passwd = ?, bool $new_link = false): resource	Open a connection to a CUBRID Server
cubrid_current_oid(resource $req_identifier): string	Get OID of the current cursor location
cubrid_disconnect(resource $conn_identifier = ?): bool	Close a database connection
cubrid_drop(resource $conn_identifier, string $oid): bool	Delete an instance using OID
cubrid_error_code_facility(): int	Get the facility code of error
cubrid_error_code(): int	Get error code for the most recent function call
cubrid_error_msg(): string	Get last error message for the most recent function call
cubrid_execute(resource $conn_identifier, string $sql, int $option = ?): resource	Execute a prepared SQL statement
cubrid_execute(resource $request_identifier, int $option = ?): bool	Execute a prepared SQL statement
cubrid_fetch(resource $result, int $type = CUBRID_BOTH): mixed	Fetch the next row from a result set
cubrid_free_result(resource $req_identifier): bool	Free the memory occupied by the result data
cubrid_get_autocommit(resource $conn_identifier): bool	Get auto-commit mode of the connection
cubrid_get_charset(resource $conn_identifier): string	Return the current CUBRID connection charset
cubrid_get_class_name(resource $conn_identifier, string $oid): string	Get the class name using OID
cubrid_get_client_info(): string	Return the client library version
cubrid_get_db_parameter(resource $conn_identifier): array	Returns the CUBRID database parameters
cubrid_get_query_timeout(resource $req_identifier): int	Get the query timeout value of the request
cubrid_get_server_info(resource $conn_identifier): string	Return the CUBRID server version
cubrid_get(resource $conn_identifier, string $oid, mixed $attr = ?): mixed	Get a column using OID
cubrid_insert_id(resource $conn_identifier = ?): string	Return the ID generated for the last updated AUTO_INCREMENT column
cubrid_is_instance(resource $conn_identifier, string $oid): int	Check whether the instance pointed by OID exists
cubrid_lob_close(array $lob_identifier_array): bool	Close BLOB/CLOB data
cubrid_lob_export(resource $conn_identifier, resource $lob_identifier, string $path_name): bool	Export BLOB/CLOB data to file
cubrid_lob_get(resource $conn_identifier, string $sql): array	Get BLOB/CLOB data
cubrid_lob_send(resource $conn_identifier, resource $lob_identifier): bool	Read BLOB/CLOB data and send straight to browser
cubrid_lob_size(resource $lob_identifier): string	Get BLOB/CLOB data size
cubrid_lob2_bind(resource $req_identifier, int $bind_index, mixed $bind_value, string $bind_value_type = ?): bool	Bind a lob object or a string as a lob object to a prepared statement as parameters
cubrid_lob2_close(resource $lob_identifier): bool	Close LOB object
cubrid_lob2_export(resource $lob_identifier, string $file_name): bool	Export the lob object to a file
cubrid_lob2_import(resource $lob_identifier, string $file_name): bool	Import BLOB/CLOB data from a file
cubrid_lob2_new(resource $conn_identifier = ?, string $type = "BLOB"): resource	Create a lob object
cubrid_lob2_read(resource $lob_identifier, int $len): string	Read from BLOB/CLOB data
cubrid_lob2_seek(resource $lob_identifier, int $offset, int $origin = CUBRID_CURSOR_CURRENT): bool	Move the cursor of a lob object
cubrid_lob2_seek64(resource $lob_identifier, string $offset, int $origin = CUBRID_CURSOR_CURRENT): bool	Move the cursor of a lob object
cubrid_lob2_size(resource $lob_identifier): int	Get a lob object's size
cubrid_lob2_size64(resource $lob_identifier): string	Get a lob object's size
cubrid_lob2_tell(resource $lob_identifier): int	Tell the cursor position of the LOB object
cubrid_lob2_tell64(resource $lob_identifier): string	Tell the cursor position of the LOB object
cubrid_lob2_write(resource $lob_identifier, string $buf): bool	Write to a lob object
cubrid_lock_read(resource $conn_identifier, string $oid): bool	Set a read lock on the given OID
cubrid_lock_write(resource $conn_identifier, string $oid): bool	Set a write lock on the given OID
cubrid_move_cursor(resource $req_identifier, int $offset, int $origin = CUBRID_CURSOR_CURRENT): bool	Move the cursor in the result
cubrid_next_result(resource $result): bool	Get result of next query when executing multiple SQL statements
cubrid_num_cols(resource $result): int	Return the number of columns in the result set
cubrid_num_rows(resource $result): int	Get the number of rows in the result set
cubrid_pconnect_with_url(string $conn_url, string $userid = ?, string $passwd = ?): resource	Open a persistent connection to CUBRID server
cubrid_pconnect(string $host, int $port, string $dbname, string $userid = ?, string $passwd = ?): resource	Open a persistent connection to a CUBRID server
cubrid_prepare(resource $conn_identifier, string $prepare_stmt, int $option = ?): resource	Prepare a SQL statement for execution
cubrid_put(resource $conn_identifier, string $oid, string $attr = ?, mixed $value): bool	Update a column using OID
cubrid_rollback(resource $conn_identifier): bool	Roll back a transaction
cubrid_schema(resource $conn_identifier, int $schema_type, string $class_name = ?, string $attr_name = ?): array	Get the requested schema information
cubrid_seq_drop(resource $conn_identifier, string $oid, string $attr_name, int $index): bool	Delete an element from sequence type column using OID
cubrid_seq_insert(resource $conn_identifier, string $oid, string $attr_name, int $index, string $seq_element): bool	Insert an element to a sequence type column using OID
cubrid_seq_put(resource $conn_identifier, string $oid, string $attr_name, int $index, string $seq_element): bool	Update the element value of sequence type column using OID
cubrid_set_add(resource $conn_identifier, string $oid, string $attr_name, string $set_element): bool	Insert a single element to set type column using OID
cubrid_set_autocommit(resource $conn_identifier, bool $mode): bool	Set autocommit mode of the connection
cubrid_set_db_parameter(resource $conn_identifier, int $param_type, int $param_value): bool	Sets the CUBRID database parameters
cubrid_set_drop(resource $conn_identifier, string $oid, string $attr_name, string $set_element): bool	Delete an element from set type column using OID
cubrid_set_query_timeout(resource $req_identifier, int $timeout): bool	Set the timeout time of query execution
cubrid_version(): string	Get the CUBRID PHP module's version
cubrid_load_from_glo(resource $conn_identifier, string $oid, string $file_name): int	Read data from a GLO instance and save it in a file
cubrid_new_glo(resource $conn_identifier, string $class_name, string $file_name): string	Create a glo instance
cubrid_save_to_glo(resource $conn_identifier, string $oid, string $file_name): int	Save requested file in a GLO instance
cubrid_send_glo(resource $conn_identifier, string $oid): int	Read data from glo and send it to std output
curl_file_create(string $filename, string|null $mime_type = null, string|null $posted_filename = null): CURLFile	Create a CURLFile object
>getFilename(): string	(CURLFile) Get file name
>getMimeType(): string	(CURLFile) Get MIME type
>getPostFilename(): string	(CURLFile) Get file name for POST
>setMimeType(string $mime_type): void	(CURLFile) Set MIME type
>setPostFilename(string $posted_filename): void	(CURLFile) Set file name for POST
CURLStringFile(string $data, string $postname, string $mime = "application/octet-stream")	(new) Create a CURLStringFile object
curl_close(CurlHandle $handle): void	Close a cURL session
curl_copy_handle(CurlHandle $handle): CurlHandle|false	Copy a cURL handle along with all of its preferences
curl_errno(CurlHandle $handle): int	Return the last error number
curl_error(CurlHandle $handle): string	Return a string containing the last error for the current session
curl_escape(CurlHandle $handle, string $string): string|false	URL encodes the given string
curl_exec(CurlHandle $handle): string|bool	Perform a cURL session
curl_getinfo(CurlHandle $handle, int|null $option = null): mixed	Get information regarding a specific transfer
curl_init(string|null $url = null): CurlHandle|false	Initialize a cURL session
curl_multi_add_handle(CurlMultiHandle $multi_handle, CurlHandle $handle): int	Add a normal cURL handle to a cURL multi handle
curl_multi_close(CurlMultiHandle $multi_handle): void	Remove all cURL handles from a multi handle
curl_multi_errno(CurlMultiHandle $multi_handle): int	Return the last multi curl error number
curl_multi_exec(CurlMultiHandle $multi_handle, int $still_running): int	Run the sub-connections of the current cURL handle
curl_multi_getcontent(CurlHandle $handle): string|null	Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set
curl_multi_info_read(CurlMultiHandle $multi_handle, int $queued_messages = null): array|false	Get information about the current transfers
curl_multi_init(): CurlMultiHandle	Returns a new cURL multi handle
curl_multi_remove_handle(CurlMultiHandle $multi_handle, CurlHandle $handle): int	Remove a handle from a set of cURL handles
curl_multi_select(CurlMultiHandle $multi_handle, float $timeout = 1.0): int	Wait until reading or writing is possible for any cURL multi handle connection
curl_multi_setopt(CurlMultiHandle $multi_handle, int $option, mixed $value): bool	Set a cURL multi option
curl_multi_strerror(int $error_code): string|null	Return string describing error code
curl_pause(CurlHandle $handle, int $flags): int	Pause and unpause a connection
curl_reset(CurlHandle $handle): void	Reset all options of a libcurl session handle
curl_setopt_array(CurlHandle $handle, array $options): bool	Set multiple options for a cURL transfer
curl_setopt(CurlHandle $handle, int $option, mixed $value): bool	Set an option for a cURL transfer
curl_share_close(CurlShareHandle $share_handle): void	Close a cURL share handle
curl_share_errno(CurlShareHandle $share_handle): int	Return the last share curl error number
curl_share_init_persistent(array $share_options): CurlSharePersistentHandle	Initialize a persistent cURL share handle
curl_share_init(): CurlShareHandle	Initialize a cURL share handle
curl_share_setopt(CurlShareHandle $share_handle, int $option, mixed $value): bool	Set an option for a cURL share handle
curl_share_strerror(int $error_code): string|null	Return string describing the given error code
curl_strerror(int $error_code): string|null	Return string describing the given error code
curl_unescape(CurlHandle $handle, string $string): string|false	Decodes the given URL encoded string
curl_upkeep(CurlHandle $handle): bool	Performs any connection upkeep checks
curl_version(): array|false	Gets cURL version information
CURLFile()	(new) This class or CURLStringFile should be used to upload a file with CURLOPT_POSTFIELDS
CurlHandle()	(new) A fully opaque class which replaces curl resources as of PHP 8
CurlMultiHandle()	(new) A fully opaque class which replaces curl_multi resources as of PHP 8
CurlShareHandle()	(new) A fully opaque class which replaces curl_share resources as of PHP 8
CurlSharePersistentHandle()	(new) Represents a persistent cURL "share" handle
DateInterval(string $duration)	(new) Creates a new DateInterval object
DateInterval::createFromDateString(string $datetime): DateInterval	Sets up a DateInterval from the relative parts of the string
date_interval_create_from_date_string(string $datetime): DateInterval|false	Sets up a DateInterval from the relative parts of the string
>format(string $format): string	(DateInterval) Formats the interval
DatePeriod(DateTimeInterface $start, DateInterval $interval, int $recurrences, int $options = ?)	(new) Creates a new DatePeriod object
DatePeriod(DateTimeInterface $start, DateInterval $interval, DateTimeInterface $end, int $options = ?)	(new) Creates a new DatePeriod object
DatePeriod::createFromISO8601String(string $specification, int $options = ?): static	Creates a new DatePeriod object from an ISO8601 string
>getDateInterval(): DateInterval	(DatePeriod) Gets the interval
>getEndDate(): DateTimeInterface|null	(DatePeriod) Gets the end date
>getRecurrences(): int|null	(DatePeriod) Gets the number of recurrences
>getStartDate(): DateTimeInterface	(DatePeriod) Gets the start date
>add(DateInterval $interval): DateTime	(DateTime) Modifies a DateTime object, with added amount of days, months, years, hours, minutes and seconds
date_add(DateTime $object, DateInterval $interval): DateTime	Modifies a DateTime object, with added amount of days, months, years, hours, minutes and seconds
DateTime(string $datetime = "now", DateTimeZone|null $timezone = null)	(new) Returns new DateTime object
DateTime::createFromFormat(string $format, string $datetime, DateTimeZone|null $timezone = null): DateTime|false	Parses a time string according to a specified format
date_create_from_format(string $format, string $datetime, DateTimeZone|null $timezone = null): DateTime|false	Parses a time string according to a specified format
DateTime::createFromImmutable(DateTimeImmutable $object): static	Returns new DateTime instance encapsulating the given DateTimeImmutable object
DateTime::createFromInterface(DateTimeInterface $object): DateTime	Returns new DateTime object encapsulating the given DateTimeInterface object
>getLastErrors()	(DateTime) Alias of DateTimeImmutable::getLastErrors
>modify(string $modifier): DateTime	(DateTime) Alters the timestamp
date_modify(DateTime $object, string $modifier): DateTime|false	Alters the timestamp
DateTime::__set_state(array $array): DateTime	The __set_state handler
>setDate(int $year, int $month, int $day): DateTime	(DateTime) Sets the date
date_date_set(DateTime $object, int $year, int $month, int $day): DateTime	Sets the date
>setISODate(int $year, int $week, int $dayOfWeek = 1): DateTime	(DateTime) Sets the ISO date
date_isodate_set(DateTime $object, int $year, int $week, int $dayOfWeek = 1): DateTime	Sets the ISO date
>setTime(int $hour, int $minute, int $second = ?, int $microsecond = ?): DateTime	(DateTime) Sets the time
date_time_set(DateTime $object, int $hour, int $minute, int $second = ?, int $microsecond = ?): DateTime	Sets the time
>setTimestamp(int $timestamp): DateTime	(DateTime) Sets the date and time based on an Unix timestamp
date_timestamp_set(DateTime $object, int $timestamp): DateTime	Sets the date and time based on an Unix timestamp
>setTimezone(DateTimeZone $timezone): DateTime	(DateTime) Sets the time zone for the DateTime object
date_timezone_set(DateTime $object, DateTimeZone $timezone): DateTime	Sets the time zone for the DateTime object
>sub(DateInterval $interval): DateTime	(DateTime) Subtracts an amount of days, months, years, hours, minutes and seconds from a DateTime object
date_sub(DateTime $object, DateInterval $interval): DateTime	Subtracts an amount of days, months, years, hours, minutes and seconds from a DateTime object
>add(DateInterval $interval): DateTimeImmutable	(DateTimeImmutable) Returns a new object, with added amount of days, months, years, hours, minutes and seconds
date_create_immutable(string $datetime = "now", DateTimeZone|null $timezone = null): DateTimeImmutable|false	Returns new DateTimeImmutable object
DateTimeImmutable::createFromFormat(string $format, string $datetime, DateTimeZone|null $timezone = null): DateTimeImmutable|false	Parses a time string according to a specified format
date_create_immutable_from_format(string $format, string $datetime, DateTimeZone|null $timezone = null): DateTimeImmutable|false	Parses a time string according to a specified format
DateTimeImmutable::createFromInterface(DateTimeInterface $object): DateTimeImmutable	Returns new DateTimeImmutable object encapsulating the given DateTimeInterface object
DateTimeImmutable::createFromMutable(DateTime $object): static	Returns new DateTimeImmutable instance encapsulating the given DateTime object
DateTimeImmutable::getLastErrors(): array|false	Returns the warnings and errors
>modify(string $modifier): DateTimeImmutable	(DateTimeImmutable) Creates a new object with modified timestamp
DateTimeImmutable::__set_state(array $array): DateTimeImmutable	The __set_state handler
>setDate(int $year, int $month, int $day): DateTimeImmutable	(DateTimeImmutable) Sets the date
>setISODate(int $year, int $week, int $dayOfWeek = 1): DateTimeImmutable	(DateTimeImmutable) Sets the ISO date
>setTime(int $hour, int $minute, int $second = ?, int $microsecond = ?): DateTimeImmutable	(DateTimeImmutable) Sets the time
>setTimestamp(int $timestamp): DateTimeImmutable	(DateTimeImmutable) Sets the date and time based on a Unix timestamp
>setTimezone(DateTimeZone $timezone): DateTimeImmutable	(DateTimeImmutable) Sets the time zone
>sub(DateInterval $interval): DateTimeImmutable	(DateTimeImmutable) Subtracts an amount of days, months, years, hours, minutes and seconds
>diff(DateTimeInterface $targetObject, bool $absolute = false): DateInterval	(DateTimeInterface) Returns the difference between two DateTime objects
>diff(DateTimeInterface $targetObject, bool $absolute = false): DateInterval	(DateTimeImmutable) Returns the difference between two DateTime objects
>diff(DateTimeInterface $targetObject, bool $absolute = false): DateInterval	(DateTime) Returns the difference between two DateTime objects
date_diff(DateTimeInterface $baseObject, DateTimeInterface $targetObject, bool $absolute = false): DateInterval	Returns the difference between two DateTime objects
>format(string $format): string	(DateTimeInterface) Returns date formatted according to given format
>format(string $format): string	(DateTimeImmutable) Returns date formatted according to given format
>format(string $format): string	(DateTime) Returns date formatted according to given format
date_format(DateTimeInterface $object, string $format): string	Returns date formatted according to given format
>getOffset(): int	(DateTimeInterface) Returns the timezone offset
>getOffset(): int	(DateTimeImmutable) Returns the timezone offset
>getOffset(): int	(DateTime) Returns the timezone offset
date_offset_get(DateTimeInterface $object): int	Returns the timezone offset
>getTimestamp(): int	(DateTimeInterface) Gets the Unix timestamp
>getTimestamp(): int	(DateTimeImmutable) Gets the Unix timestamp
>getTimestamp(): int	(DateTime) Gets the Unix timestamp
date_timestamp_get(DateTimeInterface $object): int	Gets the Unix timestamp
>getTimezone(): DateTimeZone|false	(DateTimeInterface) Return time zone relative to given DateTime
>getTimezone(): DateTimeZone|false	(DateTimeImmutable) Return time zone relative to given DateTime
>getTimezone(): DateTimeZone|false	(DateTime) Return time zone relative to given DateTime
date_timezone_get(DateTimeInterface $object): DateTimeZone|false	Return time zone relative to given DateTime
>__wakeup(): void	(DateTime) The __wakeup handler
>__wakeup(): void	(DateTimeImmutable) The __wakeup handler
>__wakeup(): void	(DateTimeInterface) The __wakeup handler
timezone_open(string $timezone): DateTimeZone|false	Creates new DateTimeZone object
>getLocation(): array|false	(DateTimeZone) Returns location information for a timezone
timezone_location_get(DateTimeZone $object): array|false	Returns location information for a timezone
>getName(): string	(DateTimeZone) Returns the name of the timezone
timezone_name_get(DateTimeZone $object): string	Returns the name of the timezone
>getOffset(DateTimeInterface $datetime): int	(DateTimeZone) Returns the timezone offset from GMT
timezone_offset_get(DateTimeZone $object, DateTimeInterface $datetime): int	Returns the timezone offset from GMT
>getTransitions(int $timestampBegin = PHP_INT_MIN, int $timestampEnd = PHP_INT_MAX): array|false	(DateTimeZone) Returns all transitions for the timezone
timezone_transitions_get(DateTimeZone $object, int $timestampBegin = PHP_INT_MIN, int $timestampEnd = PHP_INT_MAX): array|false	Returns all transitions for the timezone
DateTimeZone::listAbbreviations(): array	Returns associative array containing dst, offset and the timezone name
timezone_abbreviations_list(): array	Returns associative array containing dst, offset and the timezone name
DateTimeZone::listIdentifiers(int $timezoneGroup = DateTimeZone::ALL, string|null $countryCode = null): array	Returns a numerically indexed array containing all defined timezone identifiers
timezone_identifiers_list(int $timezoneGroup = DateTimeZone::ALL, string|null $countryCode = null): array	Returns a numerically indexed array containing all defined timezone identifiers
checkdate(int $month, int $day, int $year): bool	Validate a Gregorian date
date_add()	Alias of DateTime::add
date_create_from_format()	Alias of DateTime::createFromFormat
date_create_immutable_from_format()	Alias of DateTimeImmutable::createFromFormat
date_create_immutable(string $datetime = "now", DateTimeZone|null $timezone = null): DateTimeImmutable|false	create a new DateTimeImmutable object
date_create(string $datetime = "now", DateTimeZone|null $timezone = null): DateTime|false	create a new DateTime object
date_date_set()	Alias of DateTime::setDate
date_default_timezone_get(): string	Gets the default timezone used by all date/time functions in a script
date_default_timezone_set(string $timezoneId): bool	Sets the default timezone used by all date/time functions in a script
date_diff()	Alias of DateTime::diff
date_format()	Alias of DateTime::format
date_get_last_errors()	Alias of DateTimeImmutable::getLastErrors
date_interval_create_from_date_string()	Alias of DateInterval::createFromDateString
date_interval_format()	Alias of DateInterval::format
date_isodate_set()	Alias of DateTime::setISODate
date_modify()	Alias of DateTime::modify
date_offset_get()	Alias of DateTime::getOffset
date_parse_from_format(string $format, string $datetime): array	Get info about given date formatted according to the specified format
date_parse(string $datetime): array	Returns associative array with detailed info about given date/time
date_sub()	Alias of DateTime::sub
date_sun_info(int $timestamp, float $latitude, float $longitude): array	Returns an array with information about sunset/sunrise and twilight begin/end
date_sunrise(int $timestamp, int $returnFormat = SUNFUNCS_RET_STRING, float|null $latitude = null, float|null $longitude = null, float|null $zenith = null, float|null $utcOffset = null): string|int|float|false	Returns time of sunrise for a given day and location
date_sunset(int $timestamp, int $returnFormat = SUNFUNCS_RET_STRING, float|null $latitude = null, float|null $longitude = null, float|null $zenith = null, float|null $utcOffset = null): string|int|float|false	Returns time of sunset for a given day and location
date_time_set()	Alias of DateTime::setTime
date_timestamp_get()	Alias of DateTime::getTimestamp
date_timestamp_set()	Alias of DateTime::setTimestamp
date_timezone_get()	Alias of DateTime::getTimezone
date_timezone_set()	Alias of DateTime::setTimezone
date(string $format, int|null $timestamp = null): string	Format a Unix timestamp
getdate(int|null $timestamp = null): array	Get date/time information
gettimeofday(bool $as_float = false): array|float	Get current time
gmdate(string $format, int|null $timestamp = null): string	Format a GMT/UTC date/time
gmmktime(int $hour, int|null $minute = null, int|null $second = null, int|null $month = null, int|null $day = null, int|null $year = null): int|false	Get Unix timestamp for a GMT date
gmstrftime(string $format, int|null $timestamp = null): string|false	Format a GMT/UTC time/date according to locale settings
idate(string $format, int|null $timestamp = null): int|false	Format a local time/date part as integer
localtime(int|null $timestamp = null, bool $associative = false): array	Get the local time
microtime(bool $as_float = false): string|float	Return current Unix timestamp with microseconds
mktime(int $hour, int|null $minute = null, int|null $second = null, int|null $month = null, int|null $day = null, int|null $year = null): int|false	Get Unix timestamp for a date
strftime(string $format, int|null $timestamp = null): string|false	Format a local time/date according to locale settings
strptime(string $timestamp, string $format): array|false	Parse a time/date generated with strftime
strtotime(string $datetime, int|null $baseTimestamp = null): int|false	Parse about any English textual datetime description into a Unix timestamp
time(): int	Return current Unix timestamp
timezone_abbreviations_list()	Alias of DateTimeZone::listAbbreviations
timezone_identifiers_list()	Alias of DateTimeZone::listIdentifiers
timezone_location_get()	Alias of DateTimeZone::getLocation
timezone_name_from_abbr(string $abbr, int $utcOffset = -1, int $isDST = -1): string|false	Returns a timezone name by guessing from abbreviation and UTC offset
timezone_name_get()	Alias of DateTimeZone::getName
timezone_offset_get()	Alias of DateTimeZone::getOffset
timezone_open()	Alias of DateTimeZone::__construct
timezone_transitions_get()	Alias of DateTimeZone::getTransitions
timezone_version_get(): string	Gets the version of the timezonedb
DateError()	(new) Thrown when the timezone database is not found, or contains invalid data
DateException()	(new) Parent class of Date/Time exceptions, for issues that come to light due to user input, or free form text arguments that need to be parsed
DateInvalidOperationException()	(new) Thrown by DateTimeImmutable::sub and DateTime::sub when an unsupported operation is attempted
DateInvalidTimeZoneException()	(new) Thrown when an incorrect value is passed to DateTimeZone::__construct
DateMalformedIntervalStringException()	(new) Thrown when an invalid $duration argument is passed to DateInterval::__construct
DateMalformedPeriodStringException()	(new) Thrown when an invalid $isostr argument is passed to DatePeriod::__construct
DateMalformedStringException()	(new) Thrown when an invalid Date/Time string is detected
DateObjectError()	(new) Thrown when one of the Date/Time classes has not been correctly initialised
DateRangeError()	(new) Thrown by DateTime::getTimestamp, DateTimeImmutable::getTimestamp, and date_timestamp_get, on 32-bit platforms if the date object represents a date outside of the 32-bit signed range
DateTimeImmutable()	(new) Representation of date and time
DateTimeInterface()	(new) DateTimeInterface was created so that parameter, return, or property type declarations may accept either DateTimeImmutable or DateTime as a value
DateTimeZone()	(new) Representation of time zone
dba_close(Dba\Connection $dba): void	Close a DBA database
dba_delete(string|array $key, Dba\Connection $dba): bool	Delete DBA entry specified by key
dba_exists(string|array $key, Dba\Connection $dba): bool	Check whether key exists
dba_fetch(string|array $key, Dba\Connection $dba, int $skip = ?): string|false	Fetch data specified by key
dba_fetch(string|array $key, int $skip, resource $dba): string	Fetch data specified by key
dba_firstkey(Dba\Connection $dba): string|false	Fetch first key
dba_handlers(bool $full_info = false): array	List all the handlers available
dba_insert(string|array $key, string $value, Dba\Connection $dba): bool	Insert entry
dba_key_split(string|false|null $key): array|false	Splits a key in string representation into array representation
dba_list(): array	List all open database files
dba_nextkey(Dba\Connection $dba): string|false	Fetch next key
dba_open(string $path, string $mode, string|null $handler = null, int $permission = 0644, int $map_size = ?, int|null $flags = null): Dba\Connection|false	Open database
dba_optimize(Dba\Connection $dba): bool	Optimize database
dba_popen(string $path, string $mode, string|null $handler = null, int $permission = 0644, int $map_size = ?, int|null $flags = null): Dba\Connection|false	Open database persistently
dba_replace(string|array $key, string $value, Dba\Connection $dba): bool	Replace or insert entry
dba_sync(Dba\Connection $dba): bool	Synchronize database
Dba\Connection()	(new) A fully opaque class which replaces a dba resource as of PHP 8
dbase_add_record(resource $database, array $data): bool	Adds a record to a database
dbase_close(resource $database): bool	Closes a database
dbase_create(string $path, array $fields, int $type = DBASE_TYPE_DBASE): resource	Creates a database
dbase_delete_record(resource $database, int $number): bool	Deletes a record from a database
dbase_get_header_info(resource $database): array	Gets the header info of a database
dbase_get_record_with_names(resource $database, int $number): array	Gets a record from a database as an associative array
dbase_get_record(resource $database, int $number): array	Gets a record from a database as an indexed array
dbase_numfields(resource $database): int	Gets the number of fields of a database
dbase_numrecords(resource $database): int	Gets the number of records in a database
dbase_open(string $path, int $mode): resource|false	Opens a database
dbase_pack(resource $database): bool	Packs a database
dbase_replace_record(resource $database, array $data, int $number): bool	Replaces a record in a database
dio_close(resource $fd): void	Closes the file descriptor given by fd
dio_fcntl(resource $fd, int $cmd, mixed $args = ?): mixed	Performs a c library fcntl on fd
dio_open(string $filename, int $flags, int $mode = ?): resource	Opens a file (creating it if necessary) at a lower level than the C library input/ouput stream functions allow
dio_read(resource $fd, int $len = 1024): string	Reads bytes from a file descriptor
dio_seek(resource $fd, int $pos, int $whence = SEEK_SET): int	Seeks to pos on fd from whence
dio_stat(resource $fd): array	Gets stat information about the file descriptor fd
dio_tcsetattr(resource $fd, array $options): bool	Sets terminal attributes and baud rate for a serial port
dio_truncate(resource $fd, int $offset): bool	Truncates file descriptor fd to offset bytes
dio_write(resource $fd, string $data, int $len = ?): int	Writes data to fd with optional truncation at length
>close(): void	(Directory) Close directory handle
>read(): string|false	(Directory) Read entry from directory handle
>rewind(): void	(Directory) Rewind directory handle
chdir(string $directory): bool	Change directory
chroot(string $directory): bool	Change the root directory
closedir(resource|null $dir_handle = null): void	Close directory handle
dir(string $directory, resource|null $context = null): Directory|false	Return an instance of the Directory class
getcwd(): string|false	Gets the current working directory
opendir(string $directory, resource|null $context = null): resource|false	Open directory handle
readdir(resource|null $dir_handle = null): string|false	Read entry from directory handle
rewinddir(resource|null $dir_handle = null): void	Rewind directory handle
scandir(string $directory, int $sorting_order = SCANDIR_SORT_ASCENDING, resource|null $context = null): array|false	List files and directories inside the specified path
Directory()	(new) Instances of Directory are created by calling the dir function, not by the new operator
>isId(): bool	(Dom\Attr) 
>rename(string|null $namespaceURI, string $qualifiedName): void	(Dom\Attr) Changes the qualified name or namespace of an attribute
>after(Dom\Node|string ...$nodes): void	(Dom\CharacterData) 
>appendData(string $data): void	(Dom\CharacterData) 
>before(Dom\Node|string ...$nodes): void	(Dom\CharacterData) 
>deleteData(int $offset, int $count): void	(Dom\CharacterData) 
>insertData(int $offset, string $data): void	(Dom\CharacterData) 
>remove(): void	(Dom\CharacterData) 
>replaceData(int $offset, int $count, string $data): void	(Dom\CharacterData) 
>replaceWith(Dom\Node|string ...$nodes): void	(Dom\CharacterData) 
>substringData(int $offset, int $count): string	(Dom\CharacterData) 
>after(Dom\Node|string ...$nodes): void	(Dom\ChildNode) 
>before(Dom\Node|string ...$nodes): void	(Dom\ChildNode) 
>remove(): void	(Dom\ChildNode) 
>replaceWith(Dom\Node|string ...$nodes): void	(Dom\ChildNode) 
Dom\HTMLDocument::createEmpty(string $encoding = "UTF-8"): Dom\HTMLDocument	Creates an empty HTML document
Dom\HTMLDocument::createFromFile(string $path, int $options = ?, string|null $overrideEncoding = null): Dom\HTMLDocument	Parses an HTML document from a file
Dom\HTMLDocument::createFromString(string $source, int $options = ?, string|null $overrideEncoding = null): Dom\HTMLDocument	Parses an HTML document from a string
>saveHtml(Dom\Node|null $node = null): string	(Dom\HTMLDocument) Serializes the document as an HTML string
>saveHtmlFile(string $filename): int|false	(Dom\HTMLDocument) Serializes the document as an HTML file
>saveXml(Dom\Node|null $node = null, int $options = ?): string|false	(Dom\HTMLDocument) Serializes the document as an XML string
>saveXmlFile(string $filename, int $options = ?): int|false	(Dom\HTMLDocument) Serializes the document as an XML file
>append(Dom\Node|string ...$nodes): void	(Dom\ParentNode) 
>prepend(Dom\Node|string ...$nodes): void	(Dom\ParentNode) 
>querySelector(string $selectors): Dom\Element|null	(Dom\ParentNode) Returns the first element that matches the CSS selectors
>querySelectorAll(string $selectors): Dom\NodeList	(Dom\ParentNode) Returns a collection of elements that match the CSS selectors
>replaceChildren(Dom\Node|string ...$nodes): void	(Dom\ParentNode) 
>splitText(int $offset): Dom\Text	(Dom\Text) 
>add(string ...$tokens): void	(Dom\TokenList) Adds the given tokens to the list
>contains(string $token): bool	(Dom\TokenList) Returns whether the list contains a given token
>count(): int	(Dom\TokenList) Returns the number of tokens in the list
>getIterator(): Iterator	(Dom\TokenList) Returns an iterator over the token list
>item(int $index): string|null	(Dom\TokenList) Returns a token from the list
>remove(string ...$tokens): void	(Dom\TokenList) Removes the given tokens from the list
>replace(string $token, string $newToken): bool	(Dom\TokenList) Replaces a token in the list with another one
>supports(string $token): bool	(Dom\TokenList) Returns whether the given token is supported
>toggle(string $token, bool|null $force = null): bool	(Dom\TokenList) Toggles the presence of a token in the list
DOMAttr(string $name, string $value = "")	(new) Creates a new DOMAttr object
>isId(): bool	(DOMAttr) Checks if attribute is a defined ID
DOMCdataSection(string $data)	(new) Constructs a new DOMCdataSection object
>after(DOMNode|string ...$nodes): void	(DOMCharacterData) Adds nodes after the character data
>appendData(string $data): true	(DOMCharacterData) Append the string to the end of the character data of the node
>before(DOMNode|string ...$nodes): void	(DOMCharacterData) Adds nodes before the character data
>deleteData(int $offset, int $count): bool	(DOMCharacterData) Remove a range of characters from the character data
>insertData(int $offset, string $data): bool	(DOMCharacterData) Insert a string at the specified UTF-8 codepoint offset
>remove(): void	(DOMCharacterData) Removes the character data node
>replaceData(int $offset, int $count, string $data): bool	(DOMCharacterData) Replace a substring within the character data
>replaceWith(DOMNode|string ...$nodes): void	(DOMCharacterData) Replaces the character data with new nodes
>substringData(int $offset, int $count): string|false	(DOMCharacterData) Extracts a range of data from the character data
>after(DOMNode|string ...$nodes): void	(DOMChildNode) Adds nodes after the node
>before(DOMNode|string ...$nodes): void	(DOMChildNode) Adds nodes before the node
>remove(): void	(DOMChildNode) Removes the node
>replaceWith(DOMNode|string ...$nodes): void	(DOMChildNode) Replaces the node with new nodes
DOMComment(string $data = "")	(new) Creates a new DOMComment object
>adoptNode(DOMNode $node): DOMNode|false	(DOMDocument) Transfer a node from another document
>append(DOMNode|string ...$nodes): void	(DOMDocument) Appends nodes after the last child node
DOMDocument(string $version = "1.0", string $encoding = "")	(new) Creates a new DOMDocument object
>createAttribute(string $localName): DOMAttr|false	(DOMDocument) Create new attribute
>createAttributeNS(string|null $namespace, string $qualifiedName): DOMAttr|false	(DOMDocument) Create new attribute node with an associated namespace
>createCDATASection(string $data): DOMCdataSection|false	(DOMDocument) Create new cdata node
>createComment(string $data): DOMComment	(DOMDocument) Create new comment node
>createDocumentFragment(): DOMDocumentFragment	(DOMDocument) Create new document fragment
>createElement(string $localName, string $value = ""): DOMElement|false	(DOMDocument) Create new element node
>createElementNS(string|null $namespace, string $qualifiedName, string $value = ""): DOMElement|false	(DOMDocument) Create new element node with an associated namespace
>createEntityReference(string $name): DOMEntityReference|false	(DOMDocument) Create new entity reference node
>createProcessingInstruction(string $target, string $data = ""): DOMProcessingInstruction|false	(DOMDocument) Creates new PI node
>createTextNode(string $data): DOMText	(DOMDocument) Create new text node
>getElementById(string $elementId): DOMElement|null	(DOMDocument) Searches for an element with a certain id
>getElementsByTagName(string $qualifiedName): DOMNodeList	(DOMDocument) Searches for all elements with given local tag name
>getElementsByTagNameNS(string|null $namespace, string $localName): DOMNodeList	(DOMDocument) Searches for all elements with given tag name in specified namespace
>importNode(DOMNode $node, bool $deep = false): DOMNode|false	(DOMDocument) Import node into current document
>load(string $filename, int $options = ?): bool	(DOMDocument) Load XML from a file
>loadHTML(string $source, int $options = ?): bool	(DOMDocument) Load HTML from a string
>loadHTMLFile(string $filename, int $options = ?): bool	(DOMDocument) Load HTML from a file
>loadXML(string $source, int $options = ?): bool	(DOMDocument) Load XML from a string
>normalizeDocument(): void	(DOMDocument) Normalizes the document
>prepend(DOMNode|string ...$nodes): void	(DOMDocument) Prepends nodes before the first child node
>registerNodeClass(string $baseClass, string|null $extendedClass): true	(DOMDocument) Register extended class used to create base node type
>relaxNGValidate(string $filename): bool	(DOMDocument) Performs relaxNG validation on the document
>relaxNGValidateSource(string $source): bool	(DOMDocument) Performs relaxNG validation on the document
>replaceChildren(DOMNode|string ...$nodes): void	(DOMDocument) Replace children in document
>save(string $filename, int $options = ?): int|false	(DOMDocument) Dumps the internal XML tree back into a file
>saveHTML(DOMNode|null $node = null): string|false	(DOMDocument) Dumps the internal document into a string using HTML formatting
>saveHTMLFile(string $filename): int|false	(DOMDocument) Dumps the internal document into a file using HTML formatting
>saveXML(DOMNode|null $node = null, int $options = ?): string|false	(DOMDocument) Dumps the internal XML tree back into a string
>schemaValidate(string $filename, int $flags = ?): bool	(DOMDocument) Validates a document based on a schema. Only XML Schema 1.0 is supported.
>schemaValidateSource(string $source, int $flags = ?): bool	(DOMDocument) Validates a document based on a schema
>validate(): bool	(DOMDocument) Validates the document based on its DTD
>xinclude(int $options = ?): int|false	(DOMDocument) Substitutes XIncludes in a DOMDocument Object
>append(DOMNode|string ...$nodes): void	(DOMDocumentFragment) Appends nodes after the last child node
>appendXML(string $data): bool	(DOMDocumentFragment) Append raw XML data
DOMDocumentFragment()	(new) Constructs a DOMDocumentFragment object
>prepend(DOMNode|string ...$nodes): void	(DOMDocumentFragment) Prepends nodes before the first child node
>replaceChildren(DOMNode|string ...$nodes): void	(DOMDocumentFragment) Replace children in fragment
>after(DOMNode|string ...$nodes): void	(DOMElement) Adds nodes after the element
>append(DOMNode|string ...$nodes): void	(DOMElement) Appends nodes after the last child node
>before(DOMNode|string ...$nodes): void	(DOMElement) Adds nodes before the element
DOMElement(string $qualifiedName, string|null $value = null, string $namespace = "")	(new) Creates a new DOMElement object
>getAttribute(string $qualifiedName): string	(DOMElement) Returns value of attribute
>getAttributeNames(): array	(DOMElement) Get attribute names
>getAttributeNode(string $qualifiedName): DOMAttr|DOMNameSpaceNode|false	(DOMElement) Returns attribute node
>getAttributeNodeNS(string|null $namespace, string $localName): DOMAttr|DOMNameSpaceNode|null	(DOMElement) Returns attribute node
>getAttributeNS(string|null $namespace, string $localName): string	(DOMElement) Returns value of attribute
>getElementsByTagName(string $qualifiedName): DOMNodeList	(DOMElement) Gets elements by tagname
>getElementsByTagNameNS(string|null $namespace, string $localName): DOMNodeList	(DOMElement) Get elements by namespaceURI and localName
>hasAttribute(string $qualifiedName): bool	(DOMElement) Checks to see if attribute exists
>hasAttributeNS(string|null $namespace, string $localName): bool	(DOMElement) Checks to see if attribute exists
>insertAdjacentElement(string $where, DOMElement $element): DOMElement|null	(DOMElement) Insert adjacent element
>insertAdjacentText(string $where, string $data): void	(DOMElement) Insert adjacent text
>prepend(DOMNode|string ...$nodes): void	(DOMElement) Prepends nodes before the first child node
>remove(): void	(DOMElement) Removes the element
>removeAttribute(string $qualifiedName): bool	(DOMElement) Removes attribute
>removeAttributeNode(DOMAttr $attr): DOMAttr|false	(DOMElement) Removes attribute
>removeAttributeNS(string|null $namespace, string $localName): void	(DOMElement) Removes attribute
>replaceChildren(DOMNode|string ...$nodes): void	(DOMElement) Replace children in element
>replaceWith(DOMNode|string ...$nodes): void	(DOMElement) Replaces the element with new nodes
>setAttribute(string $qualifiedName, string $value): DOMAttr|bool	(DOMElement) Adds new or modifies existing attribute
>setAttributeNode(DOMAttr $attr): DOMAttr|null|false	(DOMElement) Adds new attribute node to element
>setAttributeNodeNS(DOMAttr $attr): DOMAttr|null|false	(DOMElement) Adds new attribute node to element
>setAttributeNS(string|null $namespace, string $qualifiedName, string $value): void	(DOMElement) Adds new attribute
>setIdAttribute(string $qualifiedName, bool $isId): void	(DOMElement) Declares the attribute specified by name to be of type ID
>setIdAttributeNode(DOMAttr $attr, bool $isId): void	(DOMElement) Declares the attribute specified by node to be of type ID
>setIdAttributeNS(string $namespace, string $qualifiedName, bool $isId): void	(DOMElement) Declares the attribute specified by local name and namespace URI to be of type ID
>toggleAttribute(string $qualifiedName, bool|null $force = null): bool	(DOMElement) Toggle attribute
DOMEntityReference(string $name)	(new) Creates a new DOMEntityReference object
DOMImplementation()	(new) Creates a new DOMImplementation object
>createDocument(string|null $namespace = null, string $qualifiedName = "", DOMDocumentType|null $doctype = null): DOMDocument	(DOMImplementation) Creates a DOMDocument object of the specified type with its document element
>createDocumentType(string $qualifiedName, string $publicId = "", string $systemId = ""): DOMDocumentType|false	(DOMImplementation) Creates an empty DOMDocumentType object
>hasFeature(string $feature, string $version): bool	(DOMImplementation) Test if the DOM implementation implements a specific feature
>count(): int	(DOMNamedNodeMap) Get number of nodes in the map
>getIterator(): Iterator	(DOMNamedNodeMap) Retrieve an external iterator
>getNamedItem(string $qualifiedName): DOMNode|null	(DOMNamedNodeMap) Retrieves a node specified by name
>getNamedItemNS(string|null $namespace, string $localName): DOMNode|null	(DOMNamedNodeMap) Retrieves a node specified by local name and namespace URI
>item(int $index): DOMNode|null	(DOMNamedNodeMap) Retrieves a node specified by index
>__sleep(): array	(DOMNameSpaceNode) Forbids serialization unless serialization methods are implemented in a subclass
>__wakeup(): void	(DOMNameSpaceNode) Forbids unserialization unless unserialization methods are implemented in a subclass
>appendChild(DOMNode $node): DOMNode|false	(DOMNode) Adds new child at the end of the children
>C14N(bool $exclusive = false, bool $withComments = false, array|null $xpath = null, array|null $nsPrefixes = null): string|false	(DOMNode) Canonicalize nodes to a string
>C14NFile(string $uri, bool $exclusive = false, bool $withComments = false, array|null $xpath = null, array|null $nsPrefixes = null): int|false	(DOMNode) Canonicalize nodes to a file
>cloneNode(bool $deep = false): DOMNode|false	(DOMNode) Clones a node
>compareDocumentPosition(DOMNode $other): int	(DOMNode) Compares the position of two nodes
>contains(DOMNode|DOMNameSpaceNode|null $other): bool	(DOMNode) Checks if node contains other node
>getLineNo(): int	(DOMNode) Get line number for a node
>getNodePath(): string|null	(DOMNode) Get an XPath for a node
>getRootNode(array|null $options = null): DOMNode	(DOMNode) Get root node
>hasAttributes(): bool	(DOMNode) Checks if node has attributes
>hasChildNodes(): bool	(DOMNode) Checks if node has children
>insertBefore(DOMNode $node, DOMNode|null $child = null): DOMNode|false	(DOMNode) Adds a new child before a reference node
>isDefaultNamespace(string $namespace): bool	(DOMNode) Checks if the specified namespaceURI is the default namespace or not
>isEqualNode(DOMNode|null $otherNode): bool	(DOMNode) Checks that both nodes are equal
>isSameNode(DOMNode $otherNode): bool	(DOMNode) Indicates if two nodes are the same node
>isSupported(string $feature, string $version): bool	(DOMNode) Checks if feature is supported for specified version
>lookupNamespaceURI(string|null $prefix): string|null	(DOMNode) Gets the namespace URI of the node based on the prefix
>lookupPrefix(string $namespace): string|null	(DOMNode) Gets the namespace prefix of the node based on the namespace URI
>normalize(): void	(DOMNode) Normalizes the node
>removeChild(DOMNode $child): DOMNode|false	(DOMNode) Removes child from list of children
>replaceChild(DOMNode $node, DOMNode $child): DOMNode|false	(DOMNode) Replaces a child
>__sleep(): array	(DOMNode) Forbids serialization unless serialization methods are implemented in a subclass
>__wakeup(): void	(DOMNode) Forbids unserialization unless unserialization methods are implemented in a subclass
>count(): int	(DOMNodeList) Get number of nodes in the list
>getIterator(): Iterator	(DOMNodeList) Retrieve an external iterator
>item(int $index): DOMElement|DOMNode|DOMNameSpaceNode|null	(DOMNodeList) Retrieves a node specified by index
>append(DOMNode|string ...$nodes): void	(DOMParentNode) Appends nodes after the last child node
>prepend(DOMNode|string ...$nodes): void	(DOMParentNode) Prepends nodes before the first child node
>replaceChildren(DOMNode|string ...$nodes): void	(DOMParentNode) Replace children in node
DOMProcessingInstruction(string $name, string $value = "")	(new) Creates a new DOMProcessingInstruction object
DOMText(string $data = "")	(new) Creates a new DOMText object
>isElementContentWhitespace(): bool	(DOMText) Returns whether this text node contains whitespace in element content
>isWhitespaceInElementContent(): bool	(DOMText) Indicates whether this text node contains whitespace
>splitText(int $offset): DOMText|false	(DOMText) Breaks this node into two nodes at the specified offset
DOMXPath(DOMDocument $document, bool $registerNodeNS = true)	(new) Creates a new DOMXPath object
>evaluate(string $expression, DOMNode|null $contextNode = null, bool $registerNodeNS = true): mixed	(DOMXPath) Evaluates the given XPath expression and returns a typed result if possible
>query(string $expression, DOMNode|null $contextNode = null, bool $registerNodeNS = true): mixed	(DOMXPath) Evaluates the given XPath expression
DOMXPath::quote(string $str): string	Quotes a string for use in an XPath expression
>registerNamespace(string $prefix, string $namespace): bool	(DOMXPath) Registers the namespace with the DOMXPath object
>registerPhpFunctionNS(string $namespaceURI, string $name, callable $callable): void	(DOMXPath) Register a PHP functions as namespaced XPath function
>registerPhpFunctions(string|array|null $restrict = null): void	(DOMXPath) Register PHP functions as XPath functions
dom_import_simplexml(object $node): DOMAttr|DOMElement	Gets a DOMAttr or DOMElement object from a SimpleXMLElement object
Dom\import_simplexml(object $node): Dom\Attr|Dom\Element	Gets a Dom\Attr or Dom\Element object from a SimpleXMLElement object
DOMCharacterData()	(new) Represents nodes with character data
DOMChildNode()	(new) 
DOMDocumentType()	(new) Each DOMDocument has a doctype attribute whose value is either null or a DOMDocumentType object
DOMEntity()	(new) This interface represents a known entity, either parsed or unparsed, in an XML document
DOMException()	(new) See also 
DOMNamedNodeMap()	(new) 
DOMNameSpaceNode()	(new) 
DOMNode()	(new) 
DOMNodeList()	(new) Represents a live list of nodes
DOMNotation()	(new) 
DOMParentNode()	(new) 
Dom\Attr()	(new) Dom\Attr represents an attribute in the Dom\Element object
Dom\CDATASection()	(new) The Dom\CDATASection class inherits from Dom\Text for textual representation of CData constructs
Dom\CharacterData()	(new) This is the modern, spec-compliant equivalent of DOMCharacterData
Dom\ChildNode()	(new) This is the modern, spec-compliant equivalent of DOMChildNode
Dom\Comment()	(new) This is the modern, spec-compliant equivalent of DOMComment
Dom\Document()	(new) This is the modern, spec-compliant equivalent of DOMDocument
Dom\DocumentFragment()	(new) This represents a document fragment, which can be used as a container for other nodes
Dom\DocumentType()	(new) Each Dom\Document has a doctype attribute whose value is either null or a Dom\DocumentType object
Dom\DtdNamedNodeMap()	(new) Represents a named node map for entities and notation nodes of the DTD
Dom\Element()	(new) Represents an element
Dom\Entity()	(new) This is the modern, spec-compliant equivalent of DOMEntity
Dom\EntityReference()	(new) This is the modern, spec-compliant equivalent of DOMEntityReference
Dom\HTMLCollection()	(new) Represents a static set of elements
Dom\HTMLDocument()	(new) Represents an HTML document
Dom\HTMLElement()	(new) Represents an element in the HTML namespace
Dom\Implementation()	(new) 
Dom\NamedNodeMap()	(new) Represents the set of attributes on an element
Dom\NamespaceInfo()	(new) This represents immutable information about namespaces of an element
Dom\Node()	(new) This is the modern, spec-compliant equivalent of DOMNode
Dom\NodeList()	(new) This is the modern, spec-compliant equivalent of DOMNodeList
Dom\Notation()	(new) 
Dom\ParentNode()	(new) This is the modern, spec-compliant equivalent of DOMParentNode
Dom\ProcessingInstruction()	(new) This is the modern, spec-compliant equivalent of DOMProcessingInstruction
Dom\Text()	(new) The Dom\Text class inherits from Dom\CharacterData and represents a text node
Dom\TokenList()	(new) Represents a set of tokens in an attribute (e
Dom\XMLDocument()	(new) Represents an XML document
Dom\XPath()	(new) This is the modern, spec-compliant equivalent of DOMXPath
>clear(): void	(Ds\Collection) Removes all values
>copy(): Ds\Collection	(Ds\Collection) Returns a shallow copy of the collection
>isEmpty(): bool	(Ds\Collection) Returns whether the collection is empty
>toArray(): array	(Ds\Collection) Converts the collection to an array
>allocate(int $capacity): void	(Ds\Deque) Allocates enough memory for a required capacity
>apply(callable $callback): void	(Ds\Deque) Updates all values by applying a callback function to each value
>capacity(): int	(Ds\Deque) Returns the current capacity
>clear(): void	(Ds\Deque) Removes all values from the deque
Ds\Deque(mixed $values = ?)	(new) Creates a new instance
>contains(mixed ...$values): bool	(Ds\Deque) Determines if the deque contains given values
>copy(): Ds\Deque	(Ds\Deque) Returns a shallow copy of the deque
>count()	(Ds\Deque) Returns the number of values in the collection
>filter(callable $callback = ?): Ds\Deque	(Ds\Deque) Creates a new deque using a callable to determine which values to include
>find(mixed $value): mixed	(Ds\Deque) Attempts to find a value's index
>first(): mixed	(Ds\Deque) Returns the first value in the deque
>get(int $index): mixed	(Ds\Deque) Returns the value at a given index
>insert(int $index, mixed ...$values): void	(Ds\Deque) Inserts values at a given index
>isEmpty(): bool	(Ds\Deque) Returns whether the deque is empty
>join(string $glue = ?): string	(Ds\Deque) Joins all values together as a string
>jsonSerialize()	(Ds\Deque) Returns a representation that can be converted to JSON
>last(): mixed	(Ds\Deque) Returns the last value
>map(callable $callback): Ds\Deque	(Ds\Deque) Returns the result of applying a callback to each value
>merge(mixed $values): Ds\Deque	(Ds\Deque) Returns the result of adding all given values to the deque
>pop(): mixed	(Ds\Deque) Removes and returns the last value
>push(mixed ...$values): void	(Ds\Deque) Adds values to the end of the deque
>reduce(callable $callback, mixed $initial = ?): mixed	(Ds\Deque) Reduces the deque to a single value using a callback function
>remove(int $index): mixed	(Ds\Deque) Removes and returns a value by index
>reverse(): void	(Ds\Deque) Reverses the deque in-place
>reversed(): Ds\Deque	(Ds\Deque) Returns a reversed copy
>rotate(int $rotations): void	(Ds\Deque) Rotates the deque by a given number of rotations
>set(int $index, mixed $value): void	(Ds\Deque) Updates a value at a given index
>shift(): mixed	(Ds\Deque) Removes and returns the first value
>slice(int $index, int $length = ?): Ds\Deque	(Ds\Deque) Returns a sub-deque of a given range
>sort(callable $comparator = ?): void	(Ds\Deque) Sorts the deque in-place
>sorted(callable $comparator = ?): Ds\Deque	(Ds\Deque) Returns a sorted copy
>sum(): int|float	(Ds\Deque) Returns the sum of all values in the deque
>toArray(): array	(Ds\Deque) Converts the deque to an array
>unshift(mixed $values = ?): void	(Ds\Deque) Adds values to the front of the deque
>equals(object $obj): bool	(Ds\Hashable) Determines whether an object is equal to the current instance
>hash(): mixed	(Ds\Hashable) Returns a scalar value to be used as a hash value
>allocate(int $capacity): void	(Ds\Map) Allocates enough memory for a required capacity
>apply(callable $callback): void	(Ds\Map) Updates all values by applying a callback function to each value
>capacity(): int	(Ds\Map) Returns the current capacity
>clear(): void	(Ds\Map) Removes all values
Ds\Map(mixed ...$values)	(new) Creates a new instance
>copy(): Ds\Map	(Ds\Map) Returns a shallow copy of the map
>count()	(Ds\Map) Returns the number of values in the map
>diff(Ds\Map $map): Ds\Map	(Ds\Map) Creates a new map using keys that aren't in another map
>filter(callable $callback = ?): Ds\Map	(Ds\Map) Creates a new map using a callable to determine which pairs to include
>first(): Ds\Pair	(Ds\Map) Returns the first pair in the map
>get(mixed $key, mixed $default = ?): mixed	(Ds\Map) Returns the value for a given key
>hasKey(mixed $key): bool	(Ds\Map) Determines whether the map contains a given key
>hasValue(mixed $value): bool	(Ds\Map) Determines whether the map contains a given value
>intersect(Ds\Map $map): Ds\Map	(Ds\Map) Creates a new map by intersecting keys with another map
>isEmpty(): bool	(Ds\Map) Returns whether the map is empty
>jsonSerialize()	(Ds\Map) Returns a representation that can be converted to JSON
>keys(): Ds\Set	(Ds\Map) Returns a set of the map's keys
>ksort(callable $comparator = ?): void	(Ds\Map) Sorts the map in-place by key
>ksorted(callable $comparator = ?): Ds\Map	(Ds\Map) Returns a copy, sorted by key
>last(): Ds\Pair	(Ds\Map) Returns the last pair of the map
>map(callable $callback): Ds\Map	(Ds\Map) Returns the result of applying a callback to each value
>merge(mixed $values): Ds\Map	(Ds\Map) Returns the result of adding all given associations
>pairs(): Ds\Sequence	(Ds\Map) Returns a sequence containing all the pairs of the map
>put(mixed $key, mixed $value): void	(Ds\Map) Associates a key with a value
>putAll(mixed $pairs): void	(Ds\Map) Associates all key-value pairs of a traversable object or array
>reduce(callable $callback, mixed $initial = ?): mixed	(Ds\Map) Reduces the map to a single value using a callback function
>remove(mixed $key, mixed $default = ?): mixed	(Ds\Map) Removes and returns a value by key
>reverse(): void	(Ds\Map) Reverses the map in-place
>reversed(): Ds\Map	(Ds\Map) Returns a reversed copy
>skip(int $position): Ds\Pair	(Ds\Map) Returns the pair at a given positional index
>slice(int $index, int $length = ?): Ds\Map	(Ds\Map) Returns a subset of the map defined by a starting index and length
>sort(callable $comparator = ?): void	(Ds\Map) Sorts the map in-place by value
>sorted(callable $comparator = ?): Ds\Map	(Ds\Map) Returns a copy, sorted by value
>sum(): int|float	(Ds\Map) Returns the sum of all values in the map
>toArray(): array	(Ds\Map) Converts the map to an array
>union(Ds\Map $map): Ds\Map	(Ds\Map) Creates a new map using values from the current instance and another map
>values(): Ds\Sequence	(Ds\Map) Returns a sequence of the map's values
>xor(Ds\Map $map): Ds\Map	(Ds\Map) Creates a new map using keys of either the current instance or of another map, but not of both
>clear(): void	(Ds\Pair) Removes all values
Ds\Pair(mixed $key = ?, mixed $value = ?)	(new) Creates a new instance
>copy(): Ds\Pair	(Ds\Pair) Returns a shallow copy of the pair
>isEmpty(): bool	(Ds\Pair) Returns whether the pair is empty
>jsonSerialize()	(Ds\Pair) Returns a representation that can be converted to JSON
>toArray(): array	(Ds\Pair) Converts the pair to an array
>allocate(int $capacity): void	(Ds\PriorityQueue) Allocates enough memory for a required capacity
>capacity(): int	(Ds\PriorityQueue) Returns the current capacity
>clear(): void	(Ds\PriorityQueue) Removes all values
Ds\PriorityQueue()	(new) Creates a new instance
>copy(): Ds\PriorityQueue	(Ds\PriorityQueue) Returns a shallow copy of the queue
>count()	(Ds\PriorityQueue) Returns the number of values in the queue
>isEmpty(): bool	(Ds\PriorityQueue) Returns whether the queue is empty
>jsonSerialize()	(Ds\PriorityQueue) Returns a representation that can be converted to JSON
>peek(): mixed	(Ds\PriorityQueue) Returns the value at the front of the queue
>pop(): mixed	(Ds\PriorityQueue) Removes and returns the value with the highest priority
>push(mixed $value, int $priority): void	(Ds\PriorityQueue) Pushes values into the queue
>toArray(): array	(Ds\PriorityQueue) Converts the queue to an array
>allocate(int $capacity): void	(Ds\Queue) Allocates enough memory for a required capacity
>capacity(): int	(Ds\Queue) Returns the current capacity
>clear(): void	(Ds\Queue) Removes all values
Ds\Queue(mixed $values = ?)	(new) Creates a new instance
>copy(): Ds\Queue	(Ds\Queue) Returns a shallow copy of the queue
>count()	(Ds\Queue) Returns the number of values in the queue
>isEmpty(): bool	(Ds\Queue) Returns whether the queue is empty
>jsonSerialize()	(Ds\Queue) Returns a representation that can be converted to JSON
>peek(): mixed	(Ds\Queue) Returns the value at the front of the queue
>pop(): mixed	(Ds\Queue) Removes and returns the value at the front of the queue
>push(mixed ...$values): void	(Ds\Queue) Pushes values into the queue
>toArray(): array	(Ds\Queue) Converts the queue to an array
>allocate(int $capacity): void	(Ds\Sequence) Allocates enough memory for a required capacity
>apply(callable $callback): void	(Ds\Sequence) Updates all values by applying a callback function to each value
>capacity(): int	(Ds\Sequence) Returns the current capacity
>contains(mixed ...$values): bool	(Ds\Sequence) Determines if the sequence contains given values
>filter(callable $callback = ?): Ds\Sequence	(Ds\Sequence) Creates a new sequence using a callable to determine which values to include
>find(mixed $value): mixed	(Ds\Sequence) Attempts to find a value's index
>first(): mixed	(Ds\Sequence) Returns the first value in the sequence
>get(int $index): mixed	(Ds\Sequence) Returns the value at a given index
>insert(int $index, mixed ...$values): void	(Ds\Sequence) Inserts values at a given index
>join(string $glue = ?): string	(Ds\Sequence) Joins all values together as a string
>last(): mixed	(Ds\Sequence) Returns the last value
>map(callable $callback): Ds\Sequence	(Ds\Sequence) Returns the result of applying a callback to each value
>merge(mixed $values): Ds\Sequence	(Ds\Sequence) Returns the result of adding all given values to the sequence
>pop(): mixed	(Ds\Sequence) Removes and returns the last value
>push(mixed ...$values): void	(Ds\Sequence) Adds values to the end of the sequence
>reduce(callable $callback, mixed $initial = ?): mixed	(Ds\Sequence) Reduces the sequence to a single value using a callback function
>remove(int $index): mixed	(Ds\Sequence) Removes and returns a value by index
>reverse(): void	(Ds\Sequence) Reverses the sequence in-place
>reversed(): Ds\Sequence	(Ds\Sequence) Returns a reversed copy
>rotate(int $rotations): void	(Ds\Sequence) Rotates the sequence by a given number of rotations
>set(int $index, mixed $value): void	(Ds\Sequence) Updates a value at a given index
>shift(): mixed	(Ds\Sequence) Removes and returns the first value
>slice(int $index, int $length = ?): Ds\Sequence	(Ds\Sequence) Returns a sub-sequence of a given range
>sort(callable $comparator = ?): void	(Ds\Sequence) Sorts the sequence in-place
>sorted(callable $comparator = ?): Ds\Sequence	(Ds\Sequence) Returns a sorted copy
>sum(): int|float	(Ds\Sequence) Returns the sum of all values in the sequence
>unshift(mixed $values = ?): void	(Ds\Sequence) Adds values to the front of the sequence
>add(mixed ...$values): void	(Ds\Set) Adds values to the set
>allocate(int $capacity): void	(Ds\Set) Allocates enough memory for a required capacity
>capacity(): int	(Ds\Set) Returns the current capacity
>clear(): void	(Ds\Set) Removes all values
Ds\Set(mixed $values = [])	(new) Creates a new instance
>contains(mixed ...$values): bool	(Ds\Set) Determines if the set contains all values
>copy(): Ds\Set	(Ds\Set) Returns a shallow copy of the set
>count()	(Ds\Set) Returns the number of values in the set
>diff(Ds\Set $set): Ds\Set	(Ds\Set) Creates a new set using values that aren't in another set
>filter(callable $callback = ?): Ds\Set	(Ds\Set) Creates a new set using a callable to determine which values to include
>first(): mixed	(Ds\Set) Returns the first value in the set
>get(int $index): mixed	(Ds\Set) Returns the value at a given index
>intersect(Ds\Set $set): Ds\Set	(Ds\Set) Creates a new set by intersecting values with another set
>isEmpty(): bool	(Ds\Set) Returns whether the set is empty
>join(string $glue = ?): string	(Ds\Set) Joins all values together as a string
>jsonSerialize()	(Ds\Set) Returns a representation that can be converted to JSON
>last(): mixed	(Ds\Set) Returns the last value in the set
>map(callable $callback): Ds\Set	(Ds\Set) Returns the result of applying a callback to each value
>merge(mixed $values): Ds\Set	(Ds\Set) Returns the result of adding all given values to the set
>reduce(callable $callback, mixed $initial = ?): mixed	(Ds\Set) Reduces the set to a single value using a callback function
>remove(mixed ...$values): void	(Ds\Set) Removes all given values from the set
>reverse(): void	(Ds\Set) Reverses the set in-place
>reversed(): Ds\Set	(Ds\Set) Returns a reversed copy
>slice(int $index, int $length = ?): Ds\Set	(Ds\Set) Returns a sub-set of a given range
>sort(callable $comparator = ?): void	(Ds\Set) Sorts the set in-place
>sorted(callable $comparator = ?): Ds\Set	(Ds\Set) Returns a sorted copy
>sum(): int|float	(Ds\Set) Returns the sum of all values in the set
>toArray(): array	(Ds\Set) Converts the set to an array
>union(Ds\Set $set): Ds\Set	(Ds\Set) Creates a new set using values from the current instance and another set
>xor(Ds\Set $set): Ds\Set	(Ds\Set) Creates a new set using values in either the current instance or in another set, but not in both
>allocate(int $capacity): void	(Ds\Stack) Allocates enough memory for a required capacity
>capacity(): int	(Ds\Stack) Returns the current capacity
>clear(): void	(Ds\Stack) Removes all values
Ds\Stack(mixed $values = ?)	(new) Creates a new instance
>copy(): Ds\Stack	(Ds\Stack) Returns a shallow copy of the stack
>count()	(Ds\Stack) Returns the number of values in the stack
>isEmpty(): bool	(Ds\Stack) Returns whether the stack is empty
>jsonSerialize()	(Ds\Stack) Returns a representation that can be converted to JSON
>peek(): mixed	(Ds\Stack) Returns the value at the top of the stack
>pop(): mixed	(Ds\Stack) Removes and returns the value at the top of the stack
>push(mixed ...$values): void	(Ds\Stack) Pushes values onto the stack
>toArray(): array	(Ds\Stack) Converts the stack to an array
>allocate(int $capacity): void	(Ds\Vector) Allocates enough memory for a required capacity
>apply(callable $callback): void	(Ds\Vector) Updates all values by applying a callback function to each value
>capacity(): int	(Ds\Vector) Returns the current capacity
>clear(): void	(Ds\Vector) Removes all values
Ds\Vector(mixed $values = ?)	(new) Creates a new instance
>contains(mixed ...$values): bool	(Ds\Vector) Determines if the vector contains given values
>copy(): Ds\Vector	(Ds\Vector) Returns a shallow copy of the vector
>count()	(Ds\Vector) Returns the number of values in the collection
>filter(callable $callback = ?): Ds\Vector	(Ds\Vector) Creates a new vector using a callable to determine which values to include
>find(mixed $value): mixed	(Ds\Vector) Attempts to find a value's index
>first(): mixed	(Ds\Vector) Returns the first value in the vector
>get(int $index): mixed	(Ds\Vector) Returns the value at a given index
>insert(int $index, mixed ...$values): void	(Ds\Vector) Inserts values at a given index
>isEmpty(): bool	(Ds\Vector) Returns whether the vector is empty
>join(string $glue = ?): string	(Ds\Vector) Joins all values together as a string
>jsonSerialize()	(Ds\Vector) Returns a representation that can be converted to JSON
>last(): mixed	(Ds\Vector) Returns the last value
>map(callable $callback): Ds\Vector	(Ds\Vector) Returns the result of applying a callback to each value
>merge(mixed $values): Ds\Vector	(Ds\Vector) Returns the result of adding all given values to the vector
>pop(): mixed	(Ds\Vector) Removes and returns the last value
>push(mixed ...$values): void	(Ds\Vector) Adds values to the end of the vector
>reduce(callable $callback, mixed $initial = ?): mixed	(Ds\Vector) Reduces the vector to a single value using a callback function
>remove(int $index): mixed	(Ds\Vector) Removes and returns a value by index
>reverse(): void	(Ds\Vector) Reverses the vector in-place
>reversed(): Ds\Vector	(Ds\Vector) Returns a reversed copy
>rotate(int $rotations): void	(Ds\Vector) Rotates the vector by a given number of rotations
>set(int $index, mixed $value): void	(Ds\Vector) Updates a value at a given index
>shift(): mixed	(Ds\Vector) Removes and returns the first value
>slice(int $index, int $length = ?): Ds\Vector	(Ds\Vector) Returns a sub-vector of a given range
>sort(callable $comparator = ?): void	(Ds\Vector) Sorts the vector in-place
>sorted(callable $comparator = ?): Ds\Vector	(Ds\Vector) Returns a sorted copy
>sum(): int|float	(Ds\Vector) Returns the sum of all values in the vector
>toArray(): array	(Ds\Vector) Converts the vector to an array
>unshift(mixed $values = ?): void	(Ds\Vector) Adds values to the front of the vector
Ds\Collection()	(new) Collection is the base interface which covers functionality common to all the data structures in this library
Ds\Hashable()	(new) Hashable is an interface which allows objects to be used as keys
Ds\Sequence()	(new) A Sequence describes the behaviour of values arranged in a single, linear dimension
eio_busy(int $delay, int $pri = EIO_PRI_DEFAULT, callable $callback = NULL, mixed $data = NULL): resource	Artificially increase load. Could be useful in tests, benchmarking
eio_cancel(resource $req): void	Cancels a request
eio_chmod(string $path, int $mode, int $pri = EIO_PRI_DEFAULT, callable $callback = NULL, mixed $data = NULL): resource	Change file/directory permissions
eio_chown(string $path, int $uid, int $gid = -1, int $pri = EIO_PRI_DEFAULT, callable $callback = NULL, mixed $data = NULL): resource	Change file/directory permissions
eio_close(mixed $fd, int $pri = EIO_PRI_DEFAULT, callable $callback = NULL, mixed $data = NULL): resource	Close file
eio_custom(callable $execute, int $pri, callable $callback, mixed $data = NULL): resource	Execute custom request like any other eio_* call
eio_dup2(mixed $fd, mixed $fd2, int $pri = EIO_PRI_DEFAULT, callable $callback = NULL, mixed $data = NULL): resource	Duplicate a file descriptor
eio_event_loop(): bool	Polls libeio until all requests proceeded
eio_fallocate(mixed $fd, int $mode, int $offset, int $length, int $pri = EIO_PRI_DEFAULT, callable $callback = NULL, mixed $data = NULL): resource	Allows the caller to directly manipulate the allocated disk space for a file
eio_fchmod(mixed $fd, int $mode, int $pri = EIO_PRI_DEFAULT, callable $callback = NULL, mixed $data = NULL): resource	Change file permissions
eio_fchown(mixed $fd, int $uid, int $gid = -1, int $pri = EIO_PRI_DEFAULT, callable $callback = NULL, mixed $data = NULL): resource	Change file ownership
eio_fdatasync(mixed $fd, int $pri = EIO_PRI_DEFAULT, callable $callback = NULL, mixed $data = NULL): resource	Synchronize a file's in-core state with storage device
eio_fstat(mixed $fd, int $pri, callable $callback, mixed $data = ?): resource	Get file status
eio_fstatvfs(mixed $fd, int $pri, callable $callback, mixed $data = ?): resource	Get file system statistics
eio_fsync(mixed $fd, int $pri = EIO_PRI_DEFAULT, callable $callback = NULL, mixed $data = NULL): resource	Synchronize a file's in-core state with storage device
eio_ftruncate(mixed $fd, int $offset = ?, int $pri = EIO_PRI_DEFAULT, callable $callback = NULL, mixed $data = NULL): resource	Truncate a file
eio_futime(mixed $fd, float $atime, float $mtime, int $pri = EIO_PRI_DEFAULT, callable $callback = NULL, mixed $data = NULL): resource	Change file last access and modification times
eio_get_event_stream(): mixed	Get stream representing a variable used in internal communications with libeio
eio_get_last_error(resource $req): string	Returns string describing the last error associated with a request resource
eio_grp_add(resource $grp, resource $req): void	Adds a request to the request group
eio_grp_cancel(resource $grp): void	Cancels a request group
eio_grp_limit(resource $grp, int $limit): void	Set group limit
eio_grp(callable $callback, string $data = NULL): resource	Creates a request group
eio_init(): void	(Re-)initialize Eio
eio_link(string $path, string $new_path, int $pri = EIO_PRI_DEFAULT, callable $callback = NULL, mixed $data = NULL): resource	Create a hardlink for file
eio_lstat(string $path, int $pri, callable $callback, mixed $data = NULL): resource	Get file status
eio_mkdir(string $path, int $mode, int $pri = EIO_PRI_DEFAULT, callable $callback = NULL, mixed $data = NULL): resource	Create directory
eio_mknod(string $path, int $mode, int $dev, int $pri = EIO_PRI_DEFAULT, callable $callback = NULL, mixed $data = NULL): resource	Create a special or ordinary file
eio_nop(int $pri = EIO_PRI_DEFAULT, callable $callback = NULL, mixed $data = NULL): resource	Does nothing, except go through the whole request cycle
eio_npending(): int	Returns number of finished, but unhandled requests
eio_nready(): int	Returns number of not-yet handled requests
eio_nreqs(): int	Returns number of requests to be processed
eio_nthreads(): int	Returns number of threads currently in use
eio_open(string $path, int $flags, int $mode, int $pri, callable $callback, mixed $data = NULL): resource	Opens a file
eio_poll(): int	Can be to be called whenever there are pending requests that need finishing
eio_read(mixed $fd, int $length, int $offset, int $pri, callable $callback, mixed $data = NULL): resource	Read from a file descriptor at given offset
eio_readahead(mixed $fd, int $offset, int $length, int $pri = EIO_PRI_DEFAULT, callable $callback = NULL, mixed $data = NULL): resource	Perform file readahead into page cache
eio_readdir(string $path, int $flags, int $pri, callable $callback, string $data = NULL): resource	Reads through a whole directory
eio_readlink(string $path, int $pri, callable $callback, mixed $data = NULL): resource	Read value of a symbolic link
eio_realpath(string $path, int $pri, callable $callback, string $data = NULL): resource	Get the canonicalized absolute pathname
eio_rename(string $path, string $new_path, int $pri = EIO_PRI_DEFAULT, callable $callback = NULL, mixed $data = NULL): resource	Change the name or location of a file
eio_rmdir(string $path, int $pri = EIO_PRI_DEFAULT, callable $callback = NULL, mixed $data = NULL): resource	Remove a directory
eio_seek(mixed $fd, int $offset, int $whence, int $pri = EIO_PRI_DEFAULT, callable $callback = NULL, mixed $data = NULL): resource	Seek to a position
eio_sendfile(mixed $out_fd, mixed $in_fd, int $offset, int $length, int $pri = ?, callable $callback = ?, string $data = ?): resource	Transfer data between file descriptors
eio_set_max_idle(int $nthreads): void	Set maximum number of idle threads
eio_set_max_parallel(int $nthreads): void	Set maximum parallel threads
eio_set_max_poll_reqs(int $nreqs): void	Set maximum number of requests processed in a poll
eio_set_max_poll_time(float $nseconds): void	Set maximum poll time
eio_set_min_parallel(string $nthreads): void	Set minimum parallel thread number
eio_stat(string $path, int $pri, callable $callback, mixed $data = NULL): resource	Get file status
eio_statvfs(string $path, int $pri, callable $callback, mixed $data = ?): resource	Get file system statistics
eio_symlink(string $path, string $new_path, int $pri = EIO_PRI_DEFAULT, callable $callback = NULL, mixed $data = NULL): resource	Create a symbolic link
eio_sync_file_range(mixed $fd, int $offset, int $nbytes, int $flags, int $pri = EIO_PRI_DEFAULT, callable $callback = NULL, mixed $data = NULL): resource	Sync a file segment with disk
eio_sync(int $pri = EIO_PRI_DEFAULT, callable $callback = NULL, mixed $data = NULL): resource	Commit buffer cache to disk
eio_syncfs(mixed $fd, int $pri = EIO_PRI_DEFAULT, callable $callback = NULL, mixed $data = NULL): resource	Calls Linux' syncfs syscall, if available
eio_truncate(string $path, int $offset = ?, int $pri = EIO_PRI_DEFAULT, callable $callback = NULL, mixed $data = NULL): resource	Truncate a file
eio_unlink(string $path, int $pri = EIO_PRI_DEFAULT, callable $callback = NULL, mixed $data = NULL): resource	Delete a name and possibly the file it refers to
eio_utime(string $path, float $atime, float $mtime, int $pri = EIO_PRI_DEFAULT, callable $callback = NULL, mixed $data = NULL): resource	Change file last access and modification times
eio_write(mixed $fd, string $str, int $length = ?, int $offset = ?, int $pri = EIO_PRI_DEFAULT, callable $callback = NULL, mixed $data = NULL): resource	Write to file
enchant_broker_describe(EnchantBroker $broker): array	Enumerates the Enchant providers
enchant_broker_dict_exists(EnchantBroker $broker, string $tag): bool	Whether a dictionary exists or not. Using non-empty tag
enchant_broker_free_dict(EnchantDictionary $dictionary): bool	Free a dictionary resource
enchant_broker_free(EnchantBroker $broker): bool	Free the broker resource and its dictionaries
enchant_broker_get_dict_path(EnchantBroker $broker, int $type): string|false	Get the directory path for a given backend
enchant_broker_get_error(EnchantBroker $broker): string|false	Returns the last error of the broker
enchant_broker_init(): EnchantBroker|false	Create a new broker object capable of requesting
enchant_broker_list_dicts(EnchantBroker $broker): array	Returns a list of available dictionaries
enchant_broker_request_dict(EnchantBroker $broker, string $tag): EnchantDictionary|false	Create a new dictionary using a tag
enchant_broker_request_pwl_dict(EnchantBroker $broker, string $filename): EnchantDictionary|false	Creates a dictionary using a PWL file
enchant_broker_set_dict_path(EnchantBroker $broker, int $type, string $path): bool	Set the directory path for a given backend
enchant_broker_set_ordering(EnchantBroker $broker, string $tag, string $ordering): bool	Declares a preference of dictionaries to use for the language
enchant_dict_add_to_personal()	Alias of enchant_dict_add
enchant_dict_add_to_session(EnchantDictionary $dictionary, string $word): void	Add 'word' to this spell-checking session
enchant_dict_add(EnchantDictionary $dictionary, string $word): void	Add a word to personal word list
enchant_dict_check(EnchantDictionary $dictionary, string $word): bool	Check whether a word is correctly spelled or not
enchant_dict_describe(EnchantDictionary $dictionary): array	Describes an individual dictionary
enchant_dict_get_error(EnchantDictionary $dictionary): string|false	Returns the last error of the current spelling-session
enchant_dict_is_added(EnchantDictionary $dictionary, string $word): bool	Whether or not 'word' exists in this spelling-session
enchant_dict_is_in_session()	Alias of enchant_dict_is_added
enchant_dict_quick_check(EnchantDictionary $dictionary, string $word, array $suggestions = null): bool	Check the word is correctly spelled and provide suggestions
enchant_dict_store_replacement(EnchantDictionary $dictionary, string $misspelled, string $correct): void	Add a correction for a word
enchant_dict_suggest(EnchantDictionary $dictionary, string $word): array	Will return a list of values if any of those pre-conditions are not met
EnchantBroker()	(new) A fully opaque class which replaces enchant_broker resources as of PHP 8
EnchantDictionary()	(new) A fully opaque class which replaces enchant_dict resources as of PHP 8
debug_backtrace(int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT, int $limit = ?): array	Generates a backtrace
debug_print_backtrace(int $options = ?, int $limit = ?): void	Prints a backtrace
error_clear_last(): void	Clear the most recent error
error_get_last(): array|null	Get the last occurred error
error_log(string $message, int $message_type = ?, string|null $destination = null, string|null $additional_headers = null): bool	Send an error message to the defined error handling routines
error_reporting(int|null $error_level = null): int	Sets which PHP errors are reported
restore_error_handler(): true	Restores the previous error handler function
restore_exception_handler(): true	Restores the previously defined exception handler function
set_error_handler(callable|null $callback, int $error_levels = E_ALL): callable|null	Sets a user-defined error handler function
set_exception_handler(callable|null $callback): callable|null	Sets a user-defined exception handler function
trigger_error(string $message, int $error_level = E_USER_NOTICE): true	Generates a user-level error/warning/notice message
user_error()	Alias of trigger_error
Ev::backend(): int	Returns an integer describing the backend used by libev
Ev::depth(): int	Returns recursion depth
Ev::embeddableBackends(): int	Returns the set of backends that are embeddable in other event loops
Ev::feedSignal(int $signum): void	Feed a signal event info Ev
Ev::feedSignalEvent(int $signum): void	Feed signal event into the default loop
Ev::iteration(): int	Return the number of times the default event loop has polled for new events
Ev::now(): float	Returns the time when the last iteration of the default event loop has started
Ev::nowUpdate(): void	Establishes the current time by querying the kernel, updating the time returned by Ev::now in the progress
Ev::recommendedBackends(): int	Returns a bit mask of recommended backends for current platform
Ev::resume(): void	Resume previously suspended default event loop
Ev::run(int $flags = ?): void	Begin checking for events and calling callbacks for the default loop
Ev::sleep(float $seconds): void	Block the process for the given number of seconds
Ev::stop(int $how = ?): void	Stops the default event loop
Ev::supportedBackends(): int	Returns the set of backends supported by current libev configuration
Ev::suspend(): void	Suspend the default event loop
Ev::time(): float	Returns the current time in fractional seconds since the epoch
Ev::verify(): void	Performs internal consistency checks(for debugging)
EvCheck(callable $callback, mixed $data = ?, int $priority = ?)	(new) Constructs the EvCheck watcher object
EvCheck::createStopped(string $callback, string $data = ?, string $priority = ?): object	Create instance of a stopped EvCheck watcher
EvChild(int $pid, bool $trace, callable $callback, mixed $data = null, int $priority = ?)	(new) Constructs the EvChild watcher object
EvChild::createStopped(int $pid, bool $trace, callable $callback, mixed $data = ?, int $priority = ?): object	Create instance of a stopped EvCheck watcher
>set(int $pid, bool $trace): void	(EvChild) Configures the watcher
EvEmbed(object $other, callable $callback = ?, mixed $data = ?, int $priority = ?)	(new) Constructs the EvEmbed object
EvEmbed::createStopped(object $other, callable $callback = ?, mixed $data = ?, int $priority = ?): void	Create stopped EvEmbed watcher object
>set(object $other): void	(EvEmbed) Configures the watcher
>sweep(): void	(EvEmbed) Make a single, non-blocking sweep over the embedded loop
EvFork(callable $callback, mixed $data = null, int $priority = ?)	(new) Constructs the EvFork watcher object
EvFork::createStopped(string $callback, string $data = ?, string $priority = ?): object	Creates a stopped instance of EvFork watcher class
EvIdle(callable $callback, mixed $data = ?, int $priority = ?)	(new) Constructs the EvIdle watcher object
EvIdle::createStopped(string $callback, mixed $data = ?, int $priority = ?): object	Creates instance of a stopped EvIdle watcher object
EvIo(mixed $fd, int $events, callable $callback, mixed $data = ?, int $priority = ?)	(new) Constructs EvIo watcher object
EvIo::createStopped(mixed $fd, int $events, callable $callback, mixed $data = null, int $priority = ?): EvIo	Create stopped EvIo watcher object
>set(mixed $fd, int $events): void	(EvIo) Configures the watcher
>backend(): int	(EvLoop) Returns an integer describing the backend used by libev
>check(string $callback, string $data = ?, string $priority = ?): EvCheck	(EvLoop) Creates EvCheck object associated with the current event loop instance
>child(string $pid, string $trace, string $callback, string $data = ?, string $priority = ?): EvChild	(EvLoop) Creates EvChild object associated with the current event loop
EvLoop(int $flags = ?, mixed $data = NULL, float $io_interval = 0.0, float $timeout_interval = 0.0)	(new) Constructs the event loop object
EvLoop::defaultLoop(int $flags = Ev::FLAG_AUTO, mixed $data = NULL, float $io_interval = 0., float $timeout_interval = 0.): EvLoop	Returns or creates the default event loop
>embed(string $other, string $callback = ?, string $data = ?, string $priority = ?): EvEmbed	(EvLoop) Creates an instance of EvEmbed watcher associated with the current EvLoop object
>fork(callable $callback, mixed $data = null, int $priority = ?): EvFork	(EvLoop) Creates EvFork watcher object associated with the current event loop instance
>idle(callable $callback, mixed $data = null, int $priority = ?): EvIdle	(EvLoop) Creates EvIdle watcher object associated with the current event loop instance
>invokePending(): void	(EvLoop) Invoke all pending watchers while resetting their pending state
>io(mixed $fd, int $events, callable $callback, mixed $data = null, int $priority = ?): EvIo	(EvLoop) Create EvIo watcher object associated with the current event loop instance
>loopFork(): void	(EvLoop) Must be called after a fork
>now(): float	(EvLoop) Returns the current "event loop time"
>nowUpdate(): void	(EvLoop) Establishes the current time by querying the kernel, updating the time returned by EvLoop::now in the progress
>periodic(float $offset, float $interval, callable $callback, mixed $data = null, int $priority = ?): EvPeriodic	(EvLoop) Creates EvPeriodic watcher object associated with the current event loop instance
>prepare(callable $callback, mixed $data = null, int $priority = ?): EvPrepare	(EvLoop) Creates EvPrepare watcher object associated with the current event loop instance
>resume(): void	(EvLoop) Resume previously suspended default event loop
>run(int $flags = ?): void	(EvLoop) Begin checking for events and calling callbacks for the loop
>signal(int $signum, callable $callback, mixed $data = null, int $priority = ?): EvSignal	(EvLoop) Creates EvSignal watcher object associated with the current event loop instance
>stat(string $path, float $interval, callable $callback, mixed $data = null, int $priority = ?): EvStat	(EvLoop) Creates EvStat watcher object associated with the current event loop instance
>stop(int $how = ?): void	(EvLoop) Stops the event loop
>suspend(): void	(EvLoop) Suspend the loop
>timer(float $after, float $repeat, callable $callback, mixed $data = null, int $priority = ?): EvTimer	(EvLoop) Creates EvTimer watcher object associated with the current event loop instance
>verify(): void	(EvLoop) Performs internal consistency checks(for debugging)
>again(): void	(EvPeriodic) Simply stops and restarts the periodic watcher again
>at(): float	(EvPeriodic) Returns the absolute time that this watcher is supposed to trigger next
EvPeriodic(float $offset, string $interval, callable $reschedule_cb, callable $callback, mixed $data = null, int $priority = ?)	(new) Constructs EvPeriodic watcher object
EvPeriodic::createStopped(float $offset, float $interval, callable $reschedule_cb, callable $callback, mixed $data = null, int $priority = ?): EvPeriodic	Create a stopped EvPeriodic watcher
>set(float $offset, float $interval): void	(EvPeriodic) Configures the watcher
EvPrepare(string $callback, string $data = ?, string $priority = ?)	(new) Constructs EvPrepare watcher object
EvPrepare::createStopped(callable $callback, mixed $data = null, int $priority = ?): EvPrepare	Creates a stopped instance of EvPrepare watcher
EvSignal(int $signum, callable $callback, mixed $data = null, int $priority = ?)	(new) Constructs EvSignal watcher object
EvSignal::createStopped(int $signum, callable $callback, mixed $data = null, int $priority = ?): EvSignal	Create stopped EvSignal watcher object
>set(int $signum): void	(EvSignal) Configures the watcher
>attr(): array	(EvStat) Returns the values most recently detected by Ev
EvStat(string $path, float $interval, callable $callback, mixed $data = null, int $priority = ?)	(new) Constructs EvStat watcher object
EvStat::createStopped(string $path, float $interval, callable $callback, mixed $data = null, int $priority = ?): void	Create a stopped EvStat watcher object
>prev(): void	(EvStat) Returns the previous set of values returned by EvStat::attr
>set(string $path, float $interval): void	(EvStat) Configures the watcher
>stat(): bool	(EvStat) Initiates the stat call
>again(): void	(EvTimer) Restarts the timer watcher
EvTimer(float $after, float $repeat, callable $callback, mixed $data = null, int $priority = ?)	(new) Constructs an EvTimer watcher object
EvTimer::createStopped(float $after, float $repeat, callable $callback, mixed $data = null, int $priority = ?): EvTimer	Creates EvTimer stopped watcher object
>set(float $after, float $repeat): void	(EvTimer) Configures the watcher
>clear(): int	(EvWatcher) Clear watcher pending status
EvWatcher()	(new) Abstract constructor of a watcher object
>feed(int $revents): void	(EvWatcher) Feeds the given revents set into the event loop
>getLoop(): EvLoop	(EvWatcher) Returns the loop responsible for the watcher
>invoke(int $revents): void	(EvWatcher) Invokes the watcher callback with the given received events bit mask
>keepalive(bool $value = ?): bool	(EvWatcher) Configures whether to keep the loop from returning
>setCallback(callable $callback): void	(EvWatcher) Sets new callback for the watcher
>start(): void	(EvWatcher) Starts the watcher
>stop(): void	(EvWatcher) Stops the watcher
Ev()	(new) Ev is a static class providing access to the default loop and to some common operations
>add(float $timeout = ?): bool	(Event) Makes event pending
>addSignal()	(Event) Alias of Event::add
>addTimer()	(Event) Alias of Event::add
Event(EventBase $base, mixed $fd, int $what, callable $cb, mixed $arg = NULL)	(new) Constructs Event object
>del(): bool	(Event) Makes event non-pending
>delSignal()	(Event) Alias of Event::del
>delTimer()	(Event) Alias of Event::del
>free(): void	(Event) Make event non-pending and free resources allocated for this event
Event::getSupportedMethods(): array	Returns array with of the names of the methods supported in this version of Libevent
>pending(int $flags): bool	(Event) Detects whether event is pending or scheduled
>set(EventBase $base, mixed $fd, int $what = ?, callable $cb = ?, mixed $arg = ?): bool	(Event) Re-configures event
>setPriority(int $priority): bool	(Event) Set event priority
>setTimer(EventBase $base, callable $cb, mixed $arg = ?): bool	(Event) Re-configures timer event
Event::signal(EventBase $base, int $signum, callable $cb, mixed $arg = ?): Event	Constructs signal event object
Event::timer(EventBase $base, callable $cb, mixed $arg = ?): Event	Constructs timer event object
EventBase(EventConfig $cfg = ?)	(new) Constructs EventBase object
>dispatch(): void	(EventBase) Dispatch pending events
>exit(float $timeout = ?): bool	(EventBase) Stop dispatching events
>free(): void	(EventBase) Free resources allocated for this event base
>getFeatures(): int	(EventBase) Returns bitmask of features supported
>getMethod(): string	(EventBase) Returns event method in use
>getTimeOfDayCached(): float	(EventBase) Returns the current event base time
>gotExit(): bool	(EventBase) Checks if the event loop was told to exit
>gotStop(): bool	(EventBase) Checks if the event loop was told to exit
>loop(int $flags = ?): bool	(EventBase) Dispatch pending events
>priorityInit(int $n_priorities): bool	(EventBase) Sets number of priorities per event base
>reInit(): bool	(EventBase) Re-initialize event base(after a fork)
>stop(): bool	(EventBase) Tells event_base to stop dispatching events
>add(string $data): bool	(EventBuffer) Append data to the end of an event buffer
>addBuffer(EventBuffer $buf): bool	(EventBuffer) Move all data from a buffer provided to the current instance of EventBuffer
>appendFrom(EventBuffer $buf, int $len): int	(EventBuffer) Moves the specified number of bytes from a source buffer to the end of the current buffer
EventBuffer()	(new) Constructs EventBuffer object
>copyout(string $data, int $max_bytes): int	(EventBuffer) Copies out specified number of bytes from the front of the buffer
>drain(int $len): bool	(EventBuffer) Removes specified number of bytes from the front of the buffer without copying it anywhere
>enableLocking(): void	(EventBuffer) 
>expand(int $len): bool	(EventBuffer) Reserves space in buffer
>freeze(bool $at_front): bool	(EventBuffer) Prevent calls that modify an event buffer from succeeding
>lock(): void	(EventBuffer) Acquires a lock on buffer
>prepend(string $data): bool	(EventBuffer) Prepend data to the front of the buffer
>prependBuffer(EventBuffer $buf): bool	(EventBuffer) Moves all data from source buffer to the front of current buffer
>pullup(int $size): string	(EventBuffer) Linearizes data within buffer and returns it's contents as a string
>read(int $max_bytes): string	(EventBuffer) Read data from an evbuffer and drain the bytes read
>read(mixed $fd, int $howmuch): int	(EventBuffer) Read data from a file onto the end of the buffer
>readLine(int $eol_style): string	(EventBuffer) Extracts a line from the front of the buffer
>search(string $what, int $start = -1, int $end = -1): mixed	(EventBuffer) Scans the buffer for an occurrence of a string
>searchEol(int $start = -1, int $eol_style = EventBuffer::EOL_ANY): mixed	(EventBuffer) Scans the buffer for an occurrence of an end of line
>substr(int $start, int $length = ?): string	(EventBuffer) Substracts a portion of the buffer data
>unfreeze(bool $at_front): bool	(EventBuffer) Re-enable calls that modify an event buffer
>unlock(): bool	(EventBuffer) Releases lock acquired by EventBuffer::lock
>write(mixed $fd, int $howmuch = ?): int	(EventBuffer) Write contents of the buffer to a file or socket
>close(): void	(EventBufferEvent) Closes file descriptor associated with the current buffer event
>connect(string $addr): bool	(EventBufferEvent) Connect buffer eventaposs file descriptor to given address or UNIX socket
>connectHost(EventDnsBase $dns_base, string $hostname, int $port, int $family = EventUtil::AF_UNSPEC): bool	(EventBufferEvent) Connects to a hostname with optionally asyncronous DNS resolving
EventBufferEvent(EventBase $base, mixed $socket = null, int $options = ?, callable $readcb = null, callable $writecb = null, callable $eventcb = null, mixed $arg = null)	(new) Constructs EventBufferEvent object
EventBufferEvent::createPair(EventBase $base, int $options = ?): array	Creates two buffer events connected to each other
>disable(int $events): bool	(EventBufferEvent) Disable events read, write, or both on a buffer event
>enable(int $events): bool	(EventBufferEvent) Enable events read, write, or both on a buffer event
>free(): void	(EventBufferEvent) Free a buffer event
>getDnsErrorString(): string	(EventBufferEvent) Returns string describing the last failed DNS lookup attempt
>getEnabled(): int	(EventBufferEvent) Returns bitmask of events currently enabled on the buffer event
>getInput(): EventBuffer	(EventBufferEvent) Returns underlying input buffer associated with current buffer event
>getOutput(): EventBuffer	(EventBufferEvent) Returns underlying output buffer associated with current buffer event
>read(int $size): string	(EventBufferEvent) Read bufferaposs data
>readBuffer(EventBuffer $buf): bool	(EventBufferEvent) Drains the entire contents of the input buffer and places them into buf
>setCallbacks(callable $readcb, callable $writecb, callable $eventcb, mixed $arg = ?): void	(EventBufferEvent) Assigns read, write and event(status) callbacks
>setPriority(int $priority): bool	(EventBufferEvent) Assign a priority to a bufferevent
>setTimeouts(float $timeout_read, float $timeout_write): bool	(EventBufferEvent) Set the read and write timeout for a buffer event
>setWatermark(int $events, int $lowmark, int $highmark): void	(EventBufferEvent) Adjusts read and/or write watermarks
>sslError(): string	(EventBufferEvent) Returns most recent OpenSSL error reported on the buffer event
EventBufferEvent::sslFilter(EventBase $base, EventBufferEvent $underlying, EventSslContext $ctx, int $state, int $options = ?): EventBufferEvent	Create a new SSL buffer event to send its data over another buffer event
>sslGetCipherInfo(): string	(EventBufferEvent) Returns a textual description of the cipher
>sslGetCipherName(): string	(EventBufferEvent) Returns the current cipher name of the SSL connection
>sslGetCipherVersion(): string	(EventBufferEvent) Returns version of cipher used by current SSL connection
>sslGetProtocol(): string	(EventBufferEvent) Returns the name of the protocol used for current SSL connection
>sslRenegotiate(): void	(EventBufferEvent) Tells a bufferevent to begin SSL renegotiation
EventBufferEvent::sslSocket(EventBase $base, mixed $socket, EventSslContext $ctx, int $state, int $options = ?): EventBufferEvent	Creates a new SSL buffer event to send its data over an SSL on a socket
>write(string $data): bool	(EventBufferEvent) Adds data to a buffer eventaposs output buffer
>writeBuffer(EventBuffer $buf): bool	(EventBufferEvent) Adds contents of the entire buffer to a buffer eventaposs output buffer
>avoidMethod(string $method): bool	(EventConfig) Tells libevent to avoid specific event method
EventConfig()	(new) Constructs EventConfig object
>requireFeatures(int $feature): bool	(EventConfig) Enters a required event method feature that the application demands
>setFlags(int $flags): bool	(EventConfig) Sets one or more flags to configure the eventual EventBase will be initialized
>setMaxDispatchInterval(int $max_interval, int $max_callbacks, int $min_priority): void	(EventConfig) Prevents priority inversion
>addNameserverIp(string $ip): bool	(EventDnsBase) Adds a nameserver to the DNS base
>addSearch(string $domain): void	(EventDnsBase) Adds a domain to the list of search domains
>clearSearch(): void	(EventDnsBase) Removes all current search suffixes
EventDnsBase(EventBase $base, int|bool $initialize)	(new) Constructs EventDnsBase object
>countNameservers(): int	(EventDnsBase) Gets the number of configured nameservers
>loadHosts(string $hosts): bool	(EventDnsBase) Loads a hosts file (in the same format as /etc/hosts) from hosts file
>parseResolvConf(int $flags, string $filename): bool	(EventDnsBase) Scans the resolv.conf-formatted file
>setOption(string $option, string $value): bool	(EventDnsBase) Set the value of a configuration option
>setSearchNdots(int $ndots): bool	(EventDnsBase) Set the 'ndots' parameter for searches
>accept(mixed $socket): bool	(EventHttp) Makes an HTTP server accept connections on the specified socket stream or resource
>addServerAlias(string $alias): bool	(EventHttp) Adds a server alias to the HTTP server object
>bind(string $address, int $port): void	(EventHttp) Binds an HTTP server on the specified address and port
EventHttp(EventBase $base, EventSslContext $ctx = null)	(new) Constructs EventHttp object (the HTTP server)
>removeServerAlias(string $alias): bool	(EventHttp) Removes server alias
>setAllowedMethods(int $methods): void	(EventHttp) Sets the what HTTP methods are supported in requests accepted by this server, and passed to user callbacks
>setCallback(string $path, string $cb, string $arg = ?): void	(EventHttp) Sets a callback for specified URI
>setDefaultCallback(string $cb, string $arg = ?): void	(EventHttp) Sets default callback to handle requests that are not caught by specific callbacks
>setMaxBodySize(int $value): void	(EventHttp) Sets maximum request body size
>setMaxHeadersSize(int $value): void	(EventHttp) Sets maximum HTTP header size
>setTimeout(int $value): void	(EventHttp) Sets the timeout for an HTTP request
EventHttpConnection(EventBase $base, EventDnsBase $dns_base, string $address, int $port, EventSslContext $ctx = null)	(new) Constructs EventHttpConnection object
>getBase(): EventBase	(EventHttpConnection) Returns event base associated with the connection
>getPeer(string $address, int $port): void	(EventHttpConnection) Gets the remote address and port associated with the connection
>makeRequest(EventHttpRequest $req, int $type, string $uri): bool	(EventHttpConnection) Makes an HTTP request over the specified connection
>setCloseCallback(callable $callback, mixed $data = ?): void	(EventHttpConnection) Set callback for connection close
>setLocalAddress(string $address): void	(EventHttpConnection) Sets the IP address from which HTTP connections are made
>setLocalPort(int $port): void	(EventHttpConnection) Sets the local port from which connections are made
>setMaxBodySize(string $max_size): void	(EventHttpConnection) Sets maximum body size for the connection
>setMaxHeadersSize(string $max_size): void	(EventHttpConnection) Sets maximum header size
>setRetries(int $retries): void	(EventHttpConnection) Sets the retry limit for the connection
>setTimeout(int $timeout): void	(EventHttpConnection) Sets the timeout for the connection
>addHeader(string $key, string $value, int $type): bool	(EventHttpRequest) Adds an HTTP header to the headers of the request
>cancel(): void	(EventHttpRequest) Cancels a pending HTTP request
>clearHeaders(): void	(EventHttpRequest) Removes all output headers from the header list of the request
>closeConnection(): void	(EventHttpRequest) Closes associated HTTP connection
EventHttpRequest(callable $callback, mixed $data = null)	(new) Constructs EventHttpRequest object
>findHeader(string $key, string $type): void	(EventHttpRequest) Finds the value belonging a header
>free(): void	(EventHttpRequest) Frees the object and removes associated events
>closeConnection(): EventBufferEvent	(EventHttpRequest) Returns EventBufferEvent object
>getCommand(): void	(EventHttpRequest) Returns the request command(method)
>closeConnection(): EventHttpConnection	(EventHttpRequest) Returns EventHttpConnection object
>getHost(): string	(EventHttpRequest) Returns the request host
>getInputBuffer(): EventBuffer	(EventHttpRequest) Returns the input buffer
>getInputHeaders(): array	(EventHttpRequest) Returns associative array of the input headers
>getOutputBuffer(): EventBuffer	(EventHttpRequest) Returns the output buffer of the request
>getOutputHeaders(): void	(EventHttpRequest) Returns associative array of the output headers
>getResponseCode(): int	(EventHttpRequest) Returns the response code
>getUri(): string	(EventHttpRequest) Returns the request URI
>removeHeader(string $key, string $type): void	(EventHttpRequest) Removes an HTTP header from the headers of the request
>sendError(int $error, string $reason = null): void	(EventHttpRequest) Send an HTML error message to the client
>sendReply(int $code, string $reason, EventBuffer $buf = ?): void	(EventHttpRequest) Send an HTML reply to the client
>sendReplyChunk(EventBuffer $buf): void	(EventHttpRequest) Send another data chunk as part of an ongoing chunked reply
>sendReplyEnd(): void	(EventHttpRequest) Complete a chunked reply, freeing the request as appropriate
>sendReplyStart(int $code, string $reason): void	(EventHttpRequest) Initiate a chunked reply
EventListener(EventBase $base, callable $cb, mixed $data, int $flags, int $backlog, mixed $target)	(new) Creates new connection listener associated with an event base
>disable(): bool	(EventListener) Disables an event connect listener object
>enable(): bool	(EventListener) Enables an event connect listener object
>getBase(): void	(EventListener) Returns event base associated with the event listener
EventListener::getSocketName(string $address, mixed $port = ?): bool	Retreives the current address to which the listeneraposs socket is bound
>setCallback(callable $cb, mixed $arg = null): void	(EventListener) The setCallback purpose
>setErrorCallback(string $cb): void	(EventListener) Set event listener's error callback
EventSslContext(string $method, string $options)	(new) Constructs an OpenSSL context for use with Event classes
EventUtil()	(new) The abstract constructor
EventUtil::getLastSocketErrno(mixed $socket = null): int	Returns the most recent socket error number
EventUtil::getLastSocketError(mixed $socket = ?): string	Returns the most recent socket error
EventUtil::getSocketFd(mixed $socket): int	Returns numeric file descriptor of a socket, or stream
EventUtil::getSocketName(mixed $socket, string $address, mixed $port = ?): bool	Retreives the current address to which the socket is bound
EventUtil::setSocketOption(mixed $socket, int $level, int $optname, mixed $optval): bool	Sets socket options
EventUtil::sslRandPoll(): void	Generates entropy by means of OpenSSL's RAND_poll()
EventException()	(new) A EventException is thrown when the Event extension methods encounter invalid user input or identify an unrecoverable error
escapeshellarg(string $arg): string	Escape a string to be used as a shell argument
escapeshellcmd(string $command): string	Escape shell metacharacters
exec(string $command, array $output = null, int $result_code = null): string|false	Execute an external program
passthru(string $command, int $result_code = null): false|null	Execute an external program and display raw output
proc_close(resource $process): int	Close a process opened by proc_open and return the exit code of that process
proc_get_status(resource $process): array	Get information about a process opened by proc_open
proc_nice(int $priority): bool	Change the priority of the current process
proc_open(array|string $command, array $descriptor_spec, array $pipes, string|null $cwd = null, array|null $env_vars = null, array|null $options = null): resource|false	Execute a command and open file pointers for input/output
proc_terminate(resource $process, int $signal = 15): bool	Kills a process opened by proc_open
shell_exec(string $command): string|false|null	Execute command via shell and return the complete output as a string
system(string $command, int $result_code = null): string|false	Execute an external program and display the output
exif_imagetype(string $filename): int|false	Determine the type of an image
exif_read_data(resource|string $file, string|null $required_sections = null, bool $as_arrays = false, bool $read_thumbnail = false): array|false	Reads the EXIF headers from an image file
exif_tagname(int $index): string|false	Get the header name for an index
exif_thumbnail(resource|string $file, int $width = null, int $height = null, int $image_type = null): string|false	Retrieve the embedded thumbnail of an image
read_exif_data()	Alias of exif_read_data
expect_expectl(resource $expect, array $cases, array $match = ?): int	Waits until the output from a process matches one of the patterns, a specified time period has passed, or an EOF is seen
expect_popen(string $command): resource	Execute command via Bourne shell, and open the PTY stream to the process
FANNConnection(int $from_neuron, int $to_neuron, float $weight)	(new) The connection constructor
>getFromNeuron(): int	(FANNConnection) Returns the postions of starting neuron
>getToNeuron(): int	(FANNConnection) Returns the postions of terminating neuron
>getWeight(): void	(FANNConnection) Returns the connection weight
>setWeight(float $weight): void	(FANNConnection) Sets the connections weight
fann_cascadetrain_on_data(resource $ann, resource $data, int $max_neurons, int $neurons_between_reports, float $desired_error): bool	Trains on an entire dataset, for a period of time using the Cascade2 training algorithm
fann_cascadetrain_on_file(resource $ann, string $filename, int $max_neurons, int $neurons_between_reports, float $desired_error): bool	Trains on an entire dataset read from file, for a period of time using the Cascade2 training algorithm
fann_clear_scaling_params(resource $ann): bool	Clears scaling parameters
fann_copy(resource $ann): resource	Creates a copy of a fann structure
fann_create_from_file(string $configuration_file): resource	Constructs a backpropagation neural network from a configuration file
fann_create_shortcut_array(int $num_layers, array $layers): resource	Creates a standard backpropagation neural network which is not fully connectected and has shortcut connections
fann_create_shortcut(int $num_layers, int $num_neurons1, int $num_neurons2, int ...$num_neuronsN): resource	Creates a standard backpropagation neural network which is not fully connectected and has shortcut connections
fann_create_sparse_array(float $connection_rate, int $num_layers, array $layers): resource	Creates a standard backpropagation neural network, which is not fully connected using an array of layer sizes
fann_create_sparse(float $connection_rate, int $num_layers, int $num_neurons1, int $num_neurons2, int ...$num_neuronsN): resource	Creates a standard backpropagation neural network, which is not fully connected
fann_create_standard_array(int $num_layers, array $layers): resource	Creates a standard fully connected backpropagation neural network using an array of layer sizes
fann_create_standard(int $num_layers, int $num_neurons1, int $num_neurons2, int ...$num_neuronsN): resource	Creates a standard fully connected backpropagation neural network
fann_create_train_from_callback(int $num_data, int $num_input, int $num_output, callable $user_function): resource	Creates the training data struct from a user supplied function
fann_create_train(int $num_data, int $num_input, int $num_output): resource	Creates an empty training data struct
fann_descale_input(resource $ann, array $input_vector): bool	Scale data in input vector after get it from ann based on previously calculated parameters
fann_descale_output(resource $ann, array $output_vector): bool	Scale data in output vector after get it from ann based on previously calculated parameters
fann_descale_train(resource $ann, resource $train_data): bool	Descale input and output data based on previously calculated parameters
fann_destroy_train(resource $train_data): bool	Destructs the training data
fann_destroy(resource $ann): bool	Destroys the entire network and properly freeing all the associated memory
fann_duplicate_train_data(resource $data): resource	Returns an exact copy of a fann train data
fann_get_activation_function(resource $ann, int $layer, int $neuron): int	Returns the activation function
fann_get_activation_steepness(resource $ann, int $layer, int $neuron): float	Returns the activation steepness for supplied neuron and layer number
fann_get_bias_array(resource $ann): array	Get the number of bias in each layer in the network
fann_get_bit_fail_limit(resource $ann): float	Returns the bit fail limit used during training
fann_get_bit_fail(resource $ann): int	The number of fail bits
fann_get_cascade_activation_functions_count(resource $ann): int	Returns the number of cascade activation functions
fann_get_cascade_activation_functions(resource $ann): array	Returns the cascade activation functions
fann_get_cascade_activation_steepnesses_count(resource $ann): int	The number of activation steepnesses
fann_get_cascade_activation_steepnesses(resource $ann): array	Returns the cascade activation steepnesses
fann_get_cascade_candidate_change_fraction(resource $ann): float	Returns the cascade candidate change fraction
fann_get_cascade_candidate_limit(resource $ann): float	Return the candidate limit
fann_get_cascade_candidate_stagnation_epochs(resource $ann): int	Returns the number of cascade candidate stagnation epochs
fann_get_cascade_max_cand_epochs(resource $ann): int	Returns the maximum candidate epochs
fann_get_cascade_max_out_epochs(resource $ann): int	Returns the maximum out epochs
fann_get_cascade_min_cand_epochs(resource $ann): int	Returns the minimum candidate epochs
fann_get_cascade_min_out_epochs(resource $ann): int	Returns the minimum out epochs
fann_get_cascade_num_candidate_groups(resource $ann): int	Returns the number of candidate groups
fann_get_cascade_num_candidates(resource $ann): int	Returns the number of candidates used during training
fann_get_cascade_output_change_fraction(resource $ann): float	Returns the cascade output change fraction
fann_get_cascade_output_stagnation_epochs(resource $ann): int	Returns the number of cascade output stagnation epochs
fann_get_cascade_weight_multiplier(resource $ann): float	Returns the weight multiplier
fann_get_connection_array(resource $ann): array	Get connections in the network
fann_get_connection_rate(resource $ann): float	Get the connection rate used when the network was created
fann_get_errno(resource $errdat): int	Returns the last error number
fann_get_errstr(resource $errdat): string	Returns the last errstr
fann_get_layer_array(resource $ann): array	Get the number of neurons in each layer in the network
fann_get_learning_momentum(resource $ann): float	Returns the learning momentum
fann_get_learning_rate(resource $ann): float	Returns the learning rate
fann_get_MSE(resource $ann): float	Reads the mean square error from the network
fann_get_network_type(resource $ann): int	Get the type of neural network it was created as
fann_get_num_input(resource $ann): int	Get the number of input neurons
fann_get_num_layers(resource $ann): int	Get the number of layers in the neural network
fann_get_num_output(resource $ann): int	Get the number of output neurons
fann_get_quickprop_decay(resource $ann): float	Returns the decay which is a factor that weights should decrease in each iteration during quickprop training
fann_get_quickprop_mu(resource $ann): float	Returns the mu factor
fann_get_rprop_decrease_factor(resource $ann): float	Returns the increase factor used during RPROP training
fann_get_rprop_delta_max(resource $ann): float	Returns the maximum step-size
fann_get_rprop_delta_min(resource $ann): float	Returns the minimum step-size
fann_get_rprop_delta_zero(resource $ann): int	Returns the initial step-size
fann_get_rprop_increase_factor(resource $ann): float	Returns the increase factor used during RPROP training
fann_get_sarprop_step_error_shift(resource $ann): float	Returns the sarprop step error shift
fann_get_sarprop_step_error_threshold_factor(resource $ann): float	Returns the sarprop step error threshold factor
fann_get_sarprop_temperature(resource $ann): float	Returns the sarprop temperature
fann_get_sarprop_weight_decay_shift(resource $ann): float	Returns the sarprop weight decay shift
fann_get_total_connections(resource $ann): int	Get the total number of connections in the entire network
fann_get_total_neurons(resource $ann): int	Get the total number of neurons in the entire network
fann_get_train_error_function(resource $ann): int	Returns the error function used during training
fann_get_train_stop_function(resource $ann): int	Returns the stop function used during training
fann_get_training_algorithm(resource $ann): int	Returns the training algorithm
fann_init_weights(resource $ann, resource $train_data): bool	Initialize the weights using Widrow + Nguyen’s algorithm
fann_length_train_data(resource $data): int	Returns the number of training patterns in the train data
fann_merge_train_data(resource $data1, resource $data2): resource	Merges the train data
fann_num_input_train_data(resource $data): int	Returns the number of inputs in each of the training patterns in the train data
fann_num_output_train_data(resource $data): int	Returns the number of outputs in each of the training patterns in the train data
fann_print_error(resource $errdat): void	Prints the error string
fann_randomize_weights(resource $ann, float $min_weight, float $max_weight): bool	Give each connection a random weight between min_weight and max_weight
fann_read_train_from_file(string $filename): resource	Reads a file that stores training data
fann_reset_errno(resource $errdat): void	Resets the last error number
fann_reset_errstr(resource $errdat): void	Resets the last error string
fann_reset_MSE(string $ann): bool	Resets the mean square error from the network
fann_run(resource $ann, array $input): array	Will run input through the neural network
fann_save_train(resource $data, string $file_name): bool	Save the training structure to a file
fann_save(resource $ann, string $configuration_file): bool	Saves the entire network to a configuration file
fann_scale_input_train_data(resource $train_data, float $new_min, float $new_max): bool	Scales the inputs in the training data to the specified range
fann_scale_input(resource $ann, array $input_vector): bool	Scale data in input vector before feed it to ann based on previously calculated parameters
fann_scale_output_train_data(resource $train_data, float $new_min, float $new_max): bool	Scales the outputs in the training data to the specified range
fann_scale_output(resource $ann, array $output_vector): bool	Scale data in output vector before feed it to ann based on previously calculated parameters
fann_scale_train_data(resource $train_data, float $new_min, float $new_max): bool	Scales the inputs and outputs in the training data to the specified range
fann_scale_train(resource $ann, resource $train_data): bool	Scale input and output data based on previously calculated parameters
fann_set_activation_function_hidden(resource $ann, int $activation_function): bool	Sets the activation function for all of the hidden layers
fann_set_activation_function_layer(resource $ann, int $activation_function, int $layer): bool	Sets the activation function for all the neurons in the supplied layer
fann_set_activation_function_output(resource $ann, int $activation_function): bool	Sets the activation function for the output layer
fann_set_activation_function(resource $ann, int $activation_function, int $layer, int $neuron): bool	Sets the activation function for supplied neuron and layer
fann_set_activation_steepness_hidden(resource $ann, float $activation_steepness): bool	Sets the steepness of the activation steepness for all neurons in the all hidden layers
fann_set_activation_steepness_layer(resource $ann, float $activation_steepness, int $layer): bool	Sets the activation steepness for all of the neurons in the supplied layer number
fann_set_activation_steepness_output(resource $ann, float $activation_steepness): bool	Sets the steepness of the activation steepness in the output layer
fann_set_activation_steepness(resource $ann, float $activation_steepness, int $layer, int $neuron): bool	Sets the activation steepness for supplied neuron and layer number
fann_set_bit_fail_limit(resource $ann, float $bit_fail_limit): bool	Set the bit fail limit used during training
fann_set_callback(resource $ann, callable $callback): bool	Sets the callback function for use during training
fann_set_cascade_activation_functions(resource $ann, array $cascade_activation_functions): bool	Sets the array of cascade candidate activation functions
fann_set_cascade_activation_steepnesses(resource $ann, array $cascade_activation_steepnesses_count): bool	Sets the array of cascade candidate activation steepnesses
fann_set_cascade_candidate_change_fraction(resource $ann, float $cascade_candidate_change_fraction): bool	Sets the cascade candidate change fraction
fann_set_cascade_candidate_limit(resource $ann, float $cascade_candidate_limit): bool	Sets the candidate limit
fann_set_cascade_candidate_stagnation_epochs(resource $ann, int $cascade_candidate_stagnation_epochs): bool	Sets the number of cascade candidate stagnation epochs
fann_set_cascade_max_cand_epochs(resource $ann, int $cascade_max_cand_epochs): bool	Sets the max candidate epochs
fann_set_cascade_max_out_epochs(resource $ann, int $cascade_max_out_epochs): bool	Sets the maximum out epochs
fann_set_cascade_min_cand_epochs(resource $ann, int $cascade_min_cand_epochs): bool	Sets the min candidate epochs
fann_set_cascade_min_out_epochs(resource $ann, int $cascade_min_out_epochs): bool	Sets the minimum out epochs
fann_set_cascade_num_candidate_groups(resource $ann, int $cascade_num_candidate_groups): bool	Sets the number of candidate groups
fann_set_cascade_output_change_fraction(resource $ann, float $cascade_output_change_fraction): bool	Sets the cascade output change fraction
fann_set_cascade_output_stagnation_epochs(resource $ann, int $cascade_output_stagnation_epochs): bool	Sets the number of cascade output stagnation epochs
fann_set_cascade_weight_multiplier(resource $ann, float $cascade_weight_multiplier): bool	Sets the weight multiplier
fann_set_error_log(resource $errdat, string $log_file): void	Sets where the errors are logged to
fann_set_input_scaling_params(resource $ann, resource $train_data, float $new_input_min, float $new_input_max): bool	Calculate input scaling parameters for future use based on training data
fann_set_learning_momentum(resource $ann, float $learning_momentum): bool	Sets the learning momentum
fann_set_learning_rate(resource $ann, float $learning_rate): bool	Sets the learning rate
fann_set_output_scaling_params(resource $ann, resource $train_data, float $new_output_min, float $new_output_max): bool	Calculate output scaling parameters for future use based on training data
fann_set_quickprop_decay(resource $ann, float $quickprop_decay): bool	Sets the quickprop decay factor
fann_set_quickprop_mu(resource $ann, float $quickprop_mu): bool	Sets the quickprop mu factor
fann_set_rprop_decrease_factor(resource $ann, float $rprop_decrease_factor): bool	Sets the decrease factor used during RPROP training
fann_set_rprop_delta_max(resource $ann, float $rprop_delta_max): bool	Sets the maximum step-size
fann_set_rprop_delta_min(resource $ann, float $rprop_delta_min): bool	Sets the minimum step-size
fann_set_rprop_delta_zero(resource $ann, float $rprop_delta_zero): bool	Sets the initial step-size
fann_set_rprop_increase_factor(resource $ann, float $rprop_increase_factor): bool	Sets the increase factor used during RPROP training
fann_set_sarprop_step_error_shift(resource $ann, float $sarprop_step_error_shift): bool	Sets the sarprop step error shift
fann_set_sarprop_step_error_threshold_factor(resource $ann, float $sarprop_step_error_threshold_factor): bool	Sets the sarprop step error threshold factor
fann_set_sarprop_temperature(resource $ann, float $sarprop_temperature): bool	Sets the sarprop temperature
fann_set_sarprop_weight_decay_shift(resource $ann, float $sarprop_weight_decay_shift): bool	Sets the sarprop weight decay shift
fann_set_scaling_params(resource $ann, resource $train_data, float $new_input_min, float $new_input_max, float $new_output_min, float $new_output_max): bool	Calculate input and output scaling parameters for future use based on training data
fann_set_train_error_function(resource $ann, int $error_function): bool	Sets the error function used during training
fann_set_train_stop_function(resource $ann, int $stop_function): bool	Sets the stop function used during training
fann_set_training_algorithm(resource $ann, int $training_algorithm): bool	Sets the training algorithm
fann_set_weight_array(resource $ann, array $connections): bool	Set connections in the network
fann_set_weight(resource $ann, int $from_neuron, int $to_neuron, float $weight): bool	Set a connection in the network
fann_shuffle_train_data(resource $train_data): bool	Shuffles training data, randomizing the order
fann_subset_train_data(resource $data, int $pos, int $length): resource	Returns an copy of a subset of the train data
fann_test_data(resource $ann, resource $data): float	Test a set of training data and calculates the MSE for the training data
fann_test(resource $ann, array $input, array $desired_output): array	Test with a set of inputs, and a set of desired outputs
fann_train_epoch(resource $ann, resource $data): float	Train one epoch with a set of training data
fann_train_on_data(resource $ann, resource $data, int $max_epochs, int $epochs_between_reports, float $desired_error): bool	Trains on an entire dataset for a period of time
fann_train_on_file(resource $ann, string $filename, int $max_epochs, int $epochs_between_reports, float $desired_error): bool	Trains on an entire dataset, which is read from file, for a period of time
fann_train(resource $ann, array $input, array $desired_output): bool	Train one iteration with a set of inputs, and a set of desired outputs
fdf_add_doc_javascript(resource $fdf_document, string $script_name, string $script_code): bool	Adds javascript code to the FDF document
fdf_add_template(resource $fdf_document, int $newpage, string $filename, string $template, int $rename): bool	Adds a template into the FDF document
fdf_close(resource $fdf_document): void	Close an FDF document
fdf_create(): resource	Create a new FDF document
fdf_enum_values(resource $fdf_document, callable $function, mixed $userdata = ?): bool	Call a user defined function for each document value
fdf_errno(): int	Return error code for last fdf operation
fdf_error(int $error_code = -1): string	Return error description for FDF error code
fdf_get_ap(resource $fdf_document, string $field, int $face, string $filename): bool	Get the appearance of a field
fdf_get_attachment(resource $fdf_document, string $fieldname, string $savepath): array	Extracts uploaded file embedded in the FDF
fdf_get_encoding(resource $fdf_document): string	Get the value of the /Encoding key
fdf_get_file(resource $fdf_document): string	Get the value of the /F key
fdf_get_flags(resource $fdf_document, string $fieldname, int $whichflags): int	Gets the flags of a field
fdf_get_opt(resource $fdf_document, string $fieldname, int $element = -1): mixed	Gets a value from the opt array of a field
fdf_get_status(resource $fdf_document): string	Get the value of the /STATUS key
fdf_get_value(resource $fdf_document, string $fieldname, int $which = -1): mixed	Get the value of a field
fdf_get_version(resource $fdf_document = ?): string	Gets version number for FDF API or file
fdf_header(): void	Sets FDF-specific output headers
fdf_next_field_name(resource $fdf_document, string $fieldname = ?): string	Get the next field name
fdf_open_string(string $fdf_data): resource	Read a FDF document from a string
fdf_open(string $filename): resource	Open a FDF document
fdf_remove_item(resource $fdf_document, string $fieldname, int $item): bool	Sets target frame for form
fdf_save_string(resource $fdf_document): string	Returns the FDF document as a string
fdf_save(resource $fdf_document, string $filename = ?): bool	Save a FDF document
fdf_set_ap(resource $fdf_document, string $field_name, int $face, string $filename, int $page_number): bool	Set the appearance of a field
fdf_set_encoding(resource $fdf_document, string $encoding): bool	Sets FDF character encoding
fdf_set_file(resource $fdf_document, string $url, string $target_frame = ?): bool	Set PDF document to display FDF data in
fdf_set_flags(resource $fdf_document, string $fieldname, int $whichFlags, int $newFlags): bool	Sets a flag of a field
fdf_set_javascript_action(resource $fdf_document, string $fieldname, int $trigger, string $script): bool	Sets an javascript action of a field
fdf_set_on_import_javascript(resource $fdf_document, string $script, bool $before_data_import): bool	Adds javascript code to be executed when Acrobat opens the FDF
fdf_set_opt(resource $fdf_document, string $fieldname, int $element, string $str1, string $str2): bool	Sets an option of a field
fdf_set_status(resource $fdf_document, string $status): bool	Set the value of the /STATUS key
fdf_set_submit_form_action(resource $fdf_document, string $fieldname, int $trigger, string $script, int $flags): bool	Sets a submit form action of a field
fdf_set_target_frame(resource $fdf_document, string $frame_name): bool	Set target frame for form display
fdf_set_value(resource $fdf_document, string $fieldname, mixed $value, int $isName = ?): bool	Set the value of a field
fdf_set_version(resource $fdf_document, string $version): bool	Sets version number for a FDF file
>getAlignment(): int	(FFI\CType) Description
>getArrayElementType(): FFI\CType	(FFI\CType) Description
>getArrayLength(): int	(FFI\CType) Description
>getAttributes(): int	(FFI\CType) Description
>getEnumKind(): int	(FFI\CType) Description
>getFuncABI(): int	(FFI\CType) Description
>getFuncParameterCount(): int	(FFI\CType) Retrieve the count of parameters of a function type
>getFuncParameterType(int $index): FFI\CType	(FFI\CType) Description
>getFuncReturnType(): FFI\CType	(FFI\CType) Description
>getKind(): int	(FFI\CType) Description
>getName(): string	(FFI\CType) Description
>getPointerType(): FFI\CType	(FFI\CType) Description
>getSize(): int	(FFI\CType) Description
>getStructFieldNames(): array	(FFI\CType) Description
>getStructFieldOffset(string $name): int	(FFI\CType) Description
>getStructFieldType(string $name): FFI\CType	(FFI\CType) Description
FFI::addr(FFI\CData $ptr): FFI\CData	Creates an unmanaged pointer to C data
FFI::alignof(FFI\CData|FFI\CType $ptr): int	Gets the alignment
FFI::arrayType(FFI\CType $type, array $dimensions): FFI\CType	Dynamically constructs a new C array type
>cast(FFI\CType|string $type, FFI\CData|int|float|bool|null $ptr): FFI\CData|null	(FFI) Performs a C type cast
FFI::cdef(string $code = "", string|null $lib = null): FFI	Creates a new FFI object
FFI::free(FFI\CData $ptr): void	Releases an unmanaged data structure
FFI::isNull(FFI\CData $ptr): bool	Checks whether a FFI\CData is a null pointer
FFI::load(string $filename): FFI|null	Loads C declarations from a C header file
FFI::memcmp(string|FFI\CData $ptr1, string|FFI\CData $ptr2, int $size): int	Compares memory areas
FFI::memcpy(FFI\CData $to, FFI\CData|string $from, int $size): void	Copies one memory area to another
FFI::memset(FFI\CData $ptr, int $value, int $size): void	Fills a memory area
FFI(FFI\CType|string $type, bool $owned = true, bool $persistent = false): FFI\CData|null	(new) Creates a C data structure
FFI::scope(string $name): FFI	Instantiates an FFI object with C declarations parsed during preloading
FFI::sizeof(FFI\CData|FFI\CType $ptr): int	Gets the size of C data or types
FFI::string(FFI\CData $ptr, int|null $size = null): string	Creates a PHP string from a memory area
>type(string $type): FFI\CType|null	(FFI) Creates an FFI\CType object from a C declaration
FFI::typeof(FFI\CData $ptr): FFI\CType	Gets the FFI\CType of FFI\CData
FFI\CData()	(new) FFI\CData objects can be used in a number of ways as a regular PHP data: C data of scalar types can be read and assigned via the $cdata property, e
FFI\CType()	(new) 
FFI\Exception()	(new) 
FFI\ParserException()	(new) 
FFI()	(new) Objects of this class are created by the factory methods FFI::cdef, FFI::load or FFI::scope
>buffer(string $string, int $flags = FILEINFO_NONE, resource|null $context = null): string|false	(finfo) Alias finfo_buffer()
finfo(int $flags = FILEINFO_NONE, string|null $magic_database = null)	(new) Alias finfo_open
>file(string $filename, int $flags = FILEINFO_NONE, resource|null $context = null): string|false	(finfo) Alias finfo_file()
>set_flags(int $flags): true	(finfo) Alias finfo_set_flags()
finfo_buffer(finfo $finfo, string $string, int $flags = FILEINFO_NONE, resource|null $context = null): string|false	Return information about a string buffer
>buffer(string $string, int $flags = FILEINFO_NONE, resource|null $context = null): string|false	(finfo) Return information about a string buffer
finfo_close(finfo $finfo): bool	Close finfo instance
finfo_file(finfo $finfo, string $filename, int $flags = FILEINFO_NONE, resource|null $context = null): string|false	Return information about a file
>file(string $filename, int $flags = FILEINFO_NONE, resource|null $context = null): string|false	(finfo) Return information about a file
finfo_open(int $flags = FILEINFO_NONE, string|null $magic_database = null): finfo|false	Create a new finfo instance
finfo_set_flags(finfo $finfo, int $flags): true	Set libmagic configuration options
>set_flags(int $flags): true	(finfo) Set libmagic configuration options
mime_content_type(resource|string $filename): string|false	Detect MIME Content-type for a file
basename(string $path, string $suffix = ""): string	Returns trailing name component of path
chgrp(string $filename, string|int $group): bool	Changes file group
chmod(string $filename, int $permissions): bool	Changes file mode
chown(string $filename, string|int $user): bool	Changes file owner
clearstatcache(bool $clear_realpath_cache = false, string $filename = ""): void	Clears file status cache
copy(string $from, string $to, resource|null $context = null): bool	Copies file
delete()	See unlink or unset
dirname(string $path, int $levels = 1): string	Returns a parent directory's path
disk_free_space(string $directory): float|false	Returns available space on filesystem or disk partition
disk_total_space(string $directory): float|false	Returns the total size of a filesystem or disk partition
diskfreespace()	Alias of disk_free_space
fclose(resource $stream): bool	Closes an open file pointer
fdatasync(resource $stream): bool	Synchronizes data (but not meta-data) to the file
feof(resource $stream): bool	Tests for end-of-file on a file pointer
fflush(resource $stream): bool	Flushes the output to a file
fgetc(resource $stream): string|false	Gets character from file pointer
fgetcsv(resource $stream, int|null $length = null, string $separator = ",", string $enclosure = "\"", string $escape = "\\"): array|false	Gets line from file pointer and parse for CSV fields
fgets(resource $stream, int|null $length = null): string|false	Gets line from file pointer
fgetss(resource $handle, int $length = ?, string $allowable_tags = ?): string	Gets line from file pointer and strip HTML tags
file_exists(string $filename): bool	Checks whether a file or directory exists
file_get_contents(string $filename, bool $use_include_path = false, resource|null $context = null, int $offset = ?, int|null $length = null): string|false	Reads entire file into a string
file_put_contents(string $filename, mixed $data, int $flags = ?, resource|null $context = null): int|false	Write data to a file
file(string $filename, int $flags = ?, resource|null $context = null): array|false	Reads entire file into an array
fileatime(string $filename): int|false	Gets last access time of file
filectime(string $filename): int|false	Gets inode change time of file
filegroup(string $filename): int|false	Gets file group
fileinode(string $filename): int|false	Gets file inode
filemtime(string $filename): int|false	Gets file modification time
fileowner(string $filename): int|false	Gets file owner
fileperms(string $filename): int|false	Gets file permissions
filesize(string $filename): int|false	Gets file size
filetype(string $filename): string|false	Gets file type
flock(resource $stream, int $operation, int $would_block = null): bool	Portable advisory file locking
fnmatch(string $pattern, string $filename, int $flags = ?): bool	Match filename against a pattern
fopen(string $filename, string $mode, bool $use_include_path = false, resource|null $context = null): resource|false	Opens file or URL
fpassthru(resource $stream): int	Output all remaining data on a file pointer
fputcsv(resource $stream, array $fields, string $separator = ",", string $enclosure = "\"", string $escape = "\\", string $eol = "\n"): int|false	Format line as CSV and write to file pointer
fputs()	Alias of fwrite
fread(resource $stream, int $length): string|false	Binary-safe file read
fscanf(resource $stream, string $format, mixed ...$vars): array|int|false|null	Parses input from a file according to a format
fseek(resource $stream, int $offset, int $whence = SEEK_SET): int	Seeks on a file pointer
fstat(resource $stream): array|false	Gets information about a file using an open file pointer
fsync(resource $stream): bool	Synchronizes changes to the file (including meta-data)
ftell(resource $stream): int|false	Returns the current position of the file read/write pointer
ftruncate(resource $stream, int $size): bool	Truncates a file to a given length
fwrite(resource $stream, string $data, int|null $length = null): int|false	Binary-safe file write
glob(string $pattern, int $flags = ?): array|false	Find pathnames matching a pattern
is_dir(string $filename): bool	Tells whether the filename is a directory
is_executable(string $filename): bool	Tells whether the filename is executable
is_file(string $filename): bool	Tells whether the filename is a regular file
is_link(string $filename): bool	Tells whether the filename is a symbolic link
is_readable(string $filename): bool	Tells whether a file exists and is readable
is_uploaded_file(string $filename): bool	Tells whether the file was uploaded via HTTP POST
is_writable(string $filename): bool	Tells whether the filename is writable
is_writeable()	Alias of is_writable
lchgrp(string $filename, string|int $group): bool	Changes group ownership of symlink
lchown(string $filename, string|int $user): bool	Changes user ownership of symlink
link(string $target, string $link): bool	Create a hard link
linkinfo(string $path): int|false	Gets information about a link
lstat(string $filename): array|false	Gives information about a file or symbolic link
mkdir(string $directory, int $permissions = 0777, bool $recursive = false, resource|null $context = null): bool	Makes directory
move_uploaded_file(string $from, string $to): bool	Moves an uploaded file to a new location
parse_ini_file(string $filename, bool $process_sections = false, int $scanner_mode = INI_SCANNER_NORMAL): array|false	Parse a configuration file
parse_ini_string(string $ini_string, bool $process_sections = false, int $scanner_mode = INI_SCANNER_NORMAL): array|false	Parse a configuration string
pathinfo(string $path, int $flags = PATHINFO_ALL): array|string	Returns information about a file path
pclose(resource $handle): int	Closes process file pointer
popen(string $command, string $mode): resource|false	Opens process file pointer
readfile(string $filename, bool $use_include_path = false, resource|null $context = null): int|false	Outputs a file
readlink(string $path): string|false	Returns the target of a symbolic link
realpath_cache_get(): array	Get realpath cache entries
realpath_cache_size(): int	Get realpath cache size
realpath(string $path): string|false	Returns canonicalized absolute pathname
rename(string $from, string $to, resource|null $context = null): bool	Renames a file or directory
rewind(resource $stream): bool	Rewind the position of a file pointer
rmdir(string $directory, resource|null $context = null): bool	Removes directory
set_file_buffer()	Alias of stream_set_write_buffer
stat(string $filename): array|false	Gives information about a file
symlink(string $target, string $link): bool	Creates a symbolic link
tempnam(string $directory, string $prefix): string|false	Create file with unique file name
tmpfile(): resource|false	Creates a temporary file
touch(string $filename, int|null $mtime = null, int|null $atime = null): bool	Sets access and modification time of file
umask(int|null $mask = null): int	Changes the current umask
unlink(string $filename, resource|null $context = null): bool	Deletes a file
filter_has_var(int $input_type, string $var_name): bool	Checks if variable of specified type exists
filter_id(string $name): int|false	Returns the filter ID belonging to a named filter
filter_input_array(int $type, array|int $options = FILTER_DEFAULT, bool $add_empty = true): array|false|null	Gets external variables and optionally filters them
filter_input(int $type, string $var_name, int $filter = FILTER_DEFAULT, array|int $options = ?): mixed	Gets a specific external variable by name and optionally filters it
filter_list(): array	Returns a list of all supported filters
filter_var_array(array $array, array|int $options = FILTER_DEFAULT, bool $add_empty = true): array|false|null	Gets multiple variables and optionally filters them
filter_var(mixed $value, int $filter = FILTER_DEFAULT, array|int $options = ?): mixed	Filters a variable with a specified filter
fastcgi_finish_request(): bool	Flushes all response data to the client
fpm_get_status(): array|false	Returns the current FPM pool status
ftp_alloc(FTP\Connection $ftp, int $size, string $response = null): bool	Allocates space for a file to be uploaded
ftp_append(FTP\Connection $ftp, string $remote_filename, string $local_filename, int $mode = FTP_BINARY): bool	Append the contents of a file to another file on the FTP server
ftp_cdup(FTP\Connection $ftp): bool	Changes to the parent directory
ftp_chdir(FTP\Connection $ftp, string $directory): bool	Changes the current directory on a FTP server
ftp_chmod(FTP\Connection $ftp, int $permissions, string $filename): int|false	Set permissions on a file via FTP
ftp_close(FTP\Connection $ftp): bool	Closes an FTP connection
ftp_connect(string $hostname, int $port = 21, int $timeout = 90): FTP\Connection|false	Opens an FTP connection
ftp_delete(FTP\Connection $ftp, string $filename): bool	Deletes a file on the FTP server
ftp_exec(FTP\Connection $ftp, string $command): bool	Requests execution of a command on the FTP server
ftp_fget(FTP\Connection $ftp, resource $stream, string $remote_filename, int $mode = FTP_BINARY, int $offset = ?): bool	Downloads a file from the FTP server and saves to an open file
ftp_fput(FTP\Connection $ftp, string $remote_filename, resource $stream, int $mode = FTP_BINARY, int $offset = ?): bool	Uploads from an open file to the FTP server
ftp_get_option(FTP\Connection $ftp, int $option): int|bool	Retrieves various runtime behaviours of the current FTP connection
ftp_get(FTP\Connection $ftp, string $local_filename, string $remote_filename, int $mode = FTP_BINARY, int $offset = ?): bool	Downloads a file from the FTP server
ftp_login(FTP\Connection $ftp, string $username, string $password): bool	Logs in to an FTP connection
ftp_mdtm(FTP\Connection $ftp, string $filename): int	Returns the last modified time of the given file
ftp_mkdir(FTP\Connection $ftp, string $directory): string|false	Creates a directory
ftp_mlsd(FTP\Connection $ftp, string $directory): array|false	Returns a list of files in the given directory
ftp_nb_continue(FTP\Connection $ftp): int	Continues retrieving/sending a file (non-blocking)
ftp_nb_fget(FTP\Connection $ftp, resource $stream, string $remote_filename, int $mode = FTP_BINARY, int $offset = ?): int	Retrieves a file from the FTP server and writes it to an open file (non-blocking)
ftp_nb_fput(FTP\Connection $ftp, string $remote_filename, resource $stream, int $mode = FTP_BINARY, int $offset = ?): int	Stores a file from an open file to the FTP server (non-blocking)
ftp_nb_get(FTP\Connection $ftp, string $local_filename, string $remote_filename, int $mode = FTP_BINARY, int $offset = ?): int|false	Retrieves a file from the FTP server and writes it to a local file (non-blocking)
ftp_nb_put(FTP\Connection $ftp, string $remote_filename, string $local_filename, int $mode = FTP_BINARY, int $offset = ?): int|false	Stores a file on the FTP server (non-blocking)
ftp_nlist(FTP\Connection $ftp, string $directory): array|false	Returns a list of files in the given directory
ftp_pasv(FTP\Connection $ftp, bool $enable): bool	Turns passive mode on or off
ftp_put(FTP\Connection $ftp, string $remote_filename, string $local_filename, int $mode = FTP_BINARY, int $offset = ?): bool	Uploads a file to the FTP server
ftp_pwd(FTP\Connection $ftp): string|false	Returns the current directory name
ftp_quit()	Alias of ftp_close
ftp_raw(FTP\Connection $ftp, string $command): array|null	Sends an arbitrary command to an FTP server
ftp_rawlist(FTP\Connection $ftp, string $directory, bool $recursive = false): array|false	Returns a detailed list of files in the given directory
ftp_rename(FTP\Connection $ftp, string $from, string $to): bool	Renames a file or a directory on the FTP server
ftp_rmdir(FTP\Connection $ftp, string $directory): bool	Removes a directory
ftp_set_option(FTP\Connection $ftp, int $option, int|bool $value): bool	Set miscellaneous runtime FTP options
ftp_site(FTP\Connection $ftp, string $command): bool	Sends a SITE command to the server
ftp_size(FTP\Connection $ftp, string $filename): int	Returns the size of the given file
ftp_ssl_connect(string $hostname, int $port = 21, int $timeout = 90): FTP\Connection|false	Opens a Secure SSL-FTP connection
ftp_systype(FTP\Connection $ftp): string|false	Returns the system type identifier of the remote FTP server
FTP\Connection()	(new) A fully opaque class which replaces a ftp resource as of PHP 8
call_user_func_array(callable $callback, array $args): mixed	Call a callback with an array of parameters
call_user_func(callable $callback, mixed ...$args): mixed	Call the callback given by the first parameter
create_function(string $args, string $code): string	Create a function dynamically by evaluating a string of code
forward_static_call_array(callable $callback, array $args): mixed	Call a static method and pass the arguments as array
forward_static_call(callable $callback, mixed ...$args): mixed	Call a static method
func_get_arg(int $position): mixed	Return an item from the argument list
func_get_args(): array	Returns an array comprising a function's argument list
func_num_args(): int	Returns the number of arguments passed to the function
function_exists(string $function): bool	Return true if the given function has been defined
get_defined_functions(bool $exclude_disabled = true): array	Returns an array of all defined functions
register_shutdown_function(callable $callback, mixed ...$args): void	Register a function for execution on shutdown
register_tick_function(callable $callback, mixed ...$args): bool	Register a function for execution on each tick
unregister_tick_function(callable $callback): void	De-register a function for execution on each tick
>addOptions(int $option): bool	(GearmanClient) Add client options
>addServer(string $host = null, int $port = ?, bool $setupExceptionHandler = true): bool	(GearmanClient) Add a job server to the client
>addServers(string $servers = null, bool $setupExceptionHandler = true): bool	(GearmanClient) Add a list of job servers to the client
>addTask(string $function_name, string|int|float $workload, mixed $context = null, string|null $unique_key = null): GearmanTask|false	(GearmanClient) Add a task to be run in parallel
>addTaskBackground(string $function_name, string|int|float $workload, mixed $context = null, string|null $unique_key = null): GearmanTask|false	(GearmanClient) Add a background task to be run in parallel
>addTaskHigh(string $function_name, string|int|float $workload, mixed $context = null, string|null $unique_key = null): GearmanTask|false	(GearmanClient) Add a high priority task to run in parallel
>addTaskHighBackground(string $function_name, string|int|float $workload, mixed $context = null, string|null $unique_key = null): GearmanTask|false	(GearmanClient) Add a high priority background task to be run in parallel
>addTaskLow(string $function_name, string|int|float $workload, mixed $context = null, string|null $unique_key = null): GearmanTask|false	(GearmanClient) Add a low priority task to run in parallel
>addTaskLowBackground(string $function_name, string|int|float $workload, mixed $context = null, string|null $unique_key = null): GearmanTask|false	(GearmanClient) Add a low priority background task to be run in parallel
>addTaskStatus(string $job_handle, mixed $context = null): GearmanTask|false	(GearmanClient) Add a task to get status
>clearCallbacks(): bool	(GearmanClient) Clear all task callback functions
>clone(): GearmanClient	(GearmanClient) Create a copy of a GearmanClient object
GearmanClient()	(new) Create a GearmanClient instance
>context(): string	(GearmanClient) Get the application context
>data(): string	(GearmanClient) Get the application data (deprecated)
>do(string $function_name, string $workload, string $unique = ?): string	(GearmanClient) Run a single task and return a result [deprecated]
>doBackground(string $function, string $workload, string|null $unique = null): string	(GearmanClient) Run a task in the background
>doHigh(string $function, string $workload, string|null $unique = null): string	(GearmanClient) Run a single high priority task
>doHighBackground(string $function, string $workload, string|null $unique = null): string	(GearmanClient) Run a high priority task in the background
>doJobHandle(): string	(GearmanClient) Get the job handle for the running task
>doLow(string $function, string $workload, string|null $unique = null): string	(GearmanClient) Run a single low priority task
>doLowBackground(string $function, string $workload, string|null $unique = null): string	(GearmanClient) Run a low priority task in the background
>doNormal(string $function, string $workload, string|null $unique = null): string	(GearmanClient) Run a single task and return a result
>doStatus(): array	(GearmanClient) Get the status for the running task
>echo(string $workload): bool	(GearmanClient) Send data to all job servers to see if they echo it back [deprecated]
>error(): string|false	(GearmanClient) Returns an error string for the last error encountered
>getErrno(): int	(GearmanClient) Get an errno value
>jobStatus(string $job_handle): array	(GearmanClient) Get the status of a background job
>ping(string $workload): bool	(GearmanClient) Send data to all job servers to see if they echo it back
>removeOptions(int $option): bool	(GearmanClient) Remove client options
>returnCode(): int	(GearmanClient) Get the last Gearman return code
>runTasks(): bool	(GearmanClient) Run a list of tasks in parallel
>setClientCallback(callable $callback): void	(GearmanClient) Callback function when there is a data packet for a task (deprecated)
>setCompleteCallback(callable $callback): bool	(GearmanClient) Set a function to be called on task completion
>setContext(string $data): bool	(GearmanClient) Set application context
>setCreatedCallback(callable $callback): bool	(GearmanClient) Set a callback for when a task is queued
>setData(string $data): bool	(GearmanClient) Set application data (deprecated)
>setDataCallback(callable $callback): bool	(GearmanClient) Callback function when there is a data packet for a task
>setExceptionCallback(callable $callback): bool	(GearmanClient) Set a callback for worker exceptions
>setFailCallback(callable $callback): bool	(GearmanClient) Set callback for job failure
>setOptions(int $option): bool	(GearmanClient) Set client options
>setStatusCallback(callable $callback): bool	(GearmanClient) Set a callback for collecting task status
>setTimeout(int $timeout): bool	(GearmanClient) Set socket I/O activity timeout
>setWarningCallback(callable $callback): bool	(GearmanClient) Set a callback for worker warnings
>setWorkloadCallback(callable $callback): bool	(GearmanClient) Set a callback for accepting incremental data updates
>timeout(): int	(GearmanClient) Get current socket I/O activity timeout value
>wait(): bool	(GearmanClient) Wait for I/O activity on all connections in a client
>complete(string $result): bool	(GearmanJob) Send the result and complete status (deprecated)
GearmanJob()	(new) Create a GearmanJob instance
>data(string $data): bool	(GearmanJob) Send data for a running job (deprecated)
>exception(string $exception): bool	(GearmanJob) Send exception for running job (deprecated)
>fail(): bool	(GearmanJob) Send fail status (deprecated)
>functionName(): false|string	(GearmanJob) Get function name
>handle(): false|string	(GearmanJob) Get the job handle
>returnCode(): int	(GearmanJob) Get last return code
>sendComplete(string $result): bool	(GearmanJob) Send the result and complete status
>sendData(string $data): bool	(GearmanJob) Send data for a running job
>sendException(string $exception): bool	(GearmanJob) Send exception for running job (exception)
>sendFail(): bool	(GearmanJob) Send fail status
>sendStatus(int $numerator, int $denominator): bool	(GearmanJob) Send status
>sendWarning(string $warning): bool	(GearmanJob) Send a warning
>setReturn(int $gearman_return_t): bool	(GearmanJob) Set a return value
>status(int $numerator, int $denominator): bool	(GearmanJob) Send status (deprecated)
>unique(): false|string	(GearmanJob) Get the unique identifier
>warning(string $warning): bool	(GearmanJob) Send a warning (deprecated)
>workload(): string	(GearmanJob) Get workload
>workloadSize(): int	(GearmanJob) Get size of work load
GearmanTask()	(new) Create a GearmanTask instance
>create(): GearmanTask|false	(GearmanTask) Create a task (deprecated)
>data(): false|string	(GearmanTask) Get data returned for a task
>dataSize(): int|false	(GearmanTask) Get the size of returned data
>function(): string	(GearmanTask) Get associated function name (deprecated)
>functionName(): false|string	(GearmanTask) Get associated function name
>isKnown(): bool	(GearmanTask) Determine if task is known
>isRunning(): bool	(GearmanTask) Test whether the task is currently running
>jobHandle(): false|string	(GearmanTask) Get the job handle
>recvData(int $data_len): false|array	(GearmanTask) Read work or result data into a buffer for a task
>returnCode(): int	(GearmanTask) Get the last return code
>sendData(string $data): int	(GearmanTask) Send data for a task (deprecated)
>sendWorkload(string $data): int|false	(GearmanTask) Send data for a task
>taskDenominator(): false|int	(GearmanTask) Get completion percentage denominator
>taskNumerator(): false|int	(GearmanTask) Get completion percentage numerator
>unique(): false|string	(GearmanTask) Get the unique identifier for a task
>uuid(): string	(GearmanTask) Get the unique identifier for a task (deprecated)
>addFunction(string $function_name, callable $function, mixed $context = null, int $timeout = ?): bool	(GearmanWorker) Register and add callback function
>addOptions(int $option): true	(GearmanWorker) Add worker options
>addServer(string $host = null, int $port = ?, bool $setupExceptionHandler = true): bool	(GearmanWorker) Add a job server
>addServers(string $servers = null, bool $setupExceptionHandler = true): bool	(GearmanWorker) Add job servers
>clone(): void	(GearmanWorker) Create a copy of the worker
GearmanWorker()	(new) Create a GearmanWorker instance
>echo(string $workload): bool	(GearmanWorker) Test job server response
>error(): string|false	(GearmanWorker) Get the last error encountered
>getErrno(): int	(GearmanWorker) Get errno
>options(): int	(GearmanWorker) Get worker options
>register(string $function_name, int $timeout = ?): bool	(GearmanWorker) Register a function with the job server
>removeOptions(int $option): true	(GearmanWorker) Remove worker options
>returnCode(): int	(GearmanWorker) Get last Gearman return code
>setId(string $id): bool	(GearmanWorker) Give the worker an identifier so it can be tracked when asking gearmand for the list of available workers
>setOptions(int $option): true	(GearmanWorker) Set worker options
>setTimeout(int $timeout): true	(GearmanWorker) Set socket I/O activity timeout
>timeout(): int	(GearmanWorker) Get socket I/O activity timeout
>unregister(string $function_name): bool	(GearmanWorker) Unregister a function name with the job servers
>unregisterAll(): bool	(GearmanWorker) Unregister all function names with the job servers
>wait(): bool	(GearmanWorker) Wait for activity from one of the job servers
>work(): bool	(GearmanWorker) Wait for and perform jobs
GearmanException()	(new) 
>connect(string $dsn): bool	(Gender\Gender) Connect to an external name dictionary
Gender\Gender(string $dsn = ?)	(new) Construct the Gender object
>country(int $country): array|false	(Gender\Gender) Get textual country representation
>get(string $name, int $country = ?): int	(Gender\Gender) Get gender of a name
>isNick(string $name0, string $name1, int $country = ?): array	(Gender\Gender) Check if the name0 is an alias of the name1
>similarNames(string $name, int $country = ?): array	(Gender\Gender) Get similar names
geoip_asnum_by_name(string $hostname): string	Get the Autonomous System Numbers (ASN)
geoip_continent_code_by_name(string $hostname): string	Get the two letter continent code
geoip_country_code_by_name(string $hostname): string	Get the two letter country code
geoip_country_code3_by_name(string $hostname): string	Get the three letter country code
geoip_country_name_by_name(string $hostname): string	Get the full country name
geoip_database_info(int $database = GEOIP_COUNTRY_EDITION): string	Get GeoIP Database information
geoip_db_avail(int $database): bool	Determine if GeoIP Database is available
geoip_db_filename(int $database): string	Returns the filename of the corresponding GeoIP Database
geoip_db_get_all_info(): array	Returns detailed information about all GeoIP database types
geoip_domain_by_name(string $hostname): string	Get the second level domain name
geoip_id_by_name(string $hostname): int	Get the Internet connection type
geoip_isp_by_name(string $hostname): string	Get the Internet Service Provider (ISP) name
geoip_netspeedcell_by_name(string $hostname): string	Get the Internet connection speed
geoip_org_by_name(string $hostname): string	Get the organization name
geoip_record_by_name(string $hostname): array	Returns the detailed City information found in the GeoIP Database
geoip_region_by_name(string $hostname): array	Get the country code and region
geoip_region_name_by_code(string $country_code, string $region_code): string	Returns the region name for some country and region code combo
geoip_setup_custom_directory(string $path): void	Set a custom directory for the GeoIP database
geoip_time_zone_by_country_and_region(string $country_code, string $region_code = ?): string	Returns the time zone for some country and region code combo
_()	Alias of gettext
bind_textdomain_codeset(string $domain, string|null $codeset = null): string|false	Specify or get the character encoding in which the messages from the DOMAIN message catalog will be returned
bindtextdomain(string $domain, string|null $directory = null): string|false	Sets or gets the path for a domain
dcgettext(string $domain, string $message, int $category): string	Overrides the domain for a single lookup
dcngettext(string $domain, string $singular, string $plural, int $count, int $category): string	Plural version of dcgettext
dgettext(string $domain, string $message): string	Override the current domain
dngettext(string $domain, string $singular, string $plural, int $count): string	Plural version of dgettext
gettext(string $message): string	Lookup a message in the current domain
ngettext(string $singular, string $plural, int $count): string	Plural version of gettext
textdomain(string|null $domain = null): string	Sets the default domain
>addimage(Gmagick $source): Gmagick	(Gmagick) Adds new image to Gmagick object image list
>addnoiseimage(int $noise_type): Gmagick	(Gmagick) Adds random noise to the image
>annotateimage(GmagickDraw $GmagickDraw, float $x, float $y, float $angle, string $text): Gmagick	(Gmagick) Annotates an image with text
>blurimage(float $radius, float $sigma, int $channel = ?): Gmagick	(Gmagick) Adds blur filter to image
>borderimage(GmagickPixel $color, int $width, int $height): Gmagick	(Gmagick) Surrounds the image with a border
>charcoalimage(float $radius, float $sigma): Gmagick	(Gmagick) Simulates a charcoal drawing
>chopimage(int $width, int $height, int $x, int $y): Gmagick	(Gmagick) Removes a region of an image and trims
>clear(): Gmagick	(Gmagick) Clears all resources associated to Gmagick object
>commentimage(string $comment): Gmagick	(Gmagick) Adds a comment to your image
>compositeimage(Gmagick $source, int $COMPOSE, int $x, int $y): Gmagick	(Gmagick) Composite one image onto another
Gmagick(string $filename = ?)	(new) The Gmagick constructor
>cropimage(int $width, int $height, int $x, int $y): Gmagick	(Gmagick) Extracts a region of the image
>cropthumbnailimage(int $width, int $height): Gmagick	(Gmagick) Creates a crop thumbnail
>current(): Gmagick	(Gmagick) The current purpose
>cyclecolormapimage(int $displace): Gmagick	(Gmagick) Displaces an image's colormap
>deconstructimages(): Gmagick	(Gmagick) Returns certain pixel differences between images
>despeckleimage(): Gmagick	(Gmagick) The despeckleimage purpose
>destroy(): bool	(Gmagick) The destroy purpose
>drawimage(GmagickDraw $GmagickDraw): Gmagick	(Gmagick) Renders the GmagickDraw object on the current image
>edgeimage(float $radius): Gmagick	(Gmagick) Enhance edges within the image
>embossimage(float $radius, float $sigma): Gmagick	(Gmagick) Returns a grayscale image with a three-dimensional effect
>enhanceimage(): Gmagick	(Gmagick) Improves the quality of a noisy image
>equalizeimage(): Gmagick	(Gmagick) Equalizes the image histogram
>flipimage(): Gmagick	(Gmagick) Creates a vertical mirror image
>flopimage(): Gmagick	(Gmagick) Creates a horizontal mirror image
>frameimage(GmagickPixel $color, int $width, int $height, int $inner_bevel, int $outer_bevel): Gmagick	(Gmagick) Adds a simulated three-dimensional border
>gammaimage(float $gamma): Gmagick	(Gmagick) Gamma-corrects an image
>getcopyright(): string	(Gmagick) Returns the GraphicsMagick API copyright as a string
>getfilename(): string	(Gmagick) The filename associated with an image sequence
>getimagebackgroundcolor(): GmagickPixel	(Gmagick) Returns the image background color
>getimageblueprimary(): array	(Gmagick) Returns the chromaticy blue primary point
>getimagebordercolor(): GmagickPixel	(Gmagick) Returns the image border color
>getimagechanneldepth(int $channel_type): int	(Gmagick) Gets the depth for a particular image channel
>getimagecolors(): int	(Gmagick) Returns the color of the specified colormap index
>getimagecolorspace(): int	(Gmagick) Gets the image colorspace
>getimagecompose(): int	(Gmagick) Returns the composite operator associated with the image
>getimagedelay(): int	(Gmagick) Gets the image delay
>getimagedepth(): int	(Gmagick) Gets the depth of the image
>getimagedispose(): int	(Gmagick) Gets the image disposal method
>getimageextrema(): array	(Gmagick) Gets the extrema for the image
>getimagefilename(): string	(Gmagick) Returns the filename of a particular image in a sequence
>getimageformat(): string	(Gmagick) Returns the format of a particular image in a sequence
>getimagegamma(): float	(Gmagick) Gets the image gamma
>getimagegreenprimary(): array	(Gmagick) Returns the chromaticy green primary point
>getimageheight(): int	(Gmagick) Returns the image height
>getimagehistogram(): array	(Gmagick) Gets the image histogram
>getimageindex(): int	(Gmagick) Gets the index of the current active image
>getimageinterlacescheme(): int	(Gmagick) Gets the image interlace scheme
>getimageiterations(): int	(Gmagick) Gets the image iterations
>getimagematte(): int	(Gmagick) Check if the image has a matte channel
>getimagemattecolor(): GmagickPixel	(Gmagick) Returns the image matte color
>getimageprofile(string $name): string	(Gmagick) Returns the named image profile
>getimageredprimary(): array	(Gmagick) Returns the chromaticity red primary point
>getimagerenderingintent(): int	(Gmagick) Gets the image rendering intent
>getimageresolution(): array	(Gmagick) Gets the image X and Y resolution
>getimagescene(): int	(Gmagick) Gets the image scene
>getimagesignature(): string	(Gmagick) Generates an SHA-256 message digest
>getimagetype(): int	(Gmagick) Gets the potential image type
>getimageunits(): int	(Gmagick) Gets the image units of resolution
>getimagewhitepoint(): array	(Gmagick) Returns the chromaticity white point
>getimagewidth(): int	(Gmagick) Returns the width of the image
>getpackagename(): string	(Gmagick) Returns the GraphicsMagick package name
>getquantumdepth(): array	(Gmagick) Returns the Gmagick quantum depth as a string
>getreleasedate(): string	(Gmagick) Returns the GraphicsMagick release date as a string
>getsamplingfactors(): array	(Gmagick) Gets the horizontal and vertical sampling factor
>getsize(): array	(Gmagick) Returns the size associated with the Gmagick object
>getversion(): array	(Gmagick) Returns the GraphicsMagick API version
>hasnextimage(): mixed	(Gmagick) Checks if the object has more images
>haspreviousimage(): mixed	(Gmagick) Checks if the object has a previous image
>implodeimage(float $radius): mixed	(Gmagick) Creates a new image as a copy
>labelimage(string $label): mixed	(Gmagick) Adds a label to an image
>levelimage(float $blackPoint, float $gamma, float $whitePoint, int $channel = Gmagick::CHANNEL_DEFAULT): mixed	(Gmagick) Adjusts the levels of an image
>magnifyimage(): mixed	(Gmagick) Scales an image proportionally 2x
>mapimage(gmagick $gmagick, bool $dither): Gmagick	(Gmagick) Replaces the colors of an image with the closest color from a reference image
>medianfilterimage(float $radius): void	(Gmagick) Applies a digital filter
>minifyimage(): Gmagick	(Gmagick) Scales an image proportionally to half its size
>modulateimage(float $brightness, float $saturation, float $hue): Gmagick	(Gmagick) Control the brightness, saturation, and hue
>motionblurimage(float $radius, float $sigma, float $angle): Gmagick	(Gmagick) Simulates motion blur
>newimage(int $width, int $height, string $background, string $format = ?): Gmagick	(Gmagick) Creates a new image
>nextimage(): bool	(Gmagick) Moves to the next image
>normalizeimage(int $channel = ?): Gmagick	(Gmagick) Enhances the contrast of a color image
>oilpaintimage(float $radius): Gmagick	(Gmagick) Simulates an oil painting
>previousimage(): bool	(Gmagick) Move to the previous image in the object
>profileimage(string $name, string $profile): Gmagick	(Gmagick) Adds or removes a profile from an image
>quantizeimage(int $numColors, int $colorspace, int $treeDepth, bool $dither, bool $measureError): Gmagick	(Gmagick) Analyzes the colors within a reference image
>quantizeimages(int $numColors, int $colorspace, int $treeDepth, bool $dither, bool $measureError): Gmagick	(Gmagick) The quantizeimages purpose
>queryfontmetrics(GmagickDraw $draw, string $text): array	(Gmagick) Returns an array representing the font metrics
>queryfonts(string $pattern = "*"): array	(Gmagick) Returns the configured fonts
>queryformats(string $pattern = "*"): array	(Gmagick) Returns formats supported by Gmagick
>radialblurimage(float $angle, int $channel = Gmagick::CHANNEL_DEFAULT): Gmagick	(Gmagick) Radial blurs an image
>raiseimage(int $width, int $height, int $x, int $y, bool $raise): Gmagick	(Gmagick) Creates a simulated 3d button-like effect
>read(string $filename): Gmagick	(Gmagick) Reads image from filename
>readimage(string $filename): Gmagick	(Gmagick) Reads image from filename
>readimageblob(string $imageContents, string $filename = ?): Gmagick	(Gmagick) Reads image from a binary string
>readimagefile(resource $fp, string $filename = ?): Gmagick	(Gmagick) The readimagefile purpose
>reducenoiseimage(float $radius): Gmagick	(Gmagick) Smooths the contours of an image
>removeimage(): Gmagick	(Gmagick) Removes an image from the image list
>removeimageprofile(string $name): string	(Gmagick) Removes the named image profile and returns it
>resampleimage(float $xResolution, float $yResolution, int $filter, float $blur): Gmagick	(Gmagick) Resample image to desired resolution
>resizeimage(int $width, int $height, int $filter, float $blur, bool $fit = false): Gmagick	(Gmagick) Scales an image
>rollimage(int $x, int $y): Gmagick	(Gmagick) Offsets an image
>rotateimage(mixed $color, float $degrees): Gmagick	(Gmagick) Rotates an image
>scaleimage(int $width, int $height, bool $fit = false): Gmagick	(Gmagick) Scales the size of an image
>separateimagechannel(int $channel): Gmagick	(Gmagick) Separates a channel from the image
>setCompressionQuality(int $quality): Gmagick	(Gmagick) Sets the object's default compression quality
>setfilename(string $filename): Gmagick	(Gmagick) Sets the filename before you read or write the image
>setimagebackgroundcolor(GmagickPixel $color): Gmagick	(Gmagick) Sets the image background color
>setimageblueprimary(float $x, float $y): Gmagick	(Gmagick) Sets the image chromaticity blue primary point
>setimagebordercolor(GmagickPixel $color): Gmagick	(Gmagick) Sets the image border color
>setimagechanneldepth(int $channel, int $depth): Gmagick	(Gmagick) Sets the depth of a particular image channel
>setimagecolorspace(int $colorspace): Gmagick	(Gmagick) Sets the image colorspace
>setimagecompose(int $composite): Gmagick	(Gmagick) Sets the image composite operator
>setimagedelay(int $delay): Gmagick	(Gmagick) Sets the image delay
>setimagedepth(int $depth): Gmagick	(Gmagick) Sets the image depth
>setimagedispose(int $disposeType): Gmagick	(Gmagick) Sets the image disposal method
>setimagefilename(string $filename): Gmagick	(Gmagick) Sets the filename of a particular image in a sequence
>setimageformat(string $imageFormat): Gmagick	(Gmagick) Sets the format of a particular image
>setimagegamma(float $gamma): Gmagick	(Gmagick) Sets the image gamma
>setimagegreenprimary(float $x, float $y): Gmagick	(Gmagick) Sets the image chromaticity green primary point
>setimageindex(int $index): Gmagick	(Gmagick) Set the iterator to the position in the image list specified with the index parameter
>setimageinterlacescheme(int $interlace): Gmagick	(Gmagick) Sets the interlace scheme of the image
>setimageiterations(int $iterations): Gmagick	(Gmagick) Sets the image iterations
>setimageprofile(string $name, string $profile): Gmagick	(Gmagick) Adds a named profile to the Gmagick object
>setimageredprimary(float $x, float $y): Gmagick	(Gmagick) Sets the image chromaticity red primary point
>setimagerenderingintent(int $rendering_intent): Gmagick	(Gmagick) Sets the image rendering intent
>setimageresolution(float $xResolution, float $yResolution): Gmagick	(Gmagick) Sets the image resolution
>setimagescene(int $scene): Gmagick	(Gmagick) Sets the image scene
>setimagetype(int $imgType): Gmagick	(Gmagick) Sets the image type
>setimageunits(int $resolution): Gmagick	(Gmagick) Sets the image units of resolution
>setimagewhitepoint(float $x, float $y): Gmagick	(Gmagick) Sets the image chromaticity white point
>setsamplingfactors(array $factors): Gmagick	(Gmagick) Sets the image sampling factors
>setsize(int $columns, int $rows): Gmagick	(Gmagick) Sets the size of the Gmagick object
>shearimage(mixed $color, float $xShear, float $yShear): Gmagick	(Gmagick) Creating a parallelogram
>solarizeimage(int $threshold): Gmagick	(Gmagick) Applies a solarizing effect to the image
>spreadimage(float $radius): Gmagick	(Gmagick) Randomly displaces each pixel in a block
>stripimage(): Gmagick	(Gmagick) Strips an image of all profiles and comments
>swirlimage(float $degrees): Gmagick	(Gmagick) Swirls the pixels about the center of the image
>thumbnailimage(int $width, int $height, bool $fit = false): Gmagick	(Gmagick) Changes the size of an image
>trimimage(float $fuzz): Gmagick	(Gmagick) Remove edges from the image
>write()	(Gmagick) Alias of Gmagick::writeimage
>writeimage(string $filename, bool $all_frames = false): Gmagick	(Gmagick) Writes an image to the specified filename
>annotate(float $x, float $y, string $text): GmagickDraw	(GmagickDraw) Draws text on the image
>arc(float $sx, float $sy, float $ex, float $ey, float $sd, float $ed): GmagickDraw	(GmagickDraw) Draws an arc
>bezier(array $coordinate_array): GmagickDraw	(GmagickDraw) Draws a bezier curve
>ellipse(float $ox, float $oy, float $rx, float $ry, float $start, float $end): GmagickDraw	(GmagickDraw) Draws an ellipse on the image
>getfillcolor(): GmagickPixel	(GmagickDraw) Returns the fill color
>getfillopacity(): float	(GmagickDraw) Returns the opacity used when drawing
>getfont(): mixed	(GmagickDraw) Returns the font
>getfontsize(): float	(GmagickDraw) Returns the font pointsize
>getfontstyle(): int	(GmagickDraw) Returns the font style
>getfontweight(): int	(GmagickDraw) Returns the font weight
>getstrokecolor(): GmagickPixel	(GmagickDraw) Returns the color used for stroking object outlines
>getstrokeopacity(): float	(GmagickDraw) Returns the opacity of stroked object outlines
>getstrokewidth(): float	(GmagickDraw) Returns the width of the stroke used to draw object outlines
>gettextdecoration(): int	(GmagickDraw) Returns the text decoration
>gettextencoding(): mixed	(GmagickDraw) Returns the code set used for text annotations
>line(float $sx, float $sy, float $ex, float $ey): GmagickDraw	(GmagickDraw) Draws a line
>point(float $x, float $y): GmagickDraw	(GmagickDraw) Draws a point
>polygon(array $coordinates): GmagickDraw	(GmagickDraw) Draws a polygon
>polyline(array $coordinate_array): GmagickDraw	(GmagickDraw) Draws a polyline
>rectangle(float $x1, float $y1, float $x2, float $y2): GmagickDraw	(GmagickDraw) Draws a rectangle
>rotate(float $degrees): GmagickDraw	(GmagickDraw) Applies the specified rotation to the current coordinate space
>roundrectangle(float $x1, float $y1, float $x2, float $y2, float $rx, float $ry): GmagickDraw	(GmagickDraw) Draws a rounded rectangle
>scale(float $x, float $y): GmagickDraw	(GmagickDraw) Adjusts the scaling factor
>setfillcolor(mixed $color): GmagickDraw	(GmagickDraw) Sets the fill color to be used for drawing filled objects
>setfillopacity(float $fill_opacity): GmagickDraw	(GmagickDraw) The setfillopacity purpose
>setfont(string $font): GmagickDraw	(GmagickDraw) Sets the fully-specified font to use when annotating with text
>setfontsize(float $pointsize): GmagickDraw	(GmagickDraw) Sets the font pointsize to use when annotating with text
>setfontstyle(int $style): GmagickDraw	(GmagickDraw) Sets the font style to use when annotating with text
>setfontweight(int $weight): GmagickDraw	(GmagickDraw) Sets the font weight
>setstrokecolor(mixed $color): GmagickDraw	(GmagickDraw) Sets the color used for stroking object outlines
>setstrokeopacity(float $stroke_opacity): GmagickDraw	(GmagickDraw) Specifies the opacity of stroked object outlines
>setstrokewidth(float $width): GmagickDraw	(GmagickDraw) Sets the width of the stroke used to draw object outlines
>settextdecoration(int $decoration): GmagickDraw	(GmagickDraw) Specifies a decoration
>settextencoding(string $encoding): GmagickDraw	(GmagickDraw) Specifies the text code set
GmagickPixel(string $color = ?)	(new) The GmagickPixel constructor
>getcolor(bool $as_array = false, bool $normalize_array = false): mixed	(GmagickPixel) Returns the color
>getcolorcount(): int	(GmagickPixel) Returns the color count associated with this color
>getcolorvalue(int $color): float	(GmagickPixel) Gets the normalized value of the provided color channel
>setcolor(string $color): GmagickPixel	(GmagickPixel) Sets the color
>setcolorvalue(int $color, float $value): GmagickPixel	(GmagickPixel) Sets the normalized value of one of the channels
GmagickDraw()	(new) 
GmagickException()	(new) GmagickException class
GmagickPixelException()	(new) 
gmp_abs(GMP|int|string $num): GMP	Absolute value
gmp_add(GMP|int|string $num1, GMP|int|string $num2): GMP	Add numbers
gmp_and(GMP|int|string $num1, GMP|int|string $num2): GMP	Bitwise AND
gmp_binomial(GMP|int|string $n, int $k): GMP	Calculates binomial coefficient
gmp_clrbit(GMP $num, int $index): void	Clear bit
gmp_cmp(GMP|int|string $num1, GMP|int|string $num2): int	Compare numbers
gmp_com(GMP|int|string $num): GMP	Calculates one's complement
gmp_div_q(GMP|int|string $num1, GMP|int|string $num2, int $rounding_mode = GMP_ROUND_ZERO): GMP	Divide numbers
gmp_div_qr(GMP|int|string $num1, GMP|int|string $num2, int $rounding_mode = GMP_ROUND_ZERO): array	Divide numbers and get quotient and remainder
gmp_div_r(GMP|int|string $num1, GMP|int|string $num2, int $rounding_mode = GMP_ROUND_ZERO): GMP	Remainder of the division of numbers
gmp_div()	Alias of gmp_div_q
gmp_divexact(GMP|int|string $num1, GMP|int|string $num2): GMP	Exact division of numbers
gmp_export(GMP|int|string $num, int $word_size = 1, int $flags = GMP_MSW_FIRST | GMP_NATIVE_ENDIAN): string	Export to a binary string
gmp_fact(GMP|int|string $num): GMP	Factorial
gmp_gcd(GMP|int|string $num1, GMP|int|string $num2): GMP	Calculate GCD
gmp_gcdext(GMP|int|string $num1, GMP|int|string $num2): array	Calculate GCD and multipliers
gmp_hamdist(GMP|int|string $num1, GMP|int|string $num2): int	Hamming distance
gmp_import(string $data, int $word_size = 1, int $flags = GMP_MSW_FIRST | GMP_NATIVE_ENDIAN): GMP	Import from a binary string
gmp_init(int|string $num, int $base = ?): GMP	Create GMP number
gmp_intval(GMP|int|string $num): int	Convert GMP number to integer
gmp_invert(GMP|int|string $num1, GMP|int|string $num2): GMP|false	Inverse by modulo
gmp_jacobi(GMP|int|string $num1, GMP|int|string $num2): int	Jacobi symbol
gmp_kronecker(GMP|int|string $num1, GMP|int|string $num2): int	Kronecker symbol
gmp_lcm(GMP|int|string $num1, GMP|int|string $num2): GMP	Calculate LCM
gmp_legendre(GMP|int|string $num1, GMP|int|string $num2): int	Legendre symbol
gmp_mod(GMP|int|string $num1, GMP|int|string $num2): GMP	Modulo operation
gmp_mul(GMP|int|string $num1, GMP|int|string $num2): GMP	Multiply numbers
gmp_neg(GMP|int|string $num): GMP	Negate number
gmp_nextprime(GMP|int|string $num): GMP	Find next prime number
gmp_or(GMP|int|string $num1, GMP|int|string $num2): GMP	Bitwise OR
gmp_perfect_power(GMP|int|string $num): bool	Perfect power check
gmp_perfect_square(GMP|int|string $num): bool	Perfect square check
gmp_popcount(GMP|int|string $num): int	Population count
gmp_pow(GMP|int|string $num, int $exponent): GMP	Raise number into power
gmp_powm(GMP|int|string $num, GMP|int|string $exponent, GMP|int|string $modulus): GMP	Raise number into power with modulo
gmp_prob_prime(GMP|int|string $num, int $repetitions = 10): int	Check if number is "probably prime"
gmp_random_bits(int $bits): GMP	Random number
gmp_random_range(GMP|int|string $min, GMP|int|string $max): GMP	Get a uniformly selected integer
gmp_random_seed(GMP|int|string $seed): void	Sets the RNG seed
gmp_random(int $limiter = 20): GMP	Random number
gmp_root(GMP|int|string $num, int $nth): GMP	Take the integer part of nth root
gmp_rootrem(GMP|int|string $num, int $nth): array	Take the integer part and remainder of nth root
gmp_scan0(GMP|int|string $num1, int $start): int	Scan for 0
gmp_scan1(GMP|int|string $num1, int $start): int	Scan for 1
gmp_setbit(GMP $num, int $index, bool $value = true): void	Set bit
gmp_sign(GMP|int|string $num): int	Sign of number
gmp_sqrt(GMP|int|string $num): GMP	Calculate square root
gmp_sqrtrem(GMP|int|string $num): array	Square root with remainder
gmp_strval(GMP|int|string $num, int $base = 10): string	Convert GMP number to string
gmp_sub(GMP|int|string $num1, GMP|int|string $num2): GMP	Subtract numbers
gmp_testbit(GMP|int|string $num, int $index): bool	Tests if a bit is set
gmp_xor(GMP|int|string $num1, GMP|int|string $num2): GMP	Bitwise XOR
GMP(int|string $num = ?, int $base = ?)	(new) Create GMP number
>__serialize(): array	(GMP) Serializes the GMP object
>__unserialize(array $data): void	(GMP) Deserializes the $data parameter into a GMP object
gnupg_adddecryptkey(resource $identifier, string $fingerprint, string $passphrase): bool	Add a key for decryption
gnupg_addencryptkey(resource $identifier, string $fingerprint): bool	Add a key for encryption
gnupg_addsignkey(resource $identifier, string $fingerprint, string $passphrase = ?): bool	Add a key for signing
gnupg_cleardecryptkeys(resource $identifier): bool	Removes all keys which were set for decryption before
gnupg_clearencryptkeys(resource $identifier): bool	Removes all keys which were set for encryption before
gnupg_clearsignkeys(resource $identifier): bool	Removes all keys which were set for signing before
gnupg_decrypt(resource $identifier, string $text): string|false	Decrypts a given text
gnupg_decryptverify(resource $identifier, string $text, string $plaintext): array|false	Decrypts and verifies a given text
gnupg_deletekey(resource $identifier, string $key, bool $allow_secret): bool	Delete a key from the keyring
gnupg_encrypt(resource $identifier, string $plaintext): string|false	Encrypts a given text
gnupg_encryptsign(resource $identifier, string $plaintext): string|false	Encrypts and signs a given text
gnupg_export(resource $identifier, string $fingerprint): string|false	Exports a key
gnupg_getengineinfo(resource $identifier): array	Returns the engine info
gnupg_geterror(resource $identifier): string|false	Returns the errortext, if a function fails
gnupg_geterrorinfo(resource $identifier): array	Returns the error info
gnupg_getprotocol(resource $identifier): int	Returns the currently active protocol for all operations
gnupg_gettrustlist(resource $identifier, string $pattern): array|null	Search the trust items
gnupg_import(resource $identifier, string $keydata): array|false	Imports a key
gnupg_init(array|null $options = null): resource	Initialize a connection
gnupg_keyinfo(resource $identifier, string $pattern): array|false	Returns an array with information about all keys that matches the given pattern
gnupg_listsignatures(resource $identifier, string $keyid): array|null	List key signatures
gnupg_setarmor(resource $identifier, int $armor): bool	Toggle armored output
gnupg_seterrormode(resource $identifier, int $errormode): void	Sets the mode for error_reporting
gnupg_setsignmode(resource $identifier, int $signmode): bool	Sets the mode for signing
gnupg_sign(resource $identifier, string $plaintext): string|false	Signs a given text
gnupg_verify(resource $identifier, string $signed_text, string $signature, string $plaintext = ?): array|false	Verifies a signed text
hash_algos(): array	Return a list of registered hashing algorithms
hash_copy(HashContext $context): HashContext	Copy hashing context
hash_equals(string $known_string, string $user_string): bool	Timing attack safe string comparison
hash_file(string $algo, string $filename, bool $binary = false, array $options = []): string|false	Generate a hash value using the contents of a given file
hash_final(HashContext $context, bool $binary = false): string	Finalize an incremental hash and return resulting digest
hash_hkdf(string $algo, string $key, int $length = ?, string $info = "", string $salt = ""): string	Generate a HKDF key derivation of a supplied key input
hash_hmac_algos(): array	Return a list of registered hashing algorithms suitable for hash_hmac
hash_hmac_file(string $algo, string $filename, string $key, bool $binary = false): string|false	Generate a keyed hash value using the HMAC method and the contents of a given file
hash_hmac(string $algo, string $data, string $key, bool $binary = false): string	Generate a keyed hash value using the HMAC method
hash_init(string $algo, int $flags = ?, string $key = "", array $options = []): HashContext	Initialize an incremental hashing context
hash_pbkdf2(string $algo, string $password, string $salt, int $iterations, int $length = ?, bool $binary = false, array $options = []): string	Generate a PBKDF2 key derivation of a supplied password
hash_update_file(HashContext $context, string $filename, resource|null $stream_context = null): bool	Pump data into an active hashing context from a file
hash_update_stream(HashContext $context, resource $stream, int $length = -1): int	Pump data into an active hashing context from an open stream
hash_update(HashContext $context, string $data): true	Pump data into an active hashing context
hash(string $algo, string $data, bool $binary = false, array $options = []): string	Generate a hash value (message digest)
HashContext()	(new) Private constructor to disallow direct instantiation
>__serialize(): array	(HashContext) Serializes the HashContext object
>__unserialize(array $data): void	(HashContext) Deserializes the $data parameter into a HashContext object
HRTime\PerformanceCounter::getFrequency(): int	Timer frequency in ticks per second
HRTime\PerformanceCounter::getTicks(): int	Current ticks from the system
HRTime\PerformanceCounter::getTicksSince(int $start): int	Ticks elapsed since the given value
>getElapsedTicks(): int	(HRTime\StopWatch) Get elapsed ticks for all intervals
>getElapsedTime(int $unit = ?): float	(HRTime\StopWatch) Get elapsed time for all intervals
>getLastElapsedTicks(): int	(HRTime\StopWatch) Get elapsed ticks for the last interval
>getLastElapsedTime(int $unit = ?): float	(HRTime\StopWatch) Get elapsed time for the last interval
>isRunning(): bool	(HRTime\StopWatch) Whether the measurement is running
>start(): void	(HRTime\StopWatch) Start time measurement
>stop(): void	(HRTime\StopWatch) Stop time measurement
HRTime\PerformanceCounter()	(new) 
HRTime\StopWatch()	(new) 
HRTime\Unit()	(new) 
fbird_add_user()	Alias of ibase_add_user
fbird_affected_rows()	Alias of ibase_affected_rows
fbird_backup()	Alias of ibase_backup
fbird_blob_add()	Alias of ibase_blob_add
fbird_blob_cancel(resource $blob_handle): bool	Cancel creating blob
fbird_blob_close()	Alias of ibase_blob_close
fbird_blob_create()	Alias of ibase_blob_create
fbird_blob_echo()	Alias of ibase_blob_echo
fbird_blob_get()	Alias of ibase_blob_get
fbird_blob_import()	Alias of ibase_blob_import
fbird_blob_info()	Alias of ibase_blob_info
fbird_blob_open()	Alias of ibase_blob_open
fbird_close()	Alias of ibase_close
fbird_commit_ret()	Alias of ibase_commit_ret
fbird_commit()	Alias of ibase_commit
fbird_connect()	Alias of ibase_connect
fbird_db_info()	Alias of ibase_db_info
fbird_delete_user()	Alias of ibase_delete_user
fbird_drop_db()	Alias of ibase_drop_db
fbird_errcode()	Alias of ibase_errcode
fbird_errmsg()	Alias of ibase_errmsg
fbird_execute()	Alias of ibase_execute
fbird_fetch_assoc()	Alias of ibase_fetch_assoc
fbird_fetch_object()	Alias of ibase_fetch_object
fbird_fetch_row()	Alias of ibase_fetch_row
fbird_field_info()	Alias of ibase_field_info
fbird_free_event_handler()	Alias of ibase_free_event_handler
fbird_free_query()	Alias of ibase_free_query
fbird_free_result()	Alias of ibase_free_result
fbird_gen_id()	Alias of ibase_gen_id
fbird_maintain_db()	Alias of ibase_maintain_db
fbird_modify_user()	Alias of ibase_modify_user
fbird_name_result()	Alias of ibase_name_result
fbird_num_fields()	Alias of ibase_num_fields
fbird_num_params()	Alias of ibase_num_params
fbird_param_info()	Alias of ibase_param_info
fbird_pconnect()	Alias of ibase_pconnect
fbird_prepare()	Alias of ibase_prepare
fbird_query()	Alias of ibase_query
fbird_restore()	Alias of ibase_restore
fbird_rollback_ret()	Alias of ibase_rollback_ret
fbird_rollback()	Alias of ibase_rollback
fbird_server_info()	Alias of ibase_server_info
fbird_service_attach()	Alias of ibase_service_attach
fbird_service_detach()	Alias of ibase_service_detach
fbird_set_event_handler()	Alias of ibase_set_event_handler
fbird_trans()	Alias of ibase_trans
fbird_wait_event()	Alias of ibase_wait_event
ibase_add_user(resource $service_handle, string $user_name, string $password, string $first_name = ?, string $middle_name = ?, string $last_name = ?): bool	Add a user to a security database
ibase_affected_rows(resource $link_identifier = ?): int	Return the number of rows that were affected by the previous query
ibase_backup(resource $service_handle, string $source_db, string $dest_file, int $options = ?, bool $verbose = false): mixed	Initiates a backup task in the service manager and returns immediately
ibase_blob_add(resource $blob_handle, string $data): void	Add data into a newly created blob
ibase_blob_cancel(resource $blob_handle): bool	Cancel creating blob
ibase_blob_close(resource $blob_handle): mixed	Close blob
ibase_blob_create(resource $link_identifier = null): resource|false	Create a new blob for adding data
ibase_blob_echo(string $blob_id): bool	Output blob contents to browser
ibase_blob_echo(resource $link_identifier, string $blob_id): bool	Output blob contents to browser
ibase_blob_get(resource $blob_handle, int $len): string	Get len bytes data from open blob
ibase_blob_import(resource $link_identifier, resource $file_handle): string	Create blob, copy file in it, and close it
ibase_blob_import(resource $file_handle): string	Create blob, copy file in it, and close it
ibase_blob_info(resource $link_identifier, string $blob_id): array	Return blob length and other useful info
ibase_blob_info(string $blob_id): array	Return blob length and other useful info
ibase_blob_open(resource $link_identifier, string $blob_id): resource|false	Open blob for retrieving data parts
ibase_blob_open(string $blob_id): resource|false	Open blob for retrieving data parts
ibase_close(resource $connection_id = null): bool	Close a connection to an InterBase database
ibase_commit_ret(resource $link_or_trans_identifier = null): bool	Commit a transaction without closing it
ibase_commit(resource $link_or_trans_identifier = null): bool	Commit a transaction
ibase_connect(string $database = ?, string $username = ?, string $password = ?, string $charset = ?, int $buffers = ?, int $dialect = ?, string $role = ?, int $sync = ?): resource	Open a connection to a database
ibase_db_info(resource $service_handle, string $db, int $action, int $argument = ?): string	Request statistics about a database
ibase_delete_user(resource $service_handle, string $user_name): bool	Delete a user from a security database
ibase_drop_db(resource $connection = null): bool	Drops a database
ibase_errcode(): int	Return an error code
ibase_errmsg(): string	Return error messages
ibase_execute(resource $query, mixed ...$values): resource	Execute a previously prepared query
ibase_fetch_assoc(resource $result, int $fetch_flag = ?): array	Fetch a result row from a query as an associative array
ibase_fetch_object(resource $result_id, int $fetch_flag = ?): object	Get an object from a InterBase database
ibase_fetch_row(resource $result_identifier, int $fetch_flag = ?): array	Fetch a row from an InterBase database
ibase_field_info(resource $result, int $field_number): array	Get information about a field
ibase_free_event_handler(resource $event): bool	Cancels a registered event handler
ibase_free_query(resource $query): bool	Free memory allocated by a prepared query
ibase_free_result(resource $result_identifier): bool	Free a result set
ibase_gen_id(string $generator, int $increment = 1, resource $link_identifier = null): mixed	Increments the named generator and returns its new value
ibase_maintain_db(resource $service_handle, string $db, int $action, int $argument = ?): bool	Execute a maintenance command on the database server
ibase_modify_user(resource $service_handle, string $user_name, string $password, string $first_name = ?, string $middle_name = ?, string $last_name = ?): bool	Modify a user to a security database
ibase_name_result(resource $result, string $name): bool	Assigns a name to a result set
ibase_num_fields(resource $result_id): int	Get the number of fields in a result set
ibase_num_params(resource $query): int	Return the number of parameters in a prepared query
ibase_param_info(resource $query, int $param_number): array	Return information about a parameter in a prepared query
ibase_pconnect(string $database = ?, string $username = ?, string $password = ?, string $charset = ?, int $buffers = ?, int $dialect = ?, string $role = ?, int $sync = ?): resource	Open a persistent connection to an InterBase database
ibase_prepare(string $query): resource	Prepare a query for later binding of parameter placeholders and execution
ibase_prepare(resource $link_identifier, string $query): resource	Prepare a query for later binding of parameter placeholders and execution
ibase_prepare(resource $link_identifier, string $trans, string $query): resource	Prepare a query for later binding of parameter placeholders and execution
ibase_query(resource $link_identifier = ?, string $query, int $bind_args = ?): resource	Execute a query on an InterBase database
ibase_restore(resource $service_handle, string $source_file, string $dest_db, int $options = ?, bool $verbose = false): mixed	Initiates a restore task in the service manager and returns immediately
ibase_rollback_ret(resource $link_or_trans_identifier = null): bool	Roll back a transaction without closing it
ibase_rollback(resource $link_or_trans_identifier = null): bool	Roll back a transaction
ibase_server_info(resource $service_handle, int $action): string	Request information about a database server
ibase_service_attach(string $host, string $dba_username, string $dba_password): resource|false	Connect to the service manager
ibase_service_detach(resource $service_handle): bool	Disconnect from the service manager
ibase_set_event_handler(callable $event_handler, string $event_name, string ...$even_names): resource	Register a callback function to be called when events are posted
ibase_set_event_handler(resource $connection, callable $event_handler, string $event_name, string ...$event_names): resource	Register a callback function to be called when events are posted
ibase_trans(int $trans_args = ?, resource $link_identifier = ?): resource	Begin a transaction
ibase_trans(resource $link_identifier = ?, int $trans_args = ?): resource	Begin a transaction
ibase_wait_event(string $event_name, string ...$event_names): string	Wait for an event to be posted by the database
ibase_wait_event(resource $connection, string $event_name, string ...$event_names): string	Wait for an event to be posted by the database
db2_autocommit(resource $connection, int $value = ?): int|bool	Returns or sets the AUTOCOMMIT state for a database connection
db2_bind_param(resource $stmt, int $parameter_number, string $variable_name, int $parameter_type = DB2_PARAM_IN, int $data_type = ?, int $precision = -1, int $scale = ?): bool	Binds a PHP variable to an SQL statement parameter
db2_client_info(resource $connection): stdClass|false	Returns an object with properties that describe the DB2 database client
db2_close(resource $connection): bool	Closes a database connection
db2_column_privileges(resource $connection, string|null $qualifier = null, string|null $schema = null, string|null $table_name = null, string|null $column_name = null): resource	Returns a result set listing the columns and associated privileges for a table
db2_columns(resource $connection, string|null $qualifier = null, string|null $schema = null, string|null $table_name = null, string|null $column_name = null): resource	Returns a result set listing the columns and associated metadata for a table
db2_commit(resource $connection): bool	Commits a transaction
db2_conn_error(resource|null $connection = null): string	Returns a string containing the SQLSTATE returned by the last connection attempt
db2_conn_errormsg(resource|null $connection = null): string	Returns the last connection error message and SQLCODE value
db2_connect(string $database, string|null $username, string|null $password, array $options = []): resource|false	Returns a connection to a database
db2_cursor_type(resource $stmt): int	Returns the cursor type used by a statement resource
db2_escape_string(string $string_literal): string	Used to escape certain characters
db2_exec(resource $connection, string $statement, array $options = []): resource|false	Executes an SQL statement directly
db2_execute(resource $stmt, array $parameters = []): bool	Executes a prepared SQL statement
db2_fetch_array(resource $stmt, int $row_number = -1): array|false	Returns an array, indexed by column position, representing a row in a result set
db2_fetch_assoc(resource $stmt, int $row_number = -1): array|false	Returns an array, indexed by column name, representing a row in a result set
db2_fetch_both(resource $stmt, int $row_number = -1): array|false	Returns an array, indexed by both column name and position, representing a row in a result set
db2_fetch_object(resource $stmt, int $row_number = -1): stdClass|false	Returns an object with properties representing columns in the fetched row
db2_fetch_row(resource $stmt, int $row_number = -1): bool	Sets the result set pointer to the next row or requested row
db2_field_display_size(resource $stmt, int|string $column): int|false	Returns the maximum number of bytes required to display a column
db2_field_name(resource $stmt, int|string $column): string|false	Returns the name of the column in the result set
db2_field_num(resource $stmt, int|string $column): int|false	Returns the position of the named column in a result set
db2_field_precision(resource $stmt, int|string $column): int|false	Returns the precision of the indicated column in a result set
db2_field_scale(resource $stmt, int|string $column): int|false	Returns the scale of the indicated column in a result set
db2_field_type(resource $stmt, int|string $column): string|false	Returns the data type of the indicated column in a result set
db2_field_width(resource $stmt, int|string $column): int|false	Returns the width of the current value of the indicated column in a result set
db2_foreign_keys(resource $connection, string|null $qualifier, string|null $schema, string $table_name): resource	Returns a result set listing the foreign keys for a table
db2_free_result(resource $stmt): bool	Frees resources associated with a result set
db2_free_stmt(resource $stmt): bool	Frees resources associated with the indicated statement resource
db2_get_option(resource $resource, string $option): string|false	Retrieves an option value for a statement resource or a connection resource
db2_last_insert_id(resource $resource): string|null	Returns the auto generated ID of the last insert query that successfully executed on this connection
db2_lob_read(resource $stmt, int $colnum, int $length): string|false	Gets a user defined size of LOB files with each invocation
db2_next_result(resource $stmt): resource|false	Requests the next result set from a stored procedure
db2_num_fields(resource $stmt): int|false	Returns the number of fields contained in a result set
db2_num_rows(resource $stmt): int|false	Returns the number of rows affected by an SQL statement
db2_pclose(resource $connection): bool	Closes a persistent database connection
db2_pconnect(string $database, string|null $username, string|null $password, array $options = []): resource|false	Returns a persistent connection to a database
db2_prepare(resource $connection, string $statement, array $options = []): resource|false	Prepares an SQL statement to be executed
db2_primary_keys(resource $connection, string|null $qualifier, string|null $schema, string $table_name): resource	Returns a result set listing primary keys for a table
db2_procedure_columns(resource $connection, string|null $qualifier, string $schema, string $procedure, string|null $parameter): resource	Returns a result set listing stored procedure parameters
db2_procedures(resource $connection, string|null $qualifier, string $schema, string $procedure): resource	Returns a result set listing the stored procedures registered in a database
db2_result(resource $stmt, int|string $column): mixed|null	Returns a single column from a row in the result set
db2_rollback(resource $connection): bool	Rolls back a transaction
db2_server_info(resource $connection): stdClass|false	Returns an object with properties that describe the DB2 database server
db2_set_option(resource $resource, array $options, int $type): bool	Set options for connection or statement resources
db2_special_columns(resource $connection, string|null $qualifier, string $schema, string $table_name, int $scope): resource	Returns a result set listing the unique row identifier columns for a table
db2_statistics(resource $connection, string|null $qualifier, string|null $schema, string $table_name, bool $unique): resource	Returns a result set listing the index and statistics for a table
db2_stmt_error(resource|null $stmt = null): string	Returns a string containing the SQLSTATE returned by an SQL statement
db2_stmt_errormsg(resource|null $stmt = null): string	Returns a string containing the last SQL statement error message
db2_table_privileges(resource $connection, string|null $qualifier = null, string|null $schema = null, string|null $table_name = null): resource	Returns a result set listing the tables and associated privileges in a database
db2_tables(resource $connection, string|null $qualifier = null, string|null $schema = null, string|null $table_name = null, string|null $table_type = null): resource	Returns a result set listing the tables and associated metadata in a database
iconv_get_encoding(string $type = "all"): array|string|false	Retrieve internal configuration variables of iconv extension
iconv_mime_decode_headers(string $headers, int $mode = ?, string|null $encoding = null): array|false	Decodes multiple MIME header fields at once
iconv_mime_decode(string $string, int $mode = ?, string|null $encoding = null): string|false	Decodes a MIME header field
iconv_mime_encode(string $field_name, string $field_value, array $options = []): string|false	Composes a MIME header field
iconv_set_encoding(string $type, string $encoding): bool	Set current setting for character encoding conversion
iconv_strlen(string $string, string|null $encoding = null): int|false	Returns the character count of string
iconv_strpos(string $haystack, string $needle, int $offset = ?, string|null $encoding = null): int|false	Finds position of first occurrence of a needle within a haystack
iconv_strrpos(string $haystack, string $needle, string|null $encoding = null): int|false	Finds the last occurrence of a needle within a haystack
iconv_substr(string $string, int $offset, int|null $length = null, string|null $encoding = null): string|false	Cut out part of a string
iconv(string $from_encoding, string $to_encoding, string $string): string|false	Convert a string from one character encoding to another
ob_iconv_handler(string $contents, int $status): string	Convert character encoding as output buffer handler
igbinary_serialize(mixed $value): string|false	Generates a compact, storable binary representation of a value
igbinary_unserialize(string $str): mixed	Creates a PHP value from a stored representation from igbinary_serialize
gd_info(): array	Retrieve information about the currently installed GD library
getimagesize(string $filename, array $image_info = null): array|false	Get the size of an image
getimagesizefromstring(string $string, array $image_info = null): array|false	Get the size of an image from a string
image_type_to_extension(int $image_type, bool $include_dot = true): string|false	Get file extension for image type
image_type_to_mime_type(int $image_type): string	Get Mime-Type for image-type returned by getimagesize, exif_read_data, exif_thumbnail, exif_imagetype
image2wbmp(resource $image, string $filename = ?, int $foreground = ?): bool	gd.image.output
imageaffine(GdImage $image, array $affine, array|null $clip = null): GdImage|false	Return an image containing the affine transformed src image, using an optional clipping area
imageaffinematrixconcat(array $matrix1, array $matrix2): array|false	Concatenate two affine transformation matrices
imageaffinematrixget(int $type, array|float $options): array|false	Get an affine transformation matrix
imagealphablending(GdImage $image, bool $enable): bool	Set the blending mode for an image
imageantialias(GdImage $image, bool $enable): bool	Should antialias functions be used or not
imagearc(GdImage $image, int $center_x, int $center_y, int $width, int $height, int $start_angle, int $end_angle, int $color): bool	Draws an arc
imageavif(GdImage $image, resource|string|null $file = null, int $quality = -1, int $speed = -1): bool	gd.image.output
imagebmp(GdImage $image, resource|string|null $file = null, bool $compressed = true): bool	Output a BMP image to browser or file
imagechar(GdImage $image, GdFont|int $font, int $x, int $y, string $char, int $color): bool	Draw a character horizontally
imagecharup(GdImage $image, GdFont|int $font, int $x, int $y, string $char, int $color): bool	Draw a character vertically
imagecolorallocate(GdImage $image, int $red, int $green, int $blue): int|false	Allocate a color for an image
imagecolorallocatealpha(GdImage $image, int $red, int $green, int $blue, int $alpha): int|false	Allocate a color for an image
imagecolorat(GdImage $image, int $x, int $y): int|false	Get the index of the color of a pixel
imagecolorclosest(GdImage $image, int $red, int $green, int $blue): int	Get the index of the closest color to the specified color
imagecolorclosestalpha(GdImage $image, int $red, int $green, int $blue, int $alpha): int	Get the index of the closest color to the specified color + alpha
imagecolorclosesthwb(GdImage $image, int $red, int $green, int $blue): int	Get the index of the color which has the hue, white and blackness
imagecolordeallocate(GdImage $image, int $color): bool	De-allocate a color for an image
imagecolorexact(GdImage $image, int $red, int $green, int $blue): int	Get the index of the specified color
imagecolorexactalpha(GdImage $image, int $red, int $green, int $blue, int $alpha): int	Get the index of the specified color + alpha
imagecolormatch(GdImage $image1, GdImage $image2): bool	Makes the colors of the palette version of an image more closely match the true color version
imagecolorresolve(GdImage $image, int $red, int $green, int $blue): int	Get the index of the specified color or its closest possible alternative
imagecolorresolvealpha(GdImage $image, int $red, int $green, int $blue, int $alpha): int	Get the index of the specified color + alpha or its closest possible alternative
imagecolorset(GdImage $image, int $color, int $red, int $green, int $blue, int $alpha = ?): false|null	Set the color for the specified palette index
imagecolorsforindex(GdImage $image, int $color): array	Get the colors for an index
imagecolorstotal(GdImage $image): int	Find out the number of colors in an image's palette
imagecolortransparent(GdImage $image, int|null $color = null): int	Define a color as transparent
imageconvolution(GdImage $image, array $matrix, float $divisor, float $offset): bool	Apply a 3x3 convolution matrix, using coefficient and offset
imagecopy(GdImage $dst_image, GdImage $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_width, int $src_height): bool	Copy part of an image
imagecopymerge(GdImage $dst_image, GdImage $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_width, int $src_height, int $pct): bool	Copy and merge part of an image
imagecopymergegray(GdImage $dst_image, GdImage $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_width, int $src_height, int $pct): bool	Copy and merge part of an image with gray scale
imagecopyresampled(GdImage $dst_image, GdImage $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $dst_width, int $dst_height, int $src_width, int $src_height): bool	Copy and resize part of an image with resampling
imagecopyresized(GdImage $dst_image, GdImage $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $dst_width, int $dst_height, int $src_width, int $src_height): bool	Copy and resize part of an image
imagecreate(int $width, int $height): GdImage|false	Create a new palette based image
imagecreatefromavif(string $filename): GdImage|false	gd.image.new
imagecreatefrombmp(string $filename): GdImage|false	gd.image.new
imagecreatefromgd(string $filename): GdImage|false	Create a new image from GD file or URL
imagecreatefromgd2(string $filename): GdImage|false	Create a new image from GD2 file or URL
imagecreatefromgd2part(string $filename, int $x, int $y, int $width, int $height): GdImage|false	Create a new image from a given part of GD2 file or URL
imagecreatefromgif(string $filename): GdImage|false	gd.image.new
imagecreatefromjpeg(string $filename): GdImage|false	gd.image.new
imagecreatefrompng(string $filename): GdImage|false	gd.image.new
imagecreatefromstring(string $data): GdImage|false	Create a new image from the image stream in the string
imagecreatefromtga(string $filename): GdImage|false	gd.image.new
imagecreatefromwbmp(string $filename): GdImage|false	gd.image.new
imagecreatefromwebp(string $filename): GdImage|false	gd.image.new
imagecreatefromxbm(string $filename): GdImage|false	gd.image.new
imagecreatefromxpm(string $filename): GdImage|false	gd.image.new
imagecreatetruecolor(int $width, int $height): GdImage|false	Create a new true color image
imagecrop(GdImage $image, array $rectangle): GdImage|false	Crop an image to the given rectangle
imagecropauto(GdImage $image, int $mode = IMG_CROP_DEFAULT, float $threshold = 0.5, int $color = -1): GdImage|false	Crop an image automatically using one of the available modes
imagedashedline(GdImage $image, int $x1, int $y1, int $x2, int $y2, int $color): bool	Draw a dashed line
imagedestroy(GdImage $image): bool	Destroy an image
imageellipse(GdImage $image, int $center_x, int $center_y, int $width, int $height, int $color): bool	Draw an ellipse
imagefill(GdImage $image, int $x, int $y, int $color): bool	Flood fill
imagefilledarc(GdImage $image, int $center_x, int $center_y, int $width, int $height, int $start_angle, int $end_angle, int $color, int $style): bool	Draw a partial arc and fill it
imagefilledellipse(GdImage $image, int $center_x, int $center_y, int $width, int $height, int $color): bool	Draw a filled ellipse
imagefilledpolygon(GdImage $image, array $points, int $color): bool	Draw a filled polygon
imagefilledpolygon(GdImage $image, array $points, int $num_points, int $color): bool	Draw a filled polygon
imagefilledrectangle(GdImage $image, int $x1, int $y1, int $x2, int $y2, int $color): bool	Draw a filled rectangle
imagefilltoborder(GdImage $image, int $x, int $y, int $border_color, int $color): bool	Flood fill to specific color
imagefilter(GdImage $image, int $filter, array|int|float|bool ...$args): bool	Applies a filter to an image
imageflip(GdImage $image, int $mode): bool	Flips an image using a given mode
imagefontheight(GdFont|int $font): int	Get font height
imagefontwidth(GdFont|int $font): int	Get font width
imageftbbox(float $size, float $angle, string $font_filename, string $string, array $options = []): array|false	Give the bounding box of a text using fonts via freetype2
imagefttext(GdImage $image, float $size, float $angle, int $x, int $y, int $color, string $font_filename, string $text, array $options = []): array|false	Write text to the image using fonts using FreeType 2
imagegammacorrect(GdImage $image, float $input_gamma, float $output_gamma): bool	Apply a gamma correction to a GD image
imagegd(GdImage $image, string|null $file = null): bool	Output GD image to browser or file
imagegd2(GdImage $image, string|null $file = null, int $chunk_size = 128, int $mode = IMG_GD2_RAW): bool	Output GD2 image to browser or file
imagegetclip(GdImage $image): array	Get the clipping rectangle
imagegetinterpolation(GdImage $image): int	Get the interpolation method
imagegif(GdImage $image, resource|string|null $file = null): bool	gd.image.output
imagegrabscreen(): GdImage|false	Captures the whole screen
imagegrabwindow(int $handle, bool $client_area = false): GdImage|false	Captures a window
imageinterlace(GdImage $image, bool|null $enable = null): bool	Enable or disable interlace
imageistruecolor(GdImage $image): bool	Finds whether an image is a truecolor image
imagejpeg(GdImage $image, resource|string|null $file = null, int $quality = -1): bool	gd.image.output
imagelayereffect(GdImage $image, int $effect): bool	Set the alpha blending flag to use layering effects
imageline(GdImage $image, int $x1, int $y1, int $x2, int $y2, int $color): bool	Draw a line
imageloadfont(string $filename): GdFont|false	Load a new font
imageopenpolygon(GdImage $image, array $points, int $color): bool	Draws an open polygon
imageopenpolygon(GdImage $image, array $points, int $num_points, int $color): bool	Draws an open polygon
imagepalettecopy(GdImage $dst, GdImage $src): void	Copy the palette from one image to another
imagepalettetotruecolor(GdImage $image): bool	Converts a palette based image to true color
imagepng(GdImage $image, resource|string|null $file = null, int $quality = -1, int $filters = -1): bool	Output a PNG image to either the browser or a file
imagepolygon(GdImage $image, array $points, int $color): bool	Draws a polygon
imagepolygon(GdImage $image, array $points, int $num_points, int $color): bool	Draws a polygon
imagerectangle(GdImage $image, int $x1, int $y1, int $x2, int $y2, int $color): bool	Draw a rectangle
imageresolution(GdImage $image, int|null $resolution_x = null, int|null $resolution_y = null): array|bool	Get or set the resolution of the image
imagerotate(GdImage $image, float $angle, int $background_color): GdImage|false	Rotate an image with a given angle
imagesavealpha(GdImage $image, bool $enable): bool	Whether to retain full alpha channel information when saving images
imagescale(GdImage $image, int $width, int $height = -1, int $mode = IMG_BILINEAR_FIXED): GdImage|false	Scale an image using the given new width and height
imagesetbrush(GdImage $image, GdImage $brush): bool	Set the brush image for line drawing
imagesetclip(GdImage $image, int $x1, int $y1, int $x2, int $y2): bool	Set the clipping rectangle
imagesetinterpolation(GdImage $image, int $method = IMG_BILINEAR_FIXED): bool	Set the interpolation method
imagesetpixel(GdImage $image, int $x, int $y, int $color): bool	Set a single pixel
imagesetstyle(GdImage $image, array $style): bool	Set the style for line drawing
imagesetthickness(GdImage $image, int $thickness): bool	Set the thickness for line drawing
imagesettile(GdImage $image, GdImage $tile): bool	Set the tile image for filling
imagestring(GdImage $image, GdFont|int $font, int $x, int $y, string $string, int $color): bool	Draw a string horizontally
imagestringup(GdImage $image, GdFont|int $font, int $x, int $y, string $string, int $color): bool	Draw a string vertically
imagesx(GdImage $image): int	Get image width
imagesy(GdImage $image): int	Get image height
imagetruecolortopalette(GdImage $image, bool $dither, int $num_colors): bool	Convert a true color image to a palette image
imagettfbbox(float $size, float $angle, string $font_filename, string $string, array $options = []): array|false	Give the bounding box of a text using TrueType fonts
imagettftext(GdImage $image, float $size, float $angle, int $x, int $y, int $color, string $font_filename, string $text, array $options = []): array|false	Write text to the image using TrueType fonts
imagetypes(): int	Return the image types supported by this PHP build
imagewbmp(GdImage $image, resource|string|null $file = null, int|null $foreground_color = null): bool	gd.image.output
imagewebp(GdImage $image, resource|string|null $file = null, int $quality = -1): bool	Output a WebP image to browser or file
imagexbm(GdImage $image, string|null $filename, int|null $foreground_color = null): bool	Output an XBM image to browser or file
iptcembed(string $iptc_data, string $filename, int $spool = ?): string|bool	Embeds binary IPTC data into a JPEG image
iptcparse(string $iptc_block): array|false	Parse a binary IPTC block into single tags
jpeg2wbmp(string $jpegname, string $wbmpname, int $dest_height, int $dest_width, int $threshold): bool	Convert JPEG image file to WBMP image file
png2wbmp(string $pngname, string $wbmpname, int $dest_height, int $dest_width, int $threshold): bool	Convert PNG image file to WBMP image file
GdFont()	(new) A fully opaque class which replaces gd font resources as of PHP 8
GdImage()	(new) A fully opaque class which replaces gd resources as of PHP 8
>adaptiveBlurImage(float $radius, float $sigma, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Adds adaptive blur filter to image
>adaptiveResizeImage(int $columns, int $rows, bool $bestfit = false, bool $legacy = false): bool	(Imagick) Adaptively resize image with data dependent triangulation
>adaptiveSharpenImage(float $radius, float $sigma, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Adaptively sharpen the image
>adaptiveThresholdImage(int $width, int $height, int $offset): bool	(Imagick) Selects a threshold for each pixel based on a range of intensity
>addImage(Imagick $source): bool	(Imagick) Adds new image to Imagick object image list
>addNoiseImage(int $noise_type, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Adds random noise to the image
>affineTransformImage(ImagickDraw $matrix): bool	(Imagick) Transforms an image
>animateImages(string $x_server): bool	(Imagick) Animates an image or images
>annotateImage(ImagickDraw $draw_settings, float $x, float $y, float $angle, string $text): bool	(Imagick) Annotates an image with text
>appendImages(bool $stack): Imagick	(Imagick) Append a set of images
>autoLevelImage(int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Adjusts the levels of a particular image channel
>averageImages(): Imagick	(Imagick) Average a set of images
>blackThresholdImage(mixed $threshold): bool	(Imagick) Forces all pixels below the threshold into black
>blueShiftImage(float $factor = 1.5): bool	(Imagick) Mutes the colors of the image
>blurImage(float $radius, float $sigma, int $channel = ?): bool	(Imagick) Adds blur filter to image
>borderImage(mixed $bordercolor, int $width, int $height): bool	(Imagick) Surrounds the image with a border
>brightnessContrastImage(float $brightness, float $contrast, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Change the brightness and/or contrast of an image
>charcoalImage(float $radius, float $sigma): bool	(Imagick) Simulates a charcoal drawing
>chopImage(int $width, int $height, int $x, int $y): bool	(Imagick) Removes a region of an image and trims
>clampImage(int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Restricts the color range from 0 to the quantum depth.
>clear(): bool	(Imagick) Clears all resources associated to Imagick object
>clipImage(): bool	(Imagick) Clips along the first path from the 8BIM profile
>clipImagePath(string $pathname, string $inside): void	(Imagick) Clips along the named paths from the 8BIM profile, if present
>clipPathImage(string $pathname, bool $inside): bool	(Imagick) Clips along the named paths from the 8BIM profile
>clone(): Imagick	(Imagick) Makes an exact copy of the Imagick object
>clutImage(Imagick $lookup_table, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Replaces colors in the image
>coalesceImages(): Imagick	(Imagick) Composites a set of images
>colorFloodfillImage(mixed $fill, float $fuzz, mixed $bordercolor, int $x, int $y): bool	(Imagick) Changes the color value of any pixel that matches target
>colorizeImage(mixed $colorize, mixed $opacity, bool $legacy = false): bool	(Imagick) Blends the fill color with the image
>colorMatrixImage(array $color_matrix): bool	(Imagick) Apply color transformation to an image
>combineImages(int $channelType): Imagick	(Imagick) Combines one or more images into a single image
>commentImage(string $comment): bool	(Imagick) Adds a comment to your image
>compareImageChannels(Imagick $image, int $channelType, int $metricType): array	(Imagick) Returns the difference in one or more images
>compareImageLayers(int $method): Imagick	(Imagick) Returns the maximum bounding region between images
>compareImages(Imagick $compare, int $metric): array	(Imagick) Compares an image to a reconstructed image
>compositeImage(Imagick $composite_object, int $composite, int $x, int $y, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Composite one image onto another
Imagick(mixed $files = ?)	(new) The Imagick constructor
>contrastImage(bool $sharpen): bool	(Imagick) Change the contrast of the image
>contrastStretchImage(float $black_point, float $white_point, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Enhances the contrast of a color image
>convolveImage(array $kernel, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Applies a custom convolution kernel to the image
>count(int $mode = ?): int	(Imagick) Get the number of images
>cropImage(int $width, int $height, int $x, int $y): bool	(Imagick) Extracts a region of the image
>cropThumbnailImage(int $width, int $height, bool $legacy = false): bool	(Imagick) Creates a crop thumbnail
>current(): Imagick	(Imagick) Returns a reference to the current Imagick object
>cycleColormapImage(int $displace): bool	(Imagick) Displaces an image's colormap
>decipherImage(string $passphrase): bool	(Imagick) Deciphers an image
>deconstructImages(): Imagick	(Imagick) Returns certain pixel differences between images
>deleteImageArtifact(string $artifact): bool	(Imagick) Delete image artifact
>deleteImageProperty(string $name): bool	(Imagick) Deletes an image property
>deskewImage(float $threshold): bool	(Imagick) Removes skew from the image
>despeckleImage(): bool	(Imagick) Reduces the speckle noise in an image
>destroy(): bool	(Imagick) Destroys the Imagick object
>displayImage(string $servername): bool	(Imagick) Displays an image
>displayImages(string $servername): bool	(Imagick) Displays an image or image sequence
>distortImage(int $method, array $arguments, bool $bestfit): bool	(Imagick) Distorts an image using various distortion methods
>drawImage(ImagickDraw $draw): bool	(Imagick) Renders the ImagickDraw object on the current image
>edgeImage(float $radius): bool	(Imagick) Enhance edges within the image
>embossImage(float $radius, float $sigma): bool	(Imagick) Returns a grayscale image with a three-dimensional effect
>encipherImage(string $passphrase): bool	(Imagick) Enciphers an image
>enhanceImage(): bool	(Imagick) Improves the quality of a noisy image
>equalizeImage(): bool	(Imagick) Equalizes the image histogram
>evaluateImage(int $op, float $constant, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Applies an expression to an image
>exportImagePixels(int $x, int $y, int $width, int $height, string $map, int $STORAGE): array	(Imagick) Exports raw image pixels
>extentImage(int $width, int $height, int $x, int $y): bool	(Imagick) Set image size
>filter(ImagickKernel $ImagickKernel, int $channel = Imagick::CHANNEL_UNDEFINED): bool	(Imagick) Applies a custom convolution kernel to the image
>flattenImages(): Imagick	(Imagick) Merges a sequence of images
>flipImage(): bool	(Imagick) Creates a vertical mirror image
>floodFillPaintImage(mixed $fill, float $fuzz, mixed $target, int $x, int $y, bool $invert, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Changes the color value of any pixel that matches target
>flopImage(): bool	(Imagick) Creates a horizontal mirror image
>forwardFourierTransformimage(bool $magnitude): bool	(Imagick) Implements the discrete Fourier transform (DFT)
>frameImage(mixed $matte_color, int $width, int $height, int $inner_bevel, int $outer_bevel): bool	(Imagick) Adds a simulated three-dimensional border
>functionImage(int $function, array $arguments, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Applies a function on the image
>fxImage(string $expression, int $channel = Imagick::CHANNEL_DEFAULT): Imagick	(Imagick) Evaluate expression for each pixel in the image
>gammaImage(float $gamma, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Gamma-corrects an image
>gaussianBlurImage(float $radius, float $sigma, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Blurs an image
>getColorspace(): int	(Imagick) Gets the colorspace
>getCompression(): int	(Imagick) Gets the object compression type
>getCompressionQuality(): int	(Imagick) Gets the object compression quality
Imagick::getCopyright(): string	Returns the ImageMagick API copyright as a string
>getFilename(): string	(Imagick) The filename associated with an image sequence
>getFont(): string	(Imagick) Gets font
>getFormat(): string	(Imagick) Returns the format of the Imagick object
>getGravity(): int	(Imagick) Gets the gravity
Imagick::getHomeURL(): string	Returns the ImageMagick home URL
>getImage(): Imagick	(Imagick) Returns a new Imagick object
>getImageAlphaChannel(): bool	(Imagick) Checks if the image has an alpha channel
>getImageArtifact(string $artifact): string	(Imagick) Get image artifact
>getImageAttribute(string $key): string	(Imagick) Returns a named attribute
>getImageBackgroundColor(): ImagickPixel	(Imagick) Returns the image background color
>getImageBlob(): string	(Imagick) Returns the image sequence as a blob
>getImageBluePrimary(): array	(Imagick) Returns the chromaticy blue primary point
>getImageBorderColor(): ImagickPixel	(Imagick) Returns the image border color
>getImageChannelDepth(int $channel): int	(Imagick) Gets the depth for a particular image channel
>getImageChannelDistortion(Imagick $reference, int $channel, int $metric): float	(Imagick) Compares image channels of an image to a reconstructed image
>getImageChannelDistortions(Imagick $reference, int $metric, int $channel = Imagick::CHANNEL_DEFAULT): float	(Imagick) Gets channel distortions
>getImageChannelExtrema(int $channel): array	(Imagick) Gets the extrema for one or more image channels
>getImageChannelKurtosis(int $channel = Imagick::CHANNEL_DEFAULT): array	(Imagick) The getImageChannelKurtosis purpose
>getImageChannelMean(int $channel): array	(Imagick) Gets the mean and standard deviation
>getImageChannelRange(int $channel): array	(Imagick) Gets channel range
>getImageChannelStatistics(): array	(Imagick) Returns statistics for each channel in the image
>getImageClipMask(): Imagick	(Imagick) Gets image clip mask
>getImageColormapColor(int $index): ImagickPixel	(Imagick) Returns the color of the specified colormap index
>getImageColors(): int	(Imagick) Gets the number of unique colors in the image
>getImageColorspace(): int	(Imagick) Gets the image colorspace
>getImageCompose(): int	(Imagick) Returns the composite operator associated with the image
>getImageCompression(): int	(Imagick) Gets the current image's compression type
>getImageCompressionQuality(): int	(Imagick) Gets the current image's compression quality
>getImageDelay(): int	(Imagick) Gets the image delay
>getImageDepth(): int	(Imagick) Gets the image depth
>getImageDispose(): int	(Imagick) Gets the image disposal method
>getImageDistortion(MagickWand $reference, int $metric): float	(Imagick) Compares an image to a reconstructed image
>getImageExtrema(): array	(Imagick) Gets the extrema for the image
>getImageFilename(): string	(Imagick) Returns the filename of a particular image in a sequence
>getImageFormat(): string	(Imagick) Returns the format of a particular image in a sequence
>getImageGamma(): float	(Imagick) Gets the image gamma
>getImageGeometry(): array	(Imagick) Gets the width and height as an associative array
>getImageGravity(): int	(Imagick) Gets the image gravity
>getImageGreenPrimary(): array	(Imagick) Returns the chromaticy green primary point
>getImageHeight(): int	(Imagick) Returns the image height
>getImageHistogram(): array	(Imagick) Gets the image histogram
>getImageIndex(): int	(Imagick) Gets the index of the current active image
>getImageInterlaceScheme(): int	(Imagick) Gets the image interlace scheme
>getImageInterpolateMethod(): int	(Imagick) Returns the interpolation method
>getImageIterations(): int	(Imagick) Gets the image iterations
>getImageLength(): int	(Imagick) Returns the image length in bytes
>getImageMatte(): bool	(Imagick) Return if the image has a matte channel
>getImageMatteColor(): ImagickPixel	(Imagick) Returns the image matte color
>getImageMimeType(): string	(Imagick) Returns the image mime-type
>getImageOrientation(): int	(Imagick) Gets the image orientation
>getImagePage(): array	(Imagick) Returns the page geometry
>getImagePixelColor(int $x, int $y): ImagickPixel	(Imagick) Returns the color of the specified pixel
>getImageProfile(string $name): string	(Imagick) Returns the named image profile
>getImageProfiles(string $pattern = "*", bool $include_values = true): array	(Imagick) Returns the image profiles
>getImageProperties(string $pattern = "*", bool $include_values = true): array	(Imagick) Returns the image properties
>getImageProperty(string $name): string	(Imagick) Returns the named image property
>getImageRedPrimary(): array	(Imagick) Returns the chromaticity red primary point
>getImageRegion(int $width, int $height, int $x, int $y): Imagick	(Imagick) Extracts a region of the image
>getImageRenderingIntent(): int	(Imagick) Gets the image rendering intent
>getImageResolution(): array	(Imagick) Gets the image X and Y resolution
>getImagesBlob(): string	(Imagick) Returns all image sequences as a blob
>getImageScene(): int	(Imagick) Gets the image scene
>getImageSignature(): string	(Imagick) Generates an SHA-256 message digest
>getImageSize(): int	(Imagick) Returns the image length in bytes
>getImageTicksPerSecond(): int	(Imagick) Gets the image ticks-per-second
>getImageTotalInkDensity(): float	(Imagick) Gets the image total ink density
>getImageType(): int	(Imagick) Gets the potential image type
>getImageUnits(): int	(Imagick) Gets the image units of resolution
>getImageVirtualPixelMethod(): int	(Imagick) Returns the virtual pixel method
>getImageWhitePoint(): array	(Imagick) Returns the chromaticity white point
>getImageWidth(): int	(Imagick) Returns the image width
>getInterlaceScheme(): int	(Imagick) Gets the object interlace scheme
>getIteratorIndex(): int	(Imagick) Gets the index of the current active image
>getNumberImages(): int	(Imagick) Returns the number of images in the object
>getOption(string $key): string	(Imagick) Returns a value associated with the specified key
Imagick::getPackageName(): string	Returns the ImageMagick package name
>getPage(): array	(Imagick) Returns the page geometry
>getPixelIterator(): ImagickPixelIterator	(Imagick) Returns a MagickPixelIterator
>getPixelRegionIterator(int $x, int $y, int $columns, int $rows): ImagickPixelIterator	(Imagick) Get an ImagickPixelIterator for an image section
>getPointSize(): float	(Imagick) Gets point size
Imagick::getQuantum(): int	Returns the ImageMagick quantum range
Imagick::getQuantumDepth(): array	Gets the quantum depth
Imagick::getQuantumRange(): array	Returns the Imagick quantum range
Imagick::getRegistry(string $key): string	Get a StringRegistry entry
Imagick::getReleaseDate(): string	Returns the ImageMagick release date
Imagick::getResource(int $type): int	Returns the specified resource's memory usage
Imagick::getResourceLimit(int $type): int	Returns the specified resource limit
>getSamplingFactors(): array	(Imagick) Gets the horizontal and vertical sampling factor
>getSize(): array	(Imagick) Returns the size associated with the Imagick object
>getSizeOffset(): int	(Imagick) Returns the size offset
Imagick::getVersion(): array	Returns the ImageMagick API version
>haldClutImage(Imagick $clut, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Replaces colors in the image
>hasNextImage(): bool	(Imagick) Checks if the object has more images
>hasPreviousImage(): bool	(Imagick) Checks if the object has a previous image
>identifyFormat(string $embedText): string|false	(Imagick) Formats a string with image details
>identifyImage(bool $appendRawOutput = false): array	(Imagick) Identifies an image and fetches attributes
>implodeImage(float $radius): bool	(Imagick) Creates a new image as a copy
>importImagePixels(int $x, int $y, int $width, int $height, string $map, int $storage, array $pixels): bool	(Imagick) Imports image pixels
>inverseFourierTransformImage(Imagick $complement, bool $magnitude): bool	(Imagick) Implements the inverse discrete Fourier transform (DFT)
>labelImage(string $label): bool	(Imagick) Adds a label to an image
>levelImage(float $blackPoint, float $gamma, float $whitePoint, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Adjusts the levels of an image
>linearStretchImage(float $blackPoint, float $whitePoint): bool	(Imagick) Stretches with saturation the image intensity
>liquidRescaleImage(int $width, int $height, float $delta_x, float $rigidity): bool	(Imagick) Animates an image or images
Imagick::listRegistry(): array	List all the registry settings
>magnifyImage(): bool	(Imagick) Scales an image proportionally 2x
>mapImage(Imagick $map, bool $dither): bool	(Imagick) Replaces the colors of an image with the closest color from a reference image
>matteFloodfillImage(float $alpha, float $fuzz, mixed $bordercolor, int $x, int $y): bool	(Imagick) Changes the transparency value of a color
>medianFilterImage(float $radius): bool	(Imagick) Applies a digital filter
>mergeImageLayers(int $layer_method): Imagick	(Imagick) Merges image layers
>minifyImage(): bool	(Imagick) Scales an image proportionally to half its size
>modulateImage(float $brightness, float $saturation, float $hue): bool	(Imagick) Control the brightness, saturation, and hue
>montageImage(ImagickDraw $draw, string $tile_geometry, string $thumbnail_geometry, int $mode, string $frame): Imagick	(Imagick) Creates a composite image
>morphImages(int $number_frames): Imagick	(Imagick) Method morphs a set of images
>morphology(int $morphologyMethod, int $iterations, ImagickKernel $ImagickKernel, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Applies a user supplied kernel to the image according to the given morphology method.
>mosaicImages(): Imagick	(Imagick) Forms a mosaic from images
>motionBlurImage(float $radius, float $sigma, float $angle, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Simulates motion blur
>negateImage(bool $gray, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Negates the colors in the reference image
>newImage(int $cols, int $rows, mixed $background, string $format = ?): bool	(Imagick) Creates a new image
>newPseudoImage(int $columns, int $rows, string $pseudoString): bool	(Imagick) Creates a new image
>nextImage(): bool	(Imagick) Moves to the next image
>normalizeImage(int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Enhances the contrast of a color image
>oilPaintImage(float $radius): bool	(Imagick) Simulates an oil painting
>opaquePaintImage(mixed $target, mixed $fill, float $fuzz, bool $invert, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Changes the color value of any pixel that matches target
>optimizeImageLayers(): bool	(Imagick) Removes repeated portions of images to optimize
>orderedPosterizeImage(string $threshold_map, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Performs an ordered dither
>paintFloodfillImage(mixed $fill, float $fuzz, mixed $bordercolor, int $x, int $y, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Changes the color value of any pixel that matches target
>paintOpaqueImage(mixed $target, mixed $fill, float $fuzz, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Change any pixel that matches color
>paintTransparentImage(mixed $target, float $alpha, float $fuzz): bool	(Imagick) Changes any pixel that matches color with the color defined by fill
>pingImage(string $filename): bool	(Imagick) Fetch basic attributes about the image
>pingImageBlob(string $image): bool	(Imagick) Quickly fetch attributes
>pingImageFile(resource $filehandle, string $fileName = ?): bool	(Imagick) Get basic image attributes in a lightweight manner
>polaroidImage(ImagickDraw $properties, float $angle): bool	(Imagick) Simulates a Polaroid picture
>posterizeImage(int $levels, bool $dither): bool	(Imagick) Reduces the image to a limited number of color level
>previewImages(int $preview): bool	(Imagick) Quickly pin-point appropriate parameters for image processing
>previousImage(): bool	(Imagick) Move to the previous image in the object
>profileImage(string $name, ?string $profile): bool	(Imagick) Adds or removes a profile from an image
>quantizeImage(int $numberColors, int $colorspace, int $treedepth, bool $dither, bool $measureError): bool	(Imagick) Analyzes the colors within a reference image
>quantizeImages(int $numberColors, int $colorspace, int $treedepth, bool $dither, bool $measureError): bool	(Imagick) Analyzes the colors within a sequence of images
>queryFontMetrics(ImagickDraw $properties, string $text, bool $multiline = ?): array	(Imagick) Returns an array representing the font metrics
Imagick::queryFonts(string $pattern = "*"): array	Returns the configured fonts
Imagick::queryFormats(string $pattern = "*"): array	Returns formats supported by Imagick
>radialBlurImage(float $angle, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Radial blurs an image
>raiseImage(int $width, int $height, int $x, int $y, bool $raise): bool	(Imagick) Creates a simulated 3d button-like effect
>randomThresholdImage(float $low, float $high, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Creates a high-contrast, two-color image
>readImage(string $filename): bool	(Imagick) Reads image from filename
>readImageBlob(string $image, string $filename = ?): bool	(Imagick) Reads image from a binary string
>readImageFile(resource $filehandle, string $fileName = null): bool	(Imagick) Reads image from open filehandle
>readImages(array $filenames): bool	(Imagick) Reads image from an array of filenames
>recolorImage(array $matrix): bool	(Imagick) Recolors image
>reduceNoiseImage(float $radius): bool	(Imagick) Smooths the contours of an image
>remapImage(Imagick $replacement, int $DITHER): bool	(Imagick) Remaps image colors
>removeImage(): bool	(Imagick) Removes an image from the image list
>removeImageProfile(string $name): string	(Imagick) Removes the named image profile and returns it
>render(): bool	(Imagick) Renders all preceding drawing commands
>resampleImage(float $x_resolution, float $y_resolution, int $filter, float $blur): bool	(Imagick) Resample image to desired resolution
>resetImagePage(string $page): bool	(Imagick) Reset image page
>resizeImage(int $columns, int $rows, int $filter, float $blur, bool $bestfit = false, bool $legacy = false): bool	(Imagick) Scales an image
>rollImage(int $x, int $y): bool	(Imagick) Offsets an image
>rotateImage(mixed $background, float $degrees): bool	(Imagick) Rotates an image
>rotationalBlurImage(float $angle, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Rotational blurs an image
>roundCorners(float $x_rounding, float $y_rounding, float $stroke_width = 10, float $displace = 5, float $size_correction = -6): bool	(Imagick) Rounds image corners
>sampleImage(int $columns, int $rows): bool	(Imagick) Scales an image with pixel sampling
>scaleImage(int $columns, int $rows, bool $bestfit = false, bool $legacy = false): bool	(Imagick) Scales the size of an image
>segmentImage(int $COLORSPACE, float $cluster_threshold, float $smooth_threshold, bool $verbose = false): bool	(Imagick) Segments an image
>selectiveBlurImage(float $radius, float $sigma, float $threshold, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Selectively blur an image within a contrast threshold
>separateImageChannel(int $channel): bool	(Imagick) Separates a channel from the image
>sepiaToneImage(float $threshold): bool	(Imagick) Sepia tones an image
>setBackgroundColor(mixed $background): bool	(Imagick) Sets the object's default background color
>setColorspace(int $COLORSPACE): bool	(Imagick) Set colorspace
>setCompression(int $compression): bool	(Imagick) Sets the object's default compression type
>setCompressionQuality(int $quality): bool	(Imagick) Sets the object's default compression quality
>setFilename(string $filename): bool	(Imagick) Sets the filename before you read or write the image
>setFirstIterator(): bool	(Imagick) Sets the Imagick iterator to the first image
>setFont(string $font): bool	(Imagick) Sets font
>setFormat(string $format): bool	(Imagick) Sets the format of the Imagick object
>setGravity(int $gravity): bool	(Imagick) Sets the gravity
>setImage(Imagick $replace): bool	(Imagick) Replaces image in the object
>setImageAlphaChannel(int $mode): bool	(Imagick) Sets image alpha channel
>setImageArtifact(string $artifact, string $value): bool	(Imagick) Set image artifact
>setImageAttribute(string $key, string $value): bool	(Imagick) Sets an image attribute
>setImageBackgroundColor(mixed $background): bool	(Imagick) Sets the image background color
>setImageBias(float $bias): bool	(Imagick) Sets the image bias for any method that convolves an image
>setImageBiasQuantum(float $bias): void	(Imagick) Sets the image bias
>setImageBluePrimary(float $x, float $y): bool	(Imagick) Sets the image chromaticity blue primary point
>setImageBorderColor(mixed $border): bool	(Imagick) Sets the image border color
>setImageChannelDepth(int $channel, int $depth): bool	(Imagick) Sets the depth of a particular image channel
>setImageClipMask(Imagick $clip_mask): bool	(Imagick) Sets image clip mask
>setImageColormapColor(int $index, ImagickPixel $color): bool	(Imagick) Sets the color of the specified colormap index
>setImageColorspace(int $colorspace): bool	(Imagick) Sets the image colorspace
>setImageCompose(int $compose): bool	(Imagick) Sets the image composite operator
>setImageCompression(int $compression): bool	(Imagick) Sets the image compression
>setImageCompressionQuality(int $quality): bool	(Imagick) Sets the image compression quality
>setImageDelay(int $delay): bool	(Imagick) Sets the image delay
>setImageDepth(int $depth): bool	(Imagick) Sets the image depth
>setImageDispose(int $dispose): bool	(Imagick) Sets the image disposal method
>setImageExtent(int $columns, int $rows): bool	(Imagick) Sets the image size
>setImageFilename(string $filename): bool	(Imagick) Sets the filename of a particular image
>setImageFormat(string $format): bool	(Imagick) Sets the format of a particular image
>setImageGamma(float $gamma): bool	(Imagick) Sets the image gamma
>setImageGravity(int $gravity): bool	(Imagick) Sets the image gravity
>setImageGreenPrimary(float $x, float $y): bool	(Imagick) Sets the image chromaticity green primary point
>setImageIndex(int $index): bool	(Imagick) Set the iterator position
>setImageInterlaceScheme(int $interlace_scheme): bool	(Imagick) Sets the image compression
>setImageInterpolateMethod(int $method): bool	(Imagick) Sets the image interpolate pixel method
>setImageIterations(int $iterations): bool	(Imagick) Sets the image iterations
>setImageMatte(bool $matte): bool	(Imagick) Sets the image matte channel
>setImageMatteColor(mixed $matte): bool	(Imagick) Sets the image matte color
>setImageOpacity(float $opacity): bool	(Imagick) Sets the image opacity level
>setImageOrientation(int $orientation): bool	(Imagick) Sets the image orientation
>setImagePage(int $width, int $height, int $x, int $y): bool	(Imagick) Sets the page geometry of the image
>setImageProfile(string $name, string $profile): bool	(Imagick) Adds a named profile to the Imagick object
>setImageProperty(string $name, string $value): bool	(Imagick) Sets an image property
>setImageRedPrimary(float $x, float $y): bool	(Imagick) Sets the image chromaticity red primary point
>setImageRenderingIntent(int $rendering_intent): bool	(Imagick) Sets the image rendering intent
>setImageResolution(float $x_resolution, float $y_resolution): bool	(Imagick) Sets the image resolution
>setImageScene(int $scene): bool	(Imagick) Sets the image scene
>setImageTicksPerSecond(int $ticks_per_second): bool	(Imagick) Sets the image ticks-per-second
>setImageType(int $image_type): bool	(Imagick) Sets the image type
>setImageUnits(int $units): bool	(Imagick) Sets the image units of resolution
>setImageVirtualPixelMethod(int $method): bool	(Imagick) Sets the image virtual pixel method
>setImageWhitePoint(float $x, float $y): bool	(Imagick) Sets the image chromaticity white point
>setInterlaceScheme(int $interlace_scheme): bool	(Imagick) Sets the image compression
>setIteratorIndex(int $index): bool	(Imagick) Set the iterator position
>setLastIterator(): bool	(Imagick) Sets the Imagick iterator to the last image
>setOption(string $key, string $value): bool	(Imagick) Set an option
>setPage(int $width, int $height, int $x, int $y): bool	(Imagick) Sets the page geometry of the Imagick object
>setPointSize(float $point_size): bool	(Imagick) Sets point size
>setProgressMonitor(callable $callback): bool	(Imagick) Set a callback to be called during processing
Imagick::setRegistry(string $key, string $value): bool	Sets the ImageMagick registry entry named key to value
>setResolution(float $x_resolution, float $y_resolution): bool	(Imagick) Sets the image resolution
Imagick::setResourceLimit(int $type, int $limit): bool	Sets the limit for a particular resource
>setSamplingFactors(array $factors): bool	(Imagick) Sets the image sampling factors
>setSize(int $columns, int $rows): bool	(Imagick) Sets the size of the Imagick object
>setSizeOffset(int $columns, int $rows, int $offset): bool	(Imagick) Sets the size and offset of the Imagick object
>setType(int $image_type): bool	(Imagick) Sets the image type attribute
>shadeImage(bool $gray, float $azimuth, float $elevation): bool	(Imagick) Creates a 3D effect
>shadowImage(float $opacity, float $sigma, int $x, int $y): bool	(Imagick) Simulates an image shadow
>sharpenImage(float $radius, float $sigma, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Sharpens an image
>shaveImage(int $columns, int $rows): bool	(Imagick) Shaves pixels from the image edges
>shearImage(mixed $background, float $x_shear, float $y_shear): bool	(Imagick) Creating a parallelogram
>sigmoidalContrastImage(bool $sharpen, float $alpha, float $beta, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Adjusts the contrast of an image
>sketchImage(float $radius, float $sigma, float $angle): bool	(Imagick) Simulates a pencil sketch
>smushImages(bool $stack, int $offset): Imagick	(Imagick) Takes all images from the current image pointer to the end of the image list and smushs them
>solarizeImage(int $threshold): bool	(Imagick) Applies a solarizing effect to the image
>sparseColorImage(int $SPARSE_METHOD, array $arguments, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Interpolates colors
>spliceImage(int $width, int $height, int $x, int $y): bool	(Imagick) Splices a solid color into the image
>spreadImage(float $radius): bool	(Imagick) Randomly displaces each pixel in a block
>statisticImage(int $type, int $width, int $height, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Modifies image using a statistics function
>steganoImage(Imagick $watermark_wand, int $offset): Imagick	(Imagick) Hides a digital watermark within the image
>stereoImage(Imagick $offset_wand): bool	(Imagick) Composites two images
>stripImage(): bool	(Imagick) Strips an image of all profiles and comments
>subImageMatch(Imagick $Imagick, array $offset = ?, float $similarity = ?): Imagick	(Imagick) Searches for a subimage in the current image and returns a similarity image
>swirlImage(float $degrees): bool	(Imagick) Swirls the pixels about the center of the image
>textureImage(Imagick $texture_wand): Imagick	(Imagick) Repeatedly tiles the texture image
>thresholdImage(float $threshold, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Changes the value of individual pixels based on a threshold
>thumbnailImage(int $columns, int $rows, bool $bestfit = false, bool $fill = false, bool $legacy = false): bool	(Imagick) Changes the size of an image
>tintImage(mixed $tint, mixed $opacity, bool $legacy = false): bool	(Imagick) Applies a color vector to each pixel in the image
>__toString(): string	(Imagick) Returns the image as a string
>transformImage(string $crop, string $geometry): Imagick	(Imagick) Convenience method for setting crop size and the image geometry
>transformImageColorspace(int $colorspace): bool	(Imagick) Transforms an image to a new colorspace
>transparentPaintImage(mixed $target, float $alpha, float $fuzz, bool $invert): bool	(Imagick) Paints pixels transparent
>transposeImage(): bool	(Imagick) Creates a vertical mirror image
>transverseImage(): bool	(Imagick) Creates a horizontal mirror image
>trimImage(float $fuzz): bool	(Imagick) Remove edges from the image
>uniqueImageColors(): bool	(Imagick) Discards all but one of any pixel color
>unsharpMaskImage(float $radius, float $sigma, float $amount, float $threshold, int $channel = Imagick::CHANNEL_DEFAULT): bool	(Imagick) Sharpens an image
>valid(): bool	(Imagick) Checks if the current item is valid
>vignetteImage(float $blackPoint, float $whitePoint, int $x, int $y): bool	(Imagick) Adds vignette filter to the image
>waveImage(float $amplitude, float $length): bool	(Imagick) Applies wave filter to the image
>whiteThresholdImage(mixed $threshold): bool	(Imagick) Force all pixels above the threshold into white
>writeImage(string $filename = NULL): bool	(Imagick) Writes an image to the specified filename
>writeImageFile(resource $filehandle, string $format = ?): bool	(Imagick) Writes an image to a filehandle
>writeImages(string $filename, bool $adjoin): bool	(Imagick) Writes an image or image sequence
>writeImagesFile(resource $filehandle, string $format = ?): bool	(Imagick) Writes frames to a filehandle
>affine(array $affine): bool	(ImagickDraw) Adjusts the current affine transformation matrix
>annotation(float $x, float $y, string $text): bool	(ImagickDraw) Draws text on the image
>arc(float $sx, float $sy, float $ex, float $ey, float $sd, float $ed): bool	(ImagickDraw) Draws an arc
>bezier(array $coordinates): bool	(ImagickDraw) Draws a bezier curve
>circle(float $ox, float $oy, float $px, float $py): bool	(ImagickDraw) Draws a circle
>clear(): bool	(ImagickDraw) Clears the ImagickDraw
>clone(): ImagickDraw	(ImagickDraw) Makes an exact copy of the specified ImagickDraw object
>color(float $x, float $y, int $paintMethod): bool	(ImagickDraw) Draws color on image
>comment(string $comment): bool	(ImagickDraw) Adds a comment
>composite(int $compose, float $x, float $y, float $width, float $height, Imagick $compositeWand): bool	(ImagickDraw) Composites an image onto the current image
ImagickDraw()	(new) The ImagickDraw constructor
>destroy(): bool	(ImagickDraw) Frees all associated resources
>ellipse(float $ox, float $oy, float $rx, float $ry, float $start, float $end): bool	(ImagickDraw) Draws an ellipse on the image
>getClipPath(): string	(ImagickDraw) Obtains the current clipping path ID
>getClipRule(): int	(ImagickDraw) Returns the current polygon fill rule
>getClipUnits(): int	(ImagickDraw) Returns the interpretation of clip path units
>getFillColor(): ImagickPixel	(ImagickDraw) Returns the fill color
>getFillOpacity(): float	(ImagickDraw) Returns the opacity used when drawing
>getFillRule(): int	(ImagickDraw) Returns the fill rule
>getFont(): string	(ImagickDraw) Returns the font
>getFontFamily(): string	(ImagickDraw) Returns the font family
>getFontSize(): float	(ImagickDraw) Returns the font pointsize
>getFontStretch(): int	(ImagickDraw) Gets the font stretch to use when annotating with text
>getFontStyle(): int	(ImagickDraw) Returns the font style
>getFontWeight(): int	(ImagickDraw) Returns the font weight
>getGravity(): int	(ImagickDraw) Returns the text placement gravity
>getStrokeAntialias(): bool	(ImagickDraw) Returns the current stroke antialias setting
>getStrokeColor(): ImagickPixel	(ImagickDraw) Returns the color used for stroking object outlines
>getStrokeDashArray(): array	(ImagickDraw) Returns an array representing the pattern of dashes and gaps used to stroke paths
>getStrokeDashOffset(): float	(ImagickDraw) Returns the offset into the dash pattern to start the dash
>getStrokeLineCap(): int	(ImagickDraw) Returns the shape to be used at the end of open subpaths when they are stroked
>getStrokeLineJoin(): int	(ImagickDraw) Returns the shape to be used at the corners of paths when they are stroked
>getStrokeMiterLimit(): int	(ImagickDraw) Returns the stroke miter limit
>getStrokeOpacity(): float	(ImagickDraw) Returns the opacity of stroked object outlines
>getStrokeWidth(): float	(ImagickDraw) Returns the width of the stroke used to draw object outlines
>getTextAlignment(): int	(ImagickDraw) Returns the text alignment
>getTextAntialias(): bool	(ImagickDraw) Returns the current text antialias setting
>getTextDecoration(): int	(ImagickDraw) Returns the text decoration
>getTextEncoding(): string	(ImagickDraw) Returns the code set used for text annotations
>getTextInterlineSpacing(): float	(ImagickDraw) Gets the text interword spacing
>getTextInterwordSpacing(): float	(ImagickDraw) Gets the text interword spacing
>getTextKerning(): float	(ImagickDraw) Gets the text kerning
>getTextUnderColor(): ImagickPixel	(ImagickDraw) Returns the text under color
>getVectorGraphics(): string	(ImagickDraw) Returns a string containing vector graphics
>line(float $sx, float $sy, float $ex, float $ey): bool	(ImagickDraw) Draws a line
>matte(float $x, float $y, int $paintMethod): bool	(ImagickDraw) Paints on the image's opacity channel
>pathClose(): bool	(ImagickDraw) Adds a path element to the current path
>pathCurveToAbsolute(float $x1, float $y1, float $x2, float $y2, float $x, float $y): bool	(ImagickDraw) Draws a cubic Bezier curve
>pathCurveToQuadraticBezierAbsolute(float $x1, float $y1, float $x, float $y): bool	(ImagickDraw) Draws a quadratic Bezier curve
>pathCurveToQuadraticBezierRelative(float $x1, float $y1, float $x, float $y): bool	(ImagickDraw) Draws a quadratic Bezier curve
>pathCurveToQuadraticBezierSmoothAbsolute(float $x, float $y): bool	(ImagickDraw) Draws a quadratic Bezier curve
>pathCurveToQuadraticBezierSmoothRelative(float $x, float $y): bool	(ImagickDraw) Draws a quadratic Bezier curve
>pathCurveToRelative(float $x1, float $y1, float $x2, float $y2, float $x, float $y): bool	(ImagickDraw) Draws a cubic Bezier curve
>pathCurveToSmoothAbsolute(float $x2, float $y2, float $x, float $y): bool	(ImagickDraw) Draws a cubic Bezier curve
>pathCurveToSmoothRelative(float $x2, float $y2, float $x, float $y): bool	(ImagickDraw) Draws a cubic Bezier curve
>pathEllipticArcAbsolute(float $rx, float $ry, float $x_axis_rotation, bool $large_arc_flag, bool $sweep_flag, float $x, float $y): bool	(ImagickDraw) Draws an elliptical arc
>pathEllipticArcRelative(float $rx, float $ry, float $x_axis_rotation, bool $large_arc_flag, bool $sweep_flag, float $x, float $y): bool	(ImagickDraw) Draws an elliptical arc
>pathFinish(): bool	(ImagickDraw) Terminates the current path
>pathLineToAbsolute(float $x, float $y): bool	(ImagickDraw) Draws a line path
>pathLineToHorizontalAbsolute(float $x): bool	(ImagickDraw) Draws a horizontal line path
>pathLineToHorizontalRelative(float $x): bool	(ImagickDraw) Draws a horizontal line
>pathLineToRelative(float $x, float $y): bool	(ImagickDraw) Draws a line path
>pathLineToVerticalAbsolute(float $y): bool	(ImagickDraw) Draws a vertical line
>pathLineToVerticalRelative(float $y): bool	(ImagickDraw) Draws a vertical line path
>pathMoveToAbsolute(float $x, float $y): bool	(ImagickDraw) Starts a new sub-path
>pathMoveToRelative(float $x, float $y): bool	(ImagickDraw) Starts a new sub-path
>pathStart(): bool	(ImagickDraw) Declares the start of a path drawing list
>point(float $x, float $y): bool	(ImagickDraw) Draws a point
>polygon(array $coordinates): bool	(ImagickDraw) Draws a polygon
>polyline(array $coordinates): bool	(ImagickDraw) Draws a polyline
>pop(): bool	(ImagickDraw) Destroys the current ImagickDraw in the stack, and returns to the previously pushed ImagickDraw
>popClipPath(): bool	(ImagickDraw) Terminates a clip path definition
>popDefs(): bool	(ImagickDraw) Terminates a definition list
>popPattern(): bool	(ImagickDraw) Terminates a pattern definition
>push(): bool	(ImagickDraw) Clones the current ImagickDraw and pushes it to the stack
>pushClipPath(string $clip_mask_id): bool	(ImagickDraw) Starts a clip path definition
>pushDefs(): bool	(ImagickDraw) Indicates that following commands create named elements for early processing
>pushPattern(string $pattern_id, float $x, float $y, float $width, float $height): bool	(ImagickDraw) Indicates that subsequent commands up to a ImagickDraw::opPattern() command comprise the definition of a named pattern
>rectangle(float $x1, float $y1, float $x2, float $y2): bool	(ImagickDraw) Draws a rectangle
>render(): bool	(ImagickDraw) Renders all preceding drawing commands onto the image
>resetVectorGraphics(): bool	(ImagickDraw) Resets the vector graphics
>rotate(float $degrees): bool	(ImagickDraw) Applies the specified rotation to the current coordinate space
>roundRectangle(float $x1, float $y1, float $x2, float $y2, float $rx, float $ry): bool	(ImagickDraw) Draws a rounded rectangle
>scale(float $x, float $y): bool	(ImagickDraw) Adjusts the scaling factor
>setClipPath(string $clip_mask): bool	(ImagickDraw) Associates a named clipping path with the image
>setClipRule(int $fill_rule): bool	(ImagickDraw) Set the polygon fill rule to be used by the clipping path
>setClipUnits(int $clip_units): bool	(ImagickDraw) Sets the interpretation of clip path units
>setFillAlpha(float $opacity): bool	(ImagickDraw) Sets the opacity to use when drawing using the fill color or fill texture
>setFillColor(ImagickPixel $fill_pixel): bool	(ImagickDraw) Sets the fill color to be used for drawing filled objects
>setFillOpacity(float $fillOpacity): bool	(ImagickDraw) Sets the opacity to use when drawing using the fill color or fill texture
>setFillPatternURL(string $fill_url): bool	(ImagickDraw) Sets the URL to use as a fill pattern for filling objects
>setFillRule(int $fill_rule): bool	(ImagickDraw) Sets the fill rule to use while drawing polygons
>setFont(string $font_name): bool	(ImagickDraw) Sets the fully-specified font to use when annotating with text
>setFontFamily(string $font_family): bool	(ImagickDraw) Sets the font family to use when annotating with text
>setFontSize(float $pointsize): bool	(ImagickDraw) Sets the font pointsize to use when annotating with text
>setFontStretch(int $fontStretch): bool	(ImagickDraw) Sets the font stretch to use when annotating with text
>setFontStyle(int $style): bool	(ImagickDraw) Sets the font style to use when annotating with text
>setFontWeight(int $font_weight): bool	(ImagickDraw) Sets the font weight
>setGravity(int $gravity): bool	(ImagickDraw) Sets the text placement gravity
>setResolution(float $x_resolution, float $y_resolution): bool	(ImagickDraw) Sets the resolution
>setStrokeAlpha(float $opacity): bool	(ImagickDraw) Specifies the opacity of stroked object outlines
>setStrokeAntialias(bool $stroke_antialias): bool	(ImagickDraw) Controls whether stroked outlines are antialiased
>setStrokeColor(ImagickPixel $stroke_pixel): bool	(ImagickDraw) Sets the color used for stroking object outlines
>setStrokeDashArray(array $dashArray): bool	(ImagickDraw) Specifies the pattern of dashes and gaps used to stroke paths
>setStrokeDashOffset(float $dash_offset): bool	(ImagickDraw) Specifies the offset into the dash pattern to start the dash
>setStrokeLineCap(int $linecap): bool	(ImagickDraw) Specifies the shape to be used at the end of open subpaths when they are stroked
>setStrokeLineJoin(int $linejoin): bool	(ImagickDraw) Specifies the shape to be used at the corners of paths when they are stroked
>setStrokeMiterLimit(int $miterlimit): bool	(ImagickDraw) Specifies the miter limit
>setStrokeOpacity(float $stroke_opacity): bool	(ImagickDraw) Specifies the opacity of stroked object outlines
>setStrokePatternURL(string $stroke_url): bool	(ImagickDraw) Sets the pattern used for stroking object outlines
>setStrokeWidth(float $stroke_width): bool	(ImagickDraw) Sets the width of the stroke used to draw object outlines
>setTextAlignment(int $alignment): bool	(ImagickDraw) Specifies a text alignment
>setTextAntialias(bool $antiAlias): bool	(ImagickDraw) Controls whether text is antialiased
>setTextDecoration(int $decoration): bool	(ImagickDraw) Specifies a decoration
>setTextEncoding(string $encoding): bool	(ImagickDraw) Specifies the text code set
>setTextInterlineSpacing(float $spacing): bool	(ImagickDraw) Sets the text interline spacing
>setTextInterwordSpacing(float $spacing): bool	(ImagickDraw) Sets the text interword spacing
>setTextKerning(float $kerning): bool	(ImagickDraw) Sets the text kerning
>setTextUnderColor(ImagickPixel $under_color): bool	(ImagickDraw) Specifies the color of a background rectangle
>setVectorGraphics(string $xml): bool	(ImagickDraw) Sets the vector graphics
>setViewbox(int $x1, int $y1, int $x2, int $y2): bool	(ImagickDraw) Sets the overall canvas size
>skewX(float $degrees): bool	(ImagickDraw) Skews the current coordinate system in the horizontal direction
>skewY(float $degrees): bool	(ImagickDraw) Skews the current coordinate system in the vertical direction
>translate(float $x, float $y): bool	(ImagickDraw) Applies a translation to the current coordinate system
>addKernel(ImagickKernel $ImagickKernel): void	(ImagickKernel) Attach another kernel to a kernel list
>addUnityKernel(float $scale): void	(ImagickKernel) Adds a Unity Kernel to the kernel list
ImagickKernel::fromBuiltin(int $kernelType, string $kernelString): ImagickKernel	Create a kernel from a builtin in kernel
ImagickKernel::fromMatrix(array $matrix, array $origin = ?): ImagickKernel	Create a kernel from a 2d matrix of values
>getMatrix(): array	(ImagickKernel) Get the 2d matrix of values used in this kernel
>scale(float $scale, int $normalizeFlag = ?): void	(ImagickKernel) Scales a kernel list by the given amount
>separate(): array	(ImagickKernel) Separates a linked set of kernels and returns an array of ImagickKernels
>clear(): bool	(ImagickPixel) Clears resources associated with this object
ImagickPixel(string $color = ?)	(new) The ImagickPixel constructor
>destroy(): bool	(ImagickPixel) Deallocates resources associated with this object
>getColor(int $normalized = ?): array	(ImagickPixel) Returns the color
>getColorAsString(): string	(ImagickPixel) Returns the color as a string
>getColorCount(): int	(ImagickPixel) Returns the color count associated with this color
>getColorQuantum(): array	(ImagickPixel) Returns the color of the pixel in an array as Quantum values
>getColorValue(int $color): float	(ImagickPixel) Gets the normalized value of the provided color channel
>getColorValueQuantum(int $color): int|float	(ImagickPixel) Gets the quantum value of a color in the ImagickPixel
>getHSL(): array	(ImagickPixel) Returns the normalized HSL color of the ImagickPixel object
>getIndex(): int	(ImagickPixel) Gets the colormap index of the pixel wand
>isPixelSimilar(ImagickPixel $color, float $fuzz): bool	(ImagickPixel) Check the distance between this color and another
>isPixelSimilarQuantum(string $color, string $fuzz = ?): bool	(ImagickPixel) Returns whether two colors differ by less than the specified distance
>isSimilar(ImagickPixel $color, float $fuzz): bool	(ImagickPixel) Check the distance between this color and another
>setColor(string $color): bool	(ImagickPixel) Sets the color
>setcolorcount(int $colorCount): bool	(ImagickPixel) Sets the color count associated with this color
>setColorValue(int $color, float $value): bool	(ImagickPixel) Sets the normalized value of one of the channels
>setColorValueQuantum(int $color, int|float $value): bool	(ImagickPixel) Sets the quantum value of a color element of the ImagickPixel
>setHSL(float $hue, float $saturation, float $luminosity): bool	(ImagickPixel) Sets the normalized HSL color
>setIndex(int $index): bool	(ImagickPixel) Sets the colormap index of the pixel wand
>clear(): bool	(ImagickPixelIterator) Clear resources associated with a PixelIterator
ImagickPixelIterator(Imagick $wand)	(new) The ImagickPixelIterator constructor
>destroy(): bool	(ImagickPixelIterator) Deallocates resources associated with a PixelIterator
>getCurrentIteratorRow(): array	(ImagickPixelIterator) Returns the current row of ImagickPixel objects
>getIteratorRow(): int	(ImagickPixelIterator) Returns the current pixel iterator row
>getNextIteratorRow(): array	(ImagickPixelIterator) Returns the next row of the pixel iterator
>getPreviousIteratorRow(): array	(ImagickPixelIterator) Returns the previous row
>newPixelIterator(Imagick $wand): bool	(ImagickPixelIterator) Returns a new pixel iterator
>newPixelRegionIterator(Imagick $wand, int $x, int $y, int $columns, int $rows): bool	(ImagickPixelIterator) Returns a new pixel iterator
>resetIterator(): bool	(ImagickPixelIterator) Resets the pixel iterator
>setIteratorFirstRow(): bool	(ImagickPixelIterator) Sets the pixel iterator to the first pixel row
>setIteratorLastRow(): bool	(ImagickPixelIterator) Sets the pixel iterator to the last pixel row
>setIteratorRow(int $row): bool	(ImagickPixelIterator) Set the pixel iterator row
>syncIterator(): bool	(ImagickPixelIterator) Syncs the pixel iterator
ImagickKernel()	(new) 
ImagickKernelException()	(new) 
imap_8bit(string $string): string|false	Convert an 8bit string to a quoted-printable string
imap_alerts(): array|false	Returns all IMAP alert messages that have occurred
imap_append(IMAP\Connection $imap, string $folder, string $message, string|null $options = null, string|null $internal_date = null): bool	Append a string message to a specified mailbox
imap_base64(string $string): string|false	Decode BASE64 encoded text
imap_binary(string $string): string|false	Convert an 8bit string to a base64 string
imap_body(IMAP\Connection $imap, int $message_num, int $flags = ?): string|false	Read the message body
imap_bodystruct(IMAP\Connection $imap, int $message_num, string $section): stdClass|false	Read the structure of a specified body section of a specific message
imap_check(IMAP\Connection $imap): stdClass|false	Check current mailbox
imap_clearflag_full(IMAP\Connection $imap, string $sequence, string $flag, int $options = ?): true	Clears flags on messages
imap_close(IMAP\Connection $imap, int $flags = ?): true	Close an IMAP stream
imap_create()	Alias of imap_createmailbox
imap_createmailbox(IMAP\Connection $imap, string $mailbox): bool	Create a new mailbox
imap_delete(IMAP\Connection $imap, string $message_nums, int $flags = ?): true	Mark a message for deletion from current mailbox
imap_deletemailbox(IMAP\Connection $imap, string $mailbox): bool	Delete a mailbox
imap_errors(): array|false	Returns all of the IMAP errors that have occurred
imap_expunge(IMAP\Connection $imap): true	Delete all messages marked for deletion
imap_fetch_overview(IMAP\Connection $imap, string $sequence, int $flags = ?): array|false	Read an overview of the information in the headers of the given message
imap_fetchbody(IMAP\Connection $imap, int $message_num, string $section, int $flags = ?): string|false	Fetch a particular section of the body of the message
imap_fetchheader(IMAP\Connection $imap, int $message_num, int $flags = ?): string|false	Returns header for a message
imap_fetchmime(IMAP\Connection $imap, int $message_num, string $section, int $flags = ?): string|false	Fetch MIME headers for a particular section of the message
imap_fetchstructure(IMAP\Connection $imap, int $message_num, int $flags = ?): stdClass|false	Read the structure of a particular message
imap_fetchtext()	Alias of imap_body
imap_gc(IMAP\Connection $imap, int $flags): true	Clears IMAP cache
imap_get_quota(IMAP\Connection $imap, string $quota_root): array|false	Retrieve the quota level settings, and usage statics per mailbox
imap_get_quotaroot(IMAP\Connection $imap, string $mailbox): array|false	Retrieve the quota settings per user
imap_getacl(IMAP\Connection $imap, string $mailbox): array|false	Gets the ACL for a given mailbox
imap_getmailboxes(IMAP\Connection $imap, string $reference, string $pattern): array|false	Read the list of mailboxes, returning detailed information on each one
imap_getsubscribed(IMAP\Connection $imap, string $reference, string $pattern): array|false	List all the subscribed mailboxes
imap_header()	Alias of imap_headerinfo
imap_headerinfo(IMAP\Connection $imap, int $message_num, int $from_length = ?, int $subject_length = ?): stdClass|false	Read the header of the message
imap_headers(IMAP\Connection $imap): array|false	Returns headers for all messages in a mailbox
imap_is_open(IMAP\Connection $imap): bool	Check if the IMAP stream is still valid
imap_last_error(): string|false	Gets the last IMAP error that occurred during this page request
imap_list(IMAP\Connection $imap, string $reference, string $pattern): array|false	Read the list of mailboxes
imap_listmailbox()	Alias of imap_list
imap_listscan(IMAP\Connection $imap, string $reference, string $pattern, string $content): array|false	Returns the list of mailboxes that matches the given text
imap_listsubscribed()	Alias of imap_lsub
imap_lsub(IMAP\Connection $imap, string $reference, string $pattern): array|false	List all the subscribed mailboxes
imap_mail_compose(array $envelope, array $bodies): string|false	Create a MIME message based on given envelope and body sections
imap_mail_copy(IMAP\Connection $imap, string $message_nums, string $mailbox, int $flags = ?): bool	Copy specified messages to a mailbox
imap_mail_move(IMAP\Connection $imap, string $message_nums, string $mailbox, int $flags = ?): bool	Move specified messages to a mailbox
imap_mail(string $to, string $subject, string $message, string|null $additional_headers = null, string|null $cc = null, string|null $bcc = null, string|null $return_path = null): bool	Send an email message
imap_mailboxmsginfo(IMAP\Connection $imap): stdClass	Get information about the current mailbox
imap_mime_header_decode(string $string): array|false	Decode MIME header elements
imap_msgno(IMAP\Connection $imap, int $message_uid): int	Gets the message sequence number for the given UID
imap_mutf7_to_utf8(string $string): string|false	Decode a modified UTF-7 string to UTF-8
imap_num_msg(IMAP\Connection $imap): int|false	Gets the number of messages in the current mailbox
imap_num_recent(IMAP\Connection $imap): int	Gets the number of recent messages in current mailbox
imap_open(string $mailbox, string $user, string $password, int $flags = ?, int $retries = ?, array $options = []): IMAP\Connection|false	Open an IMAP stream to a mailbox
imap_ping(IMAP\Connection $imap): bool	Check if the IMAP stream is still active
imap_qprint(string $string): string|false	Convert a quoted-printable string to an 8 bit string
imap_rename()	Alias of imap_renamemailbox
imap_renamemailbox(IMAP\Connection $imap, string $from, string $to): bool	Rename an old mailbox to new mailbox
imap_reopen(IMAP\Connection $imap, string $mailbox, int $flags = ?, int $retries = ?): bool	Reopen IMAP stream to new mailbox
imap_rfc822_parse_adrlist(string $string, string $default_hostname): array	Parses an address string
imap_rfc822_parse_headers(string $headers, string $default_hostname = "UNKNOWN"): stdClass	Parse mail headers from a string
imap_rfc822_write_address(string $mailbox, string $hostname, string $personal): string|false	Returns a properly formatted email address given the mailbox, host, and personal info
imap_savebody(IMAP\Connection $imap, resource|string|int $file, int $message_num, string $section = "", int $flags = ?): bool	Save a specific body section to a file
imap_scan()	Alias of imap_listscan
imap_scanmailbox()	Alias of imap_listscan
imap_search(IMAP\Connection $imap, string $criteria, int $flags = SE_FREE, string $charset = ""): array|false	This function returns an array of messages matching the given search criteria
imap_set_quota(IMAP\Connection $imap, string $quota_root, int $mailbox_size): bool	Sets a quota for a given mailbox
imap_setacl(IMAP\Connection $imap, string $mailbox, string $user_id, string $rights): bool	Sets the ACL for a given mailbox
imap_setflag_full(IMAP\Connection $imap, string $sequence, string $flag, int $options = ?): true	Sets flags on messages
imap_sort(IMAP\Connection $imap, int $criteria, bool $reverse, int $flags = ?, string|null $search_criteria = null, string|null $charset = null): array|false	Gets and sort messages
imap_status(IMAP\Connection $imap, string $mailbox, int $flags): stdClass|false	Returns status information on a mailbox
imap_subscribe(IMAP\Connection $imap, string $mailbox): bool	Subscribe to a mailbox
imap_thread(IMAP\Connection $imap, int $flags = SE_FREE): array|false	Returns a tree of threaded message
imap_timeout(int $timeout_type, int $timeout = -1): int|bool	Set or fetch imap timeout
imap_uid(IMAP\Connection $imap, int $message_num): int|false	This function returns the UID for the given message sequence number
imap_undelete(IMAP\Connection $imap, string $message_nums, int $flags = ?): true	Unmark the message which is marked deleted
imap_unsubscribe(IMAP\Connection $imap, string $mailbox): bool	Unsubscribe from a mailbox
imap_utf7_decode(string $string): string|false	Decodes a modified UTF-7 encoded string
imap_utf7_encode(string $string): string	Converts ISO-8859-1 string to modified UTF-7 text
imap_utf8_to_mutf7(string $string): string|false	Encode a UTF-8 string to modified UTF-7
imap_utf8(string $mime_encoded_text): string	Converts MIME-encoded text to UTF-8
IMAP\Connection()	(new) A fully opaque class which replaces a imap resource as of PHP 8
assert_options(int $option, mixed $value = ?): mixed	Set/get the various assert flags
assert(mixed $assertion, Throwable|string|null $description = null): bool	Checks an assertion
cli_get_process_title(): string|null	Returns the current process title
cli_set_process_title(string $title): bool	Sets the process title
dl(string $extension_filename): bool	Loads a PHP extension at runtime
extension_loaded(string $extension): bool	Find out whether an extension is loaded
gc_collect_cycles(): int	Forces collection of any existing garbage cycles
gc_disable(): void	Deactivates the circular reference collector
gc_enable(): void	Activates the circular reference collector
gc_enabled(): bool	Returns status of the circular reference collector
gc_mem_caches(): int	Reclaims memory used by the Zend Engine memory manager
gc_status(): array	Gets information about the garbage collector
get_cfg_var(string $option): string|array|false	Gets the value of a PHP configuration option
get_current_user(): string	Gets the name of the owner of the current PHP script
get_defined_constants(bool $categorize = false): array	Returns an associative array with the names of all the constants and their values
get_extension_funcs(string $extension): array|false	Returns an array with the names of the functions of a module
get_include_path(): string|false	Gets the current include_path configuration option
get_included_files(): array	Returns an array with the names of included or required files
get_loaded_extensions(bool $zend_extensions = false): array	Returns an array with the names of all modules compiled and loaded
get_magic_quotes_gpc(): false	Gets the current configuration setting of magic_quotes_gpc
get_magic_quotes_runtime(): false	Gets the current active configuration setting of magic_quotes_runtime
get_required_files()	Alias of get_included_files
get_resources(string|null $type = null): array	Returns active resources
getenv(string|null $name = null, bool $local_only = false): string|array|false	Gets the value of a single or all environment variables
getlastmod(): int|false	Gets time of last page modification
getmygid(): int|false	Get PHP script owner's GID
getmyinode(): int|false	Gets the inode of the current script
getmypid(): int|false	Gets PHP's process ID
getmyuid(): int|false	Gets PHP script owner's UID
getopt(string $short_options, array $long_options = [], int $rest_index = null): array|false	Gets options from the command line argument list
getrusage(int $mode = ?): array|false	Gets the current resource usages
ini_alter()	Alias of ini_set
ini_get_all(string|null $extension = null, bool $details = true): array|false	Gets all configuration options
ini_get(string $option): string|false	Gets the value of a configuration option
ini_parse_quantity(string $shorthand): int	Get interpreted size from ini shorthand syntax
ini_restore(string $option): void	Restores the value of a configuration option
ini_set(string $option, string|int|float|bool|null $value): string|false	Sets the value of a configuration option
memory_get_peak_usage(bool $real_usage = false): int	Returns the peak of memory allocated by PHP
memory_get_usage(bool $real_usage = false): int	Returns the amount of memory allocated to PHP
memory_reset_peak_usage(): void	Reset the peak memory usage
php_ini_loaded_file(): string|false	Retrieve a path to the loaded php.ini file
php_ini_scanned_files(): string|false	Return a list of .ini files parsed from the additional ini dir
php_sapi_name(): string|false	Returns the type of interface between web server and PHP
php_uname(string $mode = "a"): string	Returns information about the operating system PHP is running on
phpcredits(int $flags = CREDITS_ALL): true	Prints out the credits for PHP
phpinfo(int $flags = INFO_ALL): true	Outputs information about PHP's configuration
phpversion(string|null $extension = null): string|false	Gets the current PHP version
putenv(string $assignment): bool	Sets the value of an environment variable
restore_include_path(): void	Restores the value of the include_path configuration option
set_include_path(string $include_path): string|false	Sets the include_path configuration option
set_time_limit(int $seconds): bool	Limits the maximum execution time
sys_get_temp_dir(): string	Returns directory path used for temporary files
version_compare(string $version1, string $version2, string|null $operator = null): int|bool	Compares two "PHP-standardized" version number strings
zend_thread_id(): int	Returns a unique identifier for the current thread
zend_version(): string	Gets the version of the current Zend engine
inotify_add_watch(resource $inotify_instance, string $pathname, int $mask): int|false	Add a watch to an initialized inotify instance
inotify_init(): resource|false	Initialize an inotify instance
inotify_queue_len(resource $inotify_instance): int	Return a number upper than zero if there are pending events
inotify_read(resource $inotify_instance): array	Read events from an inotify instance
inotify_rm_watch(resource $inotify_instance, int $watch_descriptor): bool	Remove an existing watch from an inotify instance
>asort(array $array, int $flags = Collator::SORT_REGULAR): bool	(Collator) Sort array maintaining index association
collator_asort(Collator $object, array $array, int $flags = Collator::SORT_REGULAR): bool	Sort array maintaining index association
>compare(string $string1, string $string2): int|false	(Collator) Compare two Unicode strings
collator_compare(Collator $object, string $string1, string $string2): int|false	Compare two Unicode strings
Collator(string $locale)	(new) Create a collator
Collator::create(string $locale): Collator|null	Create a collator
collator_create(string $locale): Collator|null	Create a collator
>getAttribute(int $attribute): int|false	(Collator) Get collation attribute value
collator_get_attribute(Collator $object, int $attribute): int|false	Get collation attribute value
>getErrorCode(): int|false	(Collator) Get collator's last error code
collator_get_error_code(Collator $object): int|false	Get collator's last error code
>getErrorMessage(): string|false	(Collator) Get text for collator's last error code
collator_get_error_message(Collator $object): string|false	Get text for collator's last error code
>getLocale(int $type): string|false	(Collator) Get the locale name of the collator
collator_get_locale(Collator $object, int $type): string|false	Get the locale name of the collator
>getSortKey(string $string): string|false	(Collator) Get sorting key for a string
collator_get_sort_key(Collator $object, string $string): string|false	Get sorting key for a string
>getStrength(): int	(Collator) Get current collation strength
collator_get_strength(Collator $object): int	Get current collation strength
>setAttribute(int $attribute, int $value): bool	(Collator) Set collation attribute
collator_set_attribute(Collator $object, int $attribute, int $value): bool	Set collation attribute
>setStrength(int $strength): true	(Collator) Set collation strength
collator_set_strength(Collator $object, int $strength): true	Set collation strength
>sortWithSortKeys(array $array): bool	(Collator) Sort array using specified collator and sort keys
collator_sort_with_sort_keys(Collator $object, array $array): bool	Sort array using specified collator and sort keys
>sort(array $array, int $flags = Collator::SORT_REGULAR): bool	(Collator) Sort array using specified collator
collator_sort(Collator $object, array $array, int $flags = Collator::SORT_REGULAR): bool	Sort array using specified collator
IntlDateFormatter::create(string|null $locale, int $dateType = IntlDateFormatter::FULL, int $timeType = IntlDateFormatter::FULL, IntlTimeZone|DateTimeZone|string|null $timezone = null, IntlCalendar|int|null $calendar = null, string|null $pattern = null): IntlDateFormatter|null	Create a date formatter
datefmt_create(string|null $locale, int $dateType = IntlDateFormatter::FULL, int $timeType = IntlDateFormatter::FULL, IntlTimeZone|DateTimeZone|string|null $timezone = null, IntlCalendar|int|null $calendar = null, string|null $pattern = null): IntlDateFormatter|null	Create a date formatter
>format(IntlCalendar|DateTimeInterface|array|string|int|float $datetime): string|false	(IntlDateFormatter) Format the date/time value as a string
datefmt_format(IntlDateFormatter $formatter, IntlCalendar|DateTimeInterface|array|string|int|float $datetime): string|false	Format the date/time value as a string
IntlDateFormatter::formatObject(IntlCalendar|DateTimeInterface $datetime, array|int|string|null $format = null, string|null $locale = null): string|false	Formats an object
datefmt_format_object(IntlCalendar|DateTimeInterface $datetime, array|int|string|null $format = null, string|null $locale = null): string|false	Formats an object
>getCalendar(): int|false	(IntlDateFormatter) Get the calendar type used for the IntlDateFormatter
datefmt_get_calendar(IntlDateFormatter $formatter): int|false	Get the calendar type used for the IntlDateFormatter
>getDateType(): int|false	(IntlDateFormatter) Get the datetype used for the IntlDateFormatter
datefmt_get_datetype(IntlDateFormatter $formatter): int|false	Get the datetype used for the IntlDateFormatter
>getErrorCode(): int	(IntlDateFormatter) Get the error code from last operation
datefmt_get_error_code(IntlDateFormatter $formatter): int	Get the error code from last operation
>getErrorMessage(): string	(IntlDateFormatter) Get the error text from the last operation
datefmt_get_error_message(IntlDateFormatter $formatter): string	Get the error text from the last operation
>getLocale(int $type = ULOC_ACTUAL_LOCALE): string|false	(IntlDateFormatter) Get the locale used by formatter
datefmt_get_locale(IntlDateFormatter $formatter, int $type = ULOC_ACTUAL_LOCALE): string|false	Get the locale used by formatter
>getPattern(): string|false	(IntlDateFormatter) Get the pattern used for the IntlDateFormatter
datefmt_get_pattern(IntlDateFormatter $formatter): string|false	Get the pattern used for the IntlDateFormatter
>getTimeType(): int|false	(IntlDateFormatter) Get the timetype used for the IntlDateFormatter
datefmt_get_timetype(IntlDateFormatter $formatter): int|false	Get the timetype used for the IntlDateFormatter
>getTimeZoneId(): string|false	(IntlDateFormatter) Get the timezone-id used for the IntlDateFormatter
datefmt_get_timezone_id(IntlDateFormatter $formatter): string|false	Get the timezone-id used for the IntlDateFormatter
>getCalendarObject(): IntlCalendar|false|null	(IntlDateFormatter) Get copy of formatterʼs calendar object
datefmt_get_calendar_object(IntlDateFormatter $formatter): IntlCalendar|false|null	Get copy of formatterʼs calendar object
>getTimeZone(): IntlTimeZone|false	(IntlDateFormatter) Get formatterʼs timezone
datefmt_get_timezone(IntlDateFormatter $formatter): IntlTimeZone|false	Get formatterʼs timezone
>isLenient(): bool	(IntlDateFormatter) Get the lenient used for the IntlDateFormatter
datefmt_is_lenient(IntlDateFormatter $formatter): bool	Get the lenient used for the IntlDateFormatter
>localtime(string $string, int $offset = null): array|false	(IntlDateFormatter) Parse string to a field-based time value
datefmt_localtime(IntlDateFormatter $formatter, string $string, int $offset = null): array|false	Parse string to a field-based time value
>parse(string $string, int $offset = null): int|float|false	(IntlDateFormatter) Parse string to a timestamp value
datefmt_parse(IntlDateFormatter $formatter, string $string, int $offset = null): int|float|false	Parse string to a timestamp value
>setCalendar(IntlCalendar|int|null $calendar): bool	(IntlDateFormatter) Sets the calendar type used by the formatter
datefmt_set_calendar(IntlDateFormatter $formatter, IntlCalendar|int|null $calendar): bool	Sets the calendar type used by the formatter
>setLenient(bool $lenient): void	(IntlDateFormatter) Set the leniency of the parser
datefmt_set_lenient(IntlDateFormatter $formatter, bool $lenient): void	Set the leniency of the parser
>setPattern(string $pattern): bool	(IntlDateFormatter) Set the pattern used for the IntlDateFormatter
datefmt_set_pattern(IntlDateFormatter $formatter, string $pattern): bool	Set the pattern used for the IntlDateFormatter
>setTimeZone(IntlTimeZone|DateTimeZone|string|null $timezone): bool	(IntlDateFormatter) Sets formatterʼs timezone
datefmt_set_timezone(IntlDateFormatter $formatter, IntlTimeZone|DateTimeZone|string|null $timezone): bool	Sets formatterʼs timezone
intl_error_name(int $errorCode): string	Get symbolic name for a given error code
intl_get_error_code(): int	Get the last error code
intl_get_error_message(): string	Get description of the last error
intl_is_failure(int $errorCode): bool	Check whether the given error code indicates failure
grapheme_extract(string $haystack, int $size, int $type = GRAPHEME_EXTR_COUNT, int $offset = ?, int $next = null): string|false	Function to extract a sequence of default grapheme clusters from a text buffer, which must be encoded in UTF-8
grapheme_str_split(string $string, int $length = 1): array|false	Split a string into an array
grapheme_stripos(string $haystack, string $needle, int $offset = ?): int|false	Find position (in grapheme units) of first occurrence of a case-insensitive string
grapheme_stristr(string $haystack, string $needle, bool $beforeNeedle = false): string|false	Returns part of haystack string from the first occurrence of case-insensitive needle to the end of haystack
grapheme_strlen(string $string): int|false|null	Get string length in grapheme units
grapheme_strpos(string $haystack, string $needle, int $offset = ?): int|false	Find position (in grapheme units) of first occurrence of a string
grapheme_strripos(string $haystack, string $needle, int $offset = ?): int|false	Find position (in grapheme units) of last occurrence of a case-insensitive string
grapheme_strrpos(string $haystack, string $needle, int $offset = ?): int|false	Find position (in grapheme units) of last occurrence of a string
grapheme_strstr(string $haystack, string $needle, bool $beforeNeedle = false): string|false	Returns part of haystack string from the first occurrence of needle to the end of haystack
grapheme_substr(string $string, int $offset, int|null $length = null): string|false	Return part of a string
idn_to_ascii(string $domain, int $flags = IDNA_DEFAULT, int $variant = INTL_IDNA_VARIANT_UTS46, array $idna_info = null): string|false	Convert domain name to IDNA ASCII form
idn_to_utf8(string $domain, int $flags = IDNA_DEFAULT, int $variant = INTL_IDNA_VARIANT_UTS46, array $idna_info = null): string|false	Convert domain name from IDNA ASCII to Unicode
IntlBreakIterator()	(new) Private constructor for disallowing instantiation
IntlBreakIterator::createCharacterInstance(string|null $locale = null): IntlBreakIterator|null	Create break iterator for boundaries of combining character sequences
IntlBreakIterator::createCodePointInstance(): IntlCodePointBreakIterator	Create break iterator for boundaries of code points
IntlBreakIterator::createLineInstance(string|null $locale = null): IntlBreakIterator|null	Create break iterator for logically possible line breaks
IntlBreakIterator::createSentenceInstance(string|null $locale = null): IntlBreakIterator|null	Create break iterator for sentence breaks
IntlBreakIterator::createTitleInstance(string|null $locale = null): IntlBreakIterator|null	Create break iterator for title-casing breaks
IntlBreakIterator::createWordInstance(string|null $locale = null): IntlBreakIterator|null	Create break iterator for word breaks
>current(): int	(IntlBreakIterator) Get index of current position
>first(): int	(IntlBreakIterator) Set position to the first character in the text
>following(int $offset): int	(IntlBreakIterator) Advance the iterator to the first boundary following specified offset
>getErrorCode(): int	(IntlBreakIterator) Get last error code on the object
intl_get_error_code(): int	Get last error code on the object
>getErrorMessage(): string	(IntlBreakIterator) Get last error message on the object
intl_get_error_message(): string	Get last error message on the object
>getLocale(int $type): string|false	(IntlBreakIterator) Get the locale associated with the object
>getPartsIterator(string $type = IntlPartsIterator::KEY_SEQUENTIAL): IntlPartsIterator	(IntlBreakIterator) Create iterator for navigating fragments between boundaries
>getText(): string|null	(IntlBreakIterator) Get the text being scanned
>isBoundary(int $offset): bool	(IntlBreakIterator) Tell whether an offset is a boundaryʼs offset
>last(): int	(IntlBreakIterator) Set the iterator position to index beyond the last character
>next(int|null $offset = null): int	(IntlBreakIterator) Advance the iterator the next boundary
>preceding(int $offset): int	(IntlBreakIterator) Set the iterator position to the first boundary before an offset
>previous(): int	(IntlBreakIterator) Set the iterator position to the boundary immediately before the current
>setText(string $text): bool	(IntlBreakIterator) Set the text being scanned
>add(int $field, int $value): bool	(IntlCalendar) Add a (signed) amount of time to a field
intlcal_add(IntlCalendar $calendar, int $field, int $value): bool	Add a (signed) amount of time to a field
>after(IntlCalendar $other): bool	(IntlCalendar) Whether this objectʼs time is after that of the passed object
intlcal_after(IntlCalendar $calendar, IntlCalendar $other): bool	Whether this objectʼs time is after that of the passed object
>before(IntlCalendar $other): bool	(IntlCalendar) Whether this objectʼs time is before that of the passed object
intlcal_before(IntlCalendar $calendar, IntlCalendar $other): bool	Whether this objectʼs time is before that of the passed object
>clear(int|null $field = null): true	(IntlCalendar) Clear a field or all fields
intlcal_clear(IntlCalendar $calendar, int|null $field = null): true	Clear a field or all fields
IntlCalendar()	(new) Private constructor for disallowing instantiation
IntlCalendar::createInstance(IntlTimeZone|DateTimeZone|string|null $timezone = null, string|null $locale = null): IntlCalendar|null	Create a new IntlCalendar
intlcal_create_instance(IntlTimeZone|DateTimeZone|string|null $timezone = null, string|null $locale = null): IntlCalendar|null	Create a new IntlCalendar
>equals(IntlCalendar $other): bool	(IntlCalendar) Compare time of two IntlCalendar objects for equality
intlcal_equals(IntlCalendar $calendar, IntlCalendar $other): bool	Compare time of two IntlCalendar objects for equality
>fieldDifference(float $timestamp, int $field): int|false	(IntlCalendar) Calculate difference between given time and this objectʼs time
intlcal_field_difference(IntlCalendar $calendar, float $timestamp, int $field): int|false	Calculate difference between given time and this objectʼs time
IntlCalendar::fromDateTime(DateTime|string $datetime, string|null $locale = null): IntlCalendar|null	Create an IntlCalendar from a DateTime object or string
intlcal_from_date_time(DateTime|string $datetime, string|null $locale = null): IntlCalendar|null	Create an IntlCalendar from a DateTime object or string
>get(int $field): int|false	(IntlCalendar) Get the value for a field
intlcal_get(IntlCalendar $calendar, int $field): int|false	Get the value for a field
>getActualMaximum(int $field): int|false	(IntlCalendar) The maximum value for a field, considering the objectʼs current time
intlcal_get_actual_maximum(IntlCalendar $calendar, int $field): int|false	The maximum value for a field, considering the objectʼs current time
>getActualMinimum(int $field): int|false	(IntlCalendar) The minimum value for a field, considering the objectʼs current time
intlcal_get_actual_minimum(IntlCalendar $calendar, int $field): int|false	The minimum value for a field, considering the objectʼs current time
IntlCalendar::getAvailableLocales(): array	Get array of locales for which there is data
intlcal_get_available_locales(): array	Get array of locales for which there is data
>getDayOfWeekType(int $dayOfWeek): int|false	(IntlCalendar) Tell whether a day is a weekday, weekend or a day that has a transition between the two
intlcal_get_day_of_week_type(IntlCalendar $calendar, int $dayOfWeek): int|false	Tell whether a day is a weekday, weekend or a day that has a transition between the two
>getErrorCode(): int|false	(IntlCalendar) Get last error code on the object
intlcal_get_error_code(IntlCalendar $calendar): int|false	Get last error code on the object
>getErrorMessage(): string|false	(IntlCalendar) Get last error message on the object
intlcal_get_error_message(IntlCalendar $calendar): string|false	Get last error message on the object
>getFirstDayOfWeek(): int|false	(IntlCalendar) Get the first day of the week for the calendarʼs locale
intlcal_get_first_day_of_week(IntlCalendar $calendar): int|false	Get the first day of the week for the calendarʼs locale
>getGreatestMinimum(int $field): int|false	(IntlCalendar) Get the largest local minimum value for a field
intlcal_get_greatest_minimum(IntlCalendar $calendar, int $field): int|false	Get the largest local minimum value for a field
IntlCalendar::getKeywordValuesForLocale(string $keyword, string $locale, bool $onlyCommon): IntlIterator|false	Get set of locale keyword values
intlcal_get_keyword_values_for_locale(string $keyword, string $locale, bool $onlyCommon): IntlIterator|false	Get set of locale keyword values
>getLeastMaximum(int $field): int|false	(IntlCalendar) Get the smallest local maximum for a field
intlcal_get_least_maximum(IntlCalendar $calendar, int $field): int|false	Get the smallest local maximum for a field
>getLocale(int $type): string|false	(IntlCalendar) Get the locale associated with the object
intlcal_get_locale(IntlCalendar $calendar, int $type): string|false	Get the locale associated with the object
>getMaximum(int $field): int|false	(IntlCalendar) Get the global maximum value for a field
intlcal_get_maximum(IntlCalendar $calendar, int $field): int|false	Get the global maximum value for a field
>getMinimalDaysInFirstWeek(): int|false	(IntlCalendar) Get minimal number of days the first week in a year or month can have
intlcal_get_minimal_days_in_first_week(IntlCalendar $calendar): int|false	Get minimal number of days the first week in a year or month can have
>getMinimum(int $field): int|false	(IntlCalendar) Get the global minimum value for a field
intlcal_get_minimum(IntlCalendar $calendar, int $field): int|false	Get the global minimum value for a field
IntlCalendar::getNow(): float	Get number representing the current time
intlcal_get_now(): float	Get number representing the current time
>getRepeatedWallTimeOption(): int	(IntlCalendar) Get behavior for handling repeating wall time
intlcal_get_repeated_wall_time_option(IntlCalendar $calendar): int	Get behavior for handling repeating wall time
>getSkippedWallTimeOption(): int	(IntlCalendar) Get behavior for handling skipped wall time
intlcal_get_skipped_wall_time_option(IntlCalendar $calendar): int	Get behavior for handling skipped wall time
>getTime(): float|false	(IntlCalendar) Get time currently represented by the object
intlcal_get_time(IntlCalendar $calendar): float|false	Get time currently represented by the object
>getTimeZone(): IntlTimeZone|false	(IntlCalendar) Get the objectʼs timezone
intlcal_get_time_zone(IntlCalendar $calendar): IntlTimeZone|false	Get the objectʼs timezone
>getType(): string	(IntlCalendar) Get the calendar type
intlcal_get_type(IntlCalendar $calendar): string	Get the calendar type
>getWeekendTransition(int $dayOfWeek): int|false	(IntlCalendar) Get time of the day at which weekend begins or ends
intlcal_get_weekend_transition(IntlCalendar $calendar, int $dayOfWeek): int|false	Get time of the day at which weekend begins or ends
>inDaylightTime(): bool	(IntlCalendar) Whether the objectʼs time is in Daylight Savings Time
intlcal_in_daylight_time(IntlCalendar $calendar): bool	Whether the objectʼs time is in Daylight Savings Time
>isEquivalentTo(IntlCalendar $other): bool	(IntlCalendar) Whether another calendar is equal but for a different time
intlcal_is_equivalent_to(IntlCalendar $calendar, IntlCalendar $other): bool	Whether another calendar is equal but for a different time
>isLenient(): bool	(IntlCalendar) Whether date/time interpretation is in lenient mode
intlcal_is_lenient(IntlCalendar $calendar): bool	Whether date/time interpretation is in lenient mode
>isSet(int $field): bool	(IntlCalendar) Whether a field is set
intlcal_is_set(IntlCalendar $calendar, int $field): bool	Whether a field is set
>isWeekend(float|null $timestamp = null): bool	(IntlCalendar) Whether a certain date/time is in the weekend
intlcal_is_weekend(IntlCalendar $calendar, float|null $timestamp = null): bool	Whether a certain date/time is in the weekend
>roll(int $field, int|bool $value): bool	(IntlCalendar) Add value to field without carrying into more significant fields
intlcal_roll(IntlCalendar $calendar, int $field, int|bool $value): bool	Add value to field without carrying into more significant fields
>set(int $field, int $value): true	(IntlCalendar) Set a time field or several common fields at once
>set(int $year, int $month, int $dayOfMonth = NULL, int $hour = NULL, int $minute = NULL, int $second = NULL): true	(IntlCalendar) Set a time field or several common fields at once
intlcal_set(IntlCalendar $cal, int $field, int $value): true	Set a time field or several common fields at once
intlcal_set(IntlCalendar $cal, int $year, int $month, int $dayOfMonth = NULL, int $hour = NULL, int $minute = NULL, int $second = NULL): bool	Set a time field or several common fields at once
>setDate(int $year, int $month, int $dayOfMonth): void	(IntlCalendar) Set a date fields
>setDateTime(int $year, int $month, int $dayOfMonth, int $hour, int $minute, int|null $second = null): void	(IntlCalendar) Set a date and time fields
>setFirstDayOfWeek(int $dayOfWeek): true	(IntlCalendar) Set the day on which the week is deemed to start
intlcal_set_first_day_of_week(IntlCalendar $calendar, int $dayOfWeek): true	Set the day on which the week is deemed to start
>setLenient(bool $lenient): true	(IntlCalendar) Set whether date/time interpretation is to be lenient
intlcal_set_lenient(IntlCalendar $calendar, bool $lenient): true	Set whether date/time interpretation is to be lenient
>setMinimalDaysInFirstWeek(int $days): true	(IntlCalendar) Set minimal number of days the first week in a year or month can have
intlcal_set_minimal_days_in_first_week(IntlCalendar $calendar, int $days): true	Set minimal number of days the first week in a year or month can have
>setRepeatedWallTimeOption(int $option): true	(IntlCalendar) Set behavior for handling repeating wall times at negative timezone offset transitions
intlcal_set_repeated_wall_time_option(IntlCalendar $calendar, int $option): true	Set behavior for handling repeating wall times at negative timezone offset transitions
>setSkippedWallTimeOption(int $option): true	(IntlCalendar) Set behavior for handling skipped wall times at positive timezone offset transitions
intlcal_set_skipped_wall_time_option(IntlCalendar $calendar, int $option): true	Set behavior for handling skipped wall times at positive timezone offset transitions
>setTime(float $timestamp): bool	(IntlCalendar) Set the calendar time in milliseconds since the epoch
intlcal_set_time(IntlCalendar $calendar, float $timestamp): bool	Set the calendar time in milliseconds since the epoch
>setTimeZone(IntlTimeZone|DateTimeZone|string|null $timezone): bool	(IntlCalendar) Set the timezone used by this calendar
intlcal_set_time_zone(IntlCalendar $calendar, IntlTimeZone|DateTimeZone|string|null $timezone): bool	Set the timezone used by this calendar
>toDateTime(): DateTime|false	(IntlCalendar) Convert an IntlCalendar into a DateTime object
intlcal_to_date_time(IntlCalendar $calendar): DateTime|false	Convert an IntlCalendar into a DateTime object
IntlChar::charAge(int|string $codepoint): array|null	Get the "age" of the code point
IntlChar::charDigitValue(int|string $codepoint): int|null	Get the decimal digit value of a decimal digit character
IntlChar::charDirection(int|string $codepoint): int|null	Get bidirectional category value for a code point
IntlChar::charFromName(string $name, int $type = IntlChar::UNICODE_CHAR_NAME): int|null	Find Unicode character by name and return its code point value
IntlChar::charMirror(int|string $codepoint): int|string|null	Get the "mirror-image" character for a code point
IntlChar::charName(int|string $codepoint, int $type = IntlChar::UNICODE_CHAR_NAME): string|null	Retrieve the name of a Unicode character
IntlChar::charType(int|string $codepoint): int|null	Get the general category value for a code point
IntlChar::chr(int|string $codepoint): string|null	Return Unicode character by code point value
IntlChar::digit(int|string $codepoint, int $base = 10): int|false|null	Get the decimal digit value of a code point for a given radix
IntlChar::enumCharNames(int|string $start, int|string $end, callable $callback, int $type = IntlChar::UNICODE_CHAR_NAME): bool	Enumerate all assigned Unicode characters within a range
IntlChar::enumCharTypes(callable $callback): void	Enumerate all code points with their Unicode general categories
IntlChar::foldCase(int|string $codepoint, int $options = IntlChar::FOLD_CASE_DEFAULT): int|string|null	Perform case folding on a code point
IntlChar::forDigit(int $digit, int $base = 10): int	Get character representation for a given digit and radix
IntlChar::getBidiPairedBracket(int|string $codepoint): int|string|null	Get the paired bracket character for a code point
IntlChar::getBlockCode(int|string $codepoint): int|null	Get the Unicode allocation block containing a code point
IntlChar::getCombiningClass(int|string $codepoint): int|null	Get the combining class of a code point
IntlChar::getFC_NFKC_Closure(int|string $codepoint): string|false|null	Get the FC_NFKC_Closure property for a code point
IntlChar::getIntPropertyMaxValue(int $property): int	Get the max value for a Unicode property
IntlChar::getIntPropertyMinValue(int $property): int	Get the min value for a Unicode property
IntlChar::getIntPropertyValue(int|string $codepoint, int $property): int|null	Get the value for a Unicode property for a code point
IntlChar::getNumericValue(int|string $codepoint): float|null	Get the numeric value for a Unicode code point
IntlChar::getPropertyEnum(string $alias): int	Get the property constant value for a given property name
IntlChar::getPropertyName(int $property, int $type = IntlChar::LONG_PROPERTY_NAME): string|false	Get the Unicode name for a property
IntlChar::getPropertyValueEnum(int $property, string $name): int	Get the property value for a given value name
IntlChar::getPropertyValueName(int $property, int $value, int $type = IntlChar::LONG_PROPERTY_NAME): string|false	Get the Unicode name for a property value
IntlChar::getUnicodeVersion(): array	Get the Unicode version
IntlChar::hasBinaryProperty(int|string $codepoint, int $property): bool|null	Check a binary Unicode property for a code point
IntlChar::isalnum(int|string $codepoint): bool|null	Check if code point is an alphanumeric character
IntlChar::isalpha(int|string $codepoint): bool|null	Check if code point is a letter character
IntlChar::isbase(int|string $codepoint): bool|null	Check if code point is a base character
IntlChar::isblank(int|string $codepoint): bool|null	Check if code point is a "blank" or "horizontal space" character
IntlChar::iscntrl(int|string $codepoint): bool|null	Check if code point is a control character
IntlChar::isdefined(int|string $codepoint): bool|null	Check whether the code point is defined
IntlChar::isdigit(int|string $codepoint): bool|null	Check if code point is a digit character
IntlChar::isgraph(int|string $codepoint): bool|null	Check if code point is a graphic character
IntlChar::isIDIgnorable(int|string $codepoint): bool|null	Check if code point is an ignorable character
IntlChar::isIDPart(int|string $codepoint): bool|null	Check if code point is permissible in an identifier
IntlChar::isIDStart(int|string $codepoint): bool|null	Check if code point is permissible as the first character in an identifier
IntlChar::isISOControl(int|string $codepoint): bool|null	Check if code point is an ISO control code
IntlChar::isJavaIDPart(int|string $codepoint): bool|null	Check if code point is permissible in a Java identifier
IntlChar::isJavaIDStart(int|string $codepoint): bool|null	Check if code point is permissible as the first character in a Java identifier
IntlChar::isJavaSpaceChar(int|string $codepoint): bool|null	Check if code point is a space character according to Java
IntlChar::islower(int|string $codepoint): bool|null	Check if code point is a lowercase letter
IntlChar::isMirrored(int|string $codepoint): bool|null	Check if code point has the Bidi_Mirrored property
IntlChar::isprint(int|string $codepoint): bool|null	Check if code point is a printable character
IntlChar::ispunct(int|string $codepoint): bool|null	Check if code point is punctuation character
IntlChar::isspace(int|string $codepoint): bool|null	Check if code point is a space character
IntlChar::istitle(int|string $codepoint): bool|null	Check if code point is a titlecase letter
IntlChar::isUAlphabetic(int|string $codepoint): bool|null	Check if code point has the Alphabetic Unicode property
IntlChar::isULowercase(int|string $codepoint): bool|null	Check if code point has the Lowercase Unicode property
IntlChar::isupper(int|string $codepoint): bool|null	Check if code point has the general category "Lu" (uppercase letter)
IntlChar::isUUppercase(int|string $codepoint): bool|null	Check if code point has the Uppercase Unicode property
IntlChar::isUWhiteSpace(int|string $codepoint): bool|null	Check if code point has the White_Space Unicode property
IntlChar::isWhitespace(int|string $codepoint): bool|null	Check if code point is a whitespace character according to ICU
IntlChar::isxdigit(int|string $codepoint): bool|null	Check if code point is a hexadecimal digit
IntlChar::ord(int|string $character): int|null	Return Unicode code point value of character
IntlChar::tolower(int|string $codepoint): int|string|null	Make Unicode character lowercase
IntlChar::totitle(int|string $codepoint): int|string|null	Make Unicode character titlecase
IntlChar::toupper(int|string $codepoint): int|string|null	Make Unicode character uppercase
>getLastCodePoint(): int	(IntlCodePointBreakIterator) Get last code point passed over after advancing or receding the iterator
IntlDatePatternGenerator::create(string|null $locale = null): IntlDatePatternGenerator|null	Creates a new IntlDatePatternGenerator instance
>getBestPattern(string $skeleton): string|false	(IntlDatePatternGenerator) Determines the most suitable date/time format
IntlGregorianCalendar(IntlTimeZone $tz = ?, string $locale = ?)	(new) Create the Gregorian Calendar class
IntlGregorianCalendar(int $timeZoneOrYear, int $localeOrMonth, int $dayOfMonth)	(new) Create the Gregorian Calendar class
IntlGregorianCalendar(int $timeZoneOrYear, int $localeOrMonth, int $dayOfMonth, int $hour, int $minute, int $second = ?)	(new) Create the Gregorian Calendar class
IntlGregorianCalendar::createFromDate(int $year, int $month, int $dayOfMonth): static	Create a new IntlGregorianCalendar instance from date
IntlGregorianCalendar::createFromDateTime(int $year, int $month, int $dayOfMonth, int $hour, int $minute, int|null $second = null): static	Create a new IntlGregorianCalendar instance from date and time
>getGregorianChange(): float	(IntlGregorianCalendar) Get the Gregorian Calendar change date
>isLeapYear(int $year): bool	(IntlGregorianCalendar) Determine if the given year is a leap year
>setGregorianChange(float $timestamp): bool	(IntlGregorianCalendar) Set the Gregorian Calendar the change date
>current(): mixed	(IntlIterator) Get the current element
>key(): mixed	(IntlIterator) Get the current key
>next(): void	(IntlIterator) Move forward to the next element
>rewind(): void	(IntlIterator) Rewind the iterator to the first element
>valid(): bool	(IntlIterator) Check if current position is valid
>getBreakIterator(): IntlBreakIterator	(IntlPartsIterator) Get IntlBreakIterator backing this parts iterator
IntlRuleBasedBreakIterator(string $rules, bool $compiled = false)	(new) Create iterator from ruleset
>getBinaryRules(): string|false	(IntlRuleBasedBreakIterator) Get the binary form of compiled rules
>getRules(): string|false	(IntlRuleBasedBreakIterator) Get the rule set used to create this object
>getRuleStatus(): int	(IntlRuleBasedBreakIterator) Get the largest status value from the break rules that determined the current break position
>getRuleStatusVec(): array|false	(IntlRuleBasedBreakIterator) Get the status values from the break rules that determined the current break position
IntlTimeZone()	(new) Private constructor to disallow direct instantiation
IntlTimeZone::countEquivalentIDs(string $timezoneId): int|false	Get the number of IDs in the equivalency group that includes the given ID
intltz_count_equivalent_ids(string $timezoneId): int|false	Get the number of IDs in the equivalency group that includes the given ID
IntlTimeZone::createDefault(): IntlTimeZone	Create a new copy of the default timezone for this host
intltz_create_default(): IntlTimeZone	Create a new copy of the default timezone for this host
IntlTimeZone::createEnumeration(IntlTimeZone|string|int|float|null $countryOrRawOffset = null): IntlIterator|false	Get an enumeration over time zone IDs associated with the given country or offset
intltz_create_enumeration(IntlTimeZone|string|int|float|null $countryOrRawOffset = null): IntlIterator|false	Get an enumeration over time zone IDs associated with the given country or offset
IntlTimeZone::createTimeZone(string $timezoneId): IntlTimeZone|null	Create a timezone object for the given ID
intltz_create_time_zone(string $timezoneId): IntlTimeZone|null	Create a timezone object for the given ID
IntlTimeZone::createTimeZoneIDEnumeration(int $type, string|null $region = null, int|null $rawOffset = null): IntlIterator|false	Get an enumeration over system time zone IDs with the given filter conditions
intltz_create_time_zone_id_enumeration(int $type, string|null $region = null, int|null $rawOffset = null): IntlIterator|false	Get an enumeration over system time zone IDs with the given filter conditions
IntlTimeZone::fromDateTimeZone(DateTimeZone $timezone): IntlTimeZone|null	Create a timezone object from DateTimeZone
intltz_from_date_time_zone(DateTimeZone $timezone): IntlTimeZone|null	Create a timezone object from DateTimeZone
IntlTimeZone::getCanonicalID(string $timezoneId, bool $isSystemId = null): string|false	Get the canonical system timezone ID or the normalized custom time zone ID for the given time zone ID
intltz_get_canonical_id(string $timezoneId, bool $isSystemId = null): string|false	Get the canonical system timezone ID or the normalized custom time zone ID for the given time zone ID
>getDisplayName(bool $dst = false, int $style = IntlTimeZone::DISPLAY_LONG, string|null $locale = null): string|false	(IntlTimeZone) Get a name of this time zone suitable for presentation to the user
intltz_get_display_name(IntlTimeZone $timezone, bool $dst = false, int $style = IntlTimeZone::DISPLAY_LONG, string|null $locale = null): string|false	Get a name of this time zone suitable for presentation to the user
>getDSTSavings(): int	(IntlTimeZone) Get the amount of time to be added to local standard time to get local wall clock time
intltz_get_dst_savings(IntlTimeZone $timezone): int	Get the amount of time to be added to local standard time to get local wall clock time
IntlTimeZone::getEquivalentID(string $timezoneId, int $offset): string|false	Get an ID in the equivalency group that includes the given ID
intltz_get_equivalent_id(string $timezoneId, int $offset): string|false	Get an ID in the equivalency group that includes the given ID
>getErrorCode(): int|false	(IntlTimeZone) Get last error code on the object
intltz_get_error_code(IntlTimeZone $timezone): int|false	Get last error code on the object
>getErrorMessage(): string|false	(IntlTimeZone) Get last error message on the object
intltz_get_error_message(IntlTimeZone $timezone): string|false	Get last error message on the object
IntlTimeZone::getGMT(): IntlTimeZone	Create GMT (UTC) timezone
intltz_get_gmt(): IntlTimeZone	Create GMT (UTC) timezone
>getID(): string|false	(IntlTimeZone) Get timezone ID
intltz_get_id(IntlTimeZone $timezone): string|false	Get timezone ID
IntlTimeZone::getIDForWindowsID(string $timezoneId, string|null $region = null): string|false	Translate a Windows timezone into a system timezone
intltz_get_id_for_windows_id(string $timezoneId, string|null $region = null): string|false	Translate a Windows timezone into a system timezone
>getOffset(float $timestamp, bool $local, int $rawOffset, int $dstOffset): bool	(IntlTimeZone) Get the time zone raw and GMT offset for the given moment in time
intltz_get_offset(IntlTimeZone $timezone, float $timestamp, bool $local, int $rawOffset, int $dstOffset): bool	Get the time zone raw and GMT offset for the given moment in time
>getRawOffset(): int	(IntlTimeZone) Get the raw GMT offset (before taking daylight savings time into account
intltz_get_raw_offset(IntlTimeZone $timezone): int	Get the raw GMT offset (before taking daylight savings time into account
IntlTimeZone::getRegion(string $timezoneId): string|false	Get the region code associated with the given system time zone ID
intltz_get_region(string $timezoneId): string|false	Get the region code associated with the given system time zone ID
IntlTimeZone::getTZDataVersion(): string|false	Get the timezone data version currently used by ICU
intltz_get_tz_data_version(): string|false	Get the timezone data version currently used by ICU
IntlTimeZone::getUnknown(): IntlTimeZone	Get the "unknown" time zone
intltz_get_unknown(): IntlTimeZone	Get the "unknown" time zone
IntlTimeZone::getWindowsID(string $timezoneId): string|false	Translate a system timezone into a Windows timezone
intltz_get_windows_id(string $timezoneId): string|false	Translate a system timezone into a Windows timezone
>hasSameRules(IntlTimeZone $other): bool	(IntlTimeZone) Check if this zone has the same rules and offset as another zone
intltz_has_same_rules(IntlTimeZone $timezone, IntlTimeZone $other): bool	Check if this zone has the same rules and offset as another zone
>toDateTimeZone(): DateTimeZone|false	(IntlTimeZone) Convert to DateTimeZone object
intltz_to_date_time_zone(IntlTimeZone $timezone): DateTimeZone|false	Convert to DateTimeZone object
>useDaylightTime(): bool	(IntlTimeZone) Check if this time zone uses daylight savings time
intltz_use_daylight_time(IntlTimeZone $timezone): bool	Check if this time zone uses daylight savings time
Locale::acceptFromHttp(string $header): string|false	Tries to find out best available locale based on HTTP "Accept-Language" header
locale_accept_from_http(string $header): string|false	Tries to find out best available locale based on HTTP "Accept-Language" header
Locale::canonicalize(string $locale): string|null	Canonicalize the locale string
Locale::composeLocale(array $subtags): string|false	Returns a correctly ordered and delimited locale ID
locale_compose(array $subtags): string|false	Returns a correctly ordered and delimited locale ID
Locale::filterMatches(string $languageTag, string $locale, bool $canonicalize = false): bool|null	Checks if a language tag filter matches with locale
locale_filter_matches(string $languageTag, string $locale, bool $canonicalize = false): bool|null	Checks if a language tag filter matches with locale
Locale::getAllVariants(string $locale): array|null	Gets the variants for the input locale
locale_get_all_variants(string $locale): array|null	Gets the variants for the input locale
Locale::getDefault(): string	Gets the default locale value from the INTL global 'default_locale'
locale_get_default(): string	Gets the default locale value from the INTL global 'default_locale'
Locale::getDisplayLanguage(string $locale, string|null $displayLocale = null): string|false	Returns an appropriately localized display name for language of the inputlocale
locale_get_display_language(string $locale, string|null $displayLocale = null): string|false	Returns an appropriately localized display name for language of the inputlocale
Locale::getDisplayName(string $locale, string|null $displayLocale = null): string|false	Returns an appropriately localized display name for the input locale
locale_get_display_name(string $locale, string|null $displayLocale = null): string|false	Returns an appropriately localized display name for the input locale
Locale::getDisplayRegion(string $locale, string|null $displayLocale = null): string|false	Returns an appropriately localized display name for region of the input locale
locale_get_display_region(string $locale, string|null $displayLocale = null): string|false	Returns an appropriately localized display name for region of the input locale
Locale::getDisplayScript(string $locale, string|null $displayLocale = null): string|false	Returns an appropriately localized display name for script of the input locale
locale_get_display_script(string $locale, string|null $displayLocale = null): string|false	Returns an appropriately localized display name for script of the input locale
Locale::getDisplayVariant(string $locale, string|null $displayLocale = null): string|false	Returns an appropriately localized display name for variants of the input locale
locale_get_display_variant(string $locale, string|null $displayLocale = null): string|false	Returns an appropriately localized display name for variants of the input locale
Locale::getKeywords(string $locale): array|false|null	Gets the keywords for the input locale
locale_get_keywords(string $locale): array|false|null	Gets the keywords for the input locale
Locale::getPrimaryLanguage(string $locale): string|null	Gets the primary language for the input locale
locale_get_primary_language(string $locale): string|null	Gets the primary language for the input locale
Locale::getRegion(string $locale): string|null	Gets the region for the input locale
locale_get_region(string $locale): string|null	Gets the region for the input locale
Locale::getScript(string $locale): string|null	Gets the script for the input locale
locale_get_script(string $locale): string|null	Gets the script for the input locale
Locale::lookup(array $languageTag, string $locale, bool $canonicalize = false, string|null $defaultLocale = null): string|null	Searches the language tag list for the best match to the language
locale_lookup(array $languageTag, string $locale, bool $canonicalize = false, string|null $defaultLocale = null): string|null	Searches the language tag list for the best match to the language
Locale::parseLocale(string $locale): array|null	Returns a key-value array of locale ID subtag elements
locale_parse(string $locale): array|null	Returns a key-value array of locale ID subtag elements
Locale::setDefault(string $locale): true	Sets the default runtime locale
locale_set_default(string $locale): true	Sets the default runtime locale
MessageFormatter::create(string $locale, string $pattern): MessageFormatter|null	Constructs a new Message Formatter
msgfmt_create(string $locale, string $pattern): MessageFormatter|null	Constructs a new Message Formatter
MessageFormatter::formatMessage(string $locale, string $pattern, array $values): string|false	Quick format message
msgfmt_format_message(string $locale, string $pattern, array $values): string|false	Quick format message
>format(array $values): string|false	(MessageFormatter) Format the message
msgfmt_format(MessageFormatter $formatter, array $values): string|false	Format the message
>getErrorCode(): int	(MessageFormatter) Get the error code from last operation
msgfmt_get_error_code(MessageFormatter $formatter): int	Get the error code from last operation
>getErrorMessage(): string	(MessageFormatter) Get the error text from the last operation
msgfmt_get_error_message(MessageFormatter $formatter): string	Get the error text from the last operation
>getLocale(): string	(MessageFormatter) Get the locale for which the formatter was created
msgfmt_get_locale(MessageFormatter $formatter): string	Get the locale for which the formatter was created
>getPattern(): string|false	(MessageFormatter) Get the pattern used by the formatter
msgfmt_get_pattern(MessageFormatter $formatter): string|false	Get the pattern used by the formatter
MessageFormatter::parseMessage(string $locale, string $pattern, string $message): array|false	Quick parse input string
msgfmt_parse_message(string $locale, string $pattern, string $message): array|false	Quick parse input string
>parse(string $string): array|false	(MessageFormatter) Parse input string according to pattern
msgfmt_parse(MessageFormatter $formatter, string $string): array|false	Parse input string according to pattern
>setPattern(string $pattern): bool	(MessageFormatter) Set the pattern used by the formatter
msgfmt_set_pattern(MessageFormatter $formatter, string $pattern): bool	Set the pattern used by the formatter
Normalizer::getRawDecomposition(string $string, int $form = Normalizer::FORM_C): string|null	Gets the Decomposition_Mapping property for the given UTF-8 encoded code point
normalizer_get_raw_decomposition(string $string, int $form = Normalizer::FORM_C): string|null	Gets the Decomposition_Mapping property for the given UTF-8 encoded code point
Normalizer::isNormalized(string $string, int $form = Normalizer::FORM_C): bool	Checks if the provided string is already in the specified normalization form
normalizer_is_normalized(string $string, int $form = Normalizer::FORM_C): bool	Checks if the provided string is already in the specified normalization form
Normalizer::normalize(string $string, int $form = Normalizer::FORM_C): string|false	Normalizes the input provided and returns the normalized string
normalizer_normalize(string $string, int $form = Normalizer::FORM_C): string|false	Normalizes the input provided and returns the normalized string
NumberFormatter::create(string $locale, int $style, string|null $pattern = null): NumberFormatter|null	Create a number formatter
numfmt_create(string $locale, int $style, string|null $pattern = null): NumberFormatter|null	Create a number formatter
>formatCurrency(float $amount, string $currency): string|false	(NumberFormatter) Format a currency value
numfmt_format_currency(NumberFormatter $formatter, float $amount, string $currency): string|false	Format a currency value
>format(int|float $num, int $type = NumberFormatter::TYPE_DEFAULT): string|false	(NumberFormatter) Format a number
numfmt_format(NumberFormatter $formatter, int|float $num, int $type = NumberFormatter::TYPE_DEFAULT): string|false	Format a number
>getAttribute(int $attribute): int|float|false	(NumberFormatter) Get an attribute
numfmt_get_attribute(NumberFormatter $formatter, int $attribute): int|float|false	Get an attribute
>getErrorCode(): int	(NumberFormatter) Get formatter's last error code
numfmt_get_error_code(NumberFormatter $formatter): int	Get formatter's last error code
>getErrorMessage(): string	(NumberFormatter) Get formatter's last error message
numfmt_get_error_message(NumberFormatter $formatter): string	Get formatter's last error message
>getLocale(int $type = ULOC_ACTUAL_LOCALE): string|false	(NumberFormatter) Get formatter locale
numfmt_get_locale(NumberFormatter $formatter, int $type = ULOC_ACTUAL_LOCALE): string|false	Get formatter locale
>getPattern(): string|false	(NumberFormatter) Get formatter pattern
numfmt_get_pattern(NumberFormatter $formatter): string|false	Get formatter pattern
>getSymbol(int $symbol): string|false	(NumberFormatter) Get a symbol value
numfmt_get_symbol(NumberFormatter $formatter, int $symbol): string|false	Get a symbol value
>getTextAttribute(int $attribute): string|false	(NumberFormatter) Get a text attribute
numfmt_get_text_attribute(NumberFormatter $formatter, int $attribute): string|false	Get a text attribute
>parseCurrency(string $string, string $currency, int $offset = null): float|false	(NumberFormatter) Parse a currency number
numfmt_parse_currency(NumberFormatter $formatter, string $string, string $currency, int $offset = null): float|false	Parse a currency number
>parse(string $string, int $type = NumberFormatter::TYPE_DOUBLE, int $offset = null): int|float|false	(NumberFormatter) Parse a number
numfmt_parse(NumberFormatter $formatter, string $string, int $type = NumberFormatter::TYPE_DOUBLE, int $offset = null): int|float|false	Parse a number
>setAttribute(int $attribute, int|float $value): bool	(NumberFormatter) Set an attribute
numfmt_set_attribute(NumberFormatter $formatter, int $attribute, int|float $value): bool	Set an attribute
>setPattern(string $pattern): bool	(NumberFormatter) Set formatter pattern
numfmt_set_pattern(NumberFormatter $formatter, string $pattern): bool	Set formatter pattern
>setSymbol(int $symbol, string $value): bool	(NumberFormatter) Set a symbol value
numfmt_set_symbol(NumberFormatter $formatter, int $symbol, string $value): bool	Set a symbol value
>setTextAttribute(int $attribute, string $value): bool	(NumberFormatter) Set a text attribute
numfmt_set_text_attribute(NumberFormatter $formatter, int $attribute, string $value): bool	Set a text attribute
>count(): int	(ResourceBundle) Get number of elements in the bundle
resourcebundle_count(ResourceBundle $bundle): int	Get number of elements in the bundle
ResourceBundle::create(string|null $locale, string|null $bundle, bool $fallback = true): ResourceBundle|null	Create a resource bundle
resourcebundle_create(string|null $locale, string|null $bundle, bool $fallback = true): ResourceBundle|null	Create a resource bundle
>getErrorCode(): int	(ResourceBundle) Get bundle's last error code
resourcebundle_get_error_code(ResourceBundle $bundle): int	Get bundle's last error code
>getErrorMessage(): string	(ResourceBundle) Get bundle's last error message
resourcebundle_get_error_message(ResourceBundle $bundle): string	Get bundle's last error message
>get(string|int $index, bool $fallback = true): mixed	(ResourceBundle) Get data from the bundle
resourcebundle_get(ResourceBundle $bundle, string|int $index, bool $fallback = true): mixed	Get data from the bundle
ResourceBundle::getLocales(string $bundle): array|false	Get supported locales
resourcebundle_locales(string $bundle): array|false	Get supported locales
>areConfusable(string $string1, string $string2, int $errorCode = null): bool	(Spoofchecker) Checks if given strings can be confused
Spoofchecker()	(new) Constructor
>isSuspicious(string $string, int $errorCode = null): bool	(Spoofchecker) Checks if a given text contains any suspicious characters
>setAllowedLocales(string $locales): void	(Spoofchecker) Locales to use when running checks
>setChecks(int $checks): void	(Spoofchecker) Set the checks to run
>setRestrictionLevel(int $level): void	(Spoofchecker) Set the restriction level
Transliterator()	(new) Private constructor to deny instantiation
Transliterator::create(string $id, int $direction = Transliterator::FORWARD): Transliterator|null	Create a transliterator
transliterator_create(string $id, int $direction = Transliterator::FORWARD): Transliterator|null	Create a transliterator
Transliterator::createFromRules(string $rules, int $direction = Transliterator::FORWARD): Transliterator|null	Create transliterator from rules
transliterator_create_from_rules(string $rules, int $direction = Transliterator::FORWARD): Transliterator|null	Create transliterator from rules
>createInverse(): Transliterator|null	(Transliterator) Create an inverse transliterator
transliterator_create_inverse(Transliterator $transliterator): Transliterator|null	Create an inverse transliterator
>getErrorCode(): int|false	(Transliterator) Get last error code
transliterator_get_error_code(Transliterator $transliterator): int|false	Get last error code
>getErrorMessage(): string|false	(Transliterator) Get last error message
transliterator_get_error_message(Transliterator $transliterator): string|false	Get last error message
Transliterator::listIDs(): array|false	Get transliterator IDs
transliterator_list_ids(): array|false	Get transliterator IDs
>transliterate(string $string, int $start = ?, int $end = -1): string|false	(Transliterator) Transliterate a string
transliterator_transliterate(Transliterator|string $transliterator, string $string, int $start = ?, int $end = -1): string|false	Transliterate a string
UConverter(string|null $destination_encoding = null, string|null $source_encoding = null)	(new) Create UConverter object
>convert(string $str, bool $reverse = false): string|false	(UConverter) Convert string from one charset to another
>fromUCallback(int $reason, array $source, int $codePoint, int $error): string|int|array|null	(UConverter) Default "from" callback function
UConverter::getAliases(string $name): array|false|null	Get the aliases of the given name
UConverter::getAvailable(): array	Get the available canonical converter names
>getDestinationEncoding(): string|false|null	(UConverter) Get the destination encoding
>getDestinationType(): int|false|null	(UConverter) Get the destination converter type
>getErrorCode(): int	(UConverter) Get last error code on the object
>getErrorMessage(): string|null	(UConverter) Get last error message on the object
>getSourceEncoding(): string|false|null	(UConverter) Get the source encoding
>getSourceType(): int|false|null	(UConverter) Get the source converter type
UConverter::getStandards(): array|null	Get standards associated to converter names
>getSubstChars(): string|false|null	(UConverter) Get substitution chars
UConverter::reasonText(int $reason): string	Get string representation of the callback reason
>setDestinationEncoding(string $encoding): bool	(UConverter) Set the destination encoding
>setSourceEncoding(string $encoding): bool	(UConverter) Set the source encoding
>setSubstChars(string $chars): bool	(UConverter) Set the substitution chars
>toUCallback(int $reason, string $source, string $codeUnits, int $error): string|int|array|null	(UConverter) Default "to" callback function
UConverter::transcode(string $str, string $toEncoding, string $fromEncoding, array|null $options = null): string|false	Convert a string from one character encoding to another
IntlDateFormatter()	(new) Date Formatter is a concrete class that enables locale-dependent formatting/parsing of dates using pattern strings and/or canned patterns
IntlChar()	(new) IntlChar provides access to a number of utility methods that can be used to access information about Unicode characters
IntlCodePointBreakIterator()	(new) This break iterator identifies the boundaries between UTF-8 code points
IntlDatePatternGenerator()	(new) Generates localized date and/or time format pattern strings suitable for use in IntlDateFormatter
IntlException()	(new) This class is used for generating exceptions when errors occur inside intl functions
IntlIterator()	(new) This class represents iterator objects throughout the intl extension whenever the iterator cannot be identified with any other object provided by the extension
IntlPartsIterator()	(new) Objects of this class can be obtained from IntlBreakIterator objects
Locale()	(new) Examples of identifiers include: en-US (English, United States) zh-Hant-TW (Chinese, Traditional Script, Taiwan) fr-CA, fr-FR (French for Canada and France respectively)
MessageFormatter()	(new) MessageFormatter is a concrete class that enables users to produce concatenated, language-neutral messages
Normalizer()	(new) The Unicode Consortium has defined a number of normalization forms reflecting the various needs of applications: Normalization Form D (NFD) - Canonical Decomposition Normalization Form C (NFC) - Canonical Decomposition followed by Canonical Composition Normalization Form KD (NFKD) - Compatibility Decomposition Normalization Form KC (NFKC) - Compatibility Decomposition followed by Canonical Composition The different forms are defined in terms of a set of transformations on the text, transformations that are expressed by both an algorithm and a set of data files
NumberFormatter()	(new) For currencies you can use currency format type to create a formatter that returns a string with the formatted number and the appropriate currency sign
ResourceBundle()	(new) Localized software products often require sets of data that are to be customized depending on current locale, e
json_decode(string $json, bool|null $associative = null, int $depth = 512, int $flags = ?): mixed	Decodes a JSON string
json_encode(mixed $value, int $flags = ?, int $depth = 512): string|false	Returns the JSON representation of a value
json_last_error_msg(): string	Returns the error string of the last json_encode() or json_decode() call
json_last_error(): int	Returns the last error occurred
json_validate(string $json, int $depth = 512, int $flags = ?): bool	Checks if a string contains valid JSON
>jsonSerialize(): mixed	(JsonSerializable) Specify data which should be serialized to JSON
JsonException()	(new) Exception thrown if JSON_THROW_ON_ERROR option is set for json_encode or json_decode
JsonSerializable()	(new) Objects implementing JsonSerializable can customize their JSON representation when encoded with json_encode
ldap_8859_to_t61(string $value): string|false	Translate 8859 characters to t61 characters
ldap_add_ext(LDAP\Connection $ldap, string $dn, array $entry, array|null $controls = null): LDAP\Result|false	Add entries to LDAP directory
ldap_add(LDAP\Connection $ldap, string $dn, array $entry, array|null $controls = null): bool	Add entries to LDAP directory
ldap_bind_ext(LDAP\Connection $ldap, string|null $dn = null, string|null $password = null, array|null $controls = null): LDAP\Result|false	Bind to LDAP directory
ldap_bind(LDAP\Connection $ldap, string|null $dn = null, string|null $password = null): bool	Bind to LDAP directory
ldap_close()	Alias of ldap_unbind
ldap_compare(LDAP\Connection $ldap, string $dn, string $attribute, string $value, array|null $controls = null): bool|int	Compare value of attribute found in entry specified with DN
ldap_connect_wallet(string|null $uri = null, string $wallet, string $password, int $auth_mode = GSLC_SSL_NO_AUTH): LDAP\Connection|false	Connect to an LDAP server
ldap_connect(string|null $uri = null): LDAP\Connection|false	Connect to an LDAP server
ldap_connect(string|null $host = null, int $port = 389): LDAP\Connection|false	Connect to an LDAP server
ldap_control_paged_result_response(resource $link, resource $result, string $cookie = ?, int $estimated = ?): bool	Retrieve the LDAP pagination cookie
ldap_control_paged_result(resource $link, int $pagesize, bool $iscritical = false, string $cookie = ""): bool	Send LDAP pagination control
ldap_count_entries(LDAP\Connection $ldap, LDAP\Result $result): int	Count the number of entries in a search
ldap_count_references(LDAP\Connection $ldap, LDAP\Result $result): int	Counts the number of references in a search result
ldap_delete_ext(LDAP\Connection $ldap, string $dn, array|null $controls = null): LDAP\Result|false	Delete an entry from a directory
ldap_delete(LDAP\Connection $ldap, string $dn, array|null $controls = null): bool	Delete an entry from a directory
ldap_dn2ufn(string $dn): string|false	Convert DN to User Friendly Naming format
ldap_err2str(int $errno): string	Convert LDAP error number into string error message
ldap_errno(LDAP\Connection $ldap): int	Return the LDAP error number of the last LDAP command
ldap_error(LDAP\Connection $ldap): string	Return the LDAP error message of the last LDAP command
ldap_escape(string $value, string $ignore = "", int $flags = ?): string	Escape a string for use in an LDAP filter or DN
ldap_exop_passwd(LDAP\Connection $ldap, string $user = "", string $old_password = "", string $new_password = "", array $controls = null): string|bool	PASSWD extended operation helper
ldap_exop_refresh(LDAP\Connection $ldap, string $dn, int $ttl): int|false	Refresh extended operation helper
ldap_exop_sync(LDAP\Connection $ldap, string $request_oid, string|null $request_data = null, array|null $controls = null, string $response_data = null, string $response_oid = null): LDAP\Result|bool	Performs an extended operation
ldap_exop_whoami(LDAP\Connection $ldap): string|false	WHOAMI extended operation helper
ldap_exop(LDAP\Connection $ldap, string $request_oid, string $request_data = null, array $controls = null, string $response_data = ?, string $response_oid = ?): mixed	Performs an extended operation
ldap_explode_dn(string $dn, int $with_attrib): array|false	Splits DN into its component parts
ldap_first_attribute(LDAP\Connection $ldap, LDAP\ResultEntry $entry): string|false	Return first attribute
ldap_first_entry(LDAP\Connection $ldap, LDAP\Result $result): LDAP\ResultEntry|false	Return first result id
ldap_first_reference(LDAP\Connection $ldap, LDAP\Result $result): LDAP\ResultEntry|false	Return first reference
ldap_free_result(LDAP\Result $result): bool	Free result memory
ldap_get_attributes(LDAP\Connection $ldap, LDAP\ResultEntry $entry): array	Get attributes from a search result entry
ldap_get_dn(LDAP\Connection $ldap, LDAP\ResultEntry $entry): string|false	Get the DN of a result entry
ldap_get_entries(LDAP\Connection $ldap, LDAP\Result $result): array|false	Get all result entries
ldap_get_option(LDAP\Connection $ldap, int $option, array|string|int $value = null): bool	Get the current value for given option
ldap_get_values_len(LDAP\Connection $ldap, LDAP\ResultEntry $entry, string $attribute): array|false	Get all binary values from a result entry
ldap_get_values(LDAP\Connection $ldap, LDAP\ResultEntry $entry, string $attribute): array|false	Get all values from a result entry
ldap_list(LDAP\Connection|array $ldap, array|string $base, array|string $filter, array $attributes = [], int $attributes_only = ?, int $sizelimit = -1, int $timelimit = -1, int $deref = LDAP_DEREF_NEVER, array|null $controls = null): LDAP\Result|array|false	Single-level search
ldap_mod_add_ext(LDAP\Connection $ldap, string $dn, array $entry, array|null $controls = null): LDAP\Result|false	Add attribute values to current attributes
ldap_mod_add(LDAP\Connection $ldap, string $dn, array $entry, array|null $controls = null): bool	Add attribute values to current attributes
ldap_mod_del_ext(LDAP\Connection $ldap, string $dn, array $entry, array|null $controls = null): LDAP\Result|false	Delete attribute values from current attributes
ldap_mod_del(LDAP\Connection $ldap, string $dn, array $entry, array|null $controls = null): bool	Delete attribute values from current attributes
ldap_mod_replace_ext(LDAP\Connection $ldap, string $dn, array $entry, array|null $controls = null): LDAP\Result|false	Replace attribute values with new ones
ldap_mod_replace(LDAP\Connection $ldap, string $dn, array $entry, array|null $controls = null): bool	Replace attribute values with new ones
ldap_modify_batch(LDAP\Connection $ldap, string $dn, array $modifications_info, array|null $controls = null): bool	Batch and execute modifications on an LDAP entry
ldap_modify()	Alias of ldap_mod_replace
ldap_next_attribute(LDAP\Connection $ldap, LDAP\ResultEntry $entry): string|false	Get the next attribute in result
ldap_next_entry(LDAP\Connection $ldap, LDAP\ResultEntry $entry): LDAP\ResultEntry|false	Get next result entry
ldap_next_reference(LDAP\Connection $ldap, LDAP\ResultEntry $entry): LDAP\ResultEntry|false	Get next reference
ldap_parse_exop(LDAP\Connection $ldap, LDAP\Result $result, string $response_data = null, string $response_oid = null): bool	Parse result object from an LDAP extended operation
ldap_parse_reference(LDAP\Connection $ldap, LDAP\ResultEntry $entry, array $referrals): bool	Extract information from reference entry
ldap_parse_result(LDAP\Connection $ldap, LDAP\Result $result, int $error_code, string $matched_dn = null, string $error_message = null, array $referrals = null, array $controls = null): bool	Extract information from result
ldap_read(LDAP\Connection|array $ldap, array|string $base, array|string $filter, array $attributes = [], int $attributes_only = ?, int $sizelimit = -1, int $timelimit = -1, int $deref = LDAP_DEREF_NEVER, array|null $controls = null): LDAP\Result|array|false	Read an entry
ldap_rename_ext(LDAP\Connection $ldap, string $dn, string $new_rdn, string $new_parent, bool $delete_old_rdn, array|null $controls = null): LDAP\Result|false	Modify the name of an entry
ldap_rename(LDAP\Connection $ldap, string $dn, string $new_rdn, string $new_parent, bool $delete_old_rdn, array|null $controls = null): bool	Modify the name of an entry
ldap_sasl_bind(LDAP\Connection $ldap, string|null $dn = null, string|null $password = null, string|null $mech = null, string|null $realm = null, string|null $authc_id = null, string|null $authz_id = null, string|null $props = null): bool	Bind to LDAP directory using SASL
ldap_search(LDAP\Connection|array $ldap, array|string $base, array|string $filter, array $attributes = [], int $attributes_only = ?, int $sizelimit = -1, int $timelimit = -1, int $deref = LDAP_DEREF_NEVER, array|null $controls = null): LDAP\Result|array|false	Search LDAP tree
ldap_set_option(LDAP\Connection|null $ldap, int $option, array|string|int|bool $value): bool	Set the value of the given option
ldap_set_rebind_proc(LDAP\Connection $ldap, callable|null $callback): bool	Set a callback function to do re-binds on referral chasing
ldap_sort(resource $link, resource $result, string $sortfilter): bool	Sort LDAP result entries on the client side
ldap_start_tls(LDAP\Connection $ldap): bool	Start TLS
ldap_t61_to_8859(string $value): string|false	Translate t61 characters to 8859 characters
ldap_unbind(LDAP\Connection $ldap): bool	Unbind from LDAP directory
LDAP\Connection()	(new) A fully opaque class which replaces a ldap resource as of PHP 8
LDAP\Result()	(new) A fully opaque class which replaces a ldap result resource as of PHP 8
LDAP\ResultEntry()	(new) A fully opaque class which replaces a ldap result entry resource as of PHP 8
libxml_clear_errors(): void	Clear libxml error buffer
libxml_disable_entity_loader(bool $disable = true): bool	Disable the ability to load external entities
libxml_get_errors(): array	Retrieve array of errors
libxml_get_external_entity_loader(): callable|null	Get the current external entity loader
libxml_get_last_error(): LibXMLError|false	Retrieve last error from libxml
libxml_set_external_entity_loader(callable|null $resolver_function): bool	Changes the default external entity loader
libxml_set_streams_context(resource $context): void	Set the streams context for the next libxml document load or write
libxml_use_internal_errors(bool|null $use_errors = null): bool	Disable libxml errors and allow user to fetch error information as needed
LibXMLError()	(new) Contains various information about errors thrown by libxml
>assign(string $name, string $value): mixed	(Lua) Assign a PHP variable to Lua
>call(callable $lua_func, array $args = ?, int $use_self = ?): mixed	(Lua) Call Lua functions
>__call(callable $lua_func, array $args = ?, int $use_self = ?): mixed	(Lua) Call Lua functions
Lua(string $lua_script_file = NULL)	(new) Lua constructor
>eval(string $statements): mixed	(Lua) Evaluate a string as Lua code
>getVersion(): string	(Lua) The getversion purpose
>include(string $file): mixed	(Lua) Parse a Lua script file
>registerCallback(string $name, callable $function): mixed	(Lua) Register a PHP function to Lua
>__invoke(mixed ...$args): void	(LuaClosure) Invoke luaclosure
LuaClosure()	(new) LuaClosure is a wrapper class for LUA_TFUNCTION which could be return from calling to Lua function
LuaException()	(new) 
>callFunction(string $name, mixed ...$args): array|bool	(LuaSandbox) Call a function in a Lua global variable
>disableProfiler(): void	(LuaSandbox) Disable the profiler
>enableProfiler(float $period = 0.02): bool	(LuaSandbox) Enable the profiler.
>getCPUUsage(): float	(LuaSandbox) Fetch the current CPU time usage of the Lua environment
>getMemoryUsage(): int	(LuaSandbox) Fetch the current memory usage of the Lua environment
>getPeakMemoryUsage(): int	(LuaSandbox) Fetch the peak memory usage of the Lua environment
>getProfilerFunctionReport(int $units = LuaSandbox::SECONDS): array	(LuaSandbox) Fetch profiler data
LuaSandbox::getVersionInfo(): array	Return the versions of LuaSandbox and Lua
>loadBinary(string $code, string $chunkName = ''): LuaSandboxFunction	(LuaSandbox) Load a precompiled binary chunk into the Lua environment
>loadString(string $code, string $chunkName = ''): LuaSandboxFunction	(LuaSandbox) Load Lua code into the Lua environment
>pauseUsageTimer(): bool	(LuaSandbox) Pause the CPU usage timer
>registerLibrary(string $libname, array $functions): void	(LuaSandbox) Register a set of PHP functions as a Lua library
>setCPULimit(float|bool $limit): void	(LuaSandbox) Set the CPU time limit for the Lua environment
>setMemoryLimit(int $limit): void	(LuaSandbox) Set the memory limit for the Lua environment
>unpauseUsageTimer(): void	(LuaSandbox) Unpause the timer paused by LuaSandbox::pauseUsageTimer
>wrapPhpFunction(callable $function): LuaSandboxFunction	(LuaSandbox) Wrap a PHP callable in a LuaSandboxFunction
>call(string ...$args): array|bool	(LuaSandboxFunction) Call a Lua function
LuaSandboxFunction()	(new) Unused
>dump(): string	(LuaSandboxFunction) Dump the function as a binary blob
LuaSandbox()	(new) The LuaSandbox class creates a Lua environment and allows for execution of Lua code
LuaSandboxError()	(new) Base class for LuaSandbox exceptions
LuaSandboxErrorError()	(new) Exception thrown when Lua encounters an error inside an error handler
LuaSandboxFatalError()	(new) Uncatchable LuaSandbox exceptions
LuaSandboxMemoryError()	(new) Exception thrown when Lua cannot allocate memory
LuaSandboxRuntimeError()	(new) Catchable LuaSandbox runtime exceptions
LuaSandboxSyntaxError()	(new) Exception thrown when Lua code cannot be parsed
LuaSandboxTimeoutError()	(new) Exception thrown when the configured CPU time limit is exceeded
lzf_compress(string $data): string	LZF compression
lzf_decompress(string $data): string	LZF decompression
lzf_optimized_for(): int	Determines what LZF extension was optimized for
ezmlm_hash(string $addr): int	Calculate the hash value needed by EZMLM
mail(string $to, string $subject, string $message, array|string $additional_headers = [], string $additional_params = ""): bool	Send mail
mailparse_determine_best_xfer_encoding(resource $fp): string	Gets the best way of encoding
mailparse_msg_create(): resource	Create a mime mail resource
mailparse_msg_extract_part_file(resource $mimemail, mixed $filename, callable $callbackfunc = ?): string	Extracts/decodes a message section
mailparse_msg_extract_part(resource $mimemail, string $msgbody, callable $callbackfunc = ?): void	Extracts/decodes a message section
mailparse_msg_extract_whole_part_file(resource $mimemail, string $filename, callable $callbackfunc = ?): string	Extracts a message section including headers without decoding the transfer encoding
mailparse_msg_free(resource $mimemail): bool	Frees a MIME resource
mailparse_msg_get_part_data(resource $mimemail): array	Returns an associative array of info about the message
mailparse_msg_get_part(resource $mimemail, string $mimesection): resource	Returns a handle on a given section in a mimemessage
mailparse_msg_get_structure(resource $mimemail): array	Returns an array of mime section names in the supplied message
mailparse_msg_parse_file(string $filename): resource	Parses a file
mailparse_msg_parse(resource $mimemail, string $data): bool	Incrementally parse data into buffer
mailparse_rfc822_parse_addresses(string $addresses): array	Parse RFC 822 compliant addresses
mailparse_stream_encode(resource $sourcefp, resource $destfp, string $encoding): bool	Streams data from source file pointer, apply encoding and write to destfp
mailparse_uudecode_all(resource $fp): array	Scans the data from fp and extract each embedded uuencoded file
abs(int|float $num): int|float	Absolute value
acos(float $num): float	Arc cosine
acosh(float $num): float	Inverse hyperbolic cosine
asin(float $num): float	Arc sine
asinh(float $num): float	Inverse hyperbolic sine
atan(float $num): float	Arc tangent
atan2(float $y, float $x): float	Arc tangent of two variables
atanh(float $num): float	Inverse hyperbolic tangent
base_convert(string $num, int $from_base, int $to_base): string	Convert a number between arbitrary bases
bindec(string $binary_string): int|float	Binary to decimal
ceil(int|float $num): float	Round fractions up
cos(float $num): float	Cosine
cosh(float $num): float	Hyperbolic cosine
decbin(int $num): string	Decimal to binary
dechex(int $num): string	Decimal to hexadecimal
decoct(int $num): string	Decimal to octal
deg2rad(float $num): float	Converts the number in degrees to the radian equivalent
exp(float $num): float	Calculates the exponent of e
expm1(float $num): float	Returns exp($num) - 1, computed in a way that is accurate even when the value of number is close to zero
fdiv(float $num1, float $num2): float	Divides two numbers, according to IEEE 754
floor(int|float $num): float	Round fractions down
fmod(float $num1, float $num2): float	Returns the floating point remainder (modulo) of the division of the arguments
fpow(float $num, float $exponent): float	Raise one number to the power of another, according to IEEE 754
hexdec(string $hex_string): int|float	Hexadecimal to decimal
hypot(float $x, float $y): float	Calculate the length of the hypotenuse of a right-angle triangle
intdiv(int $num1, int $num2): int	Integer division
is_finite(float $num): bool	Checks whether a float is finite
is_infinite(float $num): bool	Checks whether a float is infinite
is_nan(float $num): bool	Checks whether a float is NAN
log(float $num, float $base = M_E): float	Natural logarithm
log10(float $num): float	Base-10 logarithm
log1p(float $num): float	Returns log(1 + number), computed in a way that is accurate even when the value of number is close to zero
max(mixed $value, mixed ...$values): mixed	Find highest value
max(array $value_array): mixed	Find highest value
min(mixed $value, mixed ...$values): mixed	Find lowest value
min(array $value_array): mixed	Find lowest value
octdec(string $octal_string): int|float	Octal to decimal
pi(): float	Get value of pi
pow(mixed $num, mixed $exponent): int|float|object	Exponential expression
rad2deg(float $num): float	Converts the radian number to the equivalent number in degrees
round(int|float $num, int $precision = ?, int|RoundingMode $mode = RoundingMode::HalfAwayFromZero): float	Rounds a float
sin(float $num): float	Sine
sinh(float $num): float	Hyperbolic sine
sqrt(float $num): float	Square root
tan(float $num): float	Tangent
tanh(float $num): float	Hyperbolic tangent
mb_check_encoding(array|string|null $value = null, string|null $encoding = null): bool	Check if strings are valid for the specified encoding
mb_chr(int $codepoint, string|null $encoding = null): string|false	Return character by Unicode code point value
mb_convert_case(string $string, int $mode, string|null $encoding = null): string	Perform case folding on a string
mb_convert_encoding(array|string $string, string $to_encoding, array|string|null $from_encoding = null): array|string|false	Convert a string from one character encoding to another
mb_convert_kana(string $string, string $mode = "KV", string|null $encoding = null): string	Convert "kana" one from another ("zen-kaku", "han-kaku" and more)
mb_convert_variables(string $to_encoding, array|string $from_encoding, mixed $var, mixed ...$vars): string|false	Convert character code in variable(s)
mb_decode_mimeheader(string $string): string	Decode string in MIME header field
mb_decode_numericentity(string $string, array $map, string|null $encoding = null): string	Decode HTML numeric string reference to character
mb_detect_encoding(string $string, array|string|null $encodings = null, bool $strict = false): string|false	Detect character encoding
mb_detect_order(array|string|null $encoding = null): array|bool	Set/Get character encoding detection order
mb_encode_mimeheader(string $string, string|null $charset = null, string|null $transfer_encoding = null, string $newline = "\r\n", int $indent = ?): string	Encode string for MIME header
mb_encode_numericentity(string $string, array $map, string|null $encoding = null, bool $hex = false): string	Encode character to HTML numeric string reference
mb_encoding_aliases(string $encoding): array	Get aliases of a known encoding type
mb_ereg_match(string $pattern, string $string, string|null $options = null): bool	Regular expression match for multibyte string
mb_ereg_replace_callback(string $pattern, callable $callback, string $string, string|null $options = null): string|false|null	Perform a regular expression search and replace with multibyte support using a callback
mb_ereg_replace(string $pattern, string $replacement, string $string, string|null $options = null): string|false|null	Replace regular expression with multibyte support
mb_ereg_search_getpos(): int	Returns start point for next regular expression match
mb_ereg_search_getregs(): array|false	Retrieve the result from the last multibyte regular expression match
mb_ereg_search_init(string $string, string|null $pattern = null, string|null $options = null): bool	Setup string and regular expression for a multibyte regular expression match
mb_ereg_search_pos(string|null $pattern = null, string|null $options = null): array|false	Returns position and length of a matched part of the multibyte regular expression for a predefined multibyte string
mb_ereg_search_regs(string|null $pattern = null, string|null $options = null): array|false	Returns the matched part of a multibyte regular expression
mb_ereg_search_setpos(int $offset): bool	Set start point of next regular expression match
mb_ereg_search(string|null $pattern = null, string|null $options = null): bool	Multibyte regular expression match for predefined multibyte string
mb_ereg(string $pattern, string $string, array $matches = null): bool	Regular expression match with multibyte support
mb_eregi_replace(string $pattern, string $replacement, string $string, string|null $options = null): string|false|null	Replace regular expression with multibyte support ignoring case
mb_eregi(string $pattern, string $string, array $matches = null): bool	Regular expression match ignoring case with multibyte support
mb_get_info(string $type = "all"): array|string|int|false|null	Get internal settings of mbstring
mb_http_input(string|null $type = null): array|string|false	Detect HTTP input character encoding
mb_http_output(string|null $encoding = null): string|bool	Set/Get HTTP output character encoding
mb_internal_encoding(string|null $encoding = null): string|bool	Set/Get internal character encoding
mb_language(string|null $language = null): string|bool	Set/Get current language
mb_lcfirst(string $string, string|null $encoding = null): string	Make a string's first character lowercase
mb_list_encodings(): array	Returns an array of all supported encodings
mb_ltrim(string $string, string|null $characters = null, string|null $encoding = null): string	Strip whitespace (or other characters) from the beginning of a string
mb_ord(string $string, string|null $encoding = null): int|false	Get Unicode code point of character
mb_output_handler(string $string, int $status): string	Callback function converts character encoding in output buffer
mb_parse_str(string $string, array $result): bool	Parse GET/POST/COOKIE data and set global variable
mb_preferred_mime_name(string $encoding): string|false	Get MIME charset string
mb_regex_encoding(string|null $encoding = null): string|bool	Set/Get character encoding for multibyte regex
mb_regex_set_options(string|null $options = null): string	Set/Get the default options for mbregex functions
mb_rtrim(string $string, string|null $characters = null, string|null $encoding = null): string	Strip whitespace (or other characters) from the end of a string
mb_scrub(string $string, string|null $encoding = null): string	Replace ill-formed byte sequences with the substitute character
mb_send_mail(string $to, string $subject, string $message, array|string $additional_headers = [], string|null $additional_params = null): bool	Send encoded mail
mb_split(string $pattern, string $string, int $limit = -1): array|false	Split multibyte string using regular expression
mb_str_pad(string $string, int $length, string $pad_string = " ", int $pad_type = STR_PAD_RIGHT, string|null $encoding = null): string	Pad a multibyte string to a certain length with another multibyte string
mb_str_split(string $string, int $length = 1, string|null $encoding = null): array	Given a multibyte string, return an array of its characters
mb_strcut(string $string, int $start, int|null $length = null, string|null $encoding = null): string	Get part of string
mb_strimwidth(string $string, int $start, int $width, string $trim_marker = "", string|null $encoding = null): string	Get truncated string with specified width
mb_stripos(string $haystack, string $needle, int $offset = ?, string|null $encoding = null): int|false	Finds position of first occurrence of a string within another, case insensitive
mb_stristr(string $haystack, string $needle, bool $before_needle = false, string|null $encoding = null): string|false	Finds first occurrence of a string within another, case insensitive
mb_strlen(string $string, string|null $encoding = null): int	Get string length
mb_strpos(string $haystack, string $needle, int $offset = ?, string|null $encoding = null): int|false	Find position of first occurrence of string in a string
mb_strrchr(string $haystack, string $needle, bool $before_needle = false, string|null $encoding = null): string|false	Finds the last occurrence of a character in a string within another
mb_strrichr(string $haystack, string $needle, bool $before_needle = false, string|null $encoding = null): string|false	Finds the last occurrence of a character in a string within another, case insensitive
mb_strripos(string $haystack, string $needle, int $offset = ?, string|null $encoding = null): int|false	Finds position of last occurrence of a string within another, case insensitive
mb_strrpos(string $haystack, string $needle, int $offset = ?, string|null $encoding = null): int|false	Find position of last occurrence of a string in a string
mb_strstr(string $haystack, string $needle, bool $before_needle = false, string|null $encoding = null): string|false	Finds first occurrence of a string within another
mb_strtolower(string $string, string|null $encoding = null): string	Make a string lowercase
mb_strtoupper(string $string, string|null $encoding = null): string	Make a string uppercase
mb_strwidth(string $string, string|null $encoding = null): int	Return width of string
mb_substitute_character(string|int|null $substitute_character = null): string|int|bool	Set/Get substitution character
mb_substr_count(string $haystack, string $needle, string|null $encoding = null): int	Count the number of substring occurrences
mb_substr(string $string, int $start, int|null $length = null, string|null $encoding = null): string	Get part of string
mb_trim(string $string, string|null $characters = null, string|null $encoding = null): string	Strip whitespace (or other characters) from the beginning and end of a string
mb_ucfirst(string $string, string|null $encoding = null): string	Make a string's first character uppercase
mcrypt_create_iv(int $size, int $source = MCRYPT_DEV_URANDOM): string	Creates an initialization vector (IV) from a random source
mcrypt_decrypt(string $cipher, string $key, string $data, string $mode, string $iv = ?): string|false	Decrypts crypttext with given parameters
mcrypt_enc_get_algorithms_name(resource $td): string	Returns the name of the opened algorithm
mcrypt_enc_get_block_size(resource $td): int	Returns the blocksize of the opened algorithm
mcrypt_enc_get_iv_size(resource $td): int	Returns the size of the IV of the opened algorithm
mcrypt_enc_get_key_size(resource $td): int	Returns the maximum supported keysize of the opened mode
mcrypt_enc_get_modes_name(resource $td): string	Returns the name of the opened mode
mcrypt_enc_get_supported_key_sizes(resource $td): array	Returns an array with the supported keysizes of the opened algorithm
mcrypt_enc_is_block_algorithm_mode(resource $td): bool	Checks whether the encryption of the opened mode works on blocks
mcrypt_enc_is_block_algorithm(resource $td): bool	Checks whether the algorithm of the opened mode is a block algorithm
mcrypt_enc_is_block_mode(resource $td): bool	Checks whether the opened mode outputs blocks
mcrypt_enc_self_test(resource $td): int	Runs a self test on the opened module
mcrypt_encrypt(string $cipher, string $key, string $data, string $mode, string $iv = ?): string|false	Encrypts plaintext with given parameters
mcrypt_generic_deinit(resource $td): bool	This function deinitializes an encryption module
mcrypt_generic_init(resource $td, string $key, string $iv): int	This function initializes all buffers needed for encryption
mcrypt_generic(resource $td, string $data): string	This function encrypts data
mcrypt_get_block_size(int $cipher): int|false	Gets the block size of the specified cipher
mcrypt_get_block_size(string $cipher, string $mode): int|false	Gets the block size of the specified cipher
mcrypt_get_cipher_name(int $cipher): string	Gets the name of the specified cipher
mcrypt_get_cipher_name(string $cipher): string	Gets the name of the specified cipher
mcrypt_get_iv_size(string $cipher, string $mode): int	Returns the size of the IV belonging to a specific cipher/mode combination
mcrypt_get_key_size(int $cipher): int|false	Gets the key size of the specified cipher
mcrypt_get_key_size(string $cipher, string $mode): int|false	Gets the key size of the specified cipher
mcrypt_list_algorithms(string $lib_dir = ini_get("mcrypt.algorithms_dir")): array	Gets an array of all supported ciphers
mcrypt_list_modes(string $lib_dir = ini_get("mcrypt.modes_dir")): array	Gets an array of all supported modes
mcrypt_module_close(resource $td): bool	Closes the mcrypt module
mcrypt_module_get_algo_block_size(string $algorithm, string $lib_dir = ?): int	Returns the blocksize of the specified algorithm
mcrypt_module_get_algo_key_size(string $algorithm, string $lib_dir = ?): int	Returns the maximum supported keysize of the opened mode
mcrypt_module_get_supported_key_sizes(string $algorithm, string $lib_dir = ?): array	Returns an array with the supported keysizes of the opened algorithm
mcrypt_module_is_block_algorithm_mode(string $mode, string $lib_dir = ?): bool	Returns if the specified module is a block algorithm or not
mcrypt_module_is_block_algorithm(string $algorithm, string $lib_dir = ?): bool	This function checks whether the specified algorithm is a block algorithm
mcrypt_module_is_block_mode(string $mode, string $lib_dir = ?): bool	Returns if the specified mode outputs blocks or not
mcrypt_module_open(string $algorithm, string $algorithm_directory, string $mode, string $mode_directory): resource	Opens the module of the algorithm and the mode to be used
mcrypt_module_self_test(string $algorithm, string $lib_dir = ?): bool	This function runs a self test on the specified module
mdecrypt_generic(resource $td, string $data): string	Decrypts data
memcache_debug(bool $on_off): bool	Turn debug output on/off
>add(string $key, mixed $var, int $flag = ?, int $expire = ?): bool	(Memcache) Add an item to the server
>addServer(string $host, int $port = 11211, bool $persistent = ?, int $weight = ?, int $timeout = ?, int $retry_interval = ?, bool $status = ?, callable $failure_callback = ?, int $timeoutms = ?): bool	(Memcache) Add a memcached server to connection pool
>close(): bool	(Memcache) Close memcached server connection
>connect(string $host, int $port = ?, int $timeout = ?): bool	(Memcache) Open memcached server connection
>decrement(string $key, int $value = 1): int|false	(Memcache) Decrement item's value
>delete(string $key, int $exptime = ?): bool	(Memcache) Delete item from the server
>flush(): bool	(Memcache) Flush all existing items at the server
>get(string $key, int $flags = ?): string	(Memcache) Retrieve item from the server
>get(array $keys, array $flags = ?): array	(Memcache) Retrieve item from the server
>getExtendedStats(string $type = ?, int $slabid = ?, int $limit = 100): array	(Memcache) Get statistics from all servers in pool
>getServerStatus(string $host, int $port = 11211): int	(Memcache) Returns server status
>getStats(string $type = ?, int $slabid = ?, int $limit = 100): array|false	(Memcache) Get statistics of the server
>getVersion(): string|false	(Memcache) Return version of the server
>increment(string $key, int $value = 1): int|false	(Memcache) Increment item's value
>pconnect(string $host, int $port = ?, int $timeout = ?): mixed	(Memcache) Open memcached server persistent connection
>replace(string $key, mixed $var, int $flag = ?, int $expire = ?): bool	(Memcache) Replace value of the existing item
>set(string $key, mixed $var, int $flag = ?, int $expire = ?): bool	(Memcache) Store data at the server
>setCompressThreshold(int $threshold, float $min_savings = ?): bool	(Memcache) Enable automatic compression of large values
>setServerParams(string $host, int $port = 11211, int $timeout = ?, int $retry_interval = false, bool $status = ?, callable $failure_callback = ?): bool	(Memcache) Changes server parameters and status at runtime
Memcache()	(new) Represents a connection to a set of memcache servers
>add(string $key, mixed $value, int $expiration = ?): bool	(Memcached) Add an item under a new key
>addByKey(string $server_key, string $key, mixed $value, int $expiration = ?): bool	(Memcached) Add an item under a new key on a specific server
>addServer(string $host, int $port, int $weight = ?): bool	(Memcached) Add a server to the server pool
>addServers(array $servers): bool	(Memcached) Add multiple servers to the server pool
>append(string $key, string $value): bool|null	(Memcached) Append data to an existing item
>appendByKey(string $server_key, string $key, string $value): bool|null	(Memcached) Append data to an existing item on a specific server
>cas(string|int|float $cas_token, string $key, mixed $value, int $expiration = ?): bool	(Memcached) Compare and swap an item
>casByKey(string|int|float $cas_token, string $server_key, string $key, mixed $value, int $expiration = ?): bool	(Memcached) Compare and swap an item on a specific server
Memcached(string|null $persistent_id = null, callable|null $callback = null, string|null $connection_str = null)	(new) Create a Memcached instance
>decrement(string $key, int $offset = 1, int $initial_value = ?, int $expiry = ?): int|false	(Memcached) Decrement numeric item's value
>decrementByKey(string $server_key, string $key, int $offset = 1, int $initial_value = ?, int $expiry = ?): int|false	(Memcached) Decrement numeric item's value, stored on a specific server
>delete(string $key, int $time = ?): bool	(Memcached) Delete an item
>deleteByKey(string $server_key, string $key, int $time = ?): bool	(Memcached) Delete an item from a specific server
>deleteMulti(array $keys, int $time = ?): array	(Memcached) Delete multiple items
>deleteMultiByKey(string $server_key, array $keys, int $time = ?): array	(Memcached) Delete multiple items from a specific server
>fetch(): array|false	(Memcached) Fetch the next result
>fetchAll(): array|false	(Memcached) Fetch all the remaining results
>flush(int $delay = ?): bool	(Memcached) Invalidate all items in the cache
>get(string $key, callable|null $cache_cb = null, int $get_flags = ?): mixed	(Memcached) Retrieve an item
>getAllKeys(): array|false	(Memcached) Gets the keys stored on all the servers
>getByKey(string $server_key, string $key, callable|null $cache_cb = null, int $get_flags = ?): mixed	(Memcached) Retrieve an item from a specific server
>getDelayed(array $keys, bool $with_cas = false, callable|null $value_cb = null): bool	(Memcached) Request multiple items
>getDelayedByKey(string $server_key, array $keys, bool $with_cas = false, callable|null $value_cb = null): bool	(Memcached) Request multiple items from a specific server
>getMulti(array $keys, int $get_flags = ?): array|false	(Memcached) Retrieve multiple items
>getMultiByKey(string $server_key, array $keys, int $get_flags = ?): array|false	(Memcached) Retrieve multiple items from a specific server
>getOption(int $option): mixed	(Memcached) Retrieve a Memcached option value
>getResultCode(): int	(Memcached) Return the result code of the last operation
>getResultMessage(): string	(Memcached) Return the message describing the result of the last operation
>getServerByKey(string $server_key): array|false	(Memcached) Map a key to a server
>getServerList(): array	(Memcached) Get the list of the servers in the pool
>getStats(string|null $type = null): array|false	(Memcached) Get server pool statistics
>getVersion(): array|false	(Memcached) Get server pool version info
>increment(string $key, int $offset = 1, int $initial_value = ?, int $expiry = ?): int|false	(Memcached) Increment numeric item's value
>incrementByKey(string $server_key, string $key, int $offset = 1, int $initial_value = ?, int $expiry = ?): int|false	(Memcached) Increment numeric item's value, stored on a specific server
>isPersistent(): bool	(Memcached) Check if a persitent connection to memcache is being used
>isPristine(): bool	(Memcached) Check if the instance was recently created
>prepend(string $key, string $value): bool|null	(Memcached) Prepend data to an existing item
>prependByKey(string $server_key, string $key, string $value): bool|null	(Memcached) Prepend data to an existing item on a specific server
>quit(): bool	(Memcached) Close any open connections
>replace(string $key, mixed $value, int $expiration = ?): bool	(Memcached) Replace the item under an existing key
>replaceByKey(string $server_key, string $key, mixed $value, int $expiration = ?): bool	(Memcached) Replace the item under an existing key on a specific server
>resetServerList(): bool	(Memcached) Clears all servers from the server list
>set(string $key, mixed $value, int $expiration = ?): bool	(Memcached) Store an item
>setByKey(string $server_key, string $key, mixed $value, int $expiration = ?): bool	(Memcached) Store an item on a specific server
>setEncodingKey(string $key): bool	(Memcached) Set AES encryption key for data in Memcached
>setMulti(array $items, int $expiration = ?): bool	(Memcached) Store multiple items
>setMultiByKey(string $server_key, array $items, int $expiration = ?): bool	(Memcached) Store multiple items on a specific server
>setOption(int $option, mixed $value): bool	(Memcached) Set a Memcached option
>setOptions(array $options): bool	(Memcached) Set Memcached options
>setSaslAuthData(string $username, string $password): bool	(Memcached) Set the credentials to use for authentication
>touch(string $key, int $expiration = ?): bool	(Memcached) Set a new expiration on an item
>touchByKey(string $server_key, string $key, int $expiration = ?): bool	(Memcached) Set a new expiration on an item on a specific server
MemcachedException()	(new) 
mhash_count(): int	Gets the highest available hash ID
mhash_get_block_size(int $algo): int|false	Gets the block size of the specified hash
mhash_get_hash_name(int $algo): string|false	Gets the name of the specified hash
mhash_keygen_s2k(int $algo, string $password, string $salt, int $length): string|false	Generates a key
mhash(int $algo, string $data, string|null $key = null): string|false	Computes hash
connection_aborted(): int	Check whether client disconnected
connection_status(): int	Returns connection status bitfield
constant(string $name): mixed	Returns the value of a constant
define(string $constant_name, mixed $value, bool $case_insensitive = false): bool	Defines a named constant
defined(string $constant_name): bool	Checks whether a constant with the given name exists
die()	Alias of exit
eval(string $code): mixed	Evaluate a string as PHP code
exit(string|int $status = ?): never	Terminate the current script with a status code or message
get_browser(string|null $user_agent = null, bool $return_array = false): object|array|false	Tells what the user's browser is capable of
__halt_compiler(): void	Halts the compiler execution
highlight_file(string $filename, bool $return = false): string|bool	Syntax highlighting of a file
highlight_string(string $string, bool $return = false): string|true	Syntax highlighting of a string
hrtime(bool $as_number = false): array|int|float|false	Get the system's high resolution time
ignore_user_abort(bool|null $enable = null): int	Set whether a client disconnect should abort script execution
pack(string $format, mixed ...$values): string	Pack data into binary string
php_strip_whitespace(string $filename): string	Return source with stripped comments and whitespace
sapi_windows_cp_conv(int|string $in_codepage, int|string $out_codepage, string $subject): string|null	Convert string from one codepage to another
sapi_windows_cp_get(string $kind = ""): int	Get current codepage
sapi_windows_cp_is_utf8(): bool	Indicates whether the codepage is UTF-8 compatible
sapi_windows_cp_set(int $codepage): bool	Set process codepage
sapi_windows_generate_ctrl_event(int $event, int $pid = ?): bool	Send a CTRL event to another process
sapi_windows_set_ctrl_handler(callable|null $handler, bool $add = true): bool	Set or remove a CTRL event handler
sapi_windows_vt100_support(resource $stream, bool|null $enable = null): bool	Get or set VT100 support for the specified stream associated to an output buffer of a Windows console.
show_source()	Alias of highlight_file
sleep(int $seconds): int	Delay execution
sys_getloadavg(): array|false	Gets system load average
time_nanosleep(int $seconds, int $nanoseconds): array|bool	Delay for a number of seconds and nanoseconds
time_sleep_until(float $timestamp): bool	Make the script sleep until the specified time
uniqid(string $prefix = "", bool $more_entropy = false): string	Generate a time-based identifier
unpack(string $format, string $string, int $offset = ?): array|false	Unpack data from binary string
usleep(int $microseconds): void	Delay execution in microseconds
MongoDB\BSON\Binary(string $data, int $type = MongoDB\BSON\Binary::TYPE_GENERIC)	(new) Construct a new Binary
>getData(): string	(MongoDB\BSON\Binary) Returns the Binaryaposs data
>getType(): int	(MongoDB\BSON\Binary) Returns the Binaryaposs type
>jsonSerialize(): mixed	(MongoDB\BSON\Binary) Returns a representation that can be converted to JSON
>serialize(): string	(MongoDB\BSON\Binary) Serialize a Binary
>__toString(): string	(MongoDB\BSON\Binary) Returns the Binaryaposs data
>unserialize(string $data): void	(MongoDB\BSON\Binary) Unserialize a Binary
>getData(): string	(MongoDB\BSON\BinaryInterface) Returns the BinaryInterfaceaposs data
>getType(): int	(MongoDB\BSON\BinaryInterface) Returns the BinaryInterfaceaposs type
>__toString(): string	(MongoDB\BSON\BinaryInterface) Returns the BinaryInterfaceaposs data
MongoDB\BSON\DBPointer()	(new) Construct a new DBPointer (unused)
>jsonSerialize(): mixed	(MongoDB\BSON\DBPointer) Returns a representation that can be converted to JSON
>serialize(): string	(MongoDB\BSON\DBPointer) Serialize a DBPointer
>__toString(): string	(MongoDB\BSON\DBPointer) Returns an empty string
>unserialize(string $data): void	(MongoDB\BSON\DBPointer) Unserialize a DBPointer
MongoDB\BSON\Decimal128(string $value)	(new) Construct a new Decimal128
>jsonSerialize(): mixed	(MongoDB\BSON\Decimal128) Returns a representation that can be converted to JSON
>serialize(): string	(MongoDB\BSON\Decimal128) Serialize a Decimal128
>__toString(): string	(MongoDB\BSON\Decimal128) Returns the string representation of this Decimal128
>unserialize(string $data): void	(MongoDB\BSON\Decimal128) Unserialize a Decimal128
>__toString(): string	(MongoDB\BSON\Decimal128Interface) Returns the string representation of this Decimal128Interface
MongoDB\BSON\Document()	(new) Construct a new BSON document (unused)
MongoDB\BSON\Document::fromBSON(string $bson): MongoDB\BSON\Document	Construct a new document instance from a BSON string
MongoDB\BSON\Document::fromJSON(string $json): MongoDB\BSON\Document	Construct a new document instance from a JSON string
MongoDB\BSON\Document::fromPHP(object|array $value): MongoDB\BSON\Document	Construct a new document instance from PHP data
>get(string $key): mixed	(MongoDB\BSON\Document) Returns the value of a key in the document
>getIterator(): MongoDB\BSON\Iterator	(MongoDB\BSON\Document) Returns an iterator for the BSON document
>has(string $key): bool	(MongoDB\BSON\Document) Returns whether a key is present in the document
>offsetExists(mixed $key): bool	(MongoDB\BSON\Document) Returns whether a key is present in the document
>offsetGet(mixed $key): mixed	(MongoDB\BSON\Document) Returns the value of a key in the document
>offsetSet(mixed $key, mixed $value): void	(MongoDB\BSON\Document) Implementation of ArrayAccess
>offsetUnset(mixed $key): void	(MongoDB\BSON\Document) Implementation of ArrayAccess
>serialize(): string	(MongoDB\BSON\Document) Serialize a Document
>toCanonicalExtendedJSON(): string	(MongoDB\BSON\Document) Returns the Canonical Extended JSON representation of the BSON document
>toPHP(array|null $typeMap = null): array|object	(MongoDB\BSON\Document) Returns the PHP representation of the BSON document
>toRelaxedExtendedJSON(): string	(MongoDB\BSON\Document) Returns the Relaxed Extended JSON representation of the BSON document
>__toString(): string	(MongoDB\BSON\Document) Returns the string representation of this BSON Document
>unserialize(string $data): void	(MongoDB\BSON\Document) Unserialize a BSON document
MongoDB\BSON\Int64(int|string $value)	(new) Construct a new Int64
>jsonSerialize(): mixed	(MongoDB\BSON\Int64) Returns a representation that can be converted to JSON
>serialize(): string	(MongoDB\BSON\Int64) Serialize an Int64
>__toString(): string	(MongoDB\BSON\Int64) Returns the string representation of this Int64
>unserialize(string $data): void	(MongoDB\BSON\Int64) Unserialize an Int64
MongoDB\BSON\Iterator()	(new) Construct a new BSON iterator (unused)
>current(): mixed	(MongoDB\BSON\Iterator) Returns the current element
>key(): string|int	(MongoDB\BSON\Iterator) Returns the key of the current element
>next(): void	(MongoDB\BSON\Iterator) Advances the iterator to next element
>rewind(): void	(MongoDB\BSON\Iterator) Rewinds the Iterator to the first element
>valid(): bool	(MongoDB\BSON\Iterator) Checks if current position is valid
MongoDB\BSON\Javascript(string $code, array|object|null $scope = null)	(new) Construct a new Javascript
>getCode(): string	(MongoDB\BSON\Javascript) Returns the Javascriptaposs code
>getScope(): object|null	(MongoDB\BSON\Javascript) Returns the Javascriptaposs scope document
>jsonSerialize(): mixed	(MongoDB\BSON\Javascript) Returns a representation that can be converted to JSON
>serialize(): string	(MongoDB\BSON\Javascript) Serialize a Javascript
>__toString(): string	(MongoDB\BSON\Javascript) Returns the Javascriptaposs code
>unserialize(string $data): void	(MongoDB\BSON\Javascript) Unserialize a Javascript
>getCode(): string	(MongoDB\BSON\JavascriptInterface) Returns the JavascriptInterfaceaposs code
>getScope(): object|null	(MongoDB\BSON\JavascriptInterface) Returns the JavascriptInterfaceaposs scope document
>__toString(): string	(MongoDB\BSON\JavascriptInterface) Returns the JavascriptInterfaceaposs code
MongoDB\BSON\MaxKey()	(new) Construct a new MaxKey
>jsonSerialize(): mixed	(MongoDB\BSON\MaxKey) Returns a representation that can be converted to JSON
>serialize(): string	(MongoDB\BSON\MaxKey) Serialize a MaxKey
>unserialize(string $data): void	(MongoDB\BSON\MaxKey) Unserialize a MaxKey
MongoDB\BSON\MinKey()	(new) Construct a new MinKey
>jsonSerialize(): mixed	(MongoDB\BSON\MinKey) Returns a representation that can be converted to JSON
>serialize(): string	(MongoDB\BSON\MinKey) Serialize a MinKey
>unserialize(string $data): void	(MongoDB\BSON\MinKey) Unserialize a MinKey
MongoDB\BSON\ObjectId(string|null $id = null)	(new) Construct a new ObjectId
>getTimestamp(): int	(MongoDB\BSON\ObjectId) Returns the timestamp component of this ObjectId
>jsonSerialize(): mixed	(MongoDB\BSON\ObjectId) Returns a representation that can be converted to JSON
>serialize(): string	(MongoDB\BSON\ObjectId) Serialize an ObjectId
>__toString(): string	(MongoDB\BSON\ObjectId) Returns the hexidecimal representation of this ObjectId
>unserialize(string $data): void	(MongoDB\BSON\ObjectId) Unserialize an ObjectId
>getTimestamp(): int	(MongoDB\BSON\ObjectIdInterface) Returns the timestamp component of this ObjectIdInterface
>__toString(): string	(MongoDB\BSON\ObjectIdInterface) Returns the hexidecimal representation of this ObjectIdInterface
MongoDB\BSON\PackedArray()	(new) Construct a new BSON array (unused)
MongoDB\BSON\PackedArray::fromJSON(string $json): MongoDB\BSON\PackedArray	Construct a new BSON array instance from a JSON string
MongoDB\BSON\PackedArray::fromPHP(array $value): MongoDB\BSON\PackedArray	Construct a new BSON array instance from PHP data
>get(int $key): mixed	(MongoDB\BSON\PackedArray) Returns the value of an index in the array
>getIterator(): MongoDB\BSON\Iterator	(MongoDB\BSON\PackedArray) Returns an iterator for the BSON array
>has(int $index): bool	(MongoDB\BSON\PackedArray) Returns whether a index is present in the array
>offsetExists(mixed $key): bool	(MongoDB\BSON\PackedArray) Returns whether a index is present in the array
>offsetGet(mixed $key): mixed	(MongoDB\BSON\PackedArray) Returns the value of an index in the array
>offsetSet(mixed $key, mixed $value): void	(MongoDB\BSON\PackedArray) Implementation of ArrayAccess
>offsetUnset(mixed $key): void	(MongoDB\BSON\PackedArray) Implementation of ArrayAccess
>serialize(): string	(MongoDB\BSON\PackedArray) Serialize a BSON array
>toCanonicalExtendedJSON(): string	(MongoDB\BSON\PackedArray) Returns the Canonical Extended JSON representation of the BSON array
>toPHP(array|null $typeMap = null): array|object	(MongoDB\BSON\PackedArray) Returns the PHP representation of the BSON array
>toRelaxedExtendedJSON(): string	(MongoDB\BSON\PackedArray) Returns the Relaxed Extended JSON representation of the BSON array
>__toString(): string	(MongoDB\BSON\PackedArray) Returns the string representation of this BSON array
>unserialize(string $data): void	(MongoDB\BSON\PackedArray) Unserialize a BSON array
>bsonSerialize(): array|stdClass|MongoDB\BSON\Document	(MongoDB\BSON\Persistable) Provides an array or document to serialize as BSON
MongoDB\BSON\Regex(string $pattern, string $flags = "")	(new) Construct a new Regex
>getFlags(): string	(MongoDB\BSON\Regex) Returns the Regexaposs flags
>getPattern(): string	(MongoDB\BSON\Regex) Returns the Regexaposs pattern
>jsonSerialize(): mixed	(MongoDB\BSON\Regex) Returns a representation that can be converted to JSON
>serialize(): string	(MongoDB\BSON\Regex) Serialize a Regex
>__toString(): string	(MongoDB\BSON\Regex) Returns the string representation of this Regex
>unserialize(string $data): void	(MongoDB\BSON\Regex) Unserialize a Regex
>getFlags(): string	(MongoDB\BSON\RegexInterface) Returns the RegexInterfaceaposs flags
>getPattern(): string	(MongoDB\BSON\RegexInterface) Returns the RegexInterfaceaposs pattern
>__toString(): string	(MongoDB\BSON\RegexInterface) Returns the string representation of this RegexInterface
>bsonSerialize(): array|stdClass|MongoDB\BSON\Document|MongoDB\BSON\PackedArray	(MongoDB\BSON\Serializable) Provides an array or document to serialize as BSON
MongoDB\BSON\Symbol()	(new) Construct a new Symbol (unused)
>jsonSerialize(): mixed	(MongoDB\BSON\Symbol) Returns a representation that can be converted to JSON
>serialize(): string	(MongoDB\BSON\Symbol) Serialize a Symbol
>__toString(): string	(MongoDB\BSON\Symbol) Returns the Symbol as a string
>unserialize(string $data): void	(MongoDB\BSON\Symbol) Unserialize a Symbol
MongoDB\BSON\Timestamp(int $increment, int $timestamp)	(new) Construct a new Timestamp
>getIncrement(): int	(MongoDB\BSON\Timestamp) Returns the increment component of this Timestamp
>getTimestamp(): int	(MongoDB\BSON\Timestamp) Returns the timestamp component of this Timestamp
>jsonSerialize(): mixed	(MongoDB\BSON\Timestamp) Returns a representation that can be converted to JSON
>serialize(): string	(MongoDB\BSON\Timestamp) Serialize a Timestamp
>__toString(): string	(MongoDB\BSON\Timestamp) Returns the string representation of this Timestamp
>unserialize(string $data): void	(MongoDB\BSON\Timestamp) Unserialize a Timestamp
>getIncrement(): int	(MongoDB\BSON\TimestampInterface) Returns the increment component of this TimestampInterface
>getTimestamp(): int	(MongoDB\BSON\TimestampInterface) Returns the timestamp component of this TimestampInterface
>__toString(): string	(MongoDB\BSON\TimestampInterface) Returns the string representation of this TimestampInterface
MongoDB\BSON\Undefined()	(new) Construct a new Undefined (unused)
>jsonSerialize(): mixed	(MongoDB\BSON\Undefined) Returns a representation that can be converted to JSON
>serialize(): string	(MongoDB\BSON\Undefined) Serialize a Undefined
>__toString(): string	(MongoDB\BSON\Undefined) Returns an empty string
>unserialize(string $data): void	(MongoDB\BSON\Undefined) Unserialize a Undefined
>bsonUnserialize(array $data): void	(MongoDB\BSON\Unserializable) Constructs the object from a BSON array or document
MongoDB\BSON\UTCDateTime(int|float|string|MongoDB\BSON\Int64|DateTimeInterface|null $milliseconds = null)	(new) Construct a new UTCDateTime
>jsonSerialize(): mixed	(MongoDB\BSON\UTCDateTime) Returns a representation that can be converted to JSON
>serialize(): string	(MongoDB\BSON\UTCDateTime) Serialize a UTCDateTime
>toDateTime(): DateTime	(MongoDB\BSON\UTCDateTime) Returns the DateTime representation of this UTCDateTime
>toDateTimeImmutable(): DateTimeImmutable	(MongoDB\BSON\UTCDateTime) Returns the DateTimeImmutable representation of this UTCDateTime
>__toString(): string	(MongoDB\BSON\UTCDateTime) Returns the string representation of this UTCDateTime
>unserialize(string $data): void	(MongoDB\BSON\UTCDateTime) Unserialize a UTCDateTime
>toDateTime(): DateTime	(MongoDB\BSON\UTCDateTimeInterface) Returns the DateTime representation of this UTCDateTimeInterface
>__toString(): string	(MongoDB\BSON\UTCDateTimeInterface) Returns the string representation of this UTCDateTimeInterface
MongoDB\BSON\fromJSON(string $json): string	Returns the BSON representation of a JSON value
MongoDB\BSON\fromPHP(array|object $value): string	Returns the BSON representation of a PHP value
MongoDB\BSON\toCanonicalExtendedJSON(string $bson): string	Returns the Canonical Extended JSON representation of a BSON value
MongoDB\BSON\toJSON(string $bson): string	Returns the Legacy Extended JSON representation of a BSON value
MongoDB\BSON\toPHP(string $bson, array $typeMap = array()): array|object	Returns the PHP representation of a BSON value
MongoDB\BSON\toRelaxedExtendedJSON(string $bson): string	Returns the Relaxed Extended JSON representation of a BSON value
MongoDB\Driver\Monitoring\addSubscriber(MongoDB\Driver\Monitoring\Subscriber $subscriber): void	Registers a monitoring event subscriber globally
MongoDB\Driver\Monitoring\removeSubscriber(MongoDB\Driver\Monitoring\Subscriber $subscriber): void	Unregisters a monitoring event subscriber globally
MongoDB\Driver\BulkWrite(array|null $options = null)	(new) Create a new BulkWrite
>count(): int	(MongoDB\Driver\BulkWrite) Count number of write operations in the bulk
>delete(array|object $filter, array|null $deleteOptions = null): void	(MongoDB\Driver\BulkWrite) Add a delete operation to the bulk
>insert(array|object $document): mixed	(MongoDB\Driver\BulkWrite) Add an insert operation to the bulk
>update(array|object $filter, array|object $newObj, array|null $updateOptions = null): void	(MongoDB\Driver\BulkWrite) Add an update operation to the bulk
>addKeyAltName(MongoDB\BSON\Binary $keyId, string $keyAltName): object|null	(MongoDB\Driver\ClientEncryption) Adds an alternate name to a key document
MongoDB\Driver\ClientEncryption(array $options)	(new) Create a new ClientEncryption object
>createDataKey(string $kmsProvider, array|null $options = null): MongoDB\BSON\Binary	(MongoDB\Driver\ClientEncryption) Creates a key document
>decrypt(MongoDB\BSON\Binary $value): mixed	(MongoDB\Driver\ClientEncryption) Decrypt a value
>deleteKey(MongoDB\BSON\Binary $keyId): object	(MongoDB\Driver\ClientEncryption) Deletes a key document
>encrypt(mixed $value, array|null $options = null): MongoDB\BSON\Binary	(MongoDB\Driver\ClientEncryption) Encrypt a value
>encryptExpression(array|object $expr, array|null $options = null): object	(MongoDB\Driver\ClientEncryption) Encrypts a match or aggregate expression
>getKey(MongoDB\BSON\Binary $keyId): object|null	(MongoDB\Driver\ClientEncryption) Gets a key document
>getKeyByAltName(string $keyAltName): object|null	(MongoDB\Driver\ClientEncryption) Gets a key document by an alternate name
>getKeys(): MongoDB\Driver\Cursor	(MongoDB\Driver\ClientEncryption) Gets all key documents
>removeKeyAltName(MongoDB\BSON\Binary $keyId, string $keyAltName): object|null	(MongoDB\Driver\ClientEncryption) Removes an alternate name from a key document
>rewrapManyDataKey(array|object $filter, array|null $options = null): object	(MongoDB\Driver\ClientEncryption) Rewraps data keys
MongoDB\Driver\Command(array|object $document, array|null $commandOptions = null)	(new) Create a new Command
MongoDB\Driver\Cursor()	(new) Create a new Cursor (not used)
>current(): array|object|null	(MongoDB\Driver\Cursor) Returns the current element
>getId(bool $asInt64 = false): MongoDB\Driver\CursorId|MongoDB\BSON\Int64	(MongoDB\Driver\Cursor) Returns the ID for this cursor
>getServer(): MongoDB\Driver\Server	(MongoDB\Driver\Cursor) Returns the server associated with this cursor
>isDead(): bool	(MongoDB\Driver\Cursor) Checks if the cursor is exhausted or may have additional results
>key(): int	(MongoDB\Driver\Cursor) Returns the current resultaposs index within the cursor
>next(): void	(MongoDB\Driver\Cursor) Advances the cursor to the next result
>rewind(): void	(MongoDB\Driver\Cursor) Rewind the cursor to the first result
>setTypeMap(array $typemap): void	(MongoDB\Driver\Cursor) Sets a type map to use for BSON unserialization
>toArray(): array	(MongoDB\Driver\Cursor) Returns an array containing all results for this cursor
>valid(): bool	(MongoDB\Driver\Cursor) Checks if the current position in the cursor is valid
MongoDB\Driver\CursorId()	(new) Create a new CursorId (not used)
>serialize(): string	(MongoDB\Driver\CursorId) Serialize a CursorId
>__toString(): string	(MongoDB\Driver\CursorId) String representation of the cursor ID
>unserialize(string $data): void	(MongoDB\Driver\CursorId) Unserialize a CursorId
>getId(): MongoDB\Driver\CursorId|MongoDB\BSON\Int64	(MongoDB\Driver\CursorInterface) Returns the ID for this cursor
>getServer(): MongoDB\Driver\Server	(MongoDB\Driver\CursorInterface) Returns the server associated with this cursor
>isDead(): bool	(MongoDB\Driver\CursorInterface) Checks if the cursor may have additional results
>setTypeMap(array $typemap): void	(MongoDB\Driver\CursorInterface) Sets a type map to use for BSON unserialization
>toArray(): array	(MongoDB\Driver\CursorInterface) Returns an array containing all results for this cursor
>getResultDocument(): object	(MongoDB\Driver\Exception\CommandException) Returns the result document for the failed command
>hasErrorLabel(string $errorLabel): bool	(MongoDB\Driver\Exception\RuntimeException) Returns whether an error label is associated with an exception
>getWriteResult(): MongoDB\Driver\WriteResult	(MongoDB\Driver\Exception\WriteException) Returns the WriteResult for the failed write operation
>addSubscriber(MongoDB\Driver\Monitoring\Subscriber $subscriber): void	(MongoDB\Driver\Manager) Registers a monitoring event subscriber with this Manager
MongoDB\Driver\Manager(string|null $uri = null, array|null $uriOptions = null, array|null $driverOptions = null)	(new) Create new MongoDB Manager
>createClientEncryption(array $options): MongoDB\Driver\ClientEncryption	(MongoDB\Driver\Manager) Create a new ClientEncryption object
>executeBulkWrite(string $namespace, MongoDB\Driver\BulkWrite $bulk, array|null $options = null): MongoDB\Driver\WriteResult	(MongoDB\Driver\Manager) Execute one or more write operations
>executeCommand(string $db, MongoDB\Driver\Command $command, array|null $options = null): MongoDB\Driver\Cursor	(MongoDB\Driver\Manager) Execute a database command
>executeQuery(string $namespace, MongoDB\Driver\Query $query, array|null $options = null): MongoDB\Driver\Cursor	(MongoDB\Driver\Manager) Execute a database query
>executeReadCommand(string $db, MongoDB\Driver\Command $command, array|null $options = null): MongoDB\Driver\Cursor	(MongoDB\Driver\Manager) Execute a database command that reads
>executeReadWriteCommand(string $db, MongoDB\Driver\Command $command, array|null $options = null): MongoDB\Driver\Cursor	(MongoDB\Driver\Manager) Execute a database command that reads and writes
>executeWriteCommand(string $db, MongoDB\Driver\Command $command, array|null $options = null): MongoDB\Driver\Cursor	(MongoDB\Driver\Manager) Execute a database command that writes
>getEncryptedFieldsMap(): array|object|null	(MongoDB\Driver\Manager) Return the encryptedFieldsMap auto encryption option for the Manager
>getReadConcern(): MongoDB\Driver\ReadConcern	(MongoDB\Driver\Manager) Return the ReadConcern for the Manager
>getReadPreference(): MongoDB\Driver\ReadPreference	(MongoDB\Driver\Manager) Return the ReadPreference for the Manager
>getServers(): array	(MongoDB\Driver\Manager) Return the servers to which this manager is connected
>getWriteConcern(): MongoDB\Driver\WriteConcern	(MongoDB\Driver\Manager) Return the WriteConcern for the Manager
>removeSubscriber(MongoDB\Driver\Monitoring\Subscriber $subscriber): void	(MongoDB\Driver\Manager) Unregisters a monitoring event subscriber with this Manager
>selectServer(MongoDB\Driver\ReadPreference|null $readPreference = null): MongoDB\Driver\Server	(MongoDB\Driver\Manager) Select a server matching a read preference
>startSession(array|null $options = null): MongoDB\Driver\Session	(MongoDB\Driver\Manager) Start a new client session for use with this client
>getCommandName(): string	(MongoDB\Driver\Monitoring\CommandFailedEvent) Returns the command name
>getDatabaseName(): string	(MongoDB\Driver\Monitoring\CommandFailedEvent) Returns the database on which the command was executed
>getDurationMicros(): int	(MongoDB\Driver\Monitoring\CommandFailedEvent) Returns the command's duration in microseconds
>getError(): Exception	(MongoDB\Driver\Monitoring\CommandFailedEvent) Returns the Exception associated with the failed command
>getHost(): string	(MongoDB\Driver\Monitoring\CommandFailedEvent) Returns the server hostname for the command
>getOperationId(): string	(MongoDB\Driver\Monitoring\CommandFailedEvent) Returns the command's operation ID
>getPort(): int	(MongoDB\Driver\Monitoring\CommandFailedEvent) Returns the server port for the command
>getReply(): object	(MongoDB\Driver\Monitoring\CommandFailedEvent) Returns the command reply document
>getRequestId(): string	(MongoDB\Driver\Monitoring\CommandFailedEvent) Returns the command's request ID
>getServer(): MongoDB\Driver\Server	(MongoDB\Driver\Monitoring\CommandFailedEvent) Returns the Server on which the command was executed
>getServerConnectionId(): int|null	(MongoDB\Driver\Monitoring\CommandFailedEvent) Returns the server connection ID for the command
>getServiceId(): MongoDB\BSON\ObjectId|null	(MongoDB\Driver\Monitoring\CommandFailedEvent) Returns the load balancer service ID for the command
>getCommand(): object	(MongoDB\Driver\Monitoring\CommandStartedEvent) Returns the command document
>getCommandName(): string	(MongoDB\Driver\Monitoring\CommandStartedEvent) Returns the command name
>getDatabaseName(): string	(MongoDB\Driver\Monitoring\CommandStartedEvent) Returns the database on which the command was executed
>getHost(): string	(MongoDB\Driver\Monitoring\CommandStartedEvent) Returns the server hostname for the command
>getOperationId(): string	(MongoDB\Driver\Monitoring\CommandStartedEvent) Returns the command's operation ID
>getPort(): int	(MongoDB\Driver\Monitoring\CommandStartedEvent) Returns the server port for the command
>getRequestId(): string	(MongoDB\Driver\Monitoring\CommandStartedEvent) Returns the command's request ID
>getServer(): MongoDB\Driver\Server	(MongoDB\Driver\Monitoring\CommandStartedEvent) Returns the Server on which the command was executed
>getServerConnectionId(): int|null	(MongoDB\Driver\Monitoring\CommandStartedEvent) Returns the server connection ID for the command
>getServiceId(): MongoDB\BSON\ObjectId|null	(MongoDB\Driver\Monitoring\CommandStartedEvent) Returns the load balancer service ID for the command
>commandFailed(MongoDB\Driver\Monitoring\CommandFailedEvent $event): void	(MongoDB\Driver\Monitoring\CommandSubscriber) Notification method for a failed command
>commandStarted(MongoDB\Driver\Monitoring\CommandStartedEvent $event): void	(MongoDB\Driver\Monitoring\CommandSubscriber) Notification method for a started command
>commandSucceeded(MongoDB\Driver\Monitoring\CommandSucceededEvent $event): void	(MongoDB\Driver\Monitoring\CommandSubscriber) Notification method for a successful command
>getCommandName(): string	(MongoDB\Driver\Monitoring\CommandSucceededEvent) Returns the command name
>getDatabaseName(): string	(MongoDB\Driver\Monitoring\CommandSucceededEvent) Returns the database on which the command was executed
>getDurationMicros(): int	(MongoDB\Driver\Monitoring\CommandSucceededEvent) Returns the command's duration in microseconds
>getHost(): string	(MongoDB\Driver\Monitoring\CommandSucceededEvent) Returns the server hostname for the command
>getOperationId(): string	(MongoDB\Driver\Monitoring\CommandSucceededEvent) Returns the command's operation ID
>getPort(): int	(MongoDB\Driver\Monitoring\CommandSucceededEvent) Returns the server port for the command
>getReply(): object	(MongoDB\Driver\Monitoring\CommandSucceededEvent) Returns the command reply document
>getRequestId(): string	(MongoDB\Driver\Monitoring\CommandSucceededEvent) Returns the command's request ID
>getServer(): MongoDB\Driver\Server	(MongoDB\Driver\Monitoring\CommandSucceededEvent) Returns the Server on which the command was executed
>getServerConnectionId(): int|null	(MongoDB\Driver\Monitoring\CommandSucceededEvent) Returns the server connection ID for the command
>getServiceId(): MongoDB\BSON\ObjectId|null	(MongoDB\Driver\Monitoring\CommandSucceededEvent) Returns the load balancer service ID for the command
>log(int $level, string $domain, string $message): void	(MongoDB\Driver\Monitoring\LogSubscriber) Notification method for a log message
>serverChanged(MongoDB\Driver\Monitoring\ServerChangedEvent $event): void	(MongoDB\Driver\Monitoring\SDAMSubscriber) Notification method for a server description change
>serverClosed(MongoDB\Driver\Monitoring\ServerClosedEvent $event): void	(MongoDB\Driver\Monitoring\SDAMSubscriber) Notification method for closing a server
>serverHeartbeatFailed(MongoDB\Driver\Monitoring\ServerHeartbeatFailedEvent $event): void	(MongoDB\Driver\Monitoring\SDAMSubscriber) Notification method for a failed server heartbeat
>serverHeartbeatStarted(MongoDB\Driver\Monitoring\ServerHeartbeatStartedEvent $event): void	(MongoDB\Driver\Monitoring\SDAMSubscriber) Notification method for a started server heartbeat
>serverHeartbeatSucceeded(MongoDB\Driver\Monitoring\ServerHeartbeatSucceededEvent $event): void	(MongoDB\Driver\Monitoring\SDAMSubscriber) Notification method for a successful server heartbeat
>serverOpening(MongoDB\Driver\Monitoring\ServerOpeningEvent $event): void	(MongoDB\Driver\Monitoring\SDAMSubscriber) Notification method for opening a server
>topologyChanged(MongoDB\Driver\Monitoring\TopologyChangedEvent $event): void	(MongoDB\Driver\Monitoring\SDAMSubscriber) Notification method for a topology description change
>topologyClosed(MongoDB\Driver\Monitoring\TopologyClosedEvent $event): void	(MongoDB\Driver\Monitoring\SDAMSubscriber) Notification method for closing the topology
>topologyOpening(MongoDB\Driver\Monitoring\TopologyOpeningEvent $event): void	(MongoDB\Driver\Monitoring\SDAMSubscriber) Notification method for opening the topology
>getHost(): string	(MongoDB\Driver\Monitoring\ServerChangedEvent) Returns the hostname of the server
>getNewDescription(): MongoDB\Driver\ServerDescription	(MongoDB\Driver\Monitoring\ServerChangedEvent) Returns the new description for the server
>getPort(): int	(MongoDB\Driver\Monitoring\ServerChangedEvent) Returns the port on which this server is listening
>getPreviousDescription(): MongoDB\Driver\ServerDescription	(MongoDB\Driver\Monitoring\ServerChangedEvent) Returns the previous description for the server
>getTopologyId(): MongoDB\BSON\ObjectId	(MongoDB\Driver\Monitoring\ServerChangedEvent) Returns the topology ID associated with this server
>getHost(): string	(MongoDB\Driver\Monitoring\ServerClosedEvent) Returns the hostname of the server
>getPort(): int	(MongoDB\Driver\Monitoring\ServerClosedEvent) Returns the port on which this server is listening
>getTopologyId(): MongoDB\BSON\ObjectId	(MongoDB\Driver\Monitoring\ServerClosedEvent) Returns the topology ID associated with this server
>getDurationMicros(): int	(MongoDB\Driver\Monitoring\ServerHeartbeatFailedEvent) Returns the heartbeat's duration in microseconds
>getError(): Exception	(MongoDB\Driver\Monitoring\ServerHeartbeatFailedEvent) Returns the Exception associated with the failed heartbeat
>getHost(): string	(MongoDB\Driver\Monitoring\ServerHeartbeatFailedEvent) Returns the hostname of the server
>getPort(): int	(MongoDB\Driver\Monitoring\ServerHeartbeatFailedEvent) Returns the port on which this server is listening
>isAwaited(): bool	(MongoDB\Driver\Monitoring\ServerHeartbeatFailedEvent) Returns whether the heartbeat used a streaming protocol
>getHost(): string	(MongoDB\Driver\Monitoring\ServerHeartbeatStartedEvent) Returns the hostname of the server
>getPort(): int	(MongoDB\Driver\Monitoring\ServerHeartbeatStartedEvent) Returns the port on which this server is listening
>isAwaited(): bool	(MongoDB\Driver\Monitoring\ServerHeartbeatStartedEvent) Returns whether the heartbeat used a streaming protocol
>getDurationMicros(): int	(MongoDB\Driver\Monitoring\ServerHeartbeatSucceededEvent) Returns the heartbeat's duration in microseconds
>getHost(): string	(MongoDB\Driver\Monitoring\ServerHeartbeatSucceededEvent) Returns the hostname of the server
>getPort(): int	(MongoDB\Driver\Monitoring\ServerHeartbeatSucceededEvent) Returns the port on which this server is listening
>getReply(): object	(MongoDB\Driver\Monitoring\ServerHeartbeatSucceededEvent) Returns the heartbeat reply document
>isAwaited(): bool	(MongoDB\Driver\Monitoring\ServerHeartbeatSucceededEvent) Returns whether the heartbeat used a streaming protocol
>getHost(): string	(MongoDB\Driver\Monitoring\ServerOpeningEvent) Returns the hostname of the server
>getPort(): int	(MongoDB\Driver\Monitoring\ServerOpeningEvent) Returns the port on which this server is listening
>getTopologyId(): MongoDB\BSON\ObjectId	(MongoDB\Driver\Monitoring\ServerOpeningEvent) Returns the topology ID associated with this server
>getNewDescription(): MongoDB\Driver\TopologyDescription	(MongoDB\Driver\Monitoring\TopologyChangedEvent) Returns the new description for the topology
>getPreviousDescription(): MongoDB\Driver\TopologyDescription	(MongoDB\Driver\Monitoring\TopologyChangedEvent) Returns the previous description for the topology
>getTopologyId(): MongoDB\BSON\ObjectId	(MongoDB\Driver\Monitoring\TopologyChangedEvent) Returns the topology ID
>getTopologyId(): MongoDB\BSON\ObjectId	(MongoDB\Driver\Monitoring\TopologyClosedEvent) Returns the topology ID
>getTopologyId(): MongoDB\BSON\ObjectId	(MongoDB\Driver\Monitoring\TopologyOpeningEvent) Returns the topology ID
MongoDB\Driver\Query(array|object $filter, array|null $queryOptions = null)	(new) Create a new Query
>bsonSerialize(): stdClass	(MongoDB\Driver\ReadConcern) Returns an object for BSON serialization
MongoDB\Driver\ReadConcern(string|null $level = null)	(new) Create a new ReadConcern
>getLevel(): string|null	(MongoDB\Driver\ReadConcern) Returns the ReadConcernaposs "level" option
>isDefault(): bool	(MongoDB\Driver\ReadConcern) Checks if this is the default read concern
>serialize(): string	(MongoDB\Driver\ReadConcern) Serialize a ReadConcern
>unserialize(string $data): void	(MongoDB\Driver\ReadConcern) Unserialize a ReadConcern
>bsonSerialize(): stdClass	(MongoDB\Driver\ReadPreference) Returns an object for BSON serialization
MongoDB\Driver\ReadPreference(string|int $mode, array|null $tagSets = null, array|null $options = null)	(new) Create a new ReadPreference
>getHedge(): object|null	(MongoDB\Driver\ReadPreference) Returns the ReadPreferenceaposs "hedge" option
>getMaxStalenessSeconds(): int	(MongoDB\Driver\ReadPreference) Returns the ReadPreferenceaposs "maxStalenessSeconds" option
>getMode(): int	(MongoDB\Driver\ReadPreference) Returns the ReadPreferenceaposs "mode" option
>getModeString(): string	(MongoDB\Driver\ReadPreference) Returns the ReadPreferenceaposs "mode" option
>getTagSets(): array	(MongoDB\Driver\ReadPreference) Returns the ReadPreferenceaposs "tagSets" option
>serialize(): string	(MongoDB\Driver\ReadPreference) Serialize a ReadPreference
>unserialize(string $data): void	(MongoDB\Driver\ReadPreference) Unserialize a ReadPreference
MongoDB\Driver\Server()	(new) Create a new Server (not used)
>executeBulkWrite(string $namespace, MongoDB\Driver\BulkWrite $bulk, array|null $options = null): MongoDB\Driver\WriteResult	(MongoDB\Driver\Server) Execute one or more write operations on this server
>executeCommand(string $db, MongoDB\Driver\Command $command, array|null $options = null): MongoDB\Driver\Cursor	(MongoDB\Driver\Server) Execute a database command on this server
>executeQuery(string $namespace, MongoDB\Driver\Query $query, array|null $options = null): MongoDB\Driver\Cursor	(MongoDB\Driver\Server) Execute a database query on this server
>executeReadCommand(string $db, MongoDB\Driver\Command $command, array|null $options = null): MongoDB\Driver\Cursor	(MongoDB\Driver\Server) Execute a database command that reads on this server
>executeReadWriteCommand(string $db, MongoDB\Driver\Command $command, array|null $options = null): MongoDB\Driver\Cursor	(MongoDB\Driver\Server) Execute a database command that reads and writes on this server
>executeWriteCommand(string $db, MongoDB\Driver\Command $command, array|null $options = null): MongoDB\Driver\Cursor	(MongoDB\Driver\Server) Execute a database command that writes on this server
>getHost(): string	(MongoDB\Driver\Server) Returns the hostname of this server
>getInfo(): array	(MongoDB\Driver\Server) Returns an array of information describing this server
>getLatency(): integer|null	(MongoDB\Driver\Server) Returns the latency of this server in milliseconds
>getPort(): int	(MongoDB\Driver\Server) Returns the port on which this server is listening
>getServerDescription(): MongoDB\Driver\ServerDescription	(MongoDB\Driver\Server) Returns a ServerDescription for this server
>getTags(): array	(MongoDB\Driver\Server) Returns an array of tags describing this server in a replica set
>getType(): int	(MongoDB\Driver\Server) Returns an integer denoting the type of this server
>isArbiter(): bool	(MongoDB\Driver\Server) Checks if this server is an arbiter member of a replica set
>isHidden(): bool	(MongoDB\Driver\Server) Checks if this server is a hidden member of a replica set
>isPassive(): bool	(MongoDB\Driver\Server) Checks if this server is a passive member of a replica set
>isPrimary(): bool	(MongoDB\Driver\Server) Checks if this server is a primary member of a replica set
>isSecondary(): bool	(MongoDB\Driver\Server) Checks if this server is a secondary member of a replica set
>bsonSerialize(): stdClass	(MongoDB\Driver\ServerApi) Returns an object for BSON serialization
MongoDB\Driver\ServerApi(string $version, bool|null $strict = null, bool|null $deprecationErrors = null)	(new) Create a new ServerApi instance
>serialize(): string	(MongoDB\Driver\ServerApi) Serialize a ServerApi
>unserialize(string $data): void	(MongoDB\Driver\ServerApi) Unserialize a ServerApi
>getHelloResponse(): array	(MongoDB\Driver\ServerDescription) Returns the server's most recent "hello" response
>getHost(): string	(MongoDB\Driver\ServerDescription) Returns the hostname of this server
>getLastUpdateTime(): int	(MongoDB\Driver\ServerDescription) Returns the server's last update time in microseconds
>getPort(): int	(MongoDB\Driver\ServerDescription) Returns the port on which this server is listening
>getRoundTripTime(): int|null	(MongoDB\Driver\ServerDescription) Returns the server's round trip time in milliseconds
>getType(): string	(MongoDB\Driver\ServerDescription) Returns a string denoting the type of this server
>abortTransaction(): void	(MongoDB\Driver\Session) Aborts a transaction
>advanceClusterTime(array|object $clusterTime): void	(MongoDB\Driver\Session) Advances the cluster time for this session
>advanceOperationTime(MongoDB\BSON\TimestampInterface $operationTime): void	(MongoDB\Driver\Session) Advances the operation time for this session
>commitTransaction(): void	(MongoDB\Driver\Session) Commits a transaction
MongoDB\Driver\Session()	(new) Create a new Session (not used)
>endSession(): void	(MongoDB\Driver\Session) Terminates a session
>getClusterTime(): object|null	(MongoDB\Driver\Session) Returns the cluster time for this session
>getLogicalSessionId(): object	(MongoDB\Driver\Session) Returns the logical session ID for this session
>getOperationTime(): MongoDB\BSON\Timestamp|null	(MongoDB\Driver\Session) Returns the operation time for this session
>getServer(): MongoDB\Driver\Server|null	(MongoDB\Driver\Session) Returns the server to which this session is pinned
>getTransactionOptions(): array|null	(MongoDB\Driver\Session) Returns options for the currently running transaction
>getTransactionState(): string	(MongoDB\Driver\Session) Returns the current transaction state for this session
>isDirty(): bool	(MongoDB\Driver\Session) Returns whether the session has been marked as dirty
>isInTransaction(): bool	(MongoDB\Driver\Session) Returns whether a multi-document transaction is in progress
>startTransaction(array|null $options = null): void	(MongoDB\Driver\Session) Starts a transaction
>getServers(): array	(MongoDB\Driver\TopologyDescription) Returns the servers in the topology
>getType(): string	(MongoDB\Driver\TopologyDescription) Returns a string denoting the type of this topology
>hasReadableServer(MongoDB\Driver\ReadPreference|null $readPreference = null): bool	(MongoDB\Driver\TopologyDescription) Returns whether the topology has a readable server
>hasWritableServer(): bool	(MongoDB\Driver\TopologyDescription) Returns whether the topology has a writable server
>bsonSerialize(): stdClass	(MongoDB\Driver\WriteConcern) Returns an object for BSON serialization
MongoDB\Driver\WriteConcern(string|int $w, int|null $wtimeout = null, bool|null $journal = null)	(new) Create a new WriteConcern
>getJournal(): bool|null	(MongoDB\Driver\WriteConcern) Returns the WriteConcernaposs "journal" option
>getW(): string|int|null	(MongoDB\Driver\WriteConcern) Returns the WriteConcernaposs "w" option
>getWtimeout(): int	(MongoDB\Driver\WriteConcern) Returns the WriteConcernaposs "wtimeout" option
>isDefault(): bool	(MongoDB\Driver\WriteConcern) Checks if this is the default write concern
>serialize(): string	(MongoDB\Driver\WriteConcern) Serialize a WriteConcern
>unserialize(string $data): void	(MongoDB\Driver\WriteConcern) Unserialize a WriteConcern
>getCode(): int	(MongoDB\Driver\WriteConcernError) Returns the WriteConcernErroraposs error code
>getInfo(): object|null	(MongoDB\Driver\WriteConcernError) Returns metadata document for the WriteConcernError
>getMessage(): string	(MongoDB\Driver\WriteConcernError) Returns the WriteConcernErroraposs error message
>getCode(): int	(MongoDB\Driver\WriteError) Returns the WriteErroraposs error code
>getIndex(): int	(MongoDB\Driver\WriteError) Returns the index of the write operation corresponding to this WriteError
>getInfo(): object|null	(MongoDB\Driver\WriteError) Returns metadata document for the WriteError
>getMessage(): string	(MongoDB\Driver\WriteError) Returns the WriteErroraposs error message
>getDeletedCount(): int|null	(MongoDB\Driver\WriteResult) Returns the number of documents deleted
>getInsertedCount(): int|null	(MongoDB\Driver\WriteResult) Returns the number of documents inserted (excluding upserts)
>getMatchedCount(): int|null	(MongoDB\Driver\WriteResult) Returns the number of documents selected for update
>getModifiedCount(): int|null	(MongoDB\Driver\WriteResult) Returns the number of existing documents updated
>getServer(): MongoDB\Driver\Server	(MongoDB\Driver\WriteResult) Returns the server associated with this write result
>getUpsertedCount(): int|null	(MongoDB\Driver\WriteResult) Returns the number of documents inserted by an upsert
>getUpsertedIds(): array	(MongoDB\Driver\WriteResult) Returns an array of identifiers for upserted documents
>getWriteConcernError(): MongoDB\Driver\WriteConcernError|null	(MongoDB\Driver\WriteResult) Returns any write concern error that occurred
>getWriteErrors(): array	(MongoDB\Driver\WriteResult) Returns any write errors that occurred
>isAcknowledged(): bool	(MongoDB\Driver\WriteResult) Returns whether the write was acknowledged
MongoDB\BSON\BinaryInterface()	(new) This interface is implemented by MongoDB\BSON\Binary to be used as a parameter, return, or property type in userland classes
MongoDB\BSON\Decimal128Interface()	(new) This interface is implemented by MongoDB\BSON\Decimal128 to be used as a parameter, return, or property type in userland classes
MongoDB\BSON\JavascriptInterface()	(new) This interface is implemented by MongoDB\BSON\Javascript to be used as a parameter, return, or property type in userland classes
MongoDB\BSON\MaxKeyInterface()	(new) This interface is implemented by MongoDB\BSON\MaxKey to be used as a parameter, return, or property type in userland classes
MongoDB\BSON\MinKeyInterface()	(new) This interface is implemented by MongoDB\BSON\MinKey to be used as a parameter, return, or property type in userland classes
MongoDB\BSON\ObjectIdInterface()	(new) This interface is implemented by MongoDB\BSON\ObjectId to be used as a parameter, return, or property type in userland classes
MongoDB\BSON\Persistable()	(new) Classes may implement this interface to take advantage of automatic ODM (object document mapping) behavior in the extension
MongoDB\BSON\RegexInterface()	(new) This interface is implemented by MongoDB\BSON\Regex to be used as a parameter, return, or property type in userland classes
MongoDB\BSON\Serializable()	(new) Classes that implement this interface may return data to be serialized as a BSON array or document in lieu of the objectaposs public properties
MongoDB\BSON\TimestampInterface()	(new) This interface is implemented by MongoDB\BSON\Timestamp to be used as a parameter, return, or property type in userland classes
MongoDB\BSON\Type()	(new) Abstract base interface that should not be implemented directly
MongoDB\BSON\Unserializable()	(new) Classes that implement this interface may be specified in a type map for unserializing BSON arrays and documents (both root and embedded)
MongoDB\BSON\UTCDateTimeInterface()	(new) This interface is implemented by MongoDB\BSON\UTCDateTime to be used as a parameter, return, or property type in userland classes
MongoDB\Driver\CursorInterface()	(new) This interface is implemented by MongoDB\Driver\Cursor to be used as a parameter, return, or property type in userland classes
MongoDB\Driver\ServerDescription()	(new) The MongoDB\Driver\ServerDescription class is a value object that represents a server to which the driver is connected
MongoDB\Driver\TopologyDescription()	(new) The MongoDB\Driver\TopologyDescription class is a value object that represents a topology to which the driver is connected
MongoDB\Driver\WriteConcernError()	(new) The MongoDB\Driver\WriteConcernError class encapsulates information about a write concern error and may be returned by MongoDB\Driver\WriteResult::getWriteConcernError
MongoDB\Driver\WriteError()	(new) The MongoDB\Driver\WriteError class encapsulates information about a write error and may be returned as an array element from MongoDB\Driver\WriteResult::getWriteErrors
MongoDB\Driver\WriteResult()	(new) The MongoDB\Driver\WriteResult class encapsulates information about an executed MongoDB\Driver\BulkWrite and may be returned by MongoDB\Driver\Manager::executeBulkWrite
MongoDB\Driver\Exception\AuthenticationException()	(new) Thrown when the driver fails to authenticate with the server
MongoDB\Driver\Exception\BulkWriteException()	(new) Thrown when a bulk write operation fails
MongoDB\Driver\Exception\CommandException()	(new) Thrown when a command fails
MongoDB\Driver\Exception\ConnectionException()	(new) Base class for exceptions thrown when the driver fails to establish a database connection
MongoDB\Driver\Exception\ConnectionTimeoutException()	(new) Thrown when the driver fails to establish a database connection within a specified time limit (connectTimeoutMS) or server selection fails (serverSelectionTimeoutMS)
MongoDB\Driver\Exception\EncryptionException()	(new) Base class for exceptions thrown during client-side encryption
MongoDB\Driver\Exception\Exception()	(new) Common interface for all extension exceptions
MongoDB\Driver\Exception\ExecutionTimeoutException()	(new) Thrown when a query or command fails to complete within a specified time limit (e
MongoDB\Driver\Exception\InvalidArgumentException()	(new) Thrown when a driver method is given invalid arguments (e
MongoDB\Driver\Exception\LogicException()	(new) Thrown when the driver is incorrectly used (e
MongoDB\Driver\Exception\RuntimeException()	(new) Thrown when the driver encounters a runtime error (e
MongoDB\Driver\Exception\ServerException()	(new) Base class for exceptions thrown by the server
MongoDB\Driver\Exception\SSLConnectionException()	(new) Thrown when the driver fails to establish an SSL connection with the server
MongoDB\Driver\Exception\UnexpectedValueException()	(new) Thrown when the driver encounters an unexpected value (e
MongoDB\Driver\Exception\WriteException()	(new) Base class for exceptions thrown by a failed write operation
MongoDB\Driver\Monitoring\CommandFailedEvent()	(new) The MongoDB\Driver\Monitoring\CommandFailedEvent class encapsulates information about a failed command
MongoDB\Driver\Monitoring\CommandStartedEvent()	(new) The MongoDB\Driver\Monitoring\CommandStartedEvent class encapsulates information about a started command
MongoDB\Driver\Monitoring\CommandSubscriber()	(new) Classes may implement this interface to register an event subscriber that is notified for each started, successful, and failed command event
MongoDB\Driver\Monitoring\CommandSucceededEvent()	(new) The MongoDB\Driver\Monitoring\CommandSucceededEvent class encapsulates information about a successful command
MongoDB\Driver\Monitoring\LogSubscriber()	(new) Classes implementing this interface may be registered as a subscriber and receive log messages from the extension
MongoDB\Driver\Monitoring\SDAMSubscriber()	(new) Classes may implement this interface to register an event subscriber that is notified for various SDAM events
MongoDB\Driver\Monitoring\ServerChangedEvent()	(new) The MongoDB\Driver\Monitoring\ServerChangedEvent class encapsulates information about a changed server description
MongoDB\Driver\Monitoring\ServerClosedEvent()	(new) The MongoDB\Driver\Monitoring\ServerClosedEvent class encapsulates information about a closed server
MongoDB\Driver\Monitoring\ServerHeartbeatFailedEvent()	(new) The MongoDB\Driver\Monitoring\ServerHeartbeatFailedEvent class encapsulates information about a failed server heartbeat (i
MongoDB\Driver\Monitoring\ServerHeartbeatStartedEvent()	(new) The MongoDB\Driver\Monitoring\ServerHeartbeatStartedEvent class encapsulates information about a started server heartbeat (i
MongoDB\Driver\Monitoring\ServerHeartbeatSucceededEvent()	(new) The MongoDB\Driver\Monitoring\ServerHeartbeatSucceededEvent class encapsulates information about a successful server heartbeat (i
MongoDB\Driver\Monitoring\ServerOpeningEvent()	(new) The MongoDB\Driver\Monitoring\ServerOpeningEvent class encapsulates information about an opened server
MongoDB\Driver\Monitoring\Subscriber()	(new) Base interface for event subscribers
MongoDB\Driver\Monitoring\TopologyChangedEvent()	(new) The MongoDB\Driver\Monitoring\TopologyChangedEvent class encapsulates information about a changed topology description
MongoDB\Driver\Monitoring\TopologyClosedEvent()	(new) The MongoDB\Driver\Monitoring\TopologyClosedEvent class encapsulates information about a closed topology
MongoDB\Driver\Monitoring\TopologyOpeningEvent()	(new) The MongoDB\Driver\Monitoring\TopologyOpeningEvent class encapsulates information about an opened topology
mqseries_back(resource $hconn, resource $compCode, resource $reason): void	MQSeries MQBACK
mqseries_begin(resource $hconn, array $beginOptions, resource $compCode, resource $reason): void	MQseries MQBEGIN
mqseries_close(resource $hconn, resource $hobj, int $options, resource $compCode, resource $reason): void	MQSeries MQCLOSE
mqseries_cmit(resource $hconn, resource $compCode, resource $reason): void	MQSeries MQCMIT
mqseries_conn(string $qManagerName, resource $hconn, resource $compCode, resource $reason): void	MQSeries MQCONN
mqseries_connx(string $qManagerName, array $connOptions, resource $hconn, resource $compCode, resource $reason): void	MQSeries MQCONNX
mqseries_disc(resource $hconn, resource $compCode, resource $reason): void	MQSeries MQDISC
mqseries_get(resource $hConn, resource $hObj, array $md, array $gmo, int $bufferLength, string $msg, int $data_length, resource $compCode, resource $reason): void	MQSeries MQGET
mqseries_inq(resource $hconn, resource $hobj, int $selectorCount, array $selectors, int $intAttrCount, resource $intAttr, int $charAttrLength, resource $charAttr, resource $compCode, resource $reason): void	MQSeries MQINQ
mqseries_open(resource $hconn, array $objDesc, int $option, resource $hobj, resource $compCode, resource $reason): void	MQSeries MQOPEN
mqseries_put(resource $hConn, resource $hObj, array $md, array $pmo, string $message, resource $compCode, resource $reason): void	MQSeries MQPUT
mqseries_put1(resource $hconn, resource $objDesc, resource $msgDesc, resource $pmo, string $buffer, resource $compCode, resource $reason): void	MQSeries MQPUT1
mqseries_set(resource $hConn, resource $hObj, int $selectorCount, array $selectors, int $intAttrCount, array $intAttrs, int $charAttrLength, array $charAttrs, resource $compCode, resource $reason): void	MQSeries MQSET
mqseries_strerror(int $reason): string	Returns the error message corresponding to a result code (MQRC)
mysql_affected_rows(resource $link_identifier = NULL): int	Get number of affected rows in previous MySQL operation
mysql_client_encoding(resource $link_identifier = NULL): string	Returns the name of the character set
mysql_close(resource $link_identifier = NULL): bool	Close MySQL connection
mysql_connect(string $server = ini_get("mysql.default_host"), string $username = ini_get("mysql.default_user"), string $password = ini_get("mysql.default_password"), bool $new_link = false, int $client_flags = ?): resource|false	Open a connection to a MySQL Server
mysql_create_db(string $database_name, resource $link_identifier = NULL): bool	Create a MySQL database
mysql_data_seek(resource $result, int $row_number): bool	Move internal result pointer
mysql_db_name(resource $result, int $row, mixed $field = NULL): string	Retrieves database name from the call to mysql_list_dbs
mysql_db_query(string $database, string $query, resource $link_identifier = NULL): resource|bool	Selects a database and executes a query on it
mysql_drop_db(string $database_name, resource $link_identifier = NULL): bool	Drop (delete) a MySQL database
mysql_errno(resource $link_identifier = NULL): int	Returns the numerical value of the error message from previous MySQL operation
mysql_error(resource $link_identifier = NULL): string	Returns the text of the error message from previous MySQL operation
mysql_escape_string(string $unescaped_string): string	Escapes a string for use in a mysql_query
mysql_fetch_array(resource $result, int $result_type = MYSQL_BOTH): array	Fetch a result row as an associative array, a numeric array, or both
mysql_fetch_assoc(resource $result): array	Fetch a result row as an associative array
mysql_fetch_field(resource $result, int $field_offset = ?): object	Get column information from a result and return as an object
mysql_fetch_lengths(resource $result): array|false	Get the length of each output in a result
mysql_fetch_object(resource $result, string $class_name = ?, array $params = ?): object	Fetch a result row as an object
mysql_fetch_row(resource $result): array	Get a result row as an enumerated array
mysql_field_flags(resource $result, int $field_offset): string|false	Get the flags associated with the specified field in a result
mysql_field_len(resource $result, int $field_offset): int|false	Returns the length of the specified field
mysql_field_name(resource $result, int $field_offset): string|false	Get the name of the specified field in a result
mysql_field_seek(resource $result, int $field_offset): bool	Set result pointer to a specified field offset
mysql_field_table(resource $result, int $field_offset): string	Get name of the table the specified field is in
mysql_field_type(resource $result, int $field_offset): string	Get the type of the specified field in a result
mysql_free_result(resource $result): bool	Free result memory
mysql_get_client_info(): string	Get MySQL client info
mysql_get_host_info(resource $link_identifier = NULL): string|false	Get MySQL host info
mysql_get_proto_info(resource $link_identifier = NULL): int|false	Get MySQL protocol info
mysql_get_server_info(resource $link_identifier = NULL): string|false	Get MySQL server info
mysql_info(resource $link_identifier = NULL): string	Get information about the most recent query
mysql_insert_id(resource $link_identifier = NULL): int	Get the ID generated in the last query
mysql_list_dbs(resource $link_identifier = NULL): resource	List databases available on a MySQL server
mysql_list_fields(string $database_name, string $table_name, resource $link_identifier = NULL): resource	List MySQL table fields
mysql_list_processes(resource $link_identifier = NULL): resource|false	List MySQL processes
mysql_list_tables(string $database, resource $link_identifier = NULL): resource|false	List tables in a MySQL database
mysql_num_fields(resource $result): int|false	Get number of fields in result
mysql_num_rows(resource $result): int|false	Get number of rows in result
mysql_pconnect(string $server = ini_get("mysql.default_host"), string $username = ini_get("mysql.default_user"), string $password = ini_get("mysql.default_password"), int $client_flags = ?): resource	Open a persistent connection to a MySQL server
mysql_ping(resource $link_identifier = NULL): bool	Ping a server connection or reconnect if there is no connection
mysql_query(string $query, resource $link_identifier = NULL): mixed	Send a MySQL query
mysql_real_escape_string(string $unescaped_string, resource $link_identifier = NULL): string	Escapes special characters in a string for use in an SQL statement
mysql_result(resource $result, int $row, mixed $field = ?): string	Get result data
mysql_select_db(string $database_name, resource $link_identifier = NULL): bool	Select a MySQL database
mysql_set_charset(string $charset, resource $link_identifier = NULL): bool	Sets the client character set
mysql_stat(resource $link_identifier = NULL): string	Get current system status
mysql_tablename(resource $result, int $i): string|false	Get table name of field
mysql_thread_id(resource $link_identifier = NULL): int|false	Return the current thread ID
mysql_unbuffered_query(string $query, resource $link_identifier = NULL): resource	Send an SQL query to MySQL without fetching and buffering the result rows
mysql_xdevapi\expression(string $expression): object	Bind prepared statement variables as parameters
mysql_xdevapi\getSession(string $uri): mysql_xdevapi\Session	Connect to a MySQL server
>getWarnings(): array	(mysql_xdevapi\BaseResult) Fetch warnings from last operation
>getWarningsCount(): int	(mysql_xdevapi\BaseResult) Fetch warning count from last operation
>close(): bool	(mysql_xdevapi\Client) Close client
mysql_xdevapi\Client()	(new) Client constructor
>getSession(): mysql_xdevapi\Session	(mysql_xdevapi\Client) Get client session
>add(mixed $document): mysql_xdevapi\CollectionAdd	(mysql_xdevapi\Collection) Add collection document
>addOrReplaceOne(string $id, string $doc): mysql_xdevapi\Result	(mysql_xdevapi\Collection) Add or replace collection document
mysql_xdevapi\Collection()	(new) Collection constructor
>count(): int	(mysql_xdevapi\Collection) Get document count
>createIndex(string $index_name, string $index_desc_json): void	(mysql_xdevapi\Collection) Create collection index
>dropIndex(string $index_name): bool	(mysql_xdevapi\Collection) Drop collection index
>existsInDatabase(): bool	(mysql_xdevapi\Collection) Check if collection exists in database
>find(string $search_condition = ?): mysql_xdevapi\CollectionFind	(mysql_xdevapi\Collection) Search for document
>getName(): string	(mysql_xdevapi\Collection) Get collection name
>getOne(string $id): Document	(mysql_xdevapi\Collection) Get one document
>getSchema(): Schema Object	(mysql_xdevapi\Collection) Get schema object
>getSession(): Session	(mysql_xdevapi\Collection) Get session object
>modify(string $search_condition): mysql_xdevapi\CollectionModify	(mysql_xdevapi\Collection) Modify collection documents
>remove(string $search_condition): mysql_xdevapi\CollectionRemove	(mysql_xdevapi\Collection) Remove collection documents
>removeOne(string $id): mysql_xdevapi\Result	(mysql_xdevapi\Collection) Remove one collection document
>replaceOne(string $id, string $doc): mysql_xdevapi\Result	(mysql_xdevapi\Collection) Replace one collection document
mysql_xdevapi\CollectionAdd()	(new) CollectionAdd constructor
>execute(): mysql_xdevapi\Result	(mysql_xdevapi\CollectionAdd) Execute the statement
>bind(array $placeholder_values): mysql_xdevapi\CollectionFind	(mysql_xdevapi\CollectionFind) Bind value to query placeholder
mysql_xdevapi\CollectionFind()	(new) CollectionFind constructor
>execute(): mysql_xdevapi\DocResult	(mysql_xdevapi\CollectionFind) Execute the statement
>fields(string $projection): mysql_xdevapi\CollectionFind	(mysql_xdevapi\CollectionFind) Set document field filter
>groupBy(string $sort_expr): mysql_xdevapi\CollectionFind	(mysql_xdevapi\CollectionFind) Set grouping criteria
>having(string $sort_expr): mysql_xdevapi\CollectionFind	(mysql_xdevapi\CollectionFind) Set condition for aggregate functions
>limit(int $rows): mysql_xdevapi\CollectionFind	(mysql_xdevapi\CollectionFind) Limit number of returned documents
>lockExclusive(int $lock_waiting_option = ?): mysql_xdevapi\CollectionFind	(mysql_xdevapi\CollectionFind) Execute operation with EXCLUSIVE LOCK
>lockShared(int $lock_waiting_option = ?): mysql_xdevapi\CollectionFind	(mysql_xdevapi\CollectionFind) Execute operation with SHARED LOCK
>offset(int $position): mysql_xdevapi\CollectionFind	(mysql_xdevapi\CollectionFind) Skip given number of elements to be returned
>sort(string $sort_expr): mysql_xdevapi\CollectionFind	(mysql_xdevapi\CollectionFind) Set the sorting criteria
>arrayAppend(string $collection_field, string $expression_or_literal): mysql_xdevapi\CollectionModify	(mysql_xdevapi\CollectionModify) Append element to an array field
>arrayInsert(string $collection_field, string $expression_or_literal): mysql_xdevapi\CollectionModify	(mysql_xdevapi\CollectionModify) Insert element into an array field
>bind(array $placeholder_values): mysql_xdevapi\CollectionModify	(mysql_xdevapi\CollectionModify) Bind value to query placeholder
mysql_xdevapi\CollectionModify()	(new) CollectionModify constructor
>execute(): mysql_xdevapi\Result	(mysql_xdevapi\CollectionModify) Execute modify operation
>limit(int $rows): mysql_xdevapi\CollectionModify	(mysql_xdevapi\CollectionModify) Limit number of modified documents
>patch(string $document): mysql_xdevapi\CollectionModify	(mysql_xdevapi\CollectionModify) Patch document
>replace(string $collection_field, string $expression_or_literal): mysql_xdevapi\CollectionModify	(mysql_xdevapi\CollectionModify) Replace document field
>set(string $collection_field, string $expression_or_literal): mysql_xdevapi\CollectionModify	(mysql_xdevapi\CollectionModify) Set document attribute
>skip(int $position): mysql_xdevapi\CollectionModify	(mysql_xdevapi\CollectionModify) Skip elements
>sort(string $sort_expr): mysql_xdevapi\CollectionModify	(mysql_xdevapi\CollectionModify) Set the sorting criteria
>unset(array $fields): mysql_xdevapi\CollectionModify	(mysql_xdevapi\CollectionModify) Unset the value of document fields
>bind(array $placeholder_values): mysql_xdevapi\CollectionRemove	(mysql_xdevapi\CollectionRemove) Bind value to placeholder
mysql_xdevapi\CollectionRemove()	(new) CollectionRemove constructor
>execute(): mysql_xdevapi\Result	(mysql_xdevapi\CollectionRemove) Execute remove operation
>limit(int $rows): mysql_xdevapi\CollectionRemove	(mysql_xdevapi\CollectionRemove) Limit number of documents to remove
>sort(string $sort_expr): mysql_xdevapi\CollectionRemove	(mysql_xdevapi\CollectionRemove) Set the sorting criteria
mysql_xdevapi\ColumnResult()	(new) ColumnResult constructor
>getCharacterSetName(): string	(mysql_xdevapi\ColumnResult) Get character set
>getCollationName(): string	(mysql_xdevapi\ColumnResult) Get collation name
>getColumnLabel(): string	(mysql_xdevapi\ColumnResult) Get column label
>getColumnName(): string	(mysql_xdevapi\ColumnResult) Get column name
>getFractionalDigits(): int	(mysql_xdevapi\ColumnResult) Get fractional digit length
>getLength(): int	(mysql_xdevapi\ColumnResult) Get column field length
>getSchemaName(): string	(mysql_xdevapi\ColumnResult) Get schema name
>getTableLabel(): string	(mysql_xdevapi\ColumnResult) Get table label
>getTableName(): string	(mysql_xdevapi\ColumnResult) Get table name
>getType(): int	(mysql_xdevapi\ColumnResult) Get column type
>isNumberSigned(): int	(mysql_xdevapi\ColumnResult) Check if signed type
>isPadded(): int	(mysql_xdevapi\ColumnResult) Check if padded
>bind(array $placeholder_values): mysql_xdevapi\CrudOperationBindable	(mysql_xdevapi\CrudOperationBindable) Bind value to placeholder
>limit(int $rows): mysql_xdevapi\CrudOperationLimitable	(mysql_xdevapi\CrudOperationLimitable) Set result limit
>skip(int $skip): mysql_xdevapi\CrudOperationSkippable	(mysql_xdevapi\CrudOperationSkippable) Number of operations to skip
>sort(string $sort_expr): mysql_xdevapi\CrudOperationSortable	(mysql_xdevapi\CrudOperationSortable) Sort results
>existsInDatabase(): bool	(mysql_xdevapi\DatabaseObject) Check if object exists in database
>getName(): string	(mysql_xdevapi\DatabaseObject) Get object name
>getSession(): mysql_xdevapi\Session	(mysql_xdevapi\DatabaseObject) Get session name
mysql_xdevapi\DocResult()	(new) DocResult constructor
>fetchAll(): array	(mysql_xdevapi\DocResult) Get all rows
>fetchOne(): array	(mysql_xdevapi\DocResult) Get one row
>getWarnings(): Array	(mysql_xdevapi\DocResult) Get warnings from last operation
>getWarningsCount(): int	(mysql_xdevapi\DocResult) Get warning count from last operation
>execute(): mysql_xdevapi\Result	(mysql_xdevapi\Executable) Execute statement
mysql_xdevapi\ExecutionStatus()	(new) ExecutionStatus constructor
mysql_xdevapi\Expression(string $expression)	(new) Expression constructor
mysql_xdevapi\Result()	(new) Result constructor
>getAffectedItemsCount(): int	(mysql_xdevapi\Result) Get affected row count
>getAutoIncrementValue(): int	(mysql_xdevapi\Result) Get autoincremented value
>getGeneratedIds(): array	(mysql_xdevapi\Result) Get generated ids
>getWarnings(): array	(mysql_xdevapi\Result) Get warnings from last operation
>getWarningsCount(): int	(mysql_xdevapi\Result) Get warning count from last operation
mysql_xdevapi\RowResult()	(new) RowResult constructor
>fetchAll(): array	(mysql_xdevapi\RowResult) Get all rows from result
>fetchOne(): array	(mysql_xdevapi\RowResult) Get row from result
>getColumnsCount(): int	(mysql_xdevapi\RowResult) Get column count
>getColumnNames(): array	(mysql_xdevapi\RowResult) Get all column names
>getColumns(): array	(mysql_xdevapi\RowResult) Get column metadata
>getWarnings(): array	(mysql_xdevapi\RowResult) Get warnings from last operation
>getWarningsCount(): int	(mysql_xdevapi\RowResult) Get warning count from last operation
mysql_xdevapi\Schema()	(new) Schema constructor
>createCollection(string $name, string $validate = ?): mysql_xdevapi\Collection	(mysql_xdevapi\Schema) Add collection to schema
>dropCollection(string $collection_name): bool	(mysql_xdevapi\Schema) Drop collection from schema
>existsInDatabase(): bool	(mysql_xdevapi\Schema) Check if exists in database
>getCollection(string $name): mysql_xdevapi\Collection	(mysql_xdevapi\Schema) Get collection from schema
>getCollectionAsTable(string $name): mysql_xdevapi\Table	(mysql_xdevapi\Schema) Get collection as a Table object
>getCollections(): array	(mysql_xdevapi\Schema) Get all schema collections
>getName(): string	(mysql_xdevapi\Schema) Get schema name
>getSession(): mysql_xdevapi\Session	(mysql_xdevapi\Schema) Get schema session
>getTable(string $name): mysql_xdevapi\Table	(mysql_xdevapi\Schema) Get schema table
>getTables(): array	(mysql_xdevapi\Schema) Get schema tables
>getSchema(): mysql_xdevapi\Schema	(mysql_xdevapi\SchemaObject) Get schema object
>close(): bool	(mysql_xdevapi\Session) Close session
>commit(): Object	(mysql_xdevapi\Session) Commit transaction
mysql_xdevapi\Session()	(new) Description constructor
>createSchema(string $schema_name): mysql_xdevapi\Schema	(mysql_xdevapi\Session) Create new schema
>dropSchema(string $schema_name): bool	(mysql_xdevapi\Session) Drop a schema
>generateUUID(): string	(mysql_xdevapi\Session) Get new UUID
>getDefaultSchema(): string	(mysql_xdevapi\Session) Get default schema name
>getSchema(string $schema_name): mysql_xdevapi\Schema	(mysql_xdevapi\Session) Get a new schema object
>getSchemas(): array	(mysql_xdevapi\Session) Get the schemas
>getServerVersion(): int	(mysql_xdevapi\Session) Get server version
>listClients(): array	(mysql_xdevapi\Session) Get client list
>quoteName(string $name): string	(mysql_xdevapi\Session) Add quotes
>releaseSavepoint(string $name): void	(mysql_xdevapi\Session) Release set savepoint
>rollback(): void	(mysql_xdevapi\Session) Rollback transaction
>rollbackTo(string $name): void	(mysql_xdevapi\Session) Rollback transaction to savepoint
>setSavepoint(string $name = ?): string	(mysql_xdevapi\Session) Create savepoint
>sql(string $query): mysql_xdevapi\SqlStatement	(mysql_xdevapi\Session) Create SQL query
>startTransaction(): void	(mysql_xdevapi\Session) Start transaction
>bind(string $param): mysql_xdevapi\SqlStatement	(mysql_xdevapi\SqlStatement) Bind statement parameters
mysql_xdevapi\SqlStatement()	(new) Description constructor
>execute(): mysql_xdevapi\Result	(mysql_xdevapi\SqlStatement) Execute the operation
>getNextResult(): mysql_xdevapi\Result	(mysql_xdevapi\SqlStatement) Get next result
>getResult(): mysql_xdevapi\Result	(mysql_xdevapi\SqlStatement) Get result
>hasMoreResults(): bool	(mysql_xdevapi\SqlStatement) Check for more results
mysql_xdevapi\SqlStatementResult()	(new) Description constructor
>fetchAll(): array	(mysql_xdevapi\SqlStatementResult) Get all rows from result
>fetchOne(): array	(mysql_xdevapi\SqlStatementResult) Get single row
>getAffectedItemsCount(): int	(mysql_xdevapi\SqlStatementResult) Get affected row count
>getColumnsCount(): int	(mysql_xdevapi\SqlStatementResult) Get column count
>getColumnNames(): array	(mysql_xdevapi\SqlStatementResult) Get column names
>getColumns(): Array	(mysql_xdevapi\SqlStatementResult) Get columns
>getGeneratedIds(): array	(mysql_xdevapi\SqlStatementResult) Get generated ids
>getLastInsertId(): String	(mysql_xdevapi\SqlStatementResult) Get last insert id
>getWarnings(): array	(mysql_xdevapi\SqlStatementResult) Get warnings from last operation
>getWarningCounts(): int	(mysql_xdevapi\SqlStatementResult) Get warning count from last operation
>hasData(): bool	(mysql_xdevapi\SqlStatementResult) Check if result has data
>nextResult(): mysql_xdevapi\Result	(mysql_xdevapi\SqlStatementResult) Get next result
mysql_xdevapi\Statement()	(new) Description constructor
>getNextResult(): mysql_xdevapi\Result	(mysql_xdevapi\Statement) Get next result
>getResult(): mysql_xdevapi\Result	(mysql_xdevapi\Statement) Get result
>hasMoreResults(): bool	(mysql_xdevapi\Statement) Check if more results
mysql_xdevapi\Table()	(new) Table constructor
>count(): int	(mysql_xdevapi\Table) Get row count
>delete(): mysql_xdevapi\TableDelete	(mysql_xdevapi\Table) Delete rows from table
>existsInDatabase(): bool	(mysql_xdevapi\Table) Check if table exists in database
>getName(): string	(mysql_xdevapi\Table) Get table name
>getSchema(): mysql_xdevapi\Schema	(mysql_xdevapi\Table) Get table schema
>getSession(): mysql_xdevapi\Session	(mysql_xdevapi\Table) Get table session
>insert(mixed $columns, mixed ...$more_columns): mysql_xdevapi\TableInsert	(mysql_xdevapi\Table) Insert table rows
>isView(): bool	(mysql_xdevapi\Table) Check if table is view
>select(mixed $columns, mixed ...$more_columns): mysql_xdevapi\TableSelect	(mysql_xdevapi\Table) Select rows from table
>update(): mysql_xdevapi\TableUpdate	(mysql_xdevapi\Table) Update rows in table
>bind(array $placeholder_values): mysql_xdevapi\TableDelete	(mysql_xdevapi\TableDelete) Bind delete query parameters
mysql_xdevapi\TableDelete()	(new) TableDelete constructor
>execute(): mysql_xdevapi\Result	(mysql_xdevapi\TableDelete) Execute delete query
>limit(int $rows): mysql_xdevapi\TableDelete	(mysql_xdevapi\TableDelete) Limit deleted rows
>orderby(string $orderby_expr): mysql_xdevapi\TableDelete	(mysql_xdevapi\TableDelete) Set delete sort criteria
>where(string $where_expr): mysql_xdevapi\TableDelete	(mysql_xdevapi\TableDelete) Set delete search condition
mysql_xdevapi\TableInsert()	(new) TableInsert constructor
>execute(): mysql_xdevapi\Result	(mysql_xdevapi\TableInsert) Execute insert query
>values(array $row_values): mysql_xdevapi\TableInsert	(mysql_xdevapi\TableInsert) Add insert row values
>bind(array $placeholder_values): mysql_xdevapi\TableSelect	(mysql_xdevapi\TableSelect) Bind select query parameters
mysql_xdevapi\TableSelect()	(new) TableSelect constructor
>execute(): mysql_xdevapi\RowResult	(mysql_xdevapi\TableSelect) Execute select statement
>groupBy(mixed $sort_expr): mysql_xdevapi\TableSelect	(mysql_xdevapi\TableSelect) Set select grouping criteria
>having(string $sort_expr): mysql_xdevapi\TableSelect	(mysql_xdevapi\TableSelect) Set select having condition
>limit(int $rows): mysql_xdevapi\TableSelect	(mysql_xdevapi\TableSelect) Limit selected rows
>lockExclusive(int $lock_waiting_option = ?): mysql_xdevapi\TableSelect	(mysql_xdevapi\TableSelect) Execute EXCLUSIVE LOCK
>lockShared(int $lock_waiting_option = ?): mysql_xdevapi\TableSelect	(mysql_xdevapi\TableSelect) Execute SHARED LOCK
>offset(int $position): mysql_xdevapi\TableSelect	(mysql_xdevapi\TableSelect) Set limit offset
>orderby(mixed $sort_expr, mixed ...$sort_exprs): mysql_xdevapi\TableSelect	(mysql_xdevapi\TableSelect) Set select sort criteria
>where(string $where_expr): mysql_xdevapi\TableSelect	(mysql_xdevapi\TableSelect) Set select search condition
>bind(array $placeholder_values): mysql_xdevapi\TableUpdate	(mysql_xdevapi\TableUpdate) Bind update query parameters
mysql_xdevapi\TableUpdate()	(new) TableUpdate constructor
>execute(): mysql_xdevapi\TableUpdate	(mysql_xdevapi\TableUpdate) Execute update query
>limit(int $rows): mysql_xdevapi\TableUpdate	(mysql_xdevapi\TableUpdate) Limit update row count
>orderby(mixed $orderby_expr, mixed ...$orderby_exprs): mysql_xdevapi\TableUpdate	(mysql_xdevapi\TableUpdate) Set sorting criteria
>set(string $table_field, string $expression_or_literal): mysql_xdevapi\TableUpdate	(mysql_xdevapi\TableUpdate) Add field to be updated
>where(string $where_expr): mysql_xdevapi\TableUpdate	(mysql_xdevapi\TableUpdate) Set search filter
mysql_xdevapi\Warning()	(new) Warning constructor
mysql_xdevapi\BaseResult()	(new) 
mysql_xdevapi\CrudOperationBindable()	(new) 
mysql_xdevapi\CrudOperationLimitable()	(new) 
mysql_xdevapi\CrudOperationSkippable()	(new) 
mysql_xdevapi\CrudOperationSortable()	(new) 
mysql_xdevapi\DatabaseObject()	(new) 
mysql_xdevapi\Driver()	(new) 
mysql_xdevapi\Exception()	(new) 
mysql_xdevapi\Executable()	(new) 
mysql_xdevapi\FieldMetadata()	(new) 
mysql_xdevapi\SchemaObject()	(new) 
mysqli_connect()	Alias of mysqli::__construct
>escape_string()	(mysqli) Alias of mysqli_real_escape_string
mysqli_execute()	Alias of mysqli_stmt_execute
mysqli_get_client_stats(): array	Returns client per-process statistics
mysqli_get_links_stats(): array	Return information about open and cached links
mysqli_report()	Alias of mysqli_driver->report_mode
>set_opt()	(mysqli) Alias of mysqli_options
mysqli_affected_rows(mysqli $mysql): int|string	Gets the number of affected rows in a previous MySQL operation
>autocommit(bool $enable): bool	(mysqli) Turns on or off auto-committing database modifications
mysqli_autocommit(mysqli $mysql, bool $enable): bool	Turns on or off auto-committing database modifications
>begin_transaction(int $flags = ?, string|null $name = null): bool	(mysqli) Starts a transaction
mysqli_begin_transaction(mysqli $mysql, int $flags = ?, string|null $name = null): bool	Starts a transaction
>change_user(string $username, string $password, string|null $database): bool	(mysqli) Changes the user of the database connection
mysqli_change_user(mysqli $mysql, string $username, string $password, string|null $database): bool	Changes the user of the database connection
>character_set_name(): string	(mysqli) Returns the current character set of the database connection
mysqli_character_set_name(mysqli $mysql): string	Returns the current character set of the database connection
>close(): true	(mysqli) Closes a previously opened database connection
mysqli_close(mysqli $mysql): true	Closes a previously opened database connection
>commit(int $flags = ?, string|null $name = null): bool	(mysqli) Commits the current transaction
mysqli_commit(mysqli $mysql, int $flags = ?, string|null $name = null): bool	Commits the current transaction
mysqli_connect_errno(): int	Returns the error code from last connect call
mysqli_connect_error(): string|null	Returns a description of the last connection error
>connect(string|null $hostname = null, string|null $username = null, string|null $password = null, string|null $database = null, int|null $port = null, string|null $socket = null): bool	(mysqli) Open a new connection to the MySQL server
mysqli_connect(string|null $hostname = null, string|null $username = null, string|null $password = null, string|null $database = null, int|null $port = null, string|null $socket = null): mysqli|false	Open a new connection to the MySQL server
>debug(string $options): true	(mysqli) Performs debugging operations
mysqli_debug(string $options): true	Performs debugging operations
>dump_debug_info(): bool	(mysqli) Dump debugging information into the log
mysqli_dump_debug_info(mysqli $mysql): bool	Dump debugging information into the log
mysqli_errno(mysqli $mysql): int	Returns the error code for the most recent function call
mysqli_error_list(mysqli $mysql): array	Returns a list of errors from the last command executed
mysqli_error(mysqli $mysql): string	Returns a string description of the last error
>execute_query(string $query, array|null $params = null): mysqli_result|bool	(mysqli) Prepares, binds parameters, and executes SQL statement
mysqli_execute_query(mysqli $mysql, string $query, array|null $params = null): mysqli_result|bool	Prepares, binds parameters, and executes SQL statement
mysqli_field_count(mysqli $mysql): int	Returns the number of columns for the most recent query
>get_charset(): object|null	(mysqli) Returns a character set object
mysqli_get_charset(mysqli $mysql): object|null	Returns a character set object
>get_client_info(): string	(mysqli) Get MySQL client info
mysqli_get_client_info(mysqli|null $mysql = null): string	Get MySQL client info
mysqli_get_client_version(): int	Returns the MySQL client version as an integer
>get_connection_stats(): array	(mysqli) Returns statistics about the client connection
mysqli_get_connection_stats(mysqli $mysql): array	Returns statistics about the client connection
mysqli_get_host_info(mysqli $mysql): string	Returns a string representing the type of connection used
mysqli_get_proto_info(mysqli $mysql): int	Returns the version of the MySQL protocol used
>get_server_info(): string	(mysqli) Returns the version of the MySQL server
mysqli_get_server_info(mysqli $mysql): string	Returns the version of the MySQL server
mysqli_get_server_version(mysqli $mysql): int	Returns the version of the MySQL server as an integer
>get_warnings(): mysqli_warning|false	(mysqli) Get result of SHOW WARNINGS
mysqli_get_warnings(mysqli $mysql): mysqli_warning|false	Get result of SHOW WARNINGS
mysqli_info(mysqli $mysql): string|null	Retrieves information about the most recently executed query
>init(): bool|null	(mysqli) Initializes MySQLi and returns an object for use with mysqli_real_connect()
mysqli_init(): mysqli|false	Initializes MySQLi and returns an object for use with mysqli_real_connect()
mysqli_insert_id(mysqli $mysql): int|string	Returns the value generated for an AUTO_INCREMENT column by the last query
>kill(int $process_id): bool	(mysqli) Asks the server to kill a MySQL thread
mysqli_kill(mysqli $mysql, int $process_id): bool	Asks the server to kill a MySQL thread
>more_results(): bool	(mysqli) Check if there are any more query results from a multi query
mysqli_more_results(mysqli $mysql): bool	Check if there are any more query results from a multi query
>multi_query(string $query): bool	(mysqli) Performs one or more queries on the database
mysqli_multi_query(mysqli $mysql, string $query): bool	Performs one or more queries on the database
>next_result(): bool	(mysqli) Prepare next result from multi_query
mysqli_next_result(mysqli $mysql): bool	Prepare next result from multi_query
>options(int $option, string|int $value): bool	(mysqli) Set options
mysqli_options(mysqli $mysql, int $option, string|int $value): bool	Set options
>ping(): bool	(mysqli) Pings a server connection, or tries to reconnect if the connection has gone down
mysqli_ping(mysqli $mysql): bool	Pings a server connection, or tries to reconnect if the connection has gone down
mysqli::poll(array|null $read, array|null $error, array $reject, int $seconds, int $microseconds = ?): int|false	Poll connections
mysqli_poll(array|null $read, array|null $error, array $reject, int $seconds, int $microseconds = ?): int|false	Poll connections
>prepare(string $query): mysqli_stmt|false	(mysqli) Prepares an SQL statement for execution
mysqli_prepare(mysqli $mysql, string $query): mysqli_stmt|false	Prepares an SQL statement for execution
>query(string $query, int $result_mode = MYSQLI_STORE_RESULT): mysqli_result|bool	(mysqli) Performs a query on the database
mysqli_query(mysqli $mysql, string $query, int $result_mode = MYSQLI_STORE_RESULT): mysqli_result|bool	Performs a query on the database
>real_connect(string|null $hostname = null, string|null $username = null, string|null $password = null, string|null $database = null, int|null $port = null, string|null $socket = null, int $flags = ?): bool	(mysqli) Opens a connection to a mysql server
mysqli_real_connect(mysqli $mysql, string|null $hostname = null, string|null $username = null, string|null $password = null, string|null $database = null, int|null $port = null, string|null $socket = null, int $flags = ?): bool	Opens a connection to a mysql server
>real_escape_string(string $string): string	(mysqli) Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection
mysqli_real_escape_string(mysqli $mysql, string $string): string	Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection
>real_query(string $query): bool	(mysqli) Execute an SQL query
mysqli_real_query(mysqli $mysql, string $query): bool	Execute an SQL query
>reap_async_query(): mysqli_result|bool	(mysqli) Get result from async query
mysqli_reap_async_query(mysqli $mysql): mysqli_result|bool	Get result from async query
>refresh(int $flags): bool	(mysqli) Refreshes
mysqli_refresh(mysqli $mysql, int $flags): bool	Refreshes
>release_savepoint(string $name): bool	(mysqli) Removes the named savepoint from the set of savepoints of the current transaction
mysqli_release_savepoint(mysqli $mysql, string $name): bool	Removes the named savepoint from the set of savepoints of the current transaction
>rollback(int $flags = ?, string|null $name = null): bool	(mysqli) Rolls back current transaction
mysqli_rollback(mysqli $mysql, int $flags = ?, string|null $name = null): bool	Rolls back current transaction
>savepoint(string $name): bool	(mysqli) Set a named transaction savepoint
mysqli_savepoint(mysqli $mysql, string $name): bool	Set a named transaction savepoint
>select_db(string $database): bool	(mysqli) Selects the default database for database queries
mysqli_select_db(mysqli $mysql, string $database): bool	Selects the default database for database queries
>set_charset(string $charset): bool	(mysqli) Sets the client character set
mysqli_set_charset(mysqli $mysql, string $charset): bool	Sets the client character set
mysqli_sqlstate(mysqli $mysql): string	Returns the SQLSTATE error from previous MySQL operation
>ssl_set(string|null $key, string|null $certificate, string|null $ca_certificate, string|null $ca_path, string|null $cipher_algos): true	(mysqli) Used for establishing secure connections using SSL
mysqli_ssl_set(mysqli $mysql, string|null $key, string|null $certificate, string|null $ca_certificate, string|null $ca_path, string|null $cipher_algos): true	Used for establishing secure connections using SSL
>stat(): string|false	(mysqli) Gets the current system status
mysqli_stat(mysqli $mysql): string|false	Gets the current system status
>stmt_init(): mysqli_stmt|false	(mysqli) Initializes a statement and returns an object for use with mysqli_stmt_prepare
mysqli_stmt_init(mysqli $mysql): mysqli_stmt|false	Initializes a statement and returns an object for use with mysqli_stmt_prepare
>store_result(int $mode = ?): mysqli_result|false	(mysqli) Transfers a result set from the last query
mysqli_store_result(mysqli $mysql, int $mode = ?): mysqli_result|false	Transfers a result set from the last query
mysqli_thread_id(mysqli $mysql): int	Returns the thread ID for the current connection
>thread_safe(): bool	(mysqli) Returns whether thread safety is given or not
mysqli_thread_safe(): bool	Returns whether thread safety is given or not
>use_result(): mysqli_result|false	(mysqli) Initiate a result set retrieval
mysqli_use_result(mysqli $mysql): mysqli_result|false	Initiate a result set retrieval
mysqli_warning_count(mysqli $mysql): int	Returns the number of warnings generated by the most recently executed query
>embedded_server_end(): void	(mysqli_driver) Stop embedded server
mysqli_embedded_server_end(): void	Stop embedded server
>embedded_server_start(int $start, array $arguments, array $groups): bool	(mysqli_driver) Initialize and start embedded server
mysqli_embedded_server_start(int $start, array $arguments, array $groups): bool	Initialize and start embedded server
mysqli_report(int $flags): true	Sets mysqli error reporting mode
mysqli_result(mysqli $mysql, int $result_mode = MYSQLI_STORE_RESULT)	(new) Constructs a mysqli_result object
mysqli_field_tell(mysqli_result $result): int	Get current field offset of a result pointer
>data_seek(int $offset): bool	(mysqli_result) Adjusts the result pointer to an arbitrary row in the result
mysqli_data_seek(mysqli_result $result, int $offset): bool	Adjusts the result pointer to an arbitrary row in the result
>fetch_all(int $mode = MYSQLI_NUM): array	(mysqli_result) Fetch all result rows as an associative array, a numeric array, or both
mysqli_fetch_all(mysqli_result $result, int $mode = MYSQLI_NUM): array	Fetch all result rows as an associative array, a numeric array, or both
>fetch_array(int $mode = MYSQLI_BOTH): array|null|false	(mysqli_result) Fetch the next row of a result set as an associative, a numeric array, or both
mysqli_fetch_array(mysqli_result $result, int $mode = MYSQLI_BOTH): array|null|false	Fetch the next row of a result set as an associative, a numeric array, or both
>fetch_assoc(): array|null|false	(mysqli_result) Fetch the next row of a result set as an associative array
mysqli_fetch_assoc(mysqli_result $result): array|null|false	Fetch the next row of a result set as an associative array
>fetch_column(int $column = ?): null|int|float|string|false	(mysqli_result) Fetch a single column from the next row of a result set
mysqli_fetch_column(mysqli_result $result, int $column = ?): null|int|float|string|false	Fetch a single column from the next row of a result set
>fetch_field_direct(int $index): object|false	(mysqli_result) Fetch meta-data for a single field
mysqli_fetch_field_direct(mysqli_result $result, int $index): object|false	Fetch meta-data for a single field
>fetch_field(): object|false	(mysqli_result) Returns the next field in the result set
mysqli_fetch_field(mysqli_result $result): object|false	Returns the next field in the result set
>fetch_fields(): array	(mysqli_result) Returns an array of objects representing the fields in a result set
mysqli_fetch_fields(mysqli_result $result): array	Returns an array of objects representing the fields in a result set
>fetch_object(string $class = "stdClass", array $constructor_args = []): object|null|false	(mysqli_result) Fetch the next row of a result set as an object
mysqli_fetch_object(mysqli_result $result, string $class = "stdClass", array $constructor_args = []): object|null|false	Fetch the next row of a result set as an object
>fetch_row(): array|null|false	(mysqli_result) Fetch the next row of a result set as an enumerated array
mysqli_fetch_row(mysqli_result $result): array|null|false	Fetch the next row of a result set as an enumerated array
mysqli_num_fields(mysqli_result $result): int	Gets the number of fields in the result set
>field_seek(int $index): true	(mysqli_result) Set result pointer to a specified field offset
mysqli_field_seek(mysqli_result $result, int $index): true	Set result pointer to a specified field offset
>free(): void	(mysqli_result) Frees the memory associated with a result
>close(): void	(mysqli_result) Frees the memory associated with a result
>free_result(): void	(mysqli_result) Frees the memory associated with a result
mysqli_free_result(mysqli_result $result): void	Frees the memory associated with a result
>getIterator(): Iterator	(mysqli_result) Retrieve an external iterator
mysqli_fetch_lengths(mysqli_result $result): array|false	Returns the lengths of the columns of the current row in the result set
mysqli_num_rows(mysqli_result $result): int|string	Gets the number of rows in the result set
>getSqlState(): string	(mysqli_sql_exception) Returns the SQLSTATE error code
mysqli_stmt_affected_rows(mysqli_stmt $statement): int|string	Returns the total number of rows changed, deleted, inserted, or matched by the last statement executed
>attr_get(int $attribute): int	(mysqli_stmt) Used to get the current value of a statement attribute
mysqli_stmt_attr_get(mysqli_stmt $statement, int $attribute): int	Used to get the current value of a statement attribute
>attr_set(int $attribute, int $value): bool	(mysqli_stmt) Used to modify the behavior of a prepared statement
mysqli_stmt_attr_set(mysqli_stmt $statement, int $attribute, int $value): bool	Used to modify the behavior of a prepared statement
>bind_param(string $types, mixed $var, mixed ...$vars): bool	(mysqli_stmt) Binds variables to a prepared statement as parameters
mysqli_stmt_bind_param(mysqli_stmt $statement, string $types, mixed $var, mixed ...$vars): bool	Binds variables to a prepared statement as parameters
>bind_result(mixed $var, mixed ...$vars): bool	(mysqli_stmt) Binds variables to a prepared statement for result storage
mysqli_stmt_bind_result(mysqli_stmt $statement, mixed $var, mixed ...$vars): bool	Binds variables to a prepared statement for result storage
>close(): true	(mysqli_stmt) Closes a prepared statement
mysqli_stmt_close(mysqli_stmt $statement): true	Closes a prepared statement
mysqli_stmt(mysqli $mysql, string|null $query = null)	(new) Constructs a new mysqli_stmt object
>data_seek(int $offset): void	(mysqli_stmt) Adjusts the result pointer to an arbitrary row in the buffered result
mysqli_stmt_data_seek(mysqli_stmt $statement, int $offset): void	Adjusts the result pointer to an arbitrary row in the buffered result
mysqli_stmt_errno(mysqli_stmt $statement): int	Returns the error code for the most recent statement call
mysqli_stmt_error_list(mysqli_stmt $statement): array	Returns a list of errors from the last statement executed
mysqli_stmt_error(mysqli_stmt $statement): string	Returns a string description for last statement error
>execute(array|null $params = null): bool	(mysqli_stmt) Executes a prepared statement
mysqli_stmt_execute(mysqli_stmt $statement, array|null $params = null): bool	Executes a prepared statement
>fetch(): bool|null	(mysqli_stmt) Fetch results from a prepared statement into the bound variables
mysqli_stmt_fetch(mysqli_stmt $statement): bool|null	Fetch results from a prepared statement into the bound variables
mysqli_stmt_field_count(mysqli_stmt $statement): int	Returns the number of columns in the given statement
>free_result(): void	(mysqli_stmt) Frees stored result memory for the given statement handle
mysqli_stmt_free_result(mysqli_stmt $statement): void	Frees stored result memory for the given statement handle
>get_result(): mysqli_result|false	(mysqli_stmt) Gets a result set from a prepared statement as a mysqli_result object
mysqli_stmt_get_result(mysqli_stmt $statement): mysqli_result|false	Gets a result set from a prepared statement as a mysqli_result object
>get_warnings(): mysqli_warning|false	(mysqli_stmt) Get result of SHOW WARNINGS
mysqli_stmt_get_warnings(mysqli_stmt $statement): mysqli_warning|false	Get result of SHOW WARNINGS
mysqli_stmt_insert_id(mysqli_stmt $statement): int|string	Get the ID generated from the previous INSERT operation
>more_results(): bool	(mysqli_stmt) Check if there are more query results from a multiple query
mysqli_stmt_more_results(mysqli_stmt $statement): bool	Check if there are more query results from a multiple query
>next_result(): bool	(mysqli_stmt) Reads the next result from a multiple query
mysqli_stmt_next_result(mysqli_stmt $statement): bool	Reads the next result from a multiple query
>num_rows(): int|string	(mysqli_stmt) Returns the number of rows fetched from the server
mysqli_stmt_num_rows(mysqli_stmt $statement): int|string	Returns the number of rows fetched from the server
mysqli_stmt_param_count(mysqli_stmt $statement): int	Returns the number of parameters for the given statement
>prepare(string $query): bool	(mysqli_stmt) Prepares an SQL statement for execution
mysqli_stmt_prepare(mysqli_stmt $statement, string $query): bool	Prepares an SQL statement for execution
>reset(): bool	(mysqli_stmt) Resets a prepared statement
mysqli_stmt_reset(mysqli_stmt $statement): bool	Resets a prepared statement
>result_metadata(): mysqli_result|false	(mysqli_stmt) Returns result set metadata from a prepared statement
mysqli_stmt_result_metadata(mysqli_stmt $statement): mysqli_result|false	Returns result set metadata from a prepared statement
>send_long_data(int $param_num, string $data): bool	(mysqli_stmt) Send data in blocks
mysqli_stmt_send_long_data(mysqli_stmt $statement, int $param_num, string $data): bool	Send data in blocks
mysqli_stmt_sqlstate(mysqli_stmt $statement): string	Returns SQLSTATE error from previous statement operation
>store_result(): bool	(mysqli_stmt) Stores a result set in an internal buffer
mysqli_stmt_store_result(mysqli_stmt $statement): bool	Stores a result set in an internal buffer
mysqli_warning()	(new) Private constructor to disallow direct instantiation
>next(): bool	(mysqli_warning) Fetch next warning
mysqli()	(new) Represents a connection between PHP and a MySQL database
mysqli_driver()	(new) The mysqli_driver class is an instance of the monostate pattern, i
mysqli_sql_exception()	(new) The mysqli exception handling class
checkdnsrr(string $hostname, string $type = "MX"): bool	Check DNS records corresponding to a given Internet host name or IP address
closelog(): true	Close connection to system logger
dns_check_record()	Alias of checkdnsrr
dns_get_mx()	Alias of getmxrr
dns_get_record(string $hostname, int $type = DNS_ANY, array $authoritative_name_servers = null, array $additional_records = null, bool $raw = false): array|false	Fetch DNS Resource Records associated with a hostname
fsockopen(string $hostname, int $port = -1, int $error_code = null, string $error_message = null, float|null $timeout = null): resource|false	Open Internet or Unix domain socket connection
gethostbyaddr(string $ip): string|false	Get the Internet host name corresponding to a given IP address
gethostbyname(string $hostname): string	Get the IPv4 address corresponding to a given Internet host name
gethostbynamel(string $hostname): array|false	Get a list of IPv4 addresses corresponding to a given Internet host name
gethostname(): string|false	Gets the host name
getmxrr(string $hostname, array $hosts, array $weights = null): bool	Get MX records corresponding to a given Internet host name
getprotobyname(string $protocol): int|false	Get protocol number associated with protocol name
getprotobynumber(int $protocol): string|false	Get protocol name associated with protocol number
getservbyname(string $service, string $protocol): int|false	Get port number associated with an Internet service and protocol
getservbyport(int $port, string $protocol): string|false	Get Internet service which corresponds to port and protocol
header_register_callback(callable $callback): bool	Call a header function
header_remove(string|null $name = null): void	Remove previously set headers
header(string $header, bool $replace = true, int $response_code = ?): void	Send a raw HTTP header
headers_list(): array	Returns a list of response headers sent (or ready to send)
headers_sent(string $filename = null, int $line = null): bool	Checks if or where headers have been sent
http_clear_last_response_headers(): void	Clears the stored HTTP response headers
http_get_last_response_headers(): array|null	Retrieve last HTTP response headers
http_response_code(int $response_code = ?): int|bool	Get or Set the HTTP response code
inet_ntop(string $ip): string|false	Converts a packed internet address to a human readable representation
inet_pton(string $ip): string|false	Converts a human readable IP address to its packed in_addr representation
ip2long(string $ip): int|false	Converts a string containing an (IPv4) Internet Protocol dotted address into a long integer
long2ip(int $ip): string	Converts a long integer address into a string in (IPv4) Internet standard dotted format
net_get_interfaces(): array|false	Get network interfaces
openlog(string $prefix, int $flags, int $facility): true	Open connection to system logger
pfsockopen(string $hostname, int $port = -1, int $error_code = null, string $error_message = null, float|null $timeout = null): resource|false	Open persistent Internet or Unix domain socket connection
request_parse_body(array|null $options = null): array	Read and parse the request body and return the result
setcookie(string $name, string $value = "", int $expires_or_options = ?, string $path = "", string $domain = "", bool $secure = false, bool $httponly = false): bool	Send a cookie
setcookie(string $name, string $value = "", array $options = []): bool	Send a cookie
setrawcookie(string $name, string $value = ?, int $expires_or_options = ?, string $path = ?, string $domain = ?, bool $secure = false, bool $httponly = false): bool	Send a cookie without urlencoding the cookie value
setrawcookie(string $name, string $value = ?, array $options = []): bool	Send a cookie without urlencoding the cookie value
socket_get_status()	Alias of stream_get_meta_data
socket_set_blocking()	Alias of stream_set_blocking
socket_set_timeout()	Alias of stream_set_timeout
syslog(int $priority, string $message): true	Generate a system log message
oauth_get_sbs(string $http_method, string $uri, array $request_parameters = ?): string	Generate a Signature Base String
oauth_urlencode(string $uri): string	Encode a URI to RFC 3986
OAuth(string $consumer_key, string $consumer_secret, string $signature_method = OAUTH_SIG_METHOD_HMACSHA1, int $auth_type = ?)	(new) Create a new OAuth object
>__destruct(): void	(OAuth) The destructor
>disableDebug(): bool	(OAuth) Turn off verbose debugging
>disableRedirects(): bool	(OAuth) Turn off redirects
>disableSSLChecks(): bool	(OAuth) Turn off SSL checks
>enableDebug(): bool	(OAuth) Turn on verbose debugging
>enableRedirects(): bool	(OAuth) Turn on redirects
>enableSSLChecks(): bool	(OAuth) Turn on SSL checks
>fetch(string $protected_resource_url, array $extra_parameters = ?, string $http_method = ?, array $http_headers = ?): mixed	(OAuth) Fetch an OAuth protected resource
>generateSignature(string $http_method, string $url, mixed $extra_parameters = ?): string|false	(OAuth) Generate a signature
>getAccessToken(string $access_token_url, string $auth_session_handle = ?, string $verifier_token = ?, string $http_method = ?): array	(OAuth) Fetch an access token
>getCAPath(): array	(OAuth) Gets CA information
>getLastResponse(): string	(OAuth) Get the last response
>getLastResponseHeaders(): string|false	(OAuth) Get headers for last response
>getLastResponseInfo(): array	(OAuth) Get HTTP information about the last response
>getRequestHeader(string $http_method, string $url, mixed $extra_parameters = ?): string|false	(OAuth) Generate OAuth header string signature
>getRequestToken(string $request_token_url, string $callback_url = ?, string $http_method = ?): array	(OAuth) Fetch a request token
>setAuthType(int $auth_type): bool	(OAuth) Set authorization type
>setCAPath(string $ca_path = ?, string $ca_info = ?): mixed	(OAuth) Set CA path and info
>setNonce(string $nonce): mixed	(OAuth) Set the nonce for subsequent requests
>setRequestEngine(int $reqengine): void	(OAuth) The setRequestEngine purpose
>setRSACertificate(string $cert): mixed	(OAuth) Set the RSA certificate
>setSSLChecks(int $sslcheck): bool	(OAuth) Tweak specific SSL checks for requests
>setTimestamp(string $timestamp): mixed	(OAuth) Set the timestamp
>setToken(string $token, string $token_secret): bool	(OAuth) Sets the token and secret
>setVersion(string $version): bool	(OAuth) Set the OAuth version
>addRequiredParameter(string $req_params): bool	(OAuthProvider) Add required parameters
>callconsumerHandler(): void	(OAuthProvider) Calls the consumerNonceHandler callback
>callTimestampNonceHandler(): void	(OAuthProvider) Calls the timestampNonceHandler callback
>calltokenHandler(): void	(OAuthProvider) Calls the tokenNonceHandler callback
>checkOAuthRequest(string $uri = ?, string $method = ?): void	(OAuthProvider) Check an oauth request
OAuthProvider(array $params_array = ?)	(new) Constructs a new OAuthProvider object
>consumerHandler(callable $callback_function): void	(OAuthProvider) Set the consumerHandler handler callback
OAuthProvider::generateToken(int $size, bool $strong = false): string	Generate a random token
>is2LeggedEndpoint(mixed $params_array): void	(OAuthProvider) is2LeggedEndpoint
>isRequestTokenEndpoint(bool $will_issue_request_token): void	(OAuthProvider) Sets isRequestTokenEndpoint
>removeRequiredParameter(string $req_params): bool	(OAuthProvider) Remove a required parameter
OAuthProvider::reportProblem(string $oauthexception, bool $send_headers = true): string	Report a problem
>setParam(string $param_key, mixed $param_val = ?): bool	(OAuthProvider) Set a parameter
>setRequestTokenPath(string $path): bool	(OAuthProvider) Set request token path
>timestampNonceHandler(callable $callback_function): void	(OAuthProvider) Set the timestampNonceHandler handler callback
>tokenHandler(callable $callback_function): void	(OAuthProvider) Set the tokenHandler handler callback
OAuthException()	(new) This exception is thrown when exceptional errors occur while using the OAuth extension and contains useful debugging information
oci_bind_array_by_name(resource $statement, string $param, array $var, int $max_array_length, int $max_item_length = -1, int $type = SQLT_AFC): bool	Binds a PHP array to an Oracle PL/SQL array parameter
oci_bind_by_name(resource $statement, string $param, mixed $var, int $max_length = -1, int $type = ?): bool	Binds a PHP variable to an Oracle placeholder
oci_cancel(resource $statement): bool	Cancels reading from cursor
oci_client_version(): string	Returns the Oracle client library version
oci_close(resource $connection): bool|null	Closes an Oracle connection
oci_commit(resource $connection): bool	Commits the outstanding database transaction
oci_connect(string $username, string $password, string|null $connection_string = null, string $encoding = "", int $session_mode = OCI_DEFAULT): resource|false	Connect to an Oracle database
oci_define_by_name(resource $statement, string $column, mixed $var, int $type = ?): bool	Associates a PHP variable with a column for query fetches
oci_error(resource|null $connection_or_statement = null): array|false	Returns the last error found
oci_execute(resource $statement, int $mode = OCI_COMMIT_ON_SUCCESS): bool	Executes a statement
oci_fetch_all(resource $statement, array $output, int $offset = ?, int $limit = -1, int $flags = OCI_FETCHSTATEMENT_BY_COLUMN | OCI_ASSOC): int	Fetches multiple rows from a query into a two-dimensional array
oci_fetch_array(resource $statement, int $mode = OCI_BOTH | OCI_RETURN_NULLS): array|false	Returns the next row from a query as an associative or numeric array
oci_fetch_assoc(resource $statement): array|false	Returns the next row from a query as an associative array
oci_fetch_object(resource $statement, int $mode = OCI_ASSOC | OCI_RETURN_NULLS): stdClass|false	Returns the next row from a query as an object
oci_fetch_row(resource $statement): array|false	Returns the next row from a query as a numeric array
oci_fetch(resource $statement): bool	Fetches the next row from a query into internal buffers
oci_field_is_null(resource $statement, string|int $column): bool	Checks if a field in the currently fetched row is null
oci_field_name(resource $statement, string|int $column): string|false	Returns the name of a field from the statement
oci_field_precision(resource $statement, string|int $column): int|false	Tell the precision of a field
oci_field_scale(resource $statement, string|int $column): int|false	Tell the scale of the field
oci_field_size(resource $statement, string|int $column): int|false	Returns field's size
oci_field_type_raw(resource $statement, string|int $column): int|false	Tell the raw Oracle data type of the field
oci_field_type(resource $statement, string|int $column): string|int|false	Returns a field's data type name
oci_free_descriptor(OCILob $lob): bool	Frees a descriptor
oci_free_statement(resource $statement): bool	Frees all resources associated with statement or cursor
oci_get_implicit_resultset(resource $statement): resource|false	Returns the next child statement resource from a parent statement resource that has Oracle Database Implicit Result Sets
oci_lob_copy(OCILob $to, OCILob $from, int|null $length = null): bool	Copies large object
oci_lob_is_equal(OCILob $lob1, OCILob $lob2): bool	Compares two LOB/FILE locators for equality
oci_new_collection(resource $connection, string $type_name, string|null $schema = null): OCICollection|false	Allocates new collection object
oci_new_connect(string $username, string $password, string|null $connection_string = null, string $encoding = "", int $session_mode = OCI_DEFAULT): resource|false	Connect to the Oracle server using a unique connection
oci_new_cursor(resource $connection): resource|false	Allocates and returns a new cursor (statement handle)
oci_new_descriptor(resource $connection, int $type = OCI_DTYPE_LOB): OCILob|null	Initializes a new empty LOB or FILE descriptor
oci_num_fields(resource $statement): int	Returns the number of result columns in a statement
oci_num_rows(resource $statement): int|false	Returns number of rows affected during statement execution
oci_parse(resource $connection, string $sql): resource|false	Prepares an Oracle statement for execution
oci_password_change(resource $connection, string $username, string $old_password, string $new_password): bool	Changes password of Oracle's user
oci_password_change(string $database_name, string $username, string $old_password, string $new_password): resource	Changes password of Oracle's user
oci_pconnect(string $username, string $password, string|null $connection_string = null, string $encoding = "", int $session_mode = OCI_DEFAULT): resource|false	Connect to an Oracle database using a persistent connection
oci_register_taf_callback(resource $connection, callable|null $callback): bool	Register a user-defined callback function for Oracle Database TAF
oci_result(resource $statement, string|int $column): mixed	Returns field's value from the fetched row
oci_rollback(resource $connection): bool	Rolls back the outstanding database transaction
oci_server_version(resource $connection): string|false	Returns the Oracle Database version
oci_set_action(resource $connection, string $action): bool	Sets the action name
oci_set_call_timeout(resource $connection, int $timeout): bool	Sets a millisecond timeout for database calls
oci_set_client_identifier(resource $connection, string $client_id): bool	Sets the client identifier
oci_set_client_info(resource $connection, string $client_info): bool	Sets the client information
oci_set_db_operation(resource $connection, string $action): bool	Sets the database operation
oci_set_edition(string $edition): bool	Sets the database edition
oci_set_module_name(resource $connection, string $name): bool	Sets the module name
oci_set_prefetch_lob(resource $statement, int $prefetch_lob_size): bool	Sets the amount of data prefetched for each CLOB or BLOB.
oci_set_prefetch(resource $statement, int $rows): bool	Sets number of rows to be prefetched by queries
oci_statement_type(resource $statement): string|false	Returns the type of a statement
oci_unregister_taf_callback(resource $connection): bool	Unregister a user-defined callback function for Oracle Database TAF
>append(string $value): bool	(OCICollection) Appends element to the collection
>assign(OCICollection $from): bool	(OCICollection) Assigns a value to the collection from another existing collection
>assignElem(int $index, string $value): bool	(OCICollection) Assigns a value to the element of the collection
>free(): bool	(OCICollection) Frees the resources associated with the collection object
>getElem(int $index): string|float|null|false	(OCICollection) Returns value of the element
>max(): int|false	(OCICollection) Returns the maximum number of elements in the collection
>size(): int|false	(OCICollection) Returns size of the collection
>trim(int $num): bool	(OCICollection) Trims elements from the end of the collection
>append(OCILob $from): bool	(OCILob) Appends data from the large object to another large object
>close(): bool	(OCILob) Closes LOB descriptor
>eof(): bool	(OCILob) Tests for end-of-file on a large object's descriptor
>erase(int|null $offset = null, int|null $length = null): int|false	(OCILob) Erases a specified portion of the internal LOB data
>export(string $filename, int|null $offset = null, int|null $length = null): bool	(OCILob) Exports LOB's contents to a file
>flush(int $flag = ?): bool	(OCILob) Flushes/writes buffer of the LOB to the server
>free(): bool	(OCILob) Frees resources associated with the LOB descriptor
>getBuffering(): bool	(OCILob) Returns current state of buffering for the large object
>import(string $filename): bool	(OCILob) Imports file data to the LOB
>load(): string|false	(OCILob) Returns large object's contents
>read(int $length): string|false	(OCILob) Reads part of the large object
>rewind(): bool	(OCILob) Moves the internal pointer to the beginning of the large object
>save(string $data, int $offset = ?): bool	(OCILob) Saves data to the large object
>saveFile()	(OCILob) Alias of OCILob::import
>seek(int $offset, int $whence = OCI_SEEK_SET): bool	(OCILob) Sets the internal pointer of the large object
>setBuffering(bool $mode): bool	(OCILob) Changes current state of buffering for the large object
>size(): int|false	(OCILob) Returns size of large object
>tell(): int|false	(OCILob) Returns the current position of internal pointer of large object
>truncate(int $length = ?): bool	(OCILob) Truncates large object
>write(string $data, int|null $length = null): int|false	(OCILob) Writes data to the large object
>writeTemporary(string $data, int $type = OCI_TEMP_CLOB): bool	(OCILob) Writes a temporary large object
>writeToFile()	(OCILob) Alias of OCILob::export
oci_internal_debug(bool $onoff): void	Enables or disables internal debug output
ocibindbyname()	Alias of oci_bind_by_name
ocicancel()	Alias of oci_cancel
ocicloselob()	Alias of OCILob::close
ocicollappend()	Alias of OCICollection::append
ocicollassign()	Alias of OCICollection::assign
ocicollassignelem()	Alias of OCICollection::assignElem
ocicollgetelem()	Alias of OCICollection::getElem
ocicollmax()	Alias of OCICollection::max
ocicollsize()	Alias of OCICollection::size
ocicolltrim()	Alias of OCICollection::trim
ocicolumnisnull()	Alias of oci_field_is_null
ocicolumnname()	Alias of oci_field_name
ocicolumnprecision()	Alias of oci_field_precision
ocicolumnscale()	Alias of oci_field_scale
ocicolumnsize()	Alias of oci_field_size
ocicolumntype()	Alias of oci_field_type
ocicolumntyperaw()	Alias of oci_field_type_raw
ocicommit()	Alias of oci_commit
ocidefinebyname()	Alias of oci_define_by_name
ocierror()	Alias of oci_error
ociexecute()	Alias of oci_execute
ocifetch()	Alias of oci_fetch
ocifetchinto()	Obsolete variant of oci_fetch_array, oci_fetch_object, oci_fetch_assoc and oci_fetch_row
ocifetchstatement()	Alias of oci_fetch_all
ocifreecollection()	Alias of OCICollection::free
ocifreecursor()	Alias of oci_free_statement
ocifreedesc()	Alias of OCILob::free
ocifreestatement()	Alias of oci_free_statement
ociinternaldebug()	Alias of oci_internal_debug
ociloadlob()	Alias of OCILob::load
ocilogoff()	Alias of oci_close
ocilogon()	Alias of oci_connect
ocinewcollection()	Alias of oci_new_collection
ocinewcursor()	Alias of oci_new_cursor
ocinewdescriptor()	Alias of oci_new_descriptor
ocinlogon()	Alias of oci_new_connect
ocinumcols()	Alias of oci_num_fields
ociparse()	Alias of oci_parse
ociplogon()	Alias of oci_pconnect
ociresult()	Alias of oci_result
ocirollback()	Alias of oci_rollback
ocirowcount()	Alias of oci_num_rows
ocisavelob()	Alias of OCILob::save
ocisavelobfile()	Alias of OCILob::import
ociserverversion()	Alias of oci_server_version
ocisetprefetch()	Alias of oci_set_prefetch
ocistatementtype()	Alias of oci_statement_type
ociwritelobtofile()	Alias of OCILob::export
ociwritetemporarylob()	Alias of OCILob::writeTemporary
OCICollection()	(new) OCI8 Collection functionality
OCILob()	(new) OCI8 LOB functionality for large binary (BLOB) and character (CLOB) objects
opcache_compile_file(string $filename): bool	Compiles and caches a PHP script without executing it
opcache_get_configuration(): array|false	Get configuration information about the cache
opcache_get_status(bool $include_scripts = true): array|false	Get status information about the cache
opcache_invalidate(string $filename, bool $force = false): bool	Invalidates a cached script
opcache_is_script_cached(string $filename): bool	Tells whether a script is cached in OPCache
opcache_reset(): bool	Resets the contents of the opcode cache
openal_buffer_create(): resource	Generate OpenAL buffer
openal_buffer_data(resource $buffer, int $format, string $data, int $freq): bool	Load a buffer with data
openal_buffer_destroy(resource $buffer): bool	Destroys an OpenAL buffer
openal_buffer_get(resource $buffer, int $property): int|false	Retrieve an OpenAL buffer property
openal_buffer_loadwav(resource $buffer, string $wavfile): bool	Load a .wav file into a buffer
openal_context_create(resource $device): resource	Create an audio processing context
openal_context_current(resource $context): bool	Make the specified context current
openal_context_destroy(resource $context): bool	Destroys a context
openal_context_process(resource $context): bool	Process the specified context
openal_context_suspend(resource $context): bool	Suspend the specified context
openal_device_close(resource $device): bool	Close an OpenAL device
openal_device_open(string $device_desc = ?): resource	Initialize the OpenAL audio layer
openal_listener_get(int $property): mixed	Retrieve a listener property
openal_listener_set(int $property, mixed $setting): bool	Set a listener property
openal_source_create(): resource	Generate a source resource
openal_source_destroy(resource $source): bool	Destroy a source resource
openal_source_get(resource $source, int $property): mixed	Retrieve an OpenAL source property
openal_source_pause(resource $source): bool	Pause the source
openal_source_play(resource $source): bool	Start playing the source
openal_source_rewind(resource $source): bool	Rewind the source
openal_source_set(resource $source, int $property, mixed $setting): bool	Set source property
openal_source_stop(resource $source): bool	Stop playing the source
openal_stream(resource $source, int $format, int $rate): resource|false	Begin streaming on a source
openssl_cipher_iv_length(string $cipher_algo): int|false	Gets the cipher iv length
openssl_cipher_key_length(string $cipher_algo): int|false	Gets the cipher key length
openssl_cms_decrypt(string $input_filename, string $output_filename, OpenSSLCertificate|string $certificate, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string|null $private_key = null, int $encoding = OPENSSL_ENCODING_SMIME): bool	Decrypt a CMS message
openssl_cms_encrypt(string $input_filename, string $output_filename, OpenSSLCertificate|array|string $certificate, array|null $headers, int $flags = ?, int $encoding = OPENSSL_ENCODING_SMIME, int $cipher_algo = OPENSSL_CIPHER_AES_128_CBC): bool	Encrypt a CMS message
openssl_cms_read(string $input_filename, array $certificates): bool	Export the CMS file to an array of PEM certificates
openssl_cms_sign(string $input_filename, string $output_filename, OpenSSLCertificate|string $certificate, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key, array|null $headers, int $flags = ?, int $encoding = OPENSSL_ENCODING_SMIME, string|null $untrusted_certificates_filename = null): bool	Sign a file
openssl_cms_verify(string $input_filename, int $flags = ?, string|null $certificates = null, array $ca_info = [], string|null $untrusted_certificates_filename = null, string|null $content = null, string|null $pk7 = null, string|null $sigfile = null, int $encoding = OPENSSL_ENCODING_SMIME): bool	Verify a CMS signature
openssl_csr_export_to_file(OpenSSLCertificateSigningRequest|string $csr, string $output_filename, bool $no_text = true): bool	Exports a CSR to a file
openssl_csr_export(OpenSSLCertificateSigningRequest|string $csr, string $output, bool $no_text = true): bool	Exports a CSR as a string
openssl_csr_get_public_key(OpenSSLCertificateSigningRequest|string $csr, bool $short_names = true): OpenSSLAsymmetricKey|false	Returns the public key of a CSR
openssl_csr_get_subject(OpenSSLCertificateSigningRequest|string $csr, bool $short_names = true): array|false	Returns the subject of a CSR
openssl_csr_new(array $distinguished_names, OpenSSLAsymmetricKey|null $private_key, array|null $options = null, array|null $extra_attributes = null): OpenSSLCertificateSigningRequest|bool	Generates a CSR
openssl_csr_sign(OpenSSLCertificateSigningRequest|string $csr, OpenSSLCertificate|string|null $ca_certificate, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key, int $days, array|null $options = null, int $serial = ?, string|null $serial_hex = null): OpenSSLCertificate|false	Sign a CSR with another certificate (or itself) and generate a certificate
openssl_decrypt(string $data, string $cipher_algo, string $passphrase, int $options = ?, string $iv = "", string|null $tag = null, string $aad = ""): string|false	Decrypts data
openssl_dh_compute_key(string $public_key, OpenSSLAsymmetricKey $private_key): string|false	Computes shared secret for public value of remote DH public key and local DH key
openssl_digest(string $data, string $digest_algo, bool $binary = false): string|false	Computes a digest
openssl_encrypt(string $data, string $cipher_algo, string $passphrase, int $options = ?, string $iv = "", string $tag = null, string $aad = "", int $tag_length = 16): string|false	Encrypts data
openssl_error_string(): string|false	Return openSSL error message
openssl_free_key(OpenSSLAsymmetricKey $key): void	Free key resource
openssl_get_cert_locations(): array	Retrieve the available certificate locations
openssl_get_cipher_methods(bool $aliases = false): array	Gets available cipher methods
openssl_get_curve_names(): array|false	Gets list of available curve names for ECC
openssl_get_md_methods(bool $aliases = false): array	Gets available digest methods
openssl_get_privatekey()	Alias of openssl_pkey_get_private
openssl_get_publickey()	Alias of openssl_pkey_get_public
openssl_open(string $data, string $output, string $encrypted_key, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key, string $cipher_algo, string|null $iv = null): bool	Open sealed data
openssl_pbkdf2(string $password, string $salt, int $key_length, int $iterations, string $digest_algo = "sha1"): string|false	Generates a PKCS5 v2 PBKDF2 string
openssl_pkcs12_export_to_file(OpenSSLCertificate|string $certificate, string $output_filename, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key, string $passphrase, array $options = []): bool	Exports a PKCS#12 Compatible Certificate Store File
openssl_pkcs12_export(OpenSSLCertificate|string $certificate, string $output, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key, string $passphrase, array $options = []): bool	Exports a PKCS#12 Compatible Certificate Store File to variable
openssl_pkcs12_read(string $pkcs12, array $certificates, string $passphrase): bool	Parse a PKCS#12 Certificate Store into an array
openssl_pkcs7_decrypt(string $input_filename, string $output_filename, OpenSSLCertificate|string $certificate, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string|null $private_key = null): bool	Decrypts an S/MIME encrypted message
openssl_pkcs7_encrypt(string $input_filename, string $output_filename, OpenSSLCertificate|array|string $certificate, array|null $headers, int $flags = ?, int $cipher_algo = OPENSSL_CIPHER_AES_128_CBC): bool	Encrypt an S/MIME message
openssl_pkcs7_read(string $data, array $certificates): bool	Export the PKCS7 file to an array of PEM certificates
openssl_pkcs7_sign(string $input_filename, string $output_filename, OpenSSLCertificate|string $certificate, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key, array|null $headers, int $flags = PKCS7_DETACHED, string|null $untrusted_certificates_filename = null): bool	Sign an S/MIME message
openssl_pkcs7_verify(string $input_filename, int $flags, string|null $signers_certificates_filename = null, array $ca_info = [], string|null $untrusted_certificates_filename = null, string|null $content = null, string|null $output_filename = null): bool|int	Verifies the signature of an S/MIME signed message
openssl_pkey_derive(OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $public_key, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key, int $key_length = ?): string|false	Computes shared secret for public value of remote and local DH or ECDH key
openssl_pkey_export_to_file(OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $key, string $output_filename, string|null $passphrase = null, array|null $options = null): bool	Gets an exportable representation of a key into a file
openssl_pkey_export(OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $key, string $output, string|null $passphrase = null, array|null $options = null): bool	Gets an exportable representation of a key into a string
openssl_pkey_free(OpenSSLAsymmetricKey $key): void	Frees a private key
openssl_pkey_get_details(OpenSSLAsymmetricKey $key): array|false	Returns an array with the key details
openssl_pkey_get_private(OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key, string|null $passphrase = null): OpenSSLAsymmetricKey|false	Get a private key
openssl_pkey_get_public(OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $public_key): OpenSSLAsymmetricKey|false	Extract public key from certificate and prepare it for use
openssl_pkey_new(array|null $options = null): OpenSSLAsymmetricKey|false	Generates a new private key
openssl_private_decrypt(string $data, string $decrypted_data, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key, int $padding = OPENSSL_PKCS1_PADDING): bool	Decrypts data with private key
openssl_private_encrypt(string $data, string $encrypted_data, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key, int $padding = OPENSSL_PKCS1_PADDING): bool	Encrypts data with private key
openssl_public_decrypt(string $data, string $decrypted_data, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $public_key, int $padding = OPENSSL_PKCS1_PADDING): bool	Decrypts data with public key
openssl_public_encrypt(string $data, string $encrypted_data, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $public_key, int $padding = OPENSSL_PKCS1_PADDING): bool	Encrypts data with public key
openssl_random_pseudo_bytes(int $length, bool $strong_result = null): string	Generate a pseudo-random string of bytes
openssl_seal(string $data, string $sealed_data, array $encrypted_keys, array $public_key, string $cipher_algo, string $iv = null): int|false	Seal (encrypt) data
openssl_sign(string $data, string $signature, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key, string|int $algorithm = OPENSSL_ALGO_SHA1): bool	Generate signature
openssl_spki_export_challenge(string $spki): string|false	Exports the challenge associated with a signed public key and challenge
openssl_spki_export(string $spki): string|false	Exports a valid PEM formatted public key signed public key and challenge
openssl_spki_new(OpenSSLAsymmetricKey $private_key, string $challenge, int $digest_algo = OPENSSL_ALGO_MD5): string|false	Generate a new signed public key and challenge
openssl_spki_verify(string $spki): bool	Verifies a signed public key and challenge
openssl_verify(string $data, string $signature, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $public_key, string|int $algorithm = OPENSSL_ALGO_SHA1): int|false	Verify signature
openssl_x509_check_private_key(OpenSSLCertificate|string $certificate, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key): bool	Checks if a private key corresponds to a certificate
openssl_x509_checkpurpose(OpenSSLCertificate|string $certificate, int $purpose, array $ca_info = [], string|null $untrusted_certificates_file = null): bool|int	Verifies if a certificate can be used for a particular purpose
openssl_x509_export_to_file(OpenSSLCertificate|string $certificate, string $output_filename, bool $no_text = true): bool	Exports a certificate to file
openssl_x509_export(OpenSSLCertificate|string $certificate, string $output, bool $no_text = true): bool	Exports a certificate as a string
openssl_x509_fingerprint(OpenSSLCertificate|string $certificate, string $digest_algo = "sha1", bool $binary = false): string|false	Calculates the fingerprint, or digest, of a given X.509 certificate
openssl_x509_free(OpenSSLCertificate $certificate): void	Free certificate resource
openssl_x509_parse(OpenSSLCertificate|string $certificate, bool $short_names = true): array|false	Parse an X509 certificate and return the information as an array
openssl_x509_read(OpenSSLCertificate|string $certificate): OpenSSLCertificate|false	Parse an X.509 certificate and return an object for it
openssl_x509_verify(OpenSSLCertificate|string $certificate, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $public_key): int	Verifies digital signature of x509 certificate against a public key
OpenSSLAsymmetricKey()	(new) A fully opaque class which replaces OpenSSL key resources as of PHP 8
OpenSSLCertificate()	(new) A fully opaque class which replaces OpenSSL X
OpenSSLCertificateSigningRequest()	(new) A fully opaque class which replaces OpenSSL X
flush(): void	Flush system output buffer
ob_clean(): bool	Clean (erase) the contents of the active output buffer
ob_end_clean(): bool	Clean (erase) the contents of the active output buffer and turn it off
ob_end_flush(): bool	Flush (send) the return value of the active output handler and turn the active output buffer off
ob_flush(): bool	Flush (send) the return value of the active output handler
ob_get_clean(): string|false	Get the contents of the active output buffer and turn it off
ob_get_contents(): string|false	Return the contents of the output buffer
ob_get_flush(): string|false	Flush (send) the return value of the active output handler, return the contents of the active output buffer and turn it off
ob_get_length(): int|false	Return the length of the output buffer
ob_get_level(): int	Return the nesting level of the output buffering mechanism
ob_get_status(bool $full_status = false): array	Get status of output buffers
ob_implicit_flush(bool $enable = true): void	Turn implicit flush on/off
ob_list_handlers(): array	List all output handlers in use
ob_start(callable|null $callback = null, int $chunk_size = ?, int $flags = PHP_OUTPUT_HANDLER_STDFLAGS): bool	Turn on output buffering
output_add_rewrite_var(string $name, string $value): bool	Add URL rewriter values
output_reset_rewrite_vars(): bool	Reset URL rewriter values
parallel\bootstrap(string $file): void	Bootstrapping
parallel\run(Closure $task): Future|null	Execution
parallel\run(Closure $task, array $argv): Future|null	Execution
>close(): void	(parallel\Channel) Closing
parallel\Channel()	(new) Channel Construction
parallel\Channel(int $capacity)	(new) Channel Construction
>make(string $name): Channel	(parallel\Channel) Access
>make(string $name, int $capacity): Channel	(parallel\Channel) Access
>open(string $name): Channel	(parallel\Channel) Access
>recv(): mixed	(parallel\Channel) Sharing
>send(mixed $value): void	(parallel\Channel) Sharing
>addChannel(parallel\Channel $channel): void	(parallel\Events) Targets
>addFuture(string $name, parallel\Future $future): void	(parallel\Events) Targets
>poll(): parallel\Events\Event|null	(parallel\Events) Polling
>remove(string $target): void	(parallel\Events) Targets
>setBlocking(bool $blocking): void	(parallel\Events) Behaviour
>setInput(Input $input): void	(parallel\Events) Input
>setTimeout(int $timeout): void	(parallel\Events) Behaviour
>cancel(): bool	(parallel\Future) Cancellation
>cancelled(): bool	(parallel\Future) State Detection
>done(): bool	(parallel\Future) State Detection
>value(): mixed	(parallel\Future) Resolution
>add(string $target, mixed $value): void	(parallel\Events\Input) Inputs
>clear(): void	(parallel\Events\Input) Inputs
>remove(string $target): void	(parallel\Events\Input) Inputs
>close(): void	(parallel\Runtime) Runtime Graceful Join
parallel\Runtime()	(new) Runtime Construction
parallel\Runtime(string $bootstrap)	(new) Runtime Construction
>kill(): void	(parallel\Runtime) Runtime Join
>run(Closure $task): Future|null	(parallel\Runtime) Execution
>run(Closure $task, array $argv): Future|null	(parallel\Runtime) Execution
parallel\Sync()	(new) Construction
parallel\Sync(scalar $value)	(new) Construction
>get(): scalar	(parallel\Sync) Access
>__invoke(callable $critical)	(parallel\Sync) Synchronization
>notify(bool $all = ?)	(parallel\Sync) Synchronization
>set(scalar $value)	(parallel\Sync) Access
>wait()	(parallel\Sync) Synchronization
parallel\Events\Event\Type()	(new) 
parallel\Events\Event()	(new) When an Event is returned, Event::$object shall be removed from the loop that returned it, should the event be a write event the Input for Event::$source shall also be removed
parallel\Events\Input()	(new) An Input object is a container for data that the parallel\Events object will write to parallel\Channel objects as they become available
parallel\Events()	(new) The Event loop monitors the state of sets of futures and or channels (targets) in order to perform read (parallel\Future::value, parallel\Channel::recv) and write (parallel\Channel::send) operations as the targets become available and the operations may be performed without blocking the event loop
parallel\Future()	(new) A Future represents the return value or uncaught exception from a task, and exposes an API for cancellation
>advance(): void	(Parle\Lexer) Process next lexer rule
>build(): void	(Parle\Lexer) Finalize the lexer rule set
>callout(int $id, callable $callback): void	(Parle\Lexer) Define token callback
>consume(string $data): void	(Parle\Lexer) Pass the data for processing
>dump(): void	(Parle\Lexer) Dump the state machine
>getToken(): Parle\Token	(Parle\Lexer) Retrieve the current token
>insertMacro(string $name, string $regex): void	(Parle\Lexer) Insert regex macro
>push(string $regex, int $id): void	(Parle\Lexer) Add a lexer rule
>reset(int $pos): void	(Parle\Lexer) Reset lexer
>advance(): void	(Parle\Parser) Process next parser rule
>build(): void	(Parle\Parser) Finalize the grammar rules
>consume(string $data, Parle\Lexer $lexer): void	(Parle\Parser) Consume the data for processing
>dump(): void	(Parle\Parser) Dump the grammar
>errorInfo(): Parle\ErrorInfo	(Parle\Parser) Retrieve the error information
>left(string $tok): void	(Parle\Parser) Declare a token with left-associativity
>nonassoc(string $tok): void	(Parle\Parser) Declare a token with no associativity
>precedence(string $tok): void	(Parle\Parser) Declare a precedence rule
>push(string $name, string $rule): int	(Parle\Parser) Add a grammar rule
>reset(int $tokenId = ?): void	(Parle\Parser) Reset parser state
>right(string $tok): void	(Parle\Parser) Declare a token with right-associativity
>sigil(int $idx): string	(Parle\Parser) Retrieve a matching part of a rule
>sigilCount(): int	(Parle\Parser) Number of elements in matched rule
>sigilName(int $idx): string	(Parle\Parser) Retrieve a rule or token name
>token(string $tok): void	(Parle\Parser) Declare a token
>tokenId(string $tok): int	(Parle\Parser) Get token id
>trace(): string	(Parle\Parser) Trace the parser operation
>validate(string $data, Parle\Lexer $lexer): bool	(Parle\Parser) Validate input
>advance(): void	(Parle\RLexer) Process next lexer rule
>build(): void	(Parle\RLexer) Finalize the lexer rule set
>callout(int $id, callable $callback): void	(Parle\RLexer) Define token callback
>consume(string $data): void	(Parle\RLexer) Pass the data for processing
>dump(): void	(Parle\RLexer) Dump the state machine
>getToken(): Parle\Token	(Parle\RLexer) Retrieve the current token
>insertMacro(string $name, string $regex): void	(Parle\RLexer) Insert regex macro
>push(string $regex, int $id): void	(Parle\RLexer) Add a lexer rule
>push(string $state, string $regex, int $id, string $newState): void	(Parle\RLexer) Add a lexer rule
>push(string $state, string $regex, string $newState): void	(Parle\RLexer) Add a lexer rule
>pushState(string $state): int	(Parle\RLexer) Push a new start state
>reset(int $pos): void	(Parle\RLexer) Reset lexer
>advance(): void	(Parle\RParser) Process next parser rule
>build(): void	(Parle\RParser) Finalize the grammar rules
>consume(string $data, Parle\RLexer $rlexer): void	(Parle\RParser) Consume the data for processing
>dump(): void	(Parle\RParser) Dump the grammar
>errorInfo(): Parle\ErrorInfo	(Parle\RParser) Retrieve the error information
>left(string $tok): void	(Parle\RParser) Declare a token with left-associativity
>nonassoc(string $tok): void	(Parle\RParser) Declare a token with no associativity
>precedence(string $tok): void	(Parle\RParser) Declare a precedence rule
>push(string $name, string $rule): int	(Parle\RParser) Add a grammar rule
>reset(int $tokenId = ?): void	(Parle\RParser) Reset parser state
>right(string $tok): void	(Parle\RParser) Declare a token with right-associativity
>sigil(int $idx = ?): string	(Parle\RParser) Retrieve a matching part of a rule
>sigilCount(): int	(Parle\RParser) Number of elements in matched rule
>sigilName(int $idx): string	(Parle\RParser) Retrieve a rule or token name
>token(string $tok): void	(Parle\RParser) Declare a token
>tokenId(string $tok): int	(Parle\RParser) Get token id
>trace(): string	(Parle\RParser) Trace the parser operation
>validate(string $data, Parle\RLexer $lexer): bool	(Parle\RParser) Validate input
>pop(): void	(Parle\Stack) Pop an item from the stack
>push(mixed $item): void	(Parle\Stack) Push an item into the stack
Parle\ErrorInfo()	(new) The class represents detailed error information as supplied by Parle\Parser::errorInfo
Parle\Lexer()	(new) Single state lexer class
Parle\LexerException()	(new) 
Parle\Parser()	(new) Parser class
Parle\ParserException()	(new) 
Parle\RLexer()	(new) Multistate lexer class
Parle\RParser()	(new) Parser class
Parle\Stack()	(new) Parle\Stack is a LIFO stack
Parle\Token()	(new) This class represents a token
password_algos(): array	Get available password hashing algorithm IDs
password_get_info(string $hash): array	Returns information about the given hash
password_hash(string $password, string|int|null $algo, array $options = []): string	Creates a password hash
password_needs_rehash(string $hash, string|int|null $algo, array $options = []): bool	Checks if the given hash matches the given options
password_verify(string $password, string $hash): bool	Verifies that a password matches a hash
pcntl_alarm(int $seconds): int	Set an alarm clock for delivery of a signal
pcntl_async_signals(bool|null $enable = null): bool	Enable/disable asynchronous signal handling or return the old setting
pcntl_errno()	Alias of pcntl_get_last_error
pcntl_exec(string $path, array $args = [], array $env_vars = []): bool	Executes specified program in current process space
pcntl_fork(): int	Forks the currently running process
pcntl_get_last_error(): int	Retrieve the error number set by the last pcntl function which failed
pcntl_getcpuaffinity(int|null $pid = null): bool|array	Get the cpu affinity of a process
pcntl_getpriority(int|null $process_id = null, int $mode = PRIO_PROCESS): int|false	Get the priority of any process
pcntl_rfork(int $flags, int $signal = ?): int	Manipulates process resources
pcntl_setcpuaffinity(int|null $pid = null, array $hmask = ?): bool	Set the cpu affinity of a process
pcntl_setpriority(int $priority, int|null $process_id = null, int $mode = PRIO_PROCESS): bool	Change the priority of any process
pcntl_signal_dispatch(): bool	Calls signal handlers for pending signals
pcntl_signal_get_handler(int $signal): callable|int	Get the current handler for specified signal
pcntl_signal(int $signal, callable|int $handler, bool $restart_syscalls = true): bool	Installs a signal handler
pcntl_sigprocmask(int $mode, array $signals, array $old_signals = null): bool	Sets and retrieves blocked signals
pcntl_sigtimedwait(array $signals, array $info = [], int $seconds = ?, int $nanoseconds = ?): int|false	Waits for signals, with a timeout
pcntl_sigwaitinfo(array $signals, array $info = []): int|false	Waits for signals
pcntl_strerror(int $error_code): string	Retrieve the system error message associated with the given errno
pcntl_unshare(int $flags): bool	Dissociates parts of the process execution context
pcntl_wait(int $status, int $flags = ?, array $resource_usage = []): int	Waits on or returns the status of a forked child
pcntl_waitid(int $idtype = P_ALL, int|null $id = null, array $info = [], int $flags = WEXITED): bool	Waits for a child process to change state
pcntl_waitpid(int $process_id, int $status, int $flags = ?, array $resource_usage = []): int	Waits on or returns the status of a forked child
pcntl_wexitstatus(int $status): int|false	Returns the return code of a terminated child
pcntl_wifexited(int $status): bool	Checks if status code represents a normal exit
pcntl_wifsignaled(int $status): bool	Checks whether the status code represents a termination due to a signal
pcntl_wifstopped(int $status): bool	Checks whether the child process is currently stopped
pcntl_wstopsig(int $status): int|false	Returns the signal which caused the child to stop
pcntl_wtermsig(int $status): int|false	Returns the signal which caused the child to terminate
preg_filter(string|array $pattern, string|array $replacement, string|array $subject, int $limit = -1, int $count = null): string|array|null	Perform a regular expression search and replace
preg_grep(string $pattern, array $array, int $flags = ?): array|false	Return array entries that match the pattern
preg_last_error_msg(): string	Returns the error message of the last PCRE regex execution
preg_last_error(): int	Returns the error code of the last PCRE regex execution
preg_match_all(string $pattern, string $subject, array $matches = null, int $flags = ?, int $offset = ?): int|false	Perform a global regular expression match
preg_match(string $pattern, string $subject, array $matches = null, int $flags = ?, int $offset = ?): int|false	Perform a regular expression match
preg_quote(string $str, string|null $delimiter = null): string	Quote regular expression characters
preg_replace_callback_array(array $pattern, string|array $subject, int $limit = -1, int $count = null, int $flags = ?): string|array|null	Perform a regular expression search and replace using callbacks
preg_replace_callback(string|array $pattern, callable $callback, string|array $subject, int $limit = -1, int $count = null, int $flags = ?): string|array|null	Perform a regular expression search and replace using a callback
preg_replace(string|array $pattern, string|array $replacement, string|array $subject, int $limit = -1, int $count = null): string|array|null	Perform a regular expression search and replace
preg_split(string $pattern, string $subject, int $limit = -1, int $flags = ?): array|false	Split string by a regular expression
>beginTransaction(): bool	(PDO) Initiates a transaction
>commit(): bool	(PDO) Commits a transaction
PDO::connect(string $dsn, string|null $username = null, string|null $password = null, array|null $options = null): static	Connect to a database and return a PDO subclass for drivers that support it
PDO(string $dsn, string|null $username = null, string|null $password = null, array|null $options = null)	(new) Creates a PDO instance representing a connection to a database
>errorCode(): string|null	(PDO) Fetch the SQLSTATE associated with the last operation on the database handle
>errorInfo(): array	(PDO) Fetch extended error information associated with the last operation on the database handle
>exec(string $statement): int|false	(PDO) Execute an SQL statement and return the number of affected rows
>getAttribute(int $attribute): mixed	(PDO) Retrieve a database connection attribute
PDO::getAvailableDrivers(): array	Return an array of available PDO drivers
pdo_drivers(): array	Return an array of available PDO drivers
>inTransaction(): bool	(PDO) Checks if inside a transaction
>lastInsertId(string|null $name = null): string|false	(PDO) Returns the ID of the last inserted row or sequence value
>prepare(string $query, array $options = []): PDOStatement|false	(PDO) Prepares a statement for execution and returns a statement object
>query(string $query, int|null $fetchMode = null): PDOStatement|false	(PDO) Prepares and executes an SQL statement without placeholders
>query(string $query, int|null $fetchMode = PDO::FETCH_COLUMN, int $colno): PDOStatement|false	(PDO) Prepares and executes an SQL statement without placeholders
>query(string $query, int|null $fetchMode = PDO::FETCH_CLASS, string $classname, array $constructorArgs): PDOStatement|false	(PDO) Prepares and executes an SQL statement without placeholders
>query(string $query, int|null $fetchMode = PDO::FETCH_INTO, object $object): PDOStatement|false	(PDO) Prepares and executes an SQL statement without placeholders
>quote(string $string, int $type = PDO::PARAM_STR): string|false	(PDO) Quotes a string for use in a query
>rollBack(): bool	(PDO) Rolls back a transaction
>setAttribute(int $attribute, mixed $value): bool	(PDO) Set an attribute
>bindColumn(string|int $column, mixed $var, int $type = PDO::PARAM_STR, int $maxLength = ?, mixed $driverOptions = null): bool	(PDOStatement) Bind a column to a PHP variable
>bindParam(string|int $param, mixed $var, int $type = PDO::PARAM_STR, int $maxLength = ?, mixed $driverOptions = null): bool	(PDOStatement) Binds a parameter to the specified variable name
>bindValue(string|int $param, mixed $value, int $type = PDO::PARAM_STR): bool	(PDOStatement) Binds a value to a parameter
>closeCursor(): bool	(PDOStatement) Closes the cursor, enabling the statement to be executed again
>columnCount(): int	(PDOStatement) Returns the number of columns in the result set
>debugDumpParams(): bool|null	(PDOStatement) Dump an SQL prepared command
>errorCode(): string|null	(PDOStatement) Fetch the SQLSTATE associated with the last operation on the statement handle
>errorInfo(): array	(PDOStatement) Fetch extended error information associated with the last operation on the statement handle
>execute(array|null $params = null): bool	(PDOStatement) Executes a prepared statement
>fetch(int $mode = PDO::FETCH_DEFAULT, int $cursorOrientation = PDO::FETCH_ORI_NEXT, int $cursorOffset = ?): mixed	(PDOStatement) Fetches the next row from a result set
>fetchAll(int $mode = PDO::FETCH_DEFAULT): array	(PDOStatement) Fetches the remaining rows from a result set
>fetchAll(int $mode = PDO::FETCH_COLUMN, int $column): array	(PDOStatement) Fetches the remaining rows from a result set
>fetchAll(int $mode = PDO::FETCH_CLASS, string $class, array|null $constructorArgs): array	(PDOStatement) Fetches the remaining rows from a result set
>fetchAll(int $mode = PDO::FETCH_FUNC, callable $callback): array	(PDOStatement) Fetches the remaining rows from a result set
>fetchColumn(int $column = ?): mixed	(PDOStatement) Returns a single column from the next row of a result set
>fetchObject(string|null $class = "stdClass", array $constructorArgs = []): object|false	(PDOStatement) Fetches the next row and returns it as an object
>getAttribute(int $name): mixed	(PDOStatement) Retrieve a statement attribute
>getColumnMeta(int $column): array|false	(PDOStatement) Returns metadata for a column in a result set
>getIterator(): Iterator	(PDOStatement) Gets result set iterator
>nextRowset(): bool	(PDOStatement) Advances to the next rowset in a multi-rowset statement handle
>rowCount(): int	(PDOStatement) Returns the number of rows affected by the last SQL statement
>setAttribute(int $attribute, mixed $value): bool	(PDOStatement) Set a statement attribute
>setFetchMode(int $mode): bool	(PDOStatement) Set the default fetch mode for this statement
>setFetchMode(int $mode = PDO::FETCH_COLUMN, int $colno): bool	(PDOStatement) Set the default fetch mode for this statement
>setFetchMode(int $mode = PDO::FETCH_CLASS, string $class, array|null $constructorArgs = null): bool	(PDOStatement) Set the default fetch mode for this statement
>setFetchMode(int $mode = PDO::FETCH_INTO, object $object): bool	(PDOStatement) Set the default fetch mode for this statement
PDOException()	(new) Represents an error raised by PDO
PDORow()	(new) Represents a row from a result set returned by PDOStatement::fetch called with PDO_FETCH_LAZY fetch mode
PDOStatement()	(new) Represents a prepared statement and, after the statement is executed, an associated result set
>cubrid_schema(int $schema_type, string $table_name = ?, string $col_name = ?): array	(PDO) Get the requested schema information
Pdo\Dblib()	(new) A PDO subclass representing a connection using the DBLib PDO driver
Pdo\Firebird::getApiVersion(): int	Get the API version
Pdo\Firebird()	(new) A PDO subclass representing a connection using the Firebird PDO driver
>getWarningCount(): int	(Pdo\Mysql) Returns the number of warnings from the last executed query
Pdo\Mysql()	(new) This driver supports a dedicated SQL query parser for the MySQL dialect
Pdo\Odbc()	(new) A PDO subclass representing a connection using the ODBC PDO driver
>copyFromArray(string $tableName, array $rows, string $separator = "\t", string $nullAs = "\\\\N", string|null $fields = null): bool	(Pdo\Pgsql) Copy data from a PHP array into a table
>copyFromFile(string $tableName, string $filename, string $separator = "\t", string $nullAs = "\\\\N", string|null $fields = null): bool	(Pdo\Pgsql) Copy data from file into table
>copyToArray(string $tableName, string $separator = "\t", string $nullAs = "\\\\N", string|null $fields = null): array|false	(Pdo\Pgsql) Copy data from database table into PHP array
>copyToFile(string $tableName, string $filename, string $separator = "\t", string $nullAs = "\\\\N", string|null $fields = null): bool	(Pdo\Pgsql) Copy data from table into file
>escapeIdentifier(string $input): string	(Pdo\Pgsql) Escapes a string for use as an SQL identifier
>getNotify(int $fetchMode = PDO::FETCH_DEFAULT, int $timeoutMilliseconds = ?): array|false	(Pdo\Pgsql) Get asynchronous notification
>getPid(): int	(Pdo\Pgsql) Get the PID of the backend process handling this connection
>lobCreate(): string|false	(Pdo\Pgsql) Creates a new large object
>lobOpen(string $oid, string $mode = "rb"): resource|false	(Pdo\Pgsql) Opens an existing large object stream
>lobUnlink(string $oid): bool	(Pdo\Pgsql) Deletes the large object
>setNoticeCallback(callable|null $callback): void	(Pdo\Pgsql) Set a callback to handle notice and warning messages generated by the backend
>pgsqlCopyFromArray(string $tableName, array $rows, string $separator = "\t", string $nullAs = "\\\\N", string|null $fields = null): bool	(PDO) Alias Pdo\Pgsql::copyFromArray
>pgsqlCopyFromFile(string $tableName, string $filename, string $separator = "\t", string $nullAs = "\\\\N", string|null $fields = null): bool	(PDO) Alias Pdo\Pgsql::copyFromFile
>pgsqlCopyToArray(string $tableName, string $separator = "\t", string $nullAs = "\\\\N", string|null $fields = null): array|false	(PDO) Alias Pdo\Pgsql::copyToArray
>pgsqlCopyToFile(string $tableName, string $filename, string $separator = "\t", string $nullAs = "\\\\N", string|null $fields = null): bool	(PDO) Alias Pdo\Pgsql::copyToFile
>pgsqlGetNotify(int $fetchMode = PDO::FETCH_DEFAULT, int $timeoutMilliseconds = ?): array|false	(PDO) Alias Pdo\Pgsql::getNotify
>pgsqlGetPid(): int	(PDO) Alias Pdo\Pgsql::getPid
>pgsqlLOBCreate(): string	(PDO) Alias Pdo\Pgsql::lobCreate
>pgsqlLOBOpen(string $oid, string $mode = "rb"): resource|false	(PDO) Alias Pdo\Pgsql::lobOpen
>pgsqlLOBUnlink(string $oid): bool	(PDO) Alias Pdo\Pgsql::lobUnlink
Pdo\Pgsql()	(new) This driver supports a dedicated SQL query parser for the PostgreSQL dialect
>createAggregate(string $name, callable $step, callable $finalize, int $numArgs = -1): bool	(Pdo\Sqlite) Registers an aggregating user-defined function for use in SQL statements
>createCollation(string $name, callable $callback): bool	(Pdo\Sqlite) Registers a user-defined function for use as a collating function in SQL statements
>createFunction(string $function_name, callable $callback, int $num_args = -1, int $flags = ?): bool	(Pdo\Sqlite) Registers a user-defined function for use in SQL statements
>loadExtension(string $name): void	(Pdo\Sqlite) Description
>openBlob(string $table, string $column, int $rowid, string|null $dbname = "main", int $flags = Pdo\Sqlite::OPEN_READONLY): resource|false	(Pdo\Sqlite) Description
>sqliteCreateAggregate(string $name, callable $step, callable $finalize, int $numArgs = -1): bool	(PDO) Alias Pdo\Sqlite::createAggregate
>sqliteCreateCollation(string $name, callable $callback): bool	(PDO) Alias Pdo\Sqlite::createCollation
>sqliteCreateFunction(string $function_name, callable $callback, int $num_args = -1, int $flags = ?): bool	(PDO) Alias Pdo\Sqlite::createFunction
Pdo\Sqlite()	(new) This driver supports a dedicated SQL query parser for the SQLite dialect
pg_affected_rows(PgSql\Result $result): int	Returns number of affected records (tuples)
pg_cancel_query(PgSql\Connection $connection): bool	Cancel an asynchronous query
pg_client_encoding(PgSql\Connection|null $connection = null): string	Gets the client encoding
pg_close(PgSql\Connection|null $connection = null): true	Closes a PostgreSQL connection
pg_connect_poll(PgSql\Connection $connection): int	Poll the status of an in-progress asynchronous PostgreSQL connection attempt
pg_connect(string $connection_string, int $flags = ?): PgSql\Connection|false	Open a PostgreSQL connection
pg_connection_busy(PgSql\Connection $connection): bool	Get connection is busy or not
pg_connection_reset(PgSql\Connection $connection): bool	Reset connection (reconnect)
pg_connection_status(PgSql\Connection $connection): int	Get connection status
pg_consume_input(PgSql\Connection $connection): bool	Reads input on the connection
pg_convert(PgSql\Connection $connection, string $table_name, array $values, int $flags = ?): array|false	Convert associative array values into forms suitable for SQL statements
pg_copy_from(PgSql\Connection $connection, string $table_name, array $rows, string $separator = "\t", string $null_as = "\\\\N"): bool	Insert records into a table from an array
pg_copy_to(PgSql\Connection $connection, string $table_name, string $separator = "\t", string $null_as = "\\\\N"): array|false	Copy a table to an array
pg_dbname(PgSql\Connection|null $connection = null): string	Get the database name
pg_delete(PgSql\Connection $connection, string $table_name, array $conditions, int $flags = PGSQL_DML_EXEC): string|bool	Deletes records
pg_end_copy(PgSql\Connection|null $connection = null): bool	Sync with PostgreSQL backend
pg_escape_bytea(PgSql\Connection $connection = ?, string $data): string	Escape a string for insertion into a bytea field
pg_escape_identifier(PgSql\Connection $connection = ?, string $data): string	Escape a identifier for insertion into a text field
pg_escape_literal(PgSql\Connection $connection = ?, string $data): string	Escape a literal for insertion into a text field
pg_escape_string(PgSql\Connection $connection = ?, string $data): string	Escape a string for query
pg_execute(PgSql\Connection $connection = ?, string $stmtname, array $params): PgSql\Result|false	Sends a request to execute a prepared statement with given parameters, and waits for the result
pg_fetch_all_columns(PgSql\Result $result, int $field = ?): array	Fetches all rows in a particular result column as an array
pg_fetch_all(PgSql\Result $result, int $mode = PGSQL_ASSOC): array	Fetches all rows from a result as an array
pg_fetch_array(PgSql\Result $result, int|null $row = null, int $mode = PGSQL_BOTH): array|false	Fetch a row as an array
pg_fetch_assoc(PgSql\Result $result, int|null $row = null): array|false	Fetch a row as an associative array
pg_fetch_object(PgSql\Result $result, int|null $row = null, string $class = "stdClass", array $constructor_args = []): object|false	Fetch a row as an object
pg_fetch_result(PgSql\Result $result, string|false|null $row, mixed $field): string|false|null	Returns values from a result instance
pg_fetch_result(PgSql\Result $result, mixed $field): string|false|null	Returns values from a result instance
pg_fetch_row(PgSql\Result $result, int|null $row = null, int $mode = PGSQL_NUM): array|false	Get a row as an enumerated array
pg_field_is_null(PgSql\Result $result, string|false|null $row, mixed $field): int	Test if a field is SQL NULL
pg_field_is_null(PgSql\Result $result, mixed $field): int	Test if a field is SQL NULL
pg_field_name(PgSql\Result $result, int $field): string	Returns the name of a field
pg_field_num(PgSql\Result $result, string $field): int	Returns the field number of the named field
pg_field_prtlen(PgSql\Result $result, string|false|null $row, mixed $field_name_or_number): int	Returns the printed length
pg_field_prtlen(PgSql\Result $result, mixed $field_name_or_number): int	Returns the printed length
pg_field_size(PgSql\Result $result, int $field): int	Returns the internal storage size of the named field
pg_field_table(PgSql\Result $result, int $field, bool $oid_only = false): string|int|false	Returns the name or oid of the tables field
pg_field_type_oid(PgSql\Result $result, int $field): string|int	Returns the type ID (OID) for the corresponding field number
pg_field_type(PgSql\Result $result, int $field): string	Returns the type name for the corresponding field number
pg_flush(PgSql\Connection $connection): int|bool	Flush outbound query data on the connection
pg_free_result(PgSql\Result $result): bool	Free result memory
pg_get_notify(PgSql\Connection $connection, int $mode = PGSQL_ASSOC): array|false	Gets SQL NOTIFY message
pg_get_pid(PgSql\Connection $connection): int	Gets the backend's process ID
pg_get_result(PgSql\Connection $connection): PgSql\Result|false	Get asynchronous query result
pg_host(PgSql\Connection|null $connection = null): string	Returns the host name associated with the connection
pg_insert(PgSql\Connection $connection, string $table_name, array $values, int $flags = PGSQL_DML_EXEC): PgSql\Result|string|bool	Insert array into table
pg_last_error(PgSql\Connection|null $connection = null): string	Get the last error message string of a connection
pg_last_notice(PgSql\Connection $connection, int $mode = PGSQL_NOTICE_LAST): array|string|bool	Returns the last notice message from PostgreSQL server
pg_last_oid(PgSql\Result $result): string|int|false	Returns the last row's OID
pg_lo_close(PgSql\Lob $lob): bool	Close a large object
pg_lo_create(PgSql\Connection $connection = ?, mixed $object_id = ?): int	Create a large object
pg_lo_create(mixed $object_id): int	Create a large object
pg_lo_export(PgSql\Connection $connection = ?, int $oid, string $pathname): bool	Export a large object to file
pg_lo_import(PgSql\Connection $connection = ?, string $pathname, mixed $object_id = ?): int	Import a large object from file
pg_lo_open(PgSql\Connection $connection, int $oid, string $mode): PgSql\Lob|false	Open a large object
pg_lo_read_all(PgSql\Lob $lob): int	Reads an entire large object and send straight to browser
pg_lo_read(PgSql\Lob $lob, int $length = 8192): string|false	Read a large object
pg_lo_seek(PgSql\Lob $lob, int $offset, int $whence = SEEK_CUR): bool	Seeks position within a large object
pg_lo_tell(PgSql\Lob $lob): int	Returns current seek position a of large object
pg_lo_truncate(PgSql\Lob $lob, int $size): bool	Truncates a large object
pg_lo_unlink(PgSql\Connection $connection, int $oid): bool	Delete a large object
pg_lo_write(PgSql\Lob $lob, string $data, int|null $length = null): int|false	Write to a large object
pg_meta_data(PgSql\Connection $connection, string $table_name, bool $extended = false): array|false	Get meta data for table
pg_num_fields(PgSql\Result $result): int	Returns the number of fields in a result
pg_num_rows(PgSql\Result $result): int	Returns the number of rows in a result
pg_options(PgSql\Connection|null $connection = null): string	Get the options associated with the connection
pg_parameter_status(PgSql\Connection $connection = ?, string $param_name): string	Looks up a current parameter setting of the server
pg_pconnect(string $connection_string, int $flags = ?): PgSql\Connection|false	Open a persistent PostgreSQL connection
pg_ping(PgSql\Connection|null $connection = null): bool	Ping database connection
pg_port(PgSql\Connection|null $connection = null): string	Return the port number associated with the connection
pg_prepare(PgSql\Connection $connection = ?, string $stmtname, string $query): PgSql\Result|false	Submits a request to the server to create a prepared statement with the given parameters, and waits for completion
pg_put_line(PgSql\Connection $connection = ?, string $data): bool	Send a NULL-terminated string to PostgreSQL backend
pg_query_params(PgSql\Connection $connection = ?, string $query, array $params): PgSql\Result|false	Submits a command to the server and waits for the result, with the ability to pass parameters separately from the SQL command text
pg_query(PgSql\Connection $connection = ?, string $query): PgSql\Result|false	Execute a query
pg_result_error_field(PgSql\Result $result, int $field_code): string|false|null	Returns an individual field of an error report
pg_result_error(PgSql\Result $result): string|false	Get error message associated with result
pg_result_memory_size(PgSql\Result $result): int	Returns the amount of memory allocated for a query result
pg_result_seek(PgSql\Result $result, int $row): bool	Set internal row offset in result instance
pg_result_status(PgSql\Result $result, int $mode = PGSQL_STATUS_LONG): string|int	Get status of query result
pg_select(PgSql\Connection $connection, string $table_name, array $conditions = [], int $flags = PGSQL_DML_EXEC, int $mode = PGSQL_ASSOC): array|string|false	Select records
pg_send_execute(PgSql\Connection $connection, string $statement_name, array $params): int|bool	Sends a request to execute a prepared statement with given parameters, without waiting for the result(s)
pg_send_prepare(PgSql\Connection $connection, string $statement_name, string $query): int|bool	Sends a request to create a prepared statement with the given parameters, without waiting for completion
pg_send_query_params(PgSql\Connection $connection, string $query, array $params): int|bool	Submits a command and separate parameters to the server without waiting for the result(s)
pg_send_query(PgSql\Connection $connection, string $query): int|bool	Sends asynchronous query
pg_set_chunked_rows_size(PgSql\Connection $connection, int $size): bool	Set the query results to be retrieved in chunk mode
pg_set_client_encoding(PgSql\Connection $connection = ?, string $encoding): int	Set the client encoding
pg_set_error_context_visibility(PgSql\Connection $connection, int $visibility): int	Determines the visibility of the context's error messages returned by pg_last_error and pg_result_error
pg_set_error_verbosity(PgSql\Connection $connection = ?, int $verbosity): int	Determines the verbosity of messages returned by pg_last_error and pg_result_error
pg_socket(PgSql\Connection $connection): resource|false	Get a read only handle to the socket underlying a PostgreSQL connection
pg_trace(string $filename, string $mode = "w", PgSql\Connection|null $connection = null, int $trace_mode = ?): bool	Enable tracing a PostgreSQL connection
pg_transaction_status(PgSql\Connection $connection): int	Returns the current in-transaction status of the server
pg_tty(PgSql\Connection|null $connection = null): string	Return the TTY name associated with the connection
pg_unescape_bytea(string $string): string	Unescape binary for bytea type
pg_untrace(PgSql\Connection|null $connection = null): true	Disable tracing of a PostgreSQL connection
pg_update(PgSql\Connection $connection, string $table_name, array $values, array $conditions, int $flags = PGSQL_DML_EXEC): string|bool	Update table
pg_version(PgSql\Connection|null $connection = null): array	Returns an array with client, protocol and server version (when available)
PgSql\Connection()	(new) A fully opaque class which replaces a pgsql link resource as of PHP 8
PgSql\Lob()	(new) A fully opaque class which replaces a pgsql large object resource as of PHP 8
PgSql\Result()	(new) A fully opaque class which replaces a pgsql result resource as of PHP 8
>addEmptyDir(string $directory): void	(Phar) Add an empty directory to the phar archive
>addFile(string $filename, string|null $localName = null): void	(Phar) Add a file from the filesystem to the phar archive
>addFromString(string $localName, string $contents): void	(Phar) Add a file from a string to the phar archive
Phar::apiVersion(): string	Returns the api version
>buildFromDirectory(string $directory, string $pattern = ""): array	(Phar) Construct a phar archive from the files within a directory
>buildFromIterator(Traversable $iterator, string|null $baseDirectory = null): array	(Phar) Construct a phar archive from an iterator
Phar::canCompress(int $compression = ?): bool	Returns whether phar extension supports compression using either zlib or bzip2
Phar::canWrite(): bool	Returns whether phar extension supports writing and creating phars
>compress(int $compression, string|null $extension = null): Phar|null	(Phar) Compresses the entire Phar archive using Gzip or Bzip2 compression
>compressFiles(int $compression): void	(Phar) Compresses all files in the current Phar archive
Phar(string $filename, int $flags = FilesystemIterator::SKIP_DOTS | FilesystemIterator::UNIX_PATHS, string|null $alias = null)	(new) Construct a Phar archive object
>convertToData(int|null $format = null, int|null $compression = null, string|null $extension = null): PharData|null	(Phar) Convert a phar archive to a non-executable tar or zip file
>convertToExecutable(int|null $format = null, int|null $compression = null, string|null $extension = null): Phar|null	(Phar) Convert a phar archive to another executable phar archive file format
>copy(string $from, string $to): true	(Phar) Copy a file internal to the phar archive to another new file within the phar
>count(int $mode = COUNT_NORMAL): int	(Phar) Returns the number of entries (files) in the Phar archive
Phar::createDefaultStub(string|null $index = null, string|null $webIndex = null): string	Create a phar-file format specific stub
>decompress(string|null $extension = null): Phar|null	(Phar) Decompresses the entire Phar archive
>decompressFiles(): true	(Phar) Decompresses all files in the current Phar archive
>delMetadata(): true	(Phar) Deletes the global metadata of the phar
>delete(string $localName): true	(Phar) Delete a file within a phar archive
>__destruct()	(Phar) Destructs a Phar archive object
>extractTo(string $directory, array|string|null $files = null, bool $overwrite = false): bool	(Phar) Extract the contents of a phar archive to a directory
>getAlias(): string|null	(Phar) Get the alias for Phar
>getMetadata(array $unserializeOptions = []): mixed	(Phar) Returns phar archive meta-data
>getModified(): bool	(Phar) Return whether phar was modified
>getPath(): string	(Phar) Get the real path to the Phar archive on disk
>getSignature(): array|false	(Phar) Return MD5/SHA1/SHA256/SHA512/OpenSSL signature of a Phar archive
>getStub(): string	(Phar) Return the PHP loader or bootstrap stub of a Phar archive
Phar::getSupportedCompression(): array	Return array of supported compression algorithms
Phar::getSupportedSignatures(): array	Return array of supported signature types
>getVersion(): string	(Phar) Return version info of Phar archive
>hasMetadata(): bool	(Phar) Returns whether phar has global meta-data
Phar::interceptFileFuncs(): void	Instructs phar to intercept fopen, file_get_contents, opendir, and all of the stat-related functions
>isBuffering(): bool	(Phar) Used to determine whether Phar write operations are being buffered, or are flushing directly to disk
>isCompressed(): int|false	(Phar) Returns Phar::GZ or PHAR::BZ2 if the entire phar archive is compressed (.tar.gz/tar.bz and so on)
>isFileFormat(int $format): bool	(Phar) Returns true if the phar archive is based on the tar/phar/zip file format depending on the parameter
Phar::isValidPharFilename(string $filename, bool $executable = true): bool	Returns whether the given filename is a valid phar filename
>isWritable(): bool	(Phar) Returns true if the phar archive can be modified
Phar::loadPhar(string $filename, string|null $alias = null): bool	Loads any phar archive with an alias
Phar::mapPhar(string|null $alias = null, int $offset = ?): bool	Reads the currently executed file (a phar) and registers its manifest
Phar::mount(string $pharPath, string $externalPath): void	Mount an external path or file to a virtual location within the phar archive
Phar::mungServer(array $variables): void	Defines a list of up to 4 $_SERVER variables that should be modified for execution
>offsetExists(string $localName): bool	(Phar) Determines whether a file exists in the phar
>offsetGet(string $localName): SplFileInfo	(Phar) Gets a PharFileInfo object for a specific file
>offsetSet(string $localName, resource|string $value): void	(Phar) Set the contents of an internal file to those of an external file
>offsetUnset(string $localName): void	(Phar) Remove a file from a phar
Phar::running(bool $returnPhar = true): string	Returns the full path on disk or full phar URL to the currently executing Phar archive
>setAlias(string $alias): true	(Phar) Set the alias for the Phar archive
>setDefaultStub(string|null $index = null, string|null $webIndex = null): true	(Phar) Used to set the PHP loader or bootstrap stub of a Phar archive to the default loader
>setMetadata(mixed $metadata): void	(Phar) Sets phar archive meta-data
>setSignatureAlgorithm(int $algo, string|null $privateKey = null): void	(Phar) Set the signature algorithm for a phar and apply it
>setStub(resource|string $stub, int $length = -1): bool	(Phar) Used to set the PHP loader or bootstrap stub of a Phar archive
>startBuffering(): void	(Phar) Start buffering Phar write operations, do not modify the Phar object on disk
>stopBuffering(): void	(Phar) Stop buffering write requests to the Phar archive, and save changes to disk
Phar::unlinkArchive(string $filename): true	Completely remove a phar archive from disk and from memory
Phar::webPhar(string|null $alias = null, string|null $index = null, string|null $fileNotFoundScript = null, array $mimeTypes = [], callable|null $rewrite = null): void	Routes a request from a web browser to an internal file within the phar archive
>addEmptyDir(string $directory): void	(PharData) Add an empty directory to the tar/zip archive
>addFile(string $filename, string|null $localName = null): void	(PharData) Add a file from the filesystem to the tar/zip archive
>addFromString(string $localName, string $contents): void	(PharData) Add a file from a string to the tar/zip archive
>buildFromDirectory(string $directory, string $pattern = ""): array	(PharData) Construct a tar/zip archive from the files within a directory
>buildFromIterator(Traversable $iterator, string|null $baseDirectory = null): array	(PharData) Construct a tar or zip archive from an iterator
>compress(int $compression, string|null $extension = null): PharData|null	(PharData) Compresses the entire tar/zip archive using Gzip or Bzip2 compression
>compressFiles(int $compression): void	(PharData) Compresses all files in the current tar/zip archive
PharData(string $filename, int $flags = FilesystemIterator::SKIP_DOTS | FilesystemIterator::UNIX_PATHS, string|null $alias = null, int $format = ?)	(new) Construct a non-executable tar or zip archive object
>convertToData(int|null $format = null, int|null $compression = null, string|null $extension = null): PharData|null	(PharData) Convert a phar archive to a non-executable tar or zip file
>convertToExecutable(int|null $format = null, int|null $compression = null, string|null $extension = null): Phar|null	(PharData) Convert a non-executable tar/zip archive to an executable phar archive
>copy(string $from, string $to): true	(PharData) Copy a file internal to the tar/zip archive to another new file within the same archive
>decompress(string|null $extension = null): PharData|null	(PharData) Decompresses the entire Phar archive
>decompressFiles(): true	(PharData) Decompresses all files in the current zip archive
>delMetadata(): true	(PharData) Deletes the global metadata of a zip archive
>delete(string $localName): true	(PharData) Delete a file within a tar/zip archive
>__destruct()	(PharData) Destructs a non-executable tar or zip archive object
>extractTo(string $directory, array|string|null $files = null, bool $overwrite = false): bool	(PharData) Extract the contents of a tar/zip archive to a directory
>isWritable(): bool	(PharData) Returns true if the tar/zip archive can be modified
>offsetSet(string $localName, resource|string $value): void	(PharData) Set the contents of a file within the tar/zip to those of an external file or string
>offsetUnset(string $localName): void	(PharData) Remove a file from a tar/zip archive
>setAlias(string $alias): bool	(PharData) Dummy function (Phar::setAlias is not valid for PharData)
>setDefaultStub(string|null $index = null, string|null $webIndex = null): bool	(PharData) Dummy function (Phar::setDefaultStub is not valid for PharData)
>setMetadata(mixed $metadata): void	(PharData) Sets phar archive meta-data
>setSignatureAlgorithm(int $algo, string|null $privateKey = null): void	(PharData) Set the signature algorithm for a phar and apply it
>setStub(string $stub, int $len = -1): bool	(PharData) Dummy function (Phar::setStub is not valid for PharData)
>chmod(int $perms): void	(PharFileInfo) Sets file-specific permission bits
>compress(int $compression): true	(PharFileInfo) Compresses the current Phar entry with either zlib or bzip2 compression
PharFileInfo(string $filename)	(new) Construct a Phar entry object
>decompress(): true	(PharFileInfo) Decompresses the current Phar entry within the phar
>delMetadata(): true	(PharFileInfo) Deletes the metadata of the entry
>__destruct()	(PharFileInfo) Destructs a Phar entry object
>getCRC32(): int	(PharFileInfo) Returns CRC32 code or throws an exception if CRC has not been verified
>getCompressedSize(): int	(PharFileInfo) Returns the actual size of the file (with compression) inside the Phar archive
>getContent(): string	(PharFileInfo) Get the complete file contents of the entry
>getMetadata(array $unserializeOptions = []): mixed	(PharFileInfo) Returns file-specific meta-data saved with a file
>getPharFlags(): int	(PharFileInfo) Returns the Phar file entry flags
>hasMetadata(): bool	(PharFileInfo) Returns the metadata of the entry
>isCRCChecked(): bool	(PharFileInfo) Returns whether file entry has had its CRC verified
>isCompressed(int|null $compression = null): bool	(PharFileInfo) Returns whether the entry is compressed
>setMetadata(mixed $metadata): void	(PharFileInfo) Sets file-specific meta-data saved with a file
PharException()	(new) The PharException class provides a phar-specific exception class for try/catch blocks
phpdbg_break_file(string $file, int $line): void	Inserts a breakpoint at a line in a file
phpdbg_break_function(string $function): void	Inserts a breakpoint at entry to a function
phpdbg_break_method(string $class, string $method): void	Inserts a breakpoint at entry to a method
phpdbg_break_next(): void	Inserts a breakpoint at the next opcode
phpdbg_clear(): void	Clears all breakpoints
phpdbg_color(int $element, string $color): void	Sets the color of certain elements
phpdbg_end_oplog(array $options = []): array|null	
phpdbg_exec(string $context): string|bool	Attempts to set the execution context
phpdbg_get_executable(array $options = []): array	
phpdbg_prompt(string $string): void	Sets the command prompt
phpdbg_start_oplog(): void	
posix_access(string $filename, int $flags = ?): bool	Determine accessibility of a file
posix_ctermid(): string|false	Get path name of controlling terminal
posix_eaccess(string $filename, int $flags = ?): bool	Determine accessibility of a file
posix_errno()	Alias of posix_get_last_error
posix_fpathconf(resource|int $file_descriptor, int $name): int|false	Returns the value of a configurable limit
posix_get_last_error(): int	Retrieve the error number set by the last posix function that failed
posix_getcwd(): string|false	Pathname of current directory
posix_getegid(): int	Return the effective group ID of the current process
posix_geteuid(): int	Return the effective user ID of the current process
posix_getgid(): int	Return the real group ID of the current process
posix_getgrgid(int $group_id): array|false	Return info about a group by group id
posix_getgrnam(string $name): array|false	Return info about a group by name
posix_getgroups(): array|false	Return the group set of the current process
posix_getlogin(): string|false	Return login name
posix_getpgid(int $process_id): int|false	Get process group id for job control
posix_getpgrp(): int	Return the current process group identifier
posix_getpid(): int	Return the current process identifier
posix_getppid(): int	Return the parent process identifier
posix_getpwnam(string $username): array|false	Return info about a user by username
posix_getpwuid(int $user_id): array|false	Return info about a user by user id
posix_getrlimit(int|null $resource = null): array|false	Return info about system resource limits
posix_getsid(int $process_id): int|false	Get the current sid of the process
posix_getuid(): int	Return the real user ID of the current process
posix_initgroups(string $username, int $group_id): bool	Calculate the group access list
posix_isatty(resource|int $file_descriptor): bool	Determine if a file descriptor is an interactive terminal
posix_kill(int $process_id, int $signal): bool	Send a signal to a process
posix_mkfifo(string $filename, int $permissions): bool	Create a fifo special file (a named pipe)
posix_mknod(string $filename, int $flags, int $major = ?, int $minor = ?): bool	Create a special or ordinary file (POSIX.1)
posix_pathconf(string $path, int $name): int|false	Returns the value of a configurable limit
posix_setegid(int $group_id): bool	Set the effective GID of the current process
posix_seteuid(int $user_id): bool	Set the effective UID of the current process
posix_setgid(int $group_id): bool	Set the GID of the current process
posix_setpgid(int $process_id, int $process_group_id): bool	Set process group id for job control
posix_setrlimit(int $resource, int $soft_limit, int $hard_limit): bool	Set system resource limits
posix_setsid(): int	Make the current process a session leader
posix_setuid(int $user_id): bool	Set the UID of the current process
posix_strerror(int $error_code): string	Retrieve the system error message associated with the given errno
posix_sysconf(int $conf_id): int	Returns system runtime information
posix_times(): array|false	Get process times
posix_ttyname(resource|int $file_descriptor): string|false	Determine terminal device name
posix_uname(): array|false	Get system name
ps_add_bookmark(resource $psdoc, string $text, int $parent = ?, int $open = ?): int	Add bookmark to current page
ps_add_launchlink(resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $filename): bool	Adds link which launches file
ps_add_locallink(resource $psdoc, float $llx, float $lly, float $urx, float $ury, int $page, string $dest): bool	Adds link to a page in the same document
ps_add_note(resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $contents, string $title, string $icon, int $open): bool	Adds note to current page
ps_add_pdflink(resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $filename, int $page, string $dest): bool	Adds link to a page in a second pdf document
ps_add_weblink(resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $url): bool	Adds link to a web location
ps_arc(resource $psdoc, float $x, float $y, float $radius, float $alpha, float $beta): bool	Draws an arc counterclockwise
ps_arcn(resource $psdoc, float $x, float $y, float $radius, float $alpha, float $beta): bool	Draws an arc clockwise
ps_begin_page(resource $psdoc, float $width, float $height): bool	Start a new page
ps_begin_pattern(resource $psdoc, float $width, float $height, float $xstep, float $ystep, int $painttype): int|false	Start a new pattern
ps_begin_template(resource $psdoc, float $width, float $height): int	Start a new template
ps_circle(resource $psdoc, float $x, float $y, float $radius): bool	Draws a circle
ps_clip(resource $psdoc): bool	Clips drawing to current path
ps_close_image(resource $psdoc, int $imageid): void|false	Closes image and frees memory
ps_close(resource $psdoc): bool	Closes a PostScript document
ps_closepath_stroke(resource $psdoc): bool	Closes and strokes path
ps_closepath(resource $psdoc): bool	Closes path
ps_continue_text(resource $psdoc, string $text): bool	Continue text in next line
ps_curveto(resource $psdoc, float $x1, float $y1, float $x2, float $y2, float $x3, float $y3): bool	Draws a curve
ps_delete(resource $psdoc): bool	Deletes all resources of a PostScript document
ps_end_page(resource $psdoc): bool	End a page
ps_end_pattern(resource $psdoc): bool	End a pattern
ps_end_template(resource $psdoc): bool	End a template
ps_fill_stroke(resource $psdoc): bool	Fills and strokes the current path
ps_fill(resource $psdoc): bool	Fills the current path
ps_findfont(resource $psdoc, string $fontname, string $encoding, bool $embed = false): int	Loads a font
ps_get_buffer(resource $psdoc): string	Fetches the full buffer containig the generated PS data
ps_get_parameter(resource $psdoc, string $name, float $modifier = ?): string|false	Gets certain parameters
ps_get_value(resource $psdoc, string $name, float $modifier = ?): float	Gets certain values
ps_hyphenate(resource $psdoc, string $text): array|false	Hyphenates a word
ps_include_file(resource $psdoc, string $file): bool	Reads an external file with raw PostScript code
ps_lineto(resource $psdoc, float $x, float $y): bool	Draws a line
ps_makespotcolor(resource $psdoc, string $name, int $reserved = ?): int	Create spot color
ps_moveto(resource $psdoc, float $x, float $y): bool	Sets current point
ps_new(): resource|false	Creates a new PostScript document object
ps_open_file(resource $psdoc, string $filename = ?): bool	Opens a file for output
ps_open_image_file(resource $psdoc, string $type, string $filename, string $stringparam = ?, int $intparam = ?): int	Opens image from file
ps_open_image(resource $psdoc, string $type, string $source, string $data, int $lenght, int $width, int $height, int $components, int $bpc, string $params): int	Reads an image for later placement
ps_open_memory_image(resource $psdoc, int $gd): int	Takes an GD image and returns an image for placement in a PS document
ps_place_image(resource $psdoc, int $imageid, float $x, float $y, float $scale): bool	Places image on the page
ps_rect(resource $psdoc, float $x, float $y, float $width, float $height): bool	Draws a rectangle
ps_restore(resource $psdoc): bool	Restore previously save context
ps_rotate(resource $psdoc, float $rot): bool	Sets rotation factor
ps_save(resource $psdoc): bool	Save current context
ps_scale(resource $psdoc, float $x, float $y): bool	Sets scaling factor
ps_set_border_color(resource $psdoc, float $red, float $green, float $blue): bool	Sets color of border for annotations
ps_set_border_dash(resource $psdoc, float $black, float $white): bool	Sets length of dashes for border of annotations
ps_set_border_style(resource $psdoc, string $style, float $width): bool	Sets border style of annotations
ps_set_info(resource $p, string $key, string $val): bool	Sets information fields of document
ps_set_parameter(resource $psdoc, string $name, string $value): bool	Sets certain parameters
ps_set_text_pos(resource $psdoc, float $x, float $y): bool	Sets position for text output
ps_set_value(resource $psdoc, string $name, float $value): bool	Sets certain values
ps_setcolor(resource $psdoc, string $type, string $colorspace, float $c1, float $c2, float $c3, float $c4): bool	Sets current color
ps_setdash(resource $psdoc, float $on, float $off): bool	Sets appearance of a dashed line
ps_setflat(resource $psdoc, float $value): bool	Sets flatness
ps_setfont(resource $psdoc, int $fontid, float $size): bool	Sets font to use for following output
ps_setgray(resource $psdoc, float $gray): bool	Sets gray value
ps_setlinecap(resource $psdoc, int $type): bool	Sets appearance of line ends
ps_setlinejoin(resource $psdoc, int $type): bool	Sets how contected lines are joined
ps_setlinewidth(resource $psdoc, float $width): bool	Sets width of a line
ps_setmiterlimit(resource $psdoc, float $value): bool	Sets the miter limit
ps_setoverprintmode(resource $psdoc, int $mode): bool	Sets overprint mode
ps_setpolydash(resource $psdoc, float $arr): bool	Sets appearance of a dashed line
ps_shading_pattern(resource $psdoc, int $shadingid, string $optlist): int|false	Creates a pattern based on a shading
ps_shading(resource $psdoc, string $type, float $x0, float $y0, float $x1, float $y1, float $c1, float $c2, float $c3, float $c4, string $optlist): int|false	Creates a shading for later use
ps_shfill(resource $psdoc, int $shadingid): bool	Fills an area with a shading
ps_show_boxed(resource $psdoc, string $text, float $left, float $bottom, float $width, float $height, string $hmode, string $feature = ?): int	Output text in a box
ps_show_xy(resource $psdoc, string $text, float $x, float $y): bool	Output text at given position
ps_show_xy2(resource $psdoc, string $text, int $len, float $xcoor, float $ycoor): bool	Output text at position
ps_show(resource $psdoc, string $text): bool	Output text
ps_show2(resource $psdoc, string $text, int $len): bool	Output a text at current position
ps_string_geometry(resource $psdoc, string $text, int $fontid = ?, float $size = 0.0): array	Gets geometry of a string
ps_stringwidth(resource $psdoc, string $text, int $fontid = ?, float $size = 0.0): float	Gets width of a string
ps_stroke(resource $psdoc): bool	Draws the current path
ps_symbol_name(resource $psdoc, int $ord, int $fontid = ?): string	Gets name of a glyph
ps_symbol_width(resource $psdoc, int $ord, int $fontid = ?, float $size = 0.0): float	Gets width of a glyph
ps_symbol(resource $psdoc, int $ord): bool	Output a glyph
ps_translate(resource $psdoc, float $x, float $y): bool	Sets translation
pspell_add_to_personal(PSpell\Dictionary $dictionary, string $word): bool	Add the word to a personal wordlist
pspell_add_to_session(PSpell\Dictionary $dictionary, string $word): bool	Add the word to the wordlist in the current session
pspell_check(PSpell\Dictionary $dictionary, string $word): bool	Check a word
pspell_clear_session(PSpell\Dictionary $dictionary): bool	Clear the current session
pspell_config_create(string $language, string $spelling = "", string $jargon = "", string $encoding = ""): PSpell\Config	Create a config used to open a dictionary
pspell_config_data_dir(PSpell\Config $config, string $directory): bool	Location of language data files
pspell_config_dict_dir(PSpell\Config $config, string $directory): bool	Location of the main word list
pspell_config_ignore(PSpell\Config $config, int $min_length): bool	Ignore words less than N characters long
pspell_config_mode(PSpell\Config $config, int $mode): bool	Change the mode number of suggestions returned
pspell_config_personal(PSpell\Config $config, string $filename): bool	Set a file that contains personal wordlist
pspell_config_repl(PSpell\Config $config, string $filename): bool	Set a file that contains replacement pairs
pspell_config_runtogether(PSpell\Config $config, bool $allow): bool	Consider run-together words as valid compounds
pspell_config_save_repl(PSpell\Config $config, bool $save): bool	Determine whether to save a replacement pairs list along with the wordlist
pspell_new_config(PSpell\Config $config): PSpell\Dictionary|false	Load a new dictionary with settings based on a given config
pspell_new_personal(string $filename, string $language, string $spelling = "", string $jargon = "", string $encoding = "", int $mode = ?): PSpell\Dictionary|false	Load a new dictionary with personal wordlist
pspell_new(string $language, string $spelling = "", string $jargon = "", string $encoding = "", int $mode = ?): PSpell\Dictionary|false	Load a new dictionary
pspell_save_wordlist(PSpell\Dictionary $dictionary): bool	Save the personal wordlist to a file
pspell_store_replacement(PSpell\Dictionary $dictionary, string $misspelled, string $correct): bool	Store a replacement pair for a word
pspell_suggest(PSpell\Dictionary $dictionary, string $word): array|false	Suggest spellings of a word
PSpell\Config()	(new) A fully opaque class which replaces a pspell config resource as of PHP 8
PSpell\Dictionary()	(new) A fully opaque class which replaces a pspell resource as of PHP 8
>isGarbage(): true	(Collectable) Determine whether an object has been marked as garbage
>collect(Callable $collector = ?): int	(Pool) Collect references to completed tasks
Pool(int $size, string $class = ?, array $ctor = ?)	(new) Creates a new Pool of Workers
>resize(int $size): void	(Pool) Resize the Pool
>shutdown(): void	(Pool) Shutdown all workers
>submit(Threaded $task): int	(Pool) Submits an object for execution
>submitTo(int $worker, Threaded $task): int	(Pool) Submits a task to a specific worker for execution
>getCreatorId(): int	(Thread) Identification
Thread::getCurrentThread(): Thread	Identification
Thread::getCurrentThreadId(): int	Identification
>getThreadId(): int	(Thread) Identification
>isJoined(): bool	(Thread) State Detection
>isStarted(): bool	(Thread) State Detection
>join(): bool	(Thread) Synchronization
>start(int $options = ?): bool	(Thread) Execution
>chunk(int $size, bool $preserve): array	(Threaded) Manipulation
>count(): int	(Threaded) Manipulation
>extend(string $class): bool	(Threaded) Runtime Manipulation
>isRunning(): bool	(Threaded) State Detection
>isTerminated(): bool	(Threaded) State Detection
>merge(mixed $from, bool $overwrite = ?): bool	(Threaded) Manipulation
>notify(): bool	(Threaded) Synchronization
>notifyOne(): bool	(Threaded) Synchronization
>pop(): bool	(Threaded) Manipulation
>run(): void	(Threaded) Execution
>shift(): mixed	(Threaded) Manipulation
>synchronized(Closure $block, mixed ...$args): mixed	(Threaded) Synchronization
>wait(int $timeout = ?): bool	(Threaded) Synchronization
>collect(Callable $collector = ?): int	(Worker) Collect references to completed tasks
>getStacked(): int	(Worker) Gets the remaining stack size
>isShutdown(): bool	(Worker) State Detection
>shutdown(): bool	(Worker) Shutdown the worker
>stack(Threaded $work): int	(Worker) Stacking work
>unstack(): int	(Worker) Unstacking work
Collectable()	(new) Represents a garbage-collectable object
Thread()	(new) When the start method of a Thread is invoked, the run method code will be executed in separate Thread, in parallel
Threaded()	(new) Threaded objects form the basis of pthreads ability to execute user code in parallel; they expose synchronization methods and various useful interfaces
Volatile()	(new) The Volatile class is new to pthreads v3
Worker()	(new) Worker Threads have a persistent context, as such should be used over Threads in most cases
>add(int $key, int $value = ?): bool	(QuickHashIntHash) This method adds a new entry to the hash
QuickHashIntHash(int $size, int $options = ?)	(new) Creates a new QuickHashIntHash object
>delete(int $key): bool	(QuickHashIntHash) This method deletes an entry from the hash
>exists(int $key): bool	(QuickHashIntHash) This method checks whether a key is part of the hash
>get(int $key): int	(QuickHashIntHash) This method retrieves a value from the hash by its key
>getSize(): int	(QuickHashIntHash) Returns the number of elements in the hash
QuickHashIntHash::loadFromFile(string $filename, int $options = ?): QuickHashIntHash	This factory method creates a hash from a file
QuickHashIntHash::loadFromString(string $contents, int $options = ?): QuickHashIntHash	This factory method creates a hash from a string
>saveToFile(string $filename): void	(QuickHashIntHash) This method stores an in-memory hash to disk
>saveToString(): string	(QuickHashIntHash) This method returns a serialized version of the hash
>set(int $key, int $value): bool	(QuickHashIntHash) This method updates an entry in the hash with a new value, or adds a new one if the entry doesn't exist
>update(int $key, int $value): bool	(QuickHashIntHash) This method updates an entry in the hash with a new value
>add(int $key): bool	(QuickHashIntSet) This method adds a new entry to the set
QuickHashIntSet(int $size, int $options = ?)	(new) Creates a new QuickHashIntSet object
>delete(int $key): bool	(QuickHashIntSet) This method deletes an entry from the set
>exists(int $key): bool	(QuickHashIntSet) This method checks whether a key is part of the set
>getSize(): int	(QuickHashIntSet) Returns the number of elements in the set
QuickHashIntSet::loadFromFile(string $filename, int $size = ?, int $options = ?): QuickHashIntSet	This factory method creates a set from a file
QuickHashIntSet::loadFromString(string $contents, int $size = ?, int $options = ?): QuickHashIntSet	This factory method creates a set from a string
>saveToFile(string $filename): void	(QuickHashIntSet) This method stores an in-memory set to disk
>saveToString(): string	(QuickHashIntSet) This method returns a serialized version of the set
>add(int $key, string $value): bool	(QuickHashIntStringHash) This method adds a new entry to the hash
QuickHashIntStringHash(int $size, int $options = ?)	(new) Creates a new QuickHashIntStringHash object
>delete(int $key): bool	(QuickHashIntStringHash) This method deletes an entry from the hash
>exists(int $key): bool	(QuickHashIntStringHash) This method checks whether a key is part of the hash
>get(int $key): mixed	(QuickHashIntStringHash) This method retrieves a value from the hash by its key
>getSize(): int	(QuickHashIntStringHash) Returns the number of elements in the hash
QuickHashIntStringHash::loadFromFile(string $filename, int $size = ?, int $options = ?): QuickHashIntStringHash	This factory method creates a hash from a file
QuickHashIntStringHash::loadFromString(string $contents, int $size = ?, int $options = ?): QuickHashIntStringHash	This factory method creates a hash from a string
>saveToFile(string $filename): void	(QuickHashIntStringHash) This method stores an in-memory hash to disk
>saveToString(): string	(QuickHashIntStringHash) This method returns a serialized version of the hash
>set(int $key, string $value): int	(QuickHashIntStringHash) This method updates an entry in the hash with a new value, or adds a new one if the entry doesn't exist
>update(int $key, string $value): bool	(QuickHashIntStringHash) This method updates an entry in the hash with a new value
>add(string $key, int $value): bool	(QuickHashStringIntHash) This method adds a new entry to the hash
QuickHashStringIntHash(int $size, int $options = ?)	(new) Creates a new QuickHashStringIntHash object
>delete(string $key): bool	(QuickHashStringIntHash) This method deletes an entry from the hash
>exists(string $key): bool	(QuickHashStringIntHash) This method checks whether a key is part of the hash
>get(string $key): mixed	(QuickHashStringIntHash) This method retrieves a value from the hash by its key
>getSize(): int	(QuickHashStringIntHash) Returns the number of elements in the hash
QuickHashStringIntHash::loadFromFile(string $filename, int $size = ?, int $options = ?): QuickHashStringIntHash	This factory method creates a hash from a file
QuickHashStringIntHash::loadFromString(string $contents, int $size = ?, int $options = ?): QuickHashStringIntHash	This factory method creates a hash from a string
>saveToFile(string $filename): void	(QuickHashStringIntHash) This method stores an in-memory hash to disk
>saveToString(): string	(QuickHashStringIntHash) This method returns a serialized version of the hash
>set(string $key, int $value): int	(QuickHashStringIntHash) This method updates an entry in the hash with a new value, or adds a new one if the entry doesn't exist
>update(string $key, int $value): bool	(QuickHashStringIntHash) This method updates an entry in the hash with a new value
radius_acct_open(): resource	Creates a Radius handle for accounting
radius_add_server(resource $radius_handle, string $hostname, int $port, string $secret, int $timeout, int $max_tries): bool	Adds a server
radius_auth_open(): resource	Creates a Radius handle for authentication
radius_close(resource $radius_handle): bool	Frees all ressources
radius_config(resource $radius_handle, string $file): bool	Causes the library to read the given configuration file
radius_create_request(resource $radius_handle, int $type): bool	Create accounting or authentication request
radius_cvt_addr(string $data): string	Converts raw data to IP-Address
radius_cvt_int(string $data): int	Converts raw data to integer
radius_cvt_string(string $data): string	Converts raw data to string
radius_demangle_mppe_key(resource $radius_handle, string $mangled): string	Derives mppe-keys from mangled data
radius_demangle(resource $radius_handle, string $mangled): string	Demangles data
radius_get_attr(resource $radius_handle): mixed	Extracts an attribute
radius_get_tagged_attr_data(string $data): string|false	Extracts the data from a tagged attribute
radius_get_tagged_attr_tag(string $data): int|false	Extracts the tag from a tagged attribute
radius_get_vendor_attr(string $data): array	Extracts a vendor specific attribute
radius_put_addr(resource $radius_handle, int $type, string $addr, int $options = ?, int $tag = ?): bool	Attaches an IP address attribute
radius_put_attr(resource $radius_handle, int $type, string $value, int $options = ?, int $tag = ?): bool	Attaches a binary attribute
radius_put_int(resource $radius_handle, int $type, int $value, int $options = ?, int $tag = ?): bool	Attaches an integer attribute
radius_put_string(resource $radius_handle, int $type, string $value, int $options = ?, int $tag = ?): bool	Attaches a string attribute
radius_put_vendor_addr(resource $radius_handle, int $vendor, int $type, string $addr): bool	Attaches a vendor specific IP address attribute
radius_put_vendor_attr(resource $radius_handle, int $vendor, int $type, string $value, int $options = ?, int $tag = ?): bool	Attaches a vendor specific binary attribute
radius_put_vendor_int(resource $radius_handle, int $vendor, int $type, int $value, int $options = ?, int $tag = ?): bool	Attaches a vendor specific integer attribute
radius_put_vendor_string(resource $radius_handle, int $vendor, int $type, string $value, int $options = ?, int $tag = ?): bool	Attaches a vendor specific string attribute
radius_request_authenticator(resource $radius_handle): string	Returns the request authenticator
radius_salt_encrypt_attr(resource $radius_handle, string $data): string|false	Salt-encrypts a value
radius_send_request(resource $radius_handle): int	Sends the request and waits for a reply
radius_server_secret(resource $radius_handle): string	Returns the shared secret
radius_strerror(resource $radius_handle): string	Returns an error message
getrandmax(): int	Show largest possible random value
lcg_value(): float	Combined linear congruential generator
mt_getrandmax(): int	Show largest possible random value
mt_rand(): int	Generate a random value via the Mersenne Twister Random Number Generator
mt_rand(int $min, int $max): int	Generate a random value via the Mersenne Twister Random Number Generator
mt_srand(int|null $seed = null, int $mode = MT_RAND_MT19937): void	Seeds the Mersenne Twister Random Number Generator
rand(): int	Generate a random integer
rand(int $min, int $max): int	Generate a random integer
random_bytes(int $length): string	Get cryptographically secure random bytes
random_int(int $min, int $max): int	Get a cryptographically secure, uniformly selected integer
srand(int|null $seed = null, int $mode = MT_RAND_MT19937): void	Seed the random number generator
>generate(): string	(Random\Engine) Generates randomness
Random\Engine\Mt19937(int|null $seed = null, int $mode = MT_RAND_MT19937)	(new) Constructs a new Mt19937 engine
>__debugInfo(): array	(Random\Engine\Mt19937) Returns the internal state of the engine
>generate(): string	(Random\Engine\Mt19937) Generate 32 bits of randomness
>__serialize(): array	(Random\Engine\Mt19937) Serializes the Mt19937 object
>__unserialize(array $data): void	(Random\Engine\Mt19937) Deserializes the $data parameter into a Mt19937 object
Random\Engine\PcgOneseq128XslRr64(string|int|null $seed = null)	(new) Constructs a new PCG Oneseq 128 XSL RR 64 engine
>__debugInfo(): array	(Random\Engine\PcgOneseq128XslRr64) Returns the internal state of the engine
>generate(): string	(Random\Engine\PcgOneseq128XslRr64) Generate 64 bits of randomness
>jump(int $advance): void	(Random\Engine\PcgOneseq128XslRr64) Efficiently move the engine ahead multiple steps
>__serialize(): array	(Random\Engine\PcgOneseq128XslRr64) Serializes the PcgOneseq128XslRr64 object
>__unserialize(array $data): void	(Random\Engine\PcgOneseq128XslRr64) Deserializes the $data parameter into a PcgOneseq128XslRr64 object
>generate(): string	(Random\Engine\Secure) Generate cryptographically secure randomness
Random\Engine\Xoshiro256StarStar(string|int|null $seed = null)	(new) Constructs a new xoshiro256** engine
>__debugInfo(): array	(Random\Engine\Xoshiro256StarStar) Returns the internal state of the engine
>generate(): string	(Random\Engine\Xoshiro256StarStar) Generate 64 bits of randomness
>jump(): void	(Random\Engine\Xoshiro256StarStar) Efficiently move the engine ahead by 2^128 steps
>jumpLong(): void	(Random\Engine\Xoshiro256StarStar) Efficiently move the engine ahead by 2^192 steps
>__serialize(): array	(Random\Engine\Xoshiro256StarStar) Serializes the Xoshiro256StarStar object
>__unserialize(array $data): void	(Random\Engine\Xoshiro256StarStar) Deserializes the $data parameter into a Xoshiro256StarStar object
Random\Randomizer(Random\Engine|null $engine = null)	(new) Constructs a new Randomizer
>getBytes(int $length): string	(Random\Randomizer) Get random bytes
>getBytesFromString(string $string, int $length): string	(Random\Randomizer) Get random bytes from a source string
>getFloat(float $min, float $max, Random\IntervalBoundary $boundary = Random\IntervalBoundary::ClosedOpen): float	(Random\Randomizer) Get a uniformly selected float
>getInt(int $min, int $max): int	(Random\Randomizer) Get a uniformly selected integer
>nextFloat(): float	(Random\Randomizer) Get a float from the right-open interval [0.0, 1.0)
>nextInt(): int	(Random\Randomizer) Get a positive integer
>pickArrayKeys(array $array, int $num): array	(Random\Randomizer) Select random array keys
>__serialize(): array	(Random\Randomizer) Serializes the Randomizer object
>shuffleArray(array $array): array	(Random\Randomizer) Get a permutation of an array
>shuffleBytes(string $bytes): string	(Random\Randomizer) Get a byte-wise permutation of a string
>__unserialize(array $data): void	(Random\Randomizer) Deserializes the $data parameter into a Randomizer object
Random\BrokenRandomEngineError()	(new) Indicates that the used Random\Engine is broken, e
Random\CryptoSafeEngine()	(new) A marker interface indicating that the Random\Engine returns cryptographically secure randomness
Random\Engine\Secure()	(new) Generates cryptographically secure randomness using the operating system’s CSPRNG
Random\Engine()	(new) A Random\Engine provides a low-level source of randomness by returning random bytes that are consumed by high-level APIs to perform their operations
Random\RandomError()	(new) The base class for Errors that occur during generation or use of randomness
Random\RandomException()	(new) The base class for Exceptions that occur during generation or use of randomness
rar_wrapper_cache_stats(): string	Cache hits and misses for the URL wrapper
>close(): bool	(RarArchive) Close RAR archive and free all resources
rar_close(RarArchive $rarfile): bool	Close RAR archive and free all resources
>getComment(): string	(RarArchive) Get comment text from the RAR archive
rar_comment_get(RarArchive $rarfile): string	Get comment text from the RAR archive
>getEntries(): array|false	(RarArchive) Get full list of entries from the RAR archive
rar_list(RarArchive $rarfile): array|false	Get full list of entries from the RAR archive
>getEntry(string $entryname): RarEntry|false	(RarArchive) Get entry object from the RAR archive
rar_entry_get(RarArchive $rarfile, string $entryname): RarEntry|false	Get entry object from the RAR archive
>isBroken(): bool	(RarArchive) Test whether an archive is broken (incomplete)
rar_broken_is(RarArchive $rarfile): bool	Test whether an archive is broken (incomplete)
>isSolid(): bool	(RarArchive) Check whether the RAR archive is solid
rar_solid_is(RarArchive $rarfile): bool	Check whether the RAR archive is solid
RarArchive::open(string $filename, string $password = NULL, callable $volume_callback = NULL): RarArchive|false	Open RAR archive
rar_open(string $filename, string $password = NULL, callable $volume_callback = NULL): RarArchive|false	Open RAR archive
>setAllowBroken(bool $allow_broken): bool	(RarArchive) Whether opening broken archives is allowed
rar_allow_broken_set(RarArchive $rarfile, bool $allow_broken): bool	Whether opening broken archives is allowed
>__toString(): string	(RarArchive) Get text representation
>extract(string $dir, string $filepath = "", string $password = NULL, bool $extended_data = false): bool	(RarEntry) Extract entry from the archive
>getAttr(): int	(RarEntry) Get attributes of the entry
>getCrc(): string	(RarEntry) Get CRC of the entry
>getFileTime(): string	(RarEntry) Get entry last modification time
>getHostOs(): int	(RarEntry) Get entry host OS
>getMethod(): int	(RarEntry) Get pack method of the entry
>getName(): string	(RarEntry) Get name of the entry
>getPackedSize(): int	(RarEntry) Get packed size of the entry
>getStream(string $password = ?): resource|false	(RarEntry) Get file handler for entry
>getUnpackedSize(): int	(RarEntry) Get unpacked size of the entry
>getVersion(): int	(RarEntry) Get minimum version of RAR program required to unpack the entry
>isDirectory(): bool	(RarEntry) Test whether an entry represents a directory
>isEncrypted(): bool	(RarEntry) Test whether an entry is encrypted
>__toString(): string	(RarEntry) Get text representation of entry
RarException::isUsingExceptions(): bool	Check whether error handling with exceptions is in use
RarException::setUsingExceptions(bool $using_exceptions): void	Activate and deactivate error handling with exceptions
RarArchive()	(new) This class represents a RAR archive, which may be formed by several volumes (parts) and which contains a number of RAR entries (i
RarEntry()	(new) A RAR entry, representing a directory or a compressed file inside a RAR archive
RarException()	(new) This class serves two purposes: it is the type of the exceptions thrown by the RAR extension functions and methods and it allows, through static methods to query and define the error behaviour of the extension, i
readline_add_history(string $prompt): true	Adds a line to the history
readline_callback_handler_install(string $prompt, callable $callback): true	Initializes the readline callback interface and terminal, prints the prompt and returns immediately
readline_callback_handler_remove(): bool	Removes a previously installed callback handler and restores terminal settings
readline_callback_read_char(): void	Reads a character and informs the readline callback interface when a line is received
readline_clear_history(): true	Clears the history
readline_completion_function(callable $callback): bool	Registers a completion function
readline_info(string|null $var_name = null, int|string|bool|null $value = null): mixed	Gets/sets various internal readline variables
readline_list_history(): array	Lists the history
readline_on_new_line(): void	Inform readline that the cursor has moved to a new line
readline_read_history(string|null $filename = null): bool	Reads the history
readline_redisplay(): void	Redraws the display
readline_write_history(string|null $filename = null): bool	Writes the history
readline(string|null $prompt = null): string|false	Reads a line
recode_file(string $request, resource $input, resource $output): bool	Recode from file to file according to recode request
recode_string(string $request, string $string): string	Recode a string according to a recode request
recode()	Alias of recode_string
Reflection::export(Reflector $reflector, bool $return = false): string	Exports
Reflection::getModifierNames(int $modifiers): array	Gets modifier names
ReflectionAttribute()	(new) Private constructor to disallow direct instantiation
>getArguments(): array	(ReflectionAttribute) Gets arguments passed to attribute
>getName(): string	(ReflectionAttribute) Gets attribute name
>getTarget(): int	(ReflectionAttribute) Returns the target of the attribute as bitmask
>isRepeated(): bool	(ReflectionAttribute) Returns whether the attribute of this name has been repeated on a code element
>newInstance(): object	(ReflectionAttribute) Instantiates the attribute class represented by this ReflectionAttribute class and arguments
ReflectionClass(object|string $objectOrClass)	(new) Constructs a ReflectionClass
ReflectionClass::export(mixed $argument, bool $return = false): string	Exports a class
>getAttributes(string|null $name = null, int $flags = ?): array	(ReflectionClass) Gets Attributes
>getConstant(string $name): mixed	(ReflectionClass) Gets defined constant
>getConstants(int|null $filter = null): array	(ReflectionClass) Gets constants
>getConstructor(): ReflectionMethod|null	(ReflectionClass) Gets the constructor of the class
>getDefaultProperties(): array	(ReflectionClass) Gets default properties
>getDocComment(): string|false	(ReflectionClass) Gets doc comments
>getEndLine(): int|false	(ReflectionClass) Gets end line
>getExtension(): ReflectionExtension|null	(ReflectionClass) Gets a ReflectionExtension object for the extension which defined the class
>getExtensionName(): string|false	(ReflectionClass) Gets the name of the extension which defined the class
>getFileName(): string|false	(ReflectionClass) Gets the filename of the file in which the class has been defined
>getInterfaceNames(): array	(ReflectionClass) Gets the interface names
>getInterfaces(): array	(ReflectionClass) Gets the interfaces
>getLazyInitializer(object $object): callable|null	(ReflectionClass) Gets lazy initializer
>getMethod(string $name): ReflectionMethod	(ReflectionClass) Gets a ReflectionMethod for a class method
>getMethods(int|null $filter = null): array	(ReflectionClass) Gets an array of methods
>getModifiers(): int	(ReflectionClass) Gets the class modifiers
>getName(): string	(ReflectionClass) Gets class name
>getNamespaceName(): string	(ReflectionClass) Gets namespace name
>getParentClass(): ReflectionClass|false	(ReflectionClass) Gets parent class
>getProperties(int|null $filter = null): array	(ReflectionClass) Gets properties
>getProperty(string $name): ReflectionProperty	(ReflectionClass) Gets a ReflectionProperty for a class's property
>getReflectionConstant(string $name): ReflectionClassConstant|false	(ReflectionClass) Gets a ReflectionClassConstant for a class's constant
>getReflectionConstants(int|null $filter = null): array	(ReflectionClass) Gets class constants
>getShortName(): string	(ReflectionClass) Gets short name
>getStartLine(): int|false	(ReflectionClass) Gets starting line number
>getStaticProperties(): array	(ReflectionClass) Gets static properties
>getStaticPropertyValue(string $name, mixed $def_value = ?): mixed	(ReflectionClass) Gets static property value
>getTraitAliases(): array	(ReflectionClass) Returns an array of trait aliases
>getTraitNames(): array	(ReflectionClass) Returns an array of names of traits used by this class
>getTraits(): array	(ReflectionClass) Returns an array of traits used by this class
>hasConstant(string $name): bool	(ReflectionClass) Checks if constant is defined
>hasMethod(string $name): bool	(ReflectionClass) Checks if method is defined
>hasProperty(string $name): bool	(ReflectionClass) Checks if property is defined
>implementsInterface(ReflectionClass|string $interface): bool	(ReflectionClass) Implements interface
>initializeLazyObject(object $object): object	(ReflectionClass) Forces initialization of a lazy object
>inNamespace(): bool	(ReflectionClass) Checks if in namespace
>isAbstract(): bool	(ReflectionClass) Checks if class is abstract
>isAnonymous(): bool	(ReflectionClass) Checks if class is anonymous
>isCloneable(): bool	(ReflectionClass) Returns whether this class is cloneable
>isEnum(): bool	(ReflectionClass) Returns whether this is an enum
>isFinal(): bool	(ReflectionClass) Checks if class is final
>isInstance(object $object): bool	(ReflectionClass) Checks class for instance
>isInstantiable(): bool	(ReflectionClass) Checks if the class is instantiable
>isInterface(): bool	(ReflectionClass) Checks if the class is an interface
>isInternal(): bool	(ReflectionClass) Checks if class is defined internally by an extension, or the core
>isIterable(): bool	(ReflectionClass) Check whether this class is iterable
>isIterateable()	(ReflectionClass) Alias of ReflectionClass::isIterable
>isReadOnly(): bool	(ReflectionClass) Checks if class is readonly
>isSubclassOf(ReflectionClass|string $class): bool	(ReflectionClass) Checks if a subclass
>isTrait(): bool	(ReflectionClass) Returns whether this is a trait
>isUninitializedLazyObject(object $object): bool	(ReflectionClass) Checks if an object is lazy and uninitialized
>isUserDefined(): bool	(ReflectionClass) Checks if user defined
>markLazyObjectAsInitialized(object $object): object	(ReflectionClass) Marks a lazy object as initialized without calling the initializer or factory
>newInstance(mixed ...$args): object	(ReflectionClass) Creates a new class instance from given arguments
>newInstanceArgs(array $args = []): object|null	(ReflectionClass) Creates a new class instance from given arguments
>newInstanceWithoutConstructor(): object	(ReflectionClass) Creates a new class instance without invoking the constructor
>newLazyGhost(callable $initializer, int $options = ?): object	(ReflectionClass) Creates a new lazy ghost instance
>newLazyProxy(callable $factory, int $options = ?): object	(ReflectionClass) Creates a new lazy proxy instance
>resetAsLazyGhost(object $object, callable $initializer, int $options = ?): void	(ReflectionClass) Resets an object and marks it as lazy
>resetAsLazyProxy(object $object, callable $factory, int $options = ?): void	(ReflectionClass) Resets an object and marks it as lazy
>setStaticPropertyValue(string $name, mixed $value): void	(ReflectionClass) Sets public static property value
>__toString(): string	(ReflectionClass) Returns the string representation of the ReflectionClass object
ReflectionClassConstant(object|string $class, string $constant)	(new) Constructs a ReflectionClassConstant
ReflectionClassConstant::export(mixed $class, string $name, bool $return = ?): string	Export
>getAttributes(string|null $name = null, int $flags = ?): array	(ReflectionClassConstant) Gets Attributes
>getDeclaringClass(): ReflectionClass	(ReflectionClassConstant) Gets declaring class
>getDocComment(): string|false	(ReflectionClassConstant) Gets doc comments
>getModifiers(): int	(ReflectionClassConstant) Gets the class constant modifiers
>getName(): string	(ReflectionClassConstant) Get name of the constant
>getType(): ReflectionType|null	(ReflectionClassConstant) Gets a class constant's type
>getValue(): mixed	(ReflectionClassConstant) Gets value
>hasType(): bool	(ReflectionClassConstant) Checks if class constant has a type
>isDeprecated(): bool	(ReflectionClassConstant) Checks if deprecated
>isEnumCase(): bool	(ReflectionClassConstant) Checks if class constant is an Enum case
>isFinal(): bool	(ReflectionClassConstant) Checks if class constant is final
>isPrivate(): bool	(ReflectionClassConstant) Checks if class constant is private
>isProtected(): bool	(ReflectionClassConstant) Checks if class constant is protected
>isPublic(): bool	(ReflectionClassConstant) Checks if class constant is public
>__toString(): string	(ReflectionClassConstant) Returns the string representation of the ReflectionClassConstant object
ReflectionConstant(string $name)	(new) Constructs a ReflectionConstant
>getExtension(): ReflectionExtension|null	(ReflectionConstant) Gets ReflectionExtension of the defining extension
>getExtensionName(): string|false	(ReflectionConstant) Gets name of the defining extension
>getFileName(): string|false	(ReflectionConstant) Gets name of the defining file
>getName(): string	(ReflectionConstant) Gets name
>getNamespaceName(): string	(ReflectionConstant) Gets namespace name
>getShortName(): string	(ReflectionConstant) Gets short name
>getValue(): mixed	(ReflectionConstant) Gets value
>isDeprecated(): bool	(ReflectionConstant) Checks if deprecated
>__toString(): string	(ReflectionConstant) Returns string representation
ReflectionEnum(object|string $objectOrClass)	(new) Instantiates a ReflectionEnum object
>getBackingType(): ReflectionNamedType|null	(ReflectionEnum) Gets the backing type of an Enum, if any
>getCase(string $name): ReflectionEnumUnitCase	(ReflectionEnum) Returns a specific case of an Enum
>getCases(): array	(ReflectionEnum) Returns a list of all cases on an Enum
>hasCase(string $name): bool	(ReflectionEnum) Checks for a case on an Enum
>isBacked(): bool	(ReflectionEnum) Determines if an Enum is a Backed Enum
ReflectionEnumBackedCase(object|string $class, string $constant)	(new) Instantiates a ReflectionEnumBackedCase object
>getBackingValue(): int|string	(ReflectionEnumBackedCase) Gets the scalar value backing this Enum case
ReflectionEnumUnitCase(object|string $class, string $constant)	(new) Instantiates a ReflectionEnumUnitCase object
>getEnum(): ReflectionEnum	(ReflectionEnumUnitCase) Gets the reflection of the enum of this case
>getValue(): UnitEnum	(ReflectionEnumUnitCase) Gets the enum case object described by this reflection object
>__clone(): void	(ReflectionExtension) Clones
ReflectionExtension(string $name)	(new) Constructs a ReflectionExtension
ReflectionExtension::export(string $name, string $return = false): string	Export
>getClasses(): array	(ReflectionExtension) Gets classes
>getClassNames(): array	(ReflectionExtension) Gets class names
>getConstants(): array	(ReflectionExtension) Gets constants
>getDependencies(): array	(ReflectionExtension) Gets dependencies
>getFunctions(): array	(ReflectionExtension) Gets extension functions
>getINIEntries(): array	(ReflectionExtension) Gets extension ini entries
>getName(): string	(ReflectionExtension) Gets extension name
>getVersion(): string|null	(ReflectionExtension) Gets extension version
>info(): void	(ReflectionExtension) Print extension info
>isPersistent(): bool	(ReflectionExtension) Returns whether this extension is persistent
>isTemporary(): bool	(ReflectionExtension) Returns whether this extension is temporary
>__toString(): string	(ReflectionExtension) To string
ReflectionFiber(Fiber $fiber)	(new) Constructs a ReflectionFiber object
>getCallable(): callable	(ReflectionFiber) Gets the callable used to create the Fiber
>getExecutingFile(): string|null	(ReflectionFiber) Get the file name of the current execution point
>getExecutingLine(): int|null	(ReflectionFiber) Get the line number of the current execution point
>getFiber(): Fiber	(ReflectionFiber) Get the reflected Fiber instance
>getTrace(int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT): array	(ReflectionFiber) Get the backtrace of the current execution point
ReflectionFunction(Closure|string $function)	(new) Constructs a ReflectionFunction object
ReflectionFunction::export(string $name, string $return = ?): string	Exports function
>getClosure(): Closure	(ReflectionFunction) Returns a dynamically created closure for the function
>invoke(mixed ...$args): mixed	(ReflectionFunction) Invokes function
>invokeArgs(array $args): mixed	(ReflectionFunction) Invokes function args
>isAnonymous(): bool	(ReflectionFunction) Checks if a function is anonymous
>isDisabled(): bool	(ReflectionFunction) Checks if function is disabled
>__toString(): string	(ReflectionFunction) Returns the string representation of the ReflectionFunction object
>__clone(): void	(ReflectionFunctionAbstract) Clones function
>getAttributes(string|null $name = null, int $flags = ?): array	(ReflectionFunctionAbstract) Gets Attributes
>getClosureCalledClass(): ReflectionClass|null	(ReflectionFunctionAbstract) Returns the class corresponding to static:: inside a closure
>getClosureScopeClass(): ReflectionClass|null	(ReflectionFunctionAbstract) Returns the class corresponding to the scope inside a closure
>getClosureThis(): object|null	(ReflectionFunctionAbstract) Returns the object which corresponds to $this inside a closure
>getClosureUsedVariables(): array	(ReflectionFunctionAbstract) Returns an array of the used variables in the Closure
>getDocComment(): string|false	(ReflectionFunctionAbstract) Gets doc comment
>getEndLine(): int|false	(ReflectionFunctionAbstract) Gets end line number
>getExtension(): ReflectionExtension|null	(ReflectionFunctionAbstract) Gets extension info
>getExtensionName(): string|false	(ReflectionFunctionAbstract) Gets extension name
>getFileName(): string|false	(ReflectionFunctionAbstract) Gets file name
>getName(): string	(ReflectionFunctionAbstract) Gets function name
>getNamespaceName(): string	(ReflectionFunctionAbstract) Gets namespace name
>getNumberOfParameters(): int	(ReflectionFunctionAbstract) Gets number of parameters
>getNumberOfRequiredParameters(): int	(ReflectionFunctionAbstract) Gets number of required parameters
>getParameters(): array	(ReflectionFunctionAbstract) Gets parameters
>getReturnType(): ReflectionType|null	(ReflectionFunctionAbstract) Gets the specified return type of a function
>getShortName(): string	(ReflectionFunctionAbstract) Gets function short name
>getStartLine(): int|false	(ReflectionFunctionAbstract) Gets starting line number
>getStaticVariables(): array	(ReflectionFunctionAbstract) Gets static variables
>getTentativeReturnType(): ReflectionType|null	(ReflectionFunctionAbstract) Returns the tentative return type associated with the function
>hasReturnType(): bool	(ReflectionFunctionAbstract) Checks if the function has a specified return type
>hasTentativeReturnType(): bool	(ReflectionFunctionAbstract) Returns whether the function has a tentative return type
>inNamespace(): bool	(ReflectionFunctionAbstract) Checks if function in namespace
>isClosure(): bool	(ReflectionFunctionAbstract) Checks if closure
>isDeprecated(): bool	(ReflectionFunctionAbstract) Checks if deprecated
>isGenerator(): bool	(ReflectionFunctionAbstract) Returns whether this function is a generator
>isInternal(): bool	(ReflectionFunctionAbstract) Checks if is internal
>isStatic(): bool	(ReflectionFunctionAbstract) Checks if the function is static
>isUserDefined(): bool	(ReflectionFunctionAbstract) Checks if user defined
>isVariadic(): bool	(ReflectionFunctionAbstract) Checks if the function is variadic
>returnsReference(): bool	(ReflectionFunctionAbstract) Checks if returns reference
>__toString(): void	(ReflectionFunctionAbstract) Returns the string representation of the ReflectionFunctionAbstract object
ReflectionGenerator(Generator $generator)	(new) Constructs a ReflectionGenerator object
>getExecutingFile(): string	(ReflectionGenerator) Gets the file name of the currently executing generator
>getExecutingGenerator(): Generator	(ReflectionGenerator) Gets the executing Generator object
>getExecutingLine(): int	(ReflectionGenerator) Gets the currently executing line of the generator
>getFunction(): ReflectionFunctionAbstract	(ReflectionGenerator) Gets the function name of the generator
>getThis(): object|null	(ReflectionGenerator) Gets the $this value of the generator
>getTrace(int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT): array	(ReflectionGenerator) Gets the trace of the executing generator
>isClosed(): bool	(ReflectionGenerator) Checks if execution finished
>getTypes(): array	(ReflectionIntersectionType) Returns the types included in the intersection type
ReflectionMethod(object|string $objectOrMethod, string $method)	(new) Constructs a ReflectionMethod
ReflectionMethod(string $classMethod)	(new) Constructs a ReflectionMethod
ReflectionMethod::createFromMethodName(string $method): static	Creates a new ReflectionMethod
ReflectionMethod::export(string $class, string $name, bool $return = false): string	Export a reflection method
>getClosure(object|null $object = null): Closure	(ReflectionMethod) Returns a dynamically created closure for the method
>getDeclaringClass(): ReflectionClass	(ReflectionMethod) Gets declaring class for the reflected method
>getModifiers(): int	(ReflectionMethod) Gets the method modifiers
>getPrototype(): ReflectionMethod	(ReflectionMethod) Gets the method prototype (if there is one)
>hasPrototype(): bool	(ReflectionMethod) Returns whether a method has a prototype
>invoke(object|null $object, mixed ...$args): mixed	(ReflectionMethod) Invoke
>invokeArgs(object|null $object, array $args): mixed	(ReflectionMethod) Invoke args
>isAbstract(): bool	(ReflectionMethod) Checks if method is abstract
>isConstructor(): bool	(ReflectionMethod) Checks if method is a constructor
>isDestructor(): bool	(ReflectionMethod) Checks if method is a destructor
>isFinal(): bool	(ReflectionMethod) Checks if method is final
>isPrivate(): bool	(ReflectionMethod) Checks if method is private
>isProtected(): bool	(ReflectionMethod) Checks if method is protected
>isPublic(): bool	(ReflectionMethod) Checks if method is public
>setAccessible(bool $accessible): void	(ReflectionMethod) Set method accessibility
>__toString(): string	(ReflectionMethod) Returns the string representation of the Reflection method object
>getName(): string	(ReflectionNamedType) Get the name of the type as a string
>isBuiltin(): bool	(ReflectionNamedType) Checks if it is a built-in type
ReflectionObject(object $object)	(new) Constructs a ReflectionObject
ReflectionObject::export(string $argument, bool $return = ?): string	Export
>allowsNull(): bool	(ReflectionParameter) Checks if null is allowed
>canBePassedByValue(): bool	(ReflectionParameter) Returns whether this parameter can be passed by value
>__clone(): void	(ReflectionParameter) Clone
ReflectionParameter(string|array|object $function, int|string $param)	(new) Construct
ReflectionParameter::export(string $function, string $parameter, bool $return = ?): string	Exports
>getAttributes(string|null $name = null, int $flags = ?): array	(ReflectionParameter) Gets Attributes
>getClass(): ReflectionClass|null	(ReflectionParameter) Get a ReflectionClass object for the parameter being reflected or null
>getDeclaringClass(): ReflectionClass|null	(ReflectionParameter) Gets declaring class
>getDeclaringFunction(): ReflectionFunctionAbstract	(ReflectionParameter) Gets declaring function
>getDefaultValue(): mixed	(ReflectionParameter) Gets default parameter value
>getDefaultValueConstantName(): string|null	(ReflectionParameter) Returns the default value's constant name if default value is constant or null
>getName(): string	(ReflectionParameter) Gets parameter name
>getPosition(): int	(ReflectionParameter) Gets parameter position
>getType(): ReflectionType|null	(ReflectionParameter) Gets a parameter's type
>hasType(): bool	(ReflectionParameter) Checks if parameter has a type
>isArray(): bool	(ReflectionParameter) Checks if parameter expects an array
>isCallable(): bool	(ReflectionParameter) Returns whether parameter MUST be callable
>isDefaultValueAvailable(): bool	(ReflectionParameter) Checks if a default value is available
>isDefaultValueConstant(): bool	(ReflectionParameter) Returns whether the default value of this parameter is a constant
>isOptional(): bool	(ReflectionParameter) Checks if optional
>isPassedByReference(): bool	(ReflectionParameter) Checks if passed by reference
>isPromoted(): bool	(ReflectionParameter) Checks if a parameter is promoted to a property
>isVariadic(): bool	(ReflectionParameter) Checks if the parameter is variadic
>__toString(): string	(ReflectionParameter) To string
>__clone(): void	(ReflectionProperty) Clone
ReflectionProperty(object|string $class, string $property)	(new) Construct a ReflectionProperty object
ReflectionProperty::export(mixed $class, string $name, bool $return = ?): string	Export
>getAttributes(string|null $name = null, int $flags = ?): array	(ReflectionProperty) Gets Attributes
>getDeclaringClass(): ReflectionClass	(ReflectionProperty) Gets declaring class
>getDefaultValue(): mixed	(ReflectionProperty) Returns the default value declared for a property
>getDocComment(): string|false	(ReflectionProperty) Gets the property doc comment
>getHook(PropertyHookType $type): ReflectionMethod|null	(ReflectionProperty) Returns a reflection object for a specified hook
>getHooks(): array	(ReflectionProperty) Returns an array of all hooks on this property
>getModifiers(): int	(ReflectionProperty) Gets the property modifiers
>getName(): string	(ReflectionProperty) Gets property name
>getRawValue(object $object): mixed	(ReflectionProperty) Returns the value of a property, bypassing a get hook if defined
>getSettableType(): ReflectionType|null	(ReflectionProperty) Returns the parameter type of a setter hook
>getType(): ReflectionType|null	(ReflectionProperty) Gets a property's type
>getValue(object|null $object = null): mixed	(ReflectionProperty) Gets value
>hasDefaultValue(): bool	(ReflectionProperty) Checks if property has a default value declared
>hasHook(PropertyHookType $type): bool	(ReflectionProperty) Returns whether the property has a given hook defined
>hasHooks(): bool	(ReflectionProperty) Returns whether the property has any hooks defined
>hasType(): bool	(ReflectionProperty) Checks if property has a type
>isAbstract(): bool	(ReflectionProperty) Determines if a property is abstract
>isDefault(): bool	(ReflectionProperty) Checks if property is a default property
>isDynamic(): bool	(ReflectionProperty) Checks if property is a dynamic property
>isFinal(): bool	(ReflectionProperty) Determines if this property is final or not
>isInitialized(object|null $object = null): bool	(ReflectionProperty) Checks whether a property is initialized
>isLazy(object $object): bool	(ReflectionProperty) Checks whether a property is lazy
>isPrivate(): bool	(ReflectionProperty) Checks if property is private
>isPrivateSet(): bool	(ReflectionProperty) Checks if property is private for writing
>isPromoted(): bool	(ReflectionProperty) Checks if property is promoted
>isProtected(): bool	(ReflectionProperty) Checks if property is protected
>isProtectedSet(): bool	(ReflectionProperty) Checks whether the property is protected for writing
>isPublic(): bool	(ReflectionProperty) Checks if property is public
>isReadOnly(): bool	(ReflectionProperty) Checks if property is readonly
>isStatic(): bool	(ReflectionProperty) Checks if property is static
>isVirtual(): bool	(ReflectionProperty) Determines if a property is virtual
>setAccessible(bool $accessible): void	(ReflectionProperty) Set property accessibility
>setRawValue(object $object, mixed $value): void	(ReflectionProperty) Sets the value of a property, bypassing a set hook if defined
>setRawValueWithoutLazyInitialization(object $object, mixed $value): void	(ReflectionProperty) Set raw property value without triggering lazy initialization
>setValue(object|null $object, mixed $value): void	(ReflectionProperty) Set property value
>setValue(mixed $value): void	(ReflectionProperty) Set property value
>skipLazyInitialization(object $object): void	(ReflectionProperty) Marks property as non-lazy
>__toString(): string	(ReflectionProperty) To string
ReflectionReference()	(new) Private constructor to disallow direct instantiation
ReflectionReference::fromArrayElement(array $array, int|string $key): ReflectionReference|null	Create a ReflectionReference from an array element
>getId(): string	(ReflectionReference) Get unique ID of a reference
>allowsNull(): bool	(ReflectionType) Checks if null is allowed
>__toString(): string	(ReflectionType) To string
>getTypes(): array	(ReflectionUnionType) Returns the types included in the union type
>__clone(): void	(ReflectionZendExtension) Clone handler
ReflectionZendExtension(string $name)	(new) Constructs a ReflectionZendExtension object
ReflectionZendExtension::export(string $name, bool $return = ?): string	Export
>getAuthor(): string	(ReflectionZendExtension) Gets author
>getCopyright(): string	(ReflectionZendExtension) Gets copyright
>getName(): string	(ReflectionZendExtension) Gets name
>getURL(): string	(ReflectionZendExtension) Gets URL
>getVersion(): string	(ReflectionZendExtension) Gets version
>__toString(): string	(ReflectionZendExtension) To string handler
Reflector::export(): string	Exports
Reflection()	(new) The reflection class
ReflectionException()	(new) The ReflectionException class
ReflectionFunctionAbstract()	(new) A parent class to ReflectionFunction, read its description for details
ReflectionIntersectionType()	(new) 
ReflectionNamedType()	(new) 
ReflectionType()	(new) The ReflectionType class reports information about a function's parameter/return type or a class's property type
ReflectionUnionType()	(new) 
Reflector()	(new) Reflector is an interface implemented by all exportable Reflection classes
rnp_backend_string(): string	Return cryptographic backend library name
rnp_backend_version(): string	Return cryptographic backend library version
rnp_decrypt(RnpFFI $ffi, string $input): string|false	Decrypt PGP message
rnp_dump_packets_to_json(string $input, int $flags): string|false	Dump OpenPGP packets stream information to the JSON string
rnp_dump_packets(string $input, int $flags): string|false	Dump OpenPGP packets stream information in humand-readable format
rnp_ffi_create(string $pub_format, string $sec_format): RnpFFI|false	Create the top-level object used for interacting with the library
rnp_ffi_destroy(RnpFFI $ffi): void	Destroy the top-level object used for interacting with the library
rnp_ffi_set_pass_provider(RnpFFI $ffi, callable $password_callback): bool	Set password provider callback function
rnp_import_keys(RnpFFI $ffi, string $input, int $flags): string|false	Import keys from PHP string to the keyring and receive JSON describing new/updated keys
rnp_import_signatures(RnpFFI $ffi, string $input, int $flags): string|false	Import standalone signatures to the keyring and receive JSON describing updated keys
rnp_key_export_autocrypt(RnpFFI $ffi, string $key_fp, string $subkey_fp, string $uid, int $flags): string|false	Export minimal key for autocrypt feature (just 5 packets: key, uid, signature, encryption subkey, signature)
rnp_key_export_revocation(RnpFFI $ffi, string $key_fp, int $flags, array $options = ?): string|false	Generate and export primary key revocation signature
rnp_key_export(RnpFFI $ffi, string $key_fp, int $flags): string|false	Export a key
rnp_key_get_info(RnpFFI $ffi, string $key_fp): array|false	Get information about the key
rnp_key_remove(RnpFFI $ffi, string $key_fp, int $flags): bool	Remove a key from keyring(s)
rnp_key_revoke(RnpFFI $ffi, string $key_fp, int $flags, array $options = ?): bool	Revoke a key or subkey by generating and adding revocation signature
rnp_list_keys(RnpFFI $ffi, string $identifier_type): array|false	Enumerate all keys present in a keyring by specified identifer type
rnp_load_keys_from_path(RnpFFI $ffi, string $format, string $input_path, int $flags): bool	Load keys from specified path
rnp_load_keys(RnpFFI $ffi, string $format, string $input, int $flags): bool	Load keys from PHP string
rnp_locate_key(RnpFFI $ffi, string $identifier_type, string $identifier): string|false	Search for the key
rnp_op_encrypt(RnpFFI $ffi, string $message, array $recipient_keys_fp, array $options = ?): string|false	Encrypt message
rnp_op_generate_key(RnpFFI $ffi, string $userid, string $key_alg, string $sub_alg = ?, array $options = ?): string|false	Generate key
rnp_op_sign_cleartext(RnpFFI $ffi, string $data, array $keys_fp, array $options = ?): string|false	Perform signing operation on a textual data, return cleartext signed message
rnp_op_sign_detached(RnpFFI $ffi, string $data, array $keys_fp, array $options = ?): string|false	Perform signing operation, return detached signature(s)
rnp_op_sign(RnpFFI $ffi, string $data, array $keys_fp, array $options = ?): string|false	Perform signing operation on a binary data, return embedded signature(s)
rnp_op_verify_detached(RnpFFI $ffi, string $data, string $signature): array|false	Verify detached signatures
rnp_op_verify(RnpFFI $ffi, string $data): array|false	Verify embedded or cleartext signatures
rnp_save_keys_to_path(RnpFFI $ffi, string $format, string $output_path, int $flags): bool	Save keys to specified path
rnp_save_keys(RnpFFI $ffi, string $format, string $output, int $flags): bool	Save keys to PHP string
rnp_supported_features(string $type): string|false	Get supported features in JSON format
rnp_version_string_full(): string	Full version string of RNP library
rnp_version_string(): string	RNP library version
RnpFFI()	(new) 
rpmaddtag(int $tag): bool	Add tag retrieved in query
rpmdbinfo(string $nevr, bool $full = false): array|null	Get information from installed RPM
rpmdbsearch(string $pattern, int $rpmtag = RPMTAG_NAME, int $rpmmire = -1, bool $full = false): array|null	Search RPM packages
rpmdefine(string $text): bool	Define or change a RPM macro value
rpmexpand(string $text): string	Retrieve expanded value of a RPM macro
rpmexpandnumeric(string $text): int	Retrieve numerical value of a RPM macro
rpmgetsymlink(string $path, string $name): string|null	Get target of a symlink
rpminfo(string $path, bool $full = false, string $error = ?): array|null	Get information from a RPM file
rpmvercmp(string $evr1, string $evr2, string|null $operator = null): int|bool	RPM version comparison
rrd_create(string $filename, array $options): bool	Creates rrd database file
rrd_error(): string	Gets latest error message
rrd_fetch(string $filename, array $options): array	Fetch the data for graph as array
rrd_first(string $file, int $raaindex = ?): int	Gets the timestamp of the first sample from rrd file
rrd_graph(string $filename, array $options): array	Creates image from a data
rrd_info(string $filename): array	Gets information about rrd file
rrd_last(string $filename): int	Gets unix timestamp of the last sample
rrd_lastupdate(string $filename): array	Gets information about last updated data
rrd_restore(string $xml_file, string $rrd_file, array $options = ?): bool	Restores the RRD file from XML dump
rrd_tune(string $filename, array $options): bool	Tunes some RRD database file header options
rrd_update(string $filename, array $options): bool	Updates the RRD database
rrd_version(): string	Gets information about underlying rrdtool library
rrd_xport(array $options): array	Exports the information about RRD database
rrdc_disconnect(): void	Close any outstanding connection to rrd caching daemon
>addArchive(string $description): void	(RRDCreator) Adds RRA - archive of data values for each data source
>addDataSource(string $description): void	(RRDCreator) Adds data source definition for RRD database
RRDCreator(string $path, string $startTime = ?, int $step = ?)	(new) Creates new RRDCreator instance
>save(): bool	(RRDCreator) Saves the RRD database to a file
RRDGraph(string $path)	(new) Creates new RRDGraph instance
>save(): array	(RRDGraph) Saves the result of query into image
>saveVerbose(): array	(RRDGraph) Saves the RRD database query into image and returns the verbose information about generated graph
>setOptions(array $options): void	(RRDGraph) Sets the options for rrd graph export
RRDUpdater(string $path)	(new) Creates new RRDUpdater instance
>update(array $values, string $time = time()): bool	(RRDUpdater) Update the RRD database file
runkit7_constant_add(string $constant_name, mixed $value, int $newVisibility = ?): bool	Similar to define(), but allows defining in class definitions as well
runkit7_constant_redefine(string $constant_name, mixed $value, int $new_visibility = ?): bool	Redefine an already defined constant
runkit7_constant_remove(string $constant_name): bool	Remove/Delete an already defined constant
runkit7_function_add(string $function_name, string $argument_list, string $code, bool $return_by_reference = null, string $doc_comment = null, string $return_type = ?, bool $is_strict = ?): bool	Add a new function, similar to create_function
runkit7_function_add(string $function_name, Closure $closure, string $doc_comment = null, string $return_type = ?, bool $is_strict = ?): bool	Add a new function, similar to create_function
runkit7_function_copy(string $source_name, string $target_name): bool	Copy a function to a new function name
runkit7_function_redefine(string $function_name, string $argument_list, string $code, bool $return_by_reference = null, string $doc_comment = null, string $return_type = ?, bool $is_strict = ?): bool	Replace a function definition with a new implementation
runkit7_function_redefine(string $function_name, Closure $closure, string $doc_comment = null, string $return_type = ?, bool $is_strict = ?): bool	Replace a function definition with a new implementation
runkit7_function_remove(string $function_name): bool	Remove a function definition
runkit7_function_rename(string $source_name, string $target_name): bool	Change a function's name
runkit7_import(string $filename, int $flags = ?): bool	Process a PHP file importing function and class definitions, overwriting where appropriate
runkit7_method_add(string $class_name, string $method_name, string $argument_list, string $code, int $flags = RUNKIT7_ACC_PUBLIC, string $doc_comment = null, string $return_type = ?, bool $is_strict = ?): bool	Dynamically adds a new method to a given class
runkit7_method_add(string $class_name, string $method_name, Closure $closure, int $flags = RUNKIT7_ACC_PUBLIC, string $doc_comment = null, string $return_type = ?, bool $is_strict = ?): bool	Dynamically adds a new method to a given class
runkit7_method_copy(string $destination_class, string $destination_method_name, string $source_class, string $source_method_name = ?): bool	Copies a method from class to another
runkit7_method_redefine(string $class_name, string $method_name, string $argument_list, string $code, int $flags = RUNKIT7_ACC_PUBLIC, string $doc_comment = null, string $return_type = ?, bool $is_strict = ?): bool	Dynamically changes the code of the given method
runkit7_method_redefine(string $class_name, string $method_name, Closure $closure, int $flags = RUNKIT7_ACC_PUBLIC, string $doc_comment = null, string $return_type = ?, bool $is_strict = ?): bool	Dynamically changes the code of the given method
runkit7_method_remove(string $class_name, string $method_name): bool	Dynamically removes the given method
runkit7_method_rename(string $class_name, string $source_method_name, string $target_method_name): bool	Dynamically changes the name of the given method
runkit7_object_id(object $obj): int	Return the integer object handle for given object
runkit7_superglobals(): array	Return numerically indexed array of registered superglobals
runkit7_zval_inspect(string $value): array	Returns information about the passed in value with data types, reference counts, etc
scoutapm_get_calls(): array	Returns a list of instrumented calls that have occurred
scoutapm_list_instrumented_functions(): array	List functions scoutapm will instrument.
seaslog_get_author(): string	Get SeasLog author.
seaslog_get_version(): string	Get SeasLog version.
SeasLog::alert(string $message, array $content = ?, string $logger = ?): bool	Record alert log information
SeasLog::analyzerCount(string $level, string $log_path = ?, string $key_word = ?): mixed	Get log count by level, log_path and key_word
SeasLog::analyzerDetail(string $level, string $log_path = ?, string $key_word = ?, int $start = ?, int $limit = ?, int $order = ?): mixed	Get log detail by level, log_path, key_word, start, limit, order
SeasLog::closeLoggerStream(int $model, string $logger): bool	Manually release stream flow from logger
SeasLog()	(new) Description
SeasLog::critical(string $message, array $content = ?, string $logger = ?): bool	Record critical log information
SeasLog::debug(string $message, array $content = ?, string $logger = ?): bool	Record debug log information
>__destruct()	(SeasLog) Description
SeasLog::emergency(string $message, array $content = ?, string $logger = ?): bool	Record emergency log information
SeasLog::error(string $message, array $content = ?, string $logger = ?): bool	Record error log information
SeasLog::flushBuffer(): bool	Flush logs buffer, dump to appender file, or send to remote api with tcp/udp
Seaslog::getBasePath(): string	Get SeasLog base path.
SeasLog::getBuffer(): array	Get the logs buffer in memory as array
SeasLog::getBufferEnabled(): bool	Determin if buffer enabled
SeasLog::getDatetimeFormat(): string	Get SeasLog datetime format style
SeasLog::getLastLogger(): string	Get SeasLog last logger path
SeasLog::getRequestID(): string	Get SeasLog request_id differentiated requests
SeasLog::getRequestVariable(int $key): bool	Get SeasLog request variable
SeasLog::info(string $message, array $content = ?, string $logger = ?): bool	Record info log information
SeasLog::log(string $level, string $message = ?, array $content = ?, string $logger = ?): bool	The Common Record Log Function
SeasLog::notice(string $message, array $content = ?, string $logger = ?): bool	Record notice log information
SeasLog::setBasePath(string $base_path): bool	Set SeasLog base path
SeasLog::setDatetimeFormat(string $format): bool	Set SeasLog datetime format style
SeasLog::setLogger(string $logger): bool	Set SeasLog logger name
SeasLog::setRequestID(string $request_id): bool	Set SeasLog request_id differentiated requests
SeasLog::setRequestVariable(int $key, string $value): bool	Manually set SeasLog request variable
SeasLog::warning(string $message, array $content = ?, string $logger = ?): bool	Record warning log information
ftok(string $filename, string $project_id): int	Convert a pathname and a project identifier to a System V IPC key
msg_get_queue(int $key, int $permissions = 0666): SysvMessageQueue|false	Create or attach to a message queue
msg_queue_exists(int $key): bool	Check whether a message queue exists
msg_receive(SysvMessageQueue $queue, int $desired_message_type, int $received_message_type, int $max_message_size, mixed $message, bool $unserialize = true, int $flags = ?, int $error_code = null): bool	Receive a message from a message queue
msg_remove_queue(SysvMessageQueue $queue): bool	Destroy a message queue
msg_send(SysvMessageQueue $queue, int $message_type, string|int|float|bool $message, bool $serialize = true, bool $blocking = true, int $error_code = null): bool	Send a message to a message queue
msg_set_queue(SysvMessageQueue $queue, array $data): bool	Set information in the message queue data structure
msg_stat_queue(SysvMessageQueue $queue): array|false	Returns information from the message queue data structure
sem_acquire(SysvSemaphore $semaphore, bool $non_blocking = false): bool	Acquire a semaphore
sem_get(int $key, int $max_acquire = 1, int $permissions = 0666, bool $auto_release = true): SysvSemaphore|false	Get a semaphore id
sem_release(SysvSemaphore $semaphore): bool	Release a semaphore
sem_remove(SysvSemaphore $semaphore): bool	Remove a semaphore
shm_attach(int $key, int|null $size = null, int $permissions = 0666): SysvSharedMemory|false	Creates or open a shared memory segment
shm_detach(SysvSharedMemory $shm): bool	Disconnects from shared memory segment
shm_get_var(SysvSharedMemory $shm, int $key): mixed	Returns a variable from shared memory
shm_has_var(SysvSharedMemory $shm, int $key): bool	Check whether a specific entry exists
shm_put_var(SysvSharedMemory $shm, int $key, mixed $value): bool	Inserts or updates a variable in shared memory
shm_remove_var(SysvSharedMemory $shm, int $key): bool	Removes a variable from shared memory
shm_remove(SysvSharedMemory $shm): bool	Removes shared memory from Unix systems
SysvMessageQueue()	(new) A fully opaque class which replaces a sysvmsg queue resource as of PHP 8
SysvSemaphore()	(new) A fully opaque class which replaces a sysvsem resource as of PHP 8
SysvSharedMemory()	(new) A fully opaque class which replaces a sysvshm resource as of PHP 8
session_abort(): bool	Discard session array changes and finish session
session_cache_expire(int|null $value = null): int|false	Get and/or set current cache expire
session_cache_limiter(string|null $value = null): string|false	Get and/or set the current cache limiter
session_commit()	Alias of session_write_close
session_create_id(string $prefix = ""): string|false	Create new session id
session_decode(string $data): bool	Decodes session data from a session encoded string
session_destroy(): bool	Destroys all data registered to a session
session_encode(): string|false	Encodes the current session data as a session encoded string
session_gc(): int|false	Perform session data garbage collection
session_get_cookie_params(): array	Get the session cookie parameters
session_id(string|null $id = null): string|false	Get and/or set the current session id
session_module_name(string|null $module = null): string|false	Get and/or set the current session module
session_name(string|null $name = null): string|false	Get and/or set the current session name
session_regenerate_id(bool $delete_old_session = false): bool	Update the current session id with a newly generated one
session_register_shutdown(): void	Session shutdown function
session_reset(): bool	Re-initialize session array with original values
session_save_path(string|null $path = null): string|false	Get and/or set the current session save path
session_set_cookie_params(int $lifetime_or_options, string|null $path = null, string|null $domain = null, bool|null $secure = null, bool|null $httponly = null): bool	Set the session cookie parameters
session_set_cookie_params(array $lifetime_or_options): bool	Set the session cookie parameters
session_set_save_handler(callable $open, callable $close, callable $read, callable $write, callable $destroy, callable $gc, callable $create_sid = ?, callable $validate_sid = ?, callable $update_timestamp = ?): bool	Sets user-level session storage functions
session_set_save_handler(object $sessionhandler, bool $register_shutdown = true): bool	Sets user-level session storage functions
session_start(array $options = []): bool	Start new or resume existing session
session_status(): int	Returns the current session status
session_unset(): bool	Free all session variables
session_write_close(): bool	Write session data and end session
>close(): bool	(SessionHandler) Close the session
>create_sid(): string	(SessionHandler) Return a new session ID
>destroy(string $id): bool	(SessionHandler) Destroy a session
>gc(int $max_lifetime): int|false	(SessionHandler) Cleanup old sessions
>open(string $path, string $name): bool	(SessionHandler) Initialize session
>read(string $id): string|false	(SessionHandler) Read session data
>write(string $id, string $data): bool	(SessionHandler) Write session data
>close(): bool	(SessionHandlerInterface) Close the session
>destroy(string $id): bool	(SessionHandlerInterface) Destroy a session
>gc(int $max_lifetime): int|false	(SessionHandlerInterface) Cleanup old sessions
>open(string $path, string $name): bool	(SessionHandlerInterface) Initialize session
>read(string $id): string|false	(SessionHandlerInterface) Read session data
>write(string $id, string $data): bool	(SessionHandlerInterface) Write session data
>create_sid(): string	(SessionIdInterface) Create session ID
>updateTimestamp(string $id, string $data): bool	(SessionUpdateTimestampHandlerInterface) Update timestamp
>validateId(string $id): bool	(SessionUpdateTimestampHandlerInterface) Validate ID
SessionHandler()	(new) SessionHandler is a special class that can be used to expose the current internal PHP session save handler by inheritance
SessionHandlerInterface()	(new) SessionHandlerInterface is an interface which defines the minimal prototype for creating a custom session handler
SessionIdInterface()	(new) SessionIdInterface is an interface which defines optional methods for creating a custom session handler
SessionUpdateTimestampHandlerInterface()	(new) SessionUpdateTimestampHandlerInterface is an interface which defines optional methods for creating a custom session handler
shmop_close(Shmop $shmop): void	Close shared memory block
shmop_delete(Shmop $shmop): bool	Delete shared memory block
shmop_open(int $key, string $mode, int $permissions, int $size): Shmop|false	Create or open shared memory block
shmop_read(Shmop $shmop, int $offset, int $size): string	Read data from shared memory block
shmop_size(Shmop $shmop): int	Get size of shared memory block
shmop_write(Shmop $shmop, string $data, int $offset): int	Write data into shared memory block
Shmop()	(new) A fully opaque class which replaces shmop resources as of PHP 8
simdjson_decode(string $json, bool $associative = false, int $depth = 512): mixed	Decodes a JSON string
simdjson_is_valid(string $json, int $depth = 512): bool	Check if a JSON string is valid
simdjson_key_count(string $json, string $key, int $depth = 512, bool $throw_if_uncountable = false): int	Returns the value at a JSON pointer.
simdjson_key_exists(string $json, string $key, int $depth = ?): bool	Check if the JSON contains the value referred to by a JSON pointer.
simdjson_key_value(string $json, string $key, bool $associative = false, int $depth = 512): mixed	Decodes the value of a JSON string located at the requested JSON pointer.
SimdJsonException()	(new) Exception thrown if simdjson_decode, simdjson_key_count, simdjson_key_exists, or simdjson_key_value
SimdJsonValueError()	(new) A SimdJsonValueError is thrown when the type of an argument to a function from simdjson is correct but the value of it is incorrect
simplexml_import_dom(object $node, string|null $class_name = SimpleXMLElement::class): SimpleXMLElement|null	Get a SimpleXMLElement object from an XML or HTML node
simplexml_load_file(string $filename, string|null $class_name = SimpleXMLElement::class, int $options = ?, string $namespace_or_prefix = "", bool $is_prefix = false): SimpleXMLElement|false	Interprets an XML file into an object
simplexml_load_string(string $data, string|null $class_name = SimpleXMLElement::class, int $options = ?, string $namespace_or_prefix = "", bool $is_prefix = false): SimpleXMLElement|false	Interprets a string of XML into an object
>addAttribute(string $qualifiedName, string $value, string|null $namespace = null): void	(SimpleXMLElement) Adds an attribute to the SimpleXML element
>addChild(string $qualifiedName, string|null $value = null, string|null $namespace = null): SimpleXMLElement|null	(SimpleXMLElement) Adds a child element to the XML node
>asXML(string|null $filename = null): string|bool	(SimpleXMLElement) Return a well-formed XML string based on SimpleXML element
>attributes(string|null $namespaceOrPrefix = null, bool $isPrefix = false): SimpleXMLElement|null	(SimpleXMLElement) Identifies an element's attributes
>children(string|null $namespaceOrPrefix = null, bool $isPrefix = false): SimpleXMLElement|null	(SimpleXMLElement) Finds children of given node
SimpleXMLElement(string $data, int $options = ?, bool $dataIsURL = false, string $namespaceOrPrefix = "", bool $isPrefix = false)	(new) Creates a new SimpleXMLElement object
>count(): int	(SimpleXMLElement) Counts the children of an element
>current(): SimpleXMLElement	(SimpleXMLElement) Returns the current element
>getDocNamespaces(bool $recursive = false, bool $fromRoot = true): array|false	(SimpleXMLElement) Returns namespaces declared in document
>getName(): string	(SimpleXMLElement) Gets the name of the XML element
>getNamespaces(bool $recursive = false): array	(SimpleXMLElement) Returns namespaces used in document
>getChildren(): SimpleXMLElement|null	(SimpleXMLElement) Returns the sub-elements of the current element
>hasChildren(): bool	(SimpleXMLElement) Checks whether the current element has sub elements
>key(): string	(SimpleXMLElement) Return current key
>next(): void	(SimpleXMLElement) Move to next element
>registerXPathNamespace(string $prefix, string $namespace): bool	(SimpleXMLElement) Creates a prefix/ns context for the next XPath query
>rewind(): void	(SimpleXMLElement) Rewind to the first element
>saveXML()	(SimpleXMLElement) Alias of SimpleXMLElement::asXML
>__toString(): string	(SimpleXMLElement) Returns the string content
>valid(): bool	(SimpleXMLElement) Check whether the current element is valid
>xpath(string $expression): array|null|false	(SimpleXMLElement) Runs XPath query on XML data
SimpleXMLIterator()	(new) The SimpleXMLIterator provides recursive iteration over all nodes of a SimpleXMLElement object
snmp_get_quick_print(): bool	Fetches the current value of the NET-SNMP library's quick_print setting
snmp_get_valueretrieval(): int	Return the method how the SNMP values will be returned
snmp_read_mib(string $filename): bool	Reads and parses a MIB file into the active MIB tree
snmp_set_enum_print(bool $enable): true	Return all values that are enums with their enum value instead of the raw integer
snmp_set_oid_numeric_print()	Alias of snmp_set_oid_output_format
snmp_set_oid_output_format(int $format): true	Set the OID output format
snmp_set_quick_print(bool $enable): true	Set the value of $enable within the NET-SNMP library
snmp_set_valueretrieval(int $method): true	Specify the method how the SNMP values will be returned
snmp2_get(string $hostname, string $community, array|string $object_id, int $timeout = -1, int $retries = -1): mixed	Fetch an SNMP object
snmp2_getnext(string $hostname, string $community, array|string $object_id, int $timeout = -1, int $retries = -1): mixed	Fetch the SNMP object which follows the given object id
snmp2_real_walk(string $hostname, string $community, array|string $object_id, int $timeout = -1, int $retries = -1): array|false	Return all objects including their respective object ID within the specified one
snmp2_set(string $hostname, string $community, array|string $object_id, array|string $type, array|string $value, int $timeout = -1, int $retries = -1): bool	Set the value of an SNMP object
snmp2_walk(string $hostname, string $community, array|string $object_id, int $timeout = -1, int $retries = -1): array|false	Fetch all the SNMP objects from an agent
snmp3_get(string $hostname, string $security_name, string $security_level, string $auth_protocol, string $auth_passphrase, string $privacy_protocol, string $privacy_passphrase, array|string $object_id, int $timeout = -1, int $retries = -1): mixed	Fetch an SNMP object
snmp3_getnext(string $hostname, string $security_name, string $security_level, string $auth_protocol, string $auth_passphrase, string $privacy_protocol, string $privacy_passphrase, array|string $object_id, int $timeout = -1, int $retries = -1): mixed	Fetch the SNMP object which follows the given object id
snmp3_real_walk(string $hostname, string $security_name, string $security_level, string $auth_protocol, string $auth_passphrase, string $privacy_protocol, string $privacy_passphrase, array|string $object_id, int $timeout = -1, int $retries = -1): array|false	Return all objects including their respective object ID within the specified one
snmp3_set(string $hostname, string $security_name, string $security_level, string $auth_protocol, string $auth_passphrase, string $privacy_protocol, string $privacy_passphrase, array|string $object_id, array|string $type, array|string $value, int $timeout = -1, int $retries = -1): bool	Set the value of an SNMP object
snmp3_walk(string $hostname, string $security_name, string $security_level, string $auth_protocol, string $auth_passphrase, string $privacy_protocol, string $privacy_passphrase, array|string $object_id, int $timeout = -1, int $retries = -1): array|false	Fetch all the SNMP objects from an agent
snmpget(string $hostname, string $community, array|string $object_id, int $timeout = -1, int $retries = -1): mixed	Fetch an SNMP object
snmpgetnext(string $hostname, string $community, array|string $object_id, int $timeout = -1, int $retries = -1): mixed	Fetch the SNMP object which follows the given object id
snmprealwalk(string $hostname, string $community, array|string $object_id, int $timeout = -1, int $retries = -1): array|false	Return all objects including their respective object ID within the specified one
snmpset(string $hostname, string $community, array|string $object_id, array|string $type, array|string $value, int $timeout = -1, int $retries = -1): bool	Set the value of an SNMP object
snmpwalk(string $hostname, string $community, array|string $object_id, int $timeout = -1, int $retries = -1): array|false	Fetch all the SNMP objects from an agent
snmpwalkoid(string $hostname, string $community, array|string $object_id, int $timeout = -1, int $retries = -1): array|false	Query for a tree of information about a network entity
>close(): bool	(SNMP) Close SNMP session
SNMP(int $version, string $hostname, string $community, int $timeout = -1, int $retries = -1)	(new) Creates SNMP instance representing session to remote SNMP agent
>get(array|string $objectId, bool $preserveKeys = false): mixed	(SNMP) Fetch an SNMP object
>getErrno(): int	(SNMP) Get last error code
>getError(): string	(SNMP) Get last error message
>getnext(array|string $objectId): mixed	(SNMP) Fetch an SNMP object which follows the given object id
>set(array|string $objectId, array|string $type, array|string $value): bool	(SNMP) Set the value of an SNMP object
>setSecurity(string $securityLevel, string $authProtocol = "", string $authPassphrase = "", string $privacyProtocol = "", string $privacyPassphrase = "", string $contextName = "", string $contextEngineId = ""): bool	(SNMP) Configures security-related SNMPv3 session parameters
>walk(array|string $objectId, bool $suffixAsKey = false, int $maxRepetitions = -1, int $nonRepeaters = -1): array|false	(SNMP) Fetch SNMP object subtree
SNMPException()	(new) Represents an error raised by SNMP
is_soap_fault(mixed $object): bool	Checks if a SOAP call has failed
use_soap_error_handler(bool $enable = true): bool	Set whether to use the SOAP error handler
>__call(string $name, array $args): mixed	(SoapClient) Calls a SOAP function (deprecated)
SoapClient(string|null $wsdl, array $options = [])	(new) SoapClient constructor
>__doRequest(string $request, string $location, string $action, int $version, bool $oneWay = false): string|null	(SoapClient) Performs a SOAP request
>__getCookies(): array	(SoapClient) Get list of cookies
>__getFunctions(): array|null	(SoapClient) Returns list of available SOAP functions
>__getLastRequest(): string|null	(SoapClient) Returns last SOAP request
>__getLastRequestHeaders(): string|null	(SoapClient) Returns the SOAP headers from the last request
>__getLastResponse(): string|null	(SoapClient) Returns last SOAP response
>__getLastResponseHeaders(): string|null	(SoapClient) Returns the SOAP headers from the last response
>__getTypes(): array|null	(SoapClient) Returns a list of SOAP types
>__setCookie(string $name, string|null $value = null): void	(SoapClient) Defines a cookie for SOAP requests
>__setLocation(string|null $location = null): string|null	(SoapClient) Sets the location of the Web service to use
>__setSoapHeaders(SoapHeader|array|null $headers = null): bool	(SoapClient) Sets SOAP headers for subsequent calls
>__soapCall(string $name, array $args, array|null $options = null, SoapHeader|array|null $inputHeaders = null, array $outputHeaders = null): mixed	(SoapClient) Calls a SOAP function
SoapFault(array|string|null $code, string $string, string|null $actor = null, mixed $details = null, string|null $name = null, mixed $headerFault = null)	(new) SoapFault constructor
>__toString(): string	(SoapFault) Obtain a string representation of a SoapFault
SoapHeader(string $namespace, string $name, mixed $data = ?, bool $mustunderstand = ?, string $actor = ?)	(new) SoapHeader constructor
SoapParam(mixed $data, string $name)	(new) SoapParam constructor
>addFunction(array|string|int $functions): void	(SoapServer) Adds one or more functions to handle SOAP requests
>addSoapHeader(SoapHeader $header): void	(SoapServer) Add a SOAP header to the response
SoapServer(string|null $wsdl, array $options = [])	(new) SoapServer constructor
>fault(string $code, string $string, string $actor = "", mixed $details = null, string $name = ""): void	(SoapServer) Issue SoapServer fault indicating an error
>getFunctions(): array	(SoapServer) Returns list of defined functions
>__getLastResponse(): string|null	(SoapServer) Returns last SOAP response
>handle(string|null $request = null): void	(SoapServer) Handles a SOAP request
>setClass(string $class, mixed ...$args): void	(SoapServer) Sets the class which handles SOAP requests
>setObject(object $object): void	(SoapServer) Sets the object which will be used to handle SOAP requests
>setPersistence(int $mode): void	(SoapServer) Sets SoapServer persistence mode
SoapVar(mixed $data, int|null $encoding, string|null $typeName = null, string|null $typeNamespace = null, string|null $nodeName = null, string|null $nodeNamespace = null)	(new) SoapVar constructor
socket_accept(Socket $socket): Socket|false	Accepts a connection on a socket
socket_addrinfo_bind(AddressInfo $address): Socket|false	Create and bind to a socket from a given addrinfo
socket_addrinfo_connect(AddressInfo $address): Socket|false	Create and connect to a socket from a given addrinfo
socket_addrinfo_explain(AddressInfo $address): array	Get information about addrinfo
socket_addrinfo_lookup(string $host, string|null $service = null, array $hints = []): array|false	Get array with contents of getaddrinfo about the given hostname
socket_atmark(Socket $socket): bool	Determines whether socket is at out-of-band mark
socket_bind(Socket $socket, string $address, int $port = ?): bool	Binds a name to a socket
socket_clear_error(Socket|null $socket = null): void	Clears the error on the socket or the last error code
socket_close(Socket $socket): void	Closes a Socket instance
socket_cmsg_space(int $level, int $type, int $num = ?): int|null	Calculate message buffer size
socket_connect(Socket $socket, string $address, int|null $port = null): bool	Initiates a connection on a socket
socket_create_listen(int $port, int $backlog = SOMAXCONN): Socket|false	Opens a socket on port to accept connections
socket_create_pair(int $domain, int $type, int $protocol, array $pair): bool	Creates a pair of indistinguishable sockets and stores them in an array
socket_create(int $domain, int $type, int $protocol): Socket|false	Create a socket (endpoint for communication)
socket_export_stream(Socket $socket): resource|false	Export a socket into a stream that encapsulates a socket
socket_get_option(Socket $socket, int $level, int $option): array|int|false	Gets socket options for the socket
socket_getopt()	Alias of socket_get_option
socket_getpeername(Socket $socket, string $address, int $port = null): bool	Queries the remote side of the given socket
socket_getsockname(Socket $socket, string $address, int $port = null): bool	Queries the local side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type
socket_import_stream(resource $stream): Socket|false	Import a stream
socket_last_error(Socket|null $socket = null): int	Returns the last error on the socket
socket_listen(Socket $socket, int $backlog = ?): bool	Listens for a connection on a socket
socket_read(Socket $socket, int $length, int $mode = PHP_BINARY_READ): string|false	Reads a maximum of length bytes from a socket
socket_recv(Socket $socket, string|null $data, int $length, int $flags): int|false	Receives data from a connected socket
socket_recvfrom(Socket $socket, string $data, int $length, int $flags, string $address, int $port = null): int|false	Receives data from a socket whether or not it is connection-oriented
socket_recvmsg(Socket $socket, array $message, int $flags = ?): int|false	Read a message
socket_select(array|null $read, array|null $write, array|null $except, int|null $seconds, int $microseconds = ?): int|false	Runs the select() system call on the given arrays of sockets with a specified timeout
socket_send(Socket $socket, string $data, int $length, int $flags): int|false	Sends data to a connected socket
socket_sendmsg(Socket $socket, array $message, int $flags = ?): int|false	Send a message
socket_sendto(Socket $socket, string $data, int $length, int $flags, string $address, int|null $port = null): int|false	Sends a message to a socket, whether it is connected or not
socket_set_block(Socket $socket): bool	Sets blocking mode on a socket
socket_set_nonblock(Socket $socket): bool	Sets nonblocking mode for file descriptor fd
socket_set_option(Socket $socket, int $level, int $option, array|string|int $value): bool	Sets socket options for the socket
socket_setopt()	Alias of socket_set_option
socket_shutdown(Socket $socket, int $mode = 2): bool	Shuts down a socket for receiving, sending, or both
socket_strerror(int $error_code): string	Return a string describing a socket error
socket_write(Socket $socket, string $data, int|null $length = null): int|false	Write to a socket
socket_wsaprotocol_info_export(Socket $socket, int $process_id): string|false	Exports the WSAPROTOCOL_INFO Structure
socket_wsaprotocol_info_import(string $info_id): Socket|false	Imports a Socket from another Process
socket_wsaprotocol_info_release(string $info_id): bool	Releases an exported WSAPROTOCOL_INFO Structure
AddressInfo()	(new) A fully opaque class which replaces AddressInfo resources as of PHP 8
Socket()	(new) A fully opaque class which replaces Socket resources as of PHP 8
sodium_add(string $string1, string $string2): void	Add large numbers
sodium_base642bin(string $string, int $id, string $ignore = ""): string	Decodes a base64-encoded string into raw binary.
sodium_bin2base64(string $string, int $id): string	Encodes a raw binary string with base64.
sodium_bin2hex(string $string): string	Encode to hexadecimal
sodium_compare(string $string1, string $string2): int	Compare large numbers
sodium_crypto_aead_aegis128l_decrypt(string $ciphertext, string $additional_data, string $nonce, string $key): string|false	Verify then decrypt a message with AEGIS-128L
sodium_crypto_aead_aegis128l_encrypt(string $message, string $additional_data, string $nonce, string $key): string	Encrypt then authenticate a message with AEGIS-128L
sodium_crypto_aead_aegis128l_keygen(): string	Generate a random AEGIS-128L key
sodium_crypto_aead_aegis256_decrypt(string $ciphertext, string $additional_data, string $nonce, string $key): string|false	Verify then decrypt a message with AEGIS-256
sodium_crypto_aead_aegis256_encrypt(string $message, string $additional_data, string $nonce, string $key): string	Encrypt then authenticate a message with AEGIS-256
sodium_crypto_aead_aegis256_keygen(): string	Generate a random AEGIS-256 key
sodium_crypto_aead_aes256gcm_decrypt(string $ciphertext, string $additional_data, string $nonce, string $key): string|false	Verify then decrypt a message with AES-256-GCM
sodium_crypto_aead_aes256gcm_encrypt(string $message, string $additional_data, string $nonce, string $key): string	Encrypt then authenticate with AES-256-GCM
sodium_crypto_aead_aes256gcm_is_available(): bool	Check if hardware supports AES256-GCM
sodium_crypto_aead_aes256gcm_keygen(): string	Generate a random AES-256-GCM key
sodium_crypto_aead_chacha20poly1305_decrypt(string $ciphertext, string $additional_data, string $nonce, string $key): string|false	Verify then decrypt with ChaCha20-Poly1305
sodium_crypto_aead_chacha20poly1305_encrypt(string $message, string $additional_data, string $nonce, string $key): string	Encrypt then authenticate with ChaCha20-Poly1305
sodium_crypto_aead_chacha20poly1305_ietf_decrypt(string $ciphertext, string $additional_data, string $nonce, string $key): string|false	Verify that the ciphertext includes a valid tag
sodium_crypto_aead_chacha20poly1305_ietf_encrypt(string $message, string $additional_data, string $nonce, string $key): string	Encrypt a message
sodium_crypto_aead_chacha20poly1305_ietf_keygen(): string	Generate a random ChaCha20-Poly1305 (IETF) key.
sodium_crypto_aead_chacha20poly1305_keygen(): string	Generate a random ChaCha20-Poly1305 key.
sodium_crypto_aead_xchacha20poly1305_ietf_decrypt(string $ciphertext, string $additional_data, string $nonce, string $key): string|false	(Preferred) Verify then decrypt with XChaCha20-Poly1305
sodium_crypto_aead_xchacha20poly1305_ietf_encrypt(string $message, string $additional_data, string $nonce, string $key): string	(Preferred) Encrypt then authenticate with XChaCha20-Poly1305
sodium_crypto_aead_xchacha20poly1305_ietf_keygen(): string	Generate a random XChaCha20-Poly1305 key.
sodium_crypto_auth_keygen(): string	Generate a random key for sodium_crypto_auth
sodium_crypto_auth_verify(string $mac, string $message, string $key): bool	Verifies that the tag is valid for the message
sodium_crypto_auth(string $message, string $key): string	Compute a tag for the message
sodium_crypto_box_keypair_from_secretkey_and_publickey(string $secret_key, string $public_key): string	Create a unified keypair string from a secret key and public key
sodium_crypto_box_keypair(): string	Randomly generate a secret key and a corresponding public key
sodium_crypto_box_open(string $ciphertext, string $nonce, string $key_pair): string|false	Authenticated public-key decryption
sodium_crypto_box_publickey_from_secretkey(string $secret_key): string	Calculate the public key from a secret key
sodium_crypto_box_publickey(string $key_pair): string	Extract the public key from a crypto_box keypair
sodium_crypto_box_seal_open(string $ciphertext, string $key_pair): string|false	Anonymous public-key decryption
sodium_crypto_box_seal(string $message, string $public_key): string	Anonymous public-key encryption
sodium_crypto_box_secretkey(string $key_pair): string	Extracts the secret key from a crypto_box keypair
sodium_crypto_box_seed_keypair(string $seed): string	Deterministically derive the key pair from a single key
sodium_crypto_box(string $message, string $nonce, string $key_pair): string	Authenticated public-key encryption
sodium_crypto_core_ristretto255_add(string $p, string $q): string	Adds an element
sodium_crypto_core_ristretto255_from_hash(string $s): string	Maps a vector
sodium_crypto_core_ristretto255_is_valid_point(string $s): bool	Determines if a point on the ristretto255 curve
sodium_crypto_core_ristretto255_random(): string	Generates a random key
sodium_crypto_core_ristretto255_scalar_add(string $x, string $y): string	Adds a scalar value
sodium_crypto_core_ristretto255_scalar_complement(string $s): string	The sodium_crypto_core_ristretto255_scalar_complement purpose
sodium_crypto_core_ristretto255_scalar_invert(string $s): string	Inverts a scalar value
sodium_crypto_core_ristretto255_scalar_mul(string $x, string $y): string	Multiplies a scalar value
sodium_crypto_core_ristretto255_scalar_negate(string $s): string	Negates a scalar value
sodium_crypto_core_ristretto255_scalar_random(): string	Generates a random key
sodium_crypto_core_ristretto255_scalar_reduce(string $s): string	Reduces a scalar value
sodium_crypto_core_ristretto255_scalar_sub(string $x, string $y): string	Subtracts a scalar value
sodium_crypto_core_ristretto255_sub(string $p, string $q): string	Subtracts an element
sodium_crypto_generichash_final(string $state, int $length = SODIUM_CRYPTO_GENERICHASH_BYTES): string	Complete the hash
sodium_crypto_generichash_init(string $key = "", int $length = SODIUM_CRYPTO_GENERICHASH_BYTES): string	Initialize a hash for streaming
sodium_crypto_generichash_keygen(): string	Generate a random generichash key
sodium_crypto_generichash_update(string $state, string $message): true	Add message to a hash
sodium_crypto_generichash(string $message, string $key = "", int $length = SODIUM_CRYPTO_GENERICHASH_BYTES): string	Get a hash of the message
sodium_crypto_kdf_derive_from_key(int $subkey_length, int $subkey_id, string $context, string $key): string	Derive a subkey
sodium_crypto_kdf_keygen(): string	Generate a random root key for the KDF interface
sodium_crypto_kx_client_session_keys(string $client_key_pair, string $server_key): array	Calculate the client-side session keys.
sodium_crypto_kx_keypair(): string	Creates a new sodium keypair
sodium_crypto_kx_publickey(string $key_pair): string	Extract the public key from a crypto_kx keypair
sodium_crypto_kx_secretkey(string $key_pair): string	Extract the secret key from a crypto_kx keypair.
sodium_crypto_kx_seed_keypair(string $seed): string	Description
sodium_crypto_kx_server_session_keys(string $server_key_pair, string $client_key): array	Calculate the server-side session keys.
sodium_crypto_pwhash_scryptsalsa208sha256_str_verify(string $hash, string $password): bool	Verify that the password is a valid password verification string
sodium_crypto_pwhash_scryptsalsa208sha256_str(string $password, int $opslimit, int $memlimit): string	Get an ASCII encoded hash
sodium_crypto_pwhash_scryptsalsa208sha256(int $length, string $password, string $salt, int $opslimit, int $memlimit): string	Derives a key from a password, using scrypt
sodium_crypto_pwhash_str_needs_rehash(string $password, int $opslimit, int $memlimit): bool	Determine whether or not to rehash a password
sodium_crypto_pwhash_str_verify(string $hash, string $password): bool	Verifies that a password matches a hash
sodium_crypto_pwhash_str(string $password, int $opslimit, int $memlimit): string	Get an ASCII-encoded hash
sodium_crypto_pwhash(int $length, string $password, string $salt, int $opslimit, int $memlimit, int $algo = SODIUM_CRYPTO_PWHASH_ALG_DEFAULT): string	Derive a key from a password, using Argon2
sodium_crypto_scalarmult_base()	Alias of sodium_crypto_box_publickey_from_secretkey
sodium_crypto_scalarmult_ristretto255_base(string $n): string	Calculates the public key from a secret key
sodium_crypto_scalarmult_ristretto255(string $n, string $p): string	Computes a shared secret
sodium_crypto_scalarmult(string $n, string $p): string	Compute a shared secret given a user's secret key and another user's public key
sodium_crypto_secretbox_keygen(): string	Generate random key for sodium_crypto_secretbox
sodium_crypto_secretbox_open(string $ciphertext, string $nonce, string $key): string|false	Authenticated shared-key decryption
sodium_crypto_secretbox(string $message, string $nonce, string $key): string	Authenticated shared-key encryption
sodium_crypto_secretstream_xchacha20poly1305_init_pull(string $header, string $key): string	Initialize a secretstream context for decryption
sodium_crypto_secretstream_xchacha20poly1305_init_push(string $key): array	Initialize a secretstream context for encryption
sodium_crypto_secretstream_xchacha20poly1305_keygen(): string	Generate a random secretstream key.
sodium_crypto_secretstream_xchacha20poly1305_pull(string $state, string $ciphertext, string $additional_data = ""): array|false	Decrypt a chunk of data from an encrypted stream
sodium_crypto_secretstream_xchacha20poly1305_push(string $state, string $message, string $additional_data = "", int $tag = SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_TAG_MESSAGE): string	Encrypt a chunk of data so that it can safely be decrypted in a streaming API
sodium_crypto_secretstream_xchacha20poly1305_rekey(string $state): void	Explicitly rotate the key in the secretstream state
sodium_crypto_shorthash_keygen(): string	Get random bytes for key
sodium_crypto_shorthash(string $message, string $key): string	Compute a short hash of a message and key
sodium_crypto_sign_detached(string $message, string $secret_key): string	Sign the message
sodium_crypto_sign_ed25519_pk_to_curve25519(string $public_key): string	Convert an Ed25519 public key to a Curve25519 public key
sodium_crypto_sign_ed25519_sk_to_curve25519(string $secret_key): string	Convert an Ed25519 secret key to a Curve25519 secret key
sodium_crypto_sign_keypair_from_secretkey_and_publickey(string $secret_key, string $public_key): string	Join a secret key and public key together
sodium_crypto_sign_keypair(): string	Randomly generate a secret key and a corresponding public key
sodium_crypto_sign_open(string $signed_message, string $public_key): string|false	Check that the signed message has a valid signature
sodium_crypto_sign_publickey_from_secretkey(string $secret_key): string	Extract the Ed25519 public key from the secret key
sodium_crypto_sign_publickey(string $key_pair): string	Extract the Ed25519 public key from a keypair
sodium_crypto_sign_secretkey(string $key_pair): string	Extract the Ed25519 secret key from a keypair
sodium_crypto_sign_seed_keypair(string $seed): string	Deterministically derive the key pair from a single key
sodium_crypto_sign_verify_detached(string $signature, string $message, string $public_key): bool	Verify signature for the message
sodium_crypto_sign(string $message, string $secret_key): string	Sign a message
sodium_crypto_stream_keygen(): string	Generate a random sodium_crypto_stream key.
sodium_crypto_stream_xchacha20_keygen(): string	Returns a secure random key
sodium_crypto_stream_xchacha20_xor_ic(string $message, string $nonce, int $counter, string $key): string	Encrypts a message using a nonce and a secret key (no authentication)
sodium_crypto_stream_xchacha20_xor(string $message, string $nonce, string $key): string	Encrypts a message using a nonce and a secret key (no authentication)
sodium_crypto_stream_xchacha20(int $length, string $nonce, string $key): string	Expands the key and nonce into a keystream of pseudorandom bytes
sodium_crypto_stream_xor(string $message, string $nonce, string $key): string	Encrypt a message without authentication
sodium_crypto_stream(int $length, string $nonce, string $key): string	Generate a deterministic sequence of bytes from a seed
sodium_hex2bin(string $string, string $ignore = ""): string	Decodes a hexadecimally encoded binary string
sodium_increment(string $string): void	Increment large number
sodium_memcmp(string $string1, string $string2): int	Test for equality in constant-time
sodium_memzero(string $string): void	Overwrite a string with NUL characters
sodium_pad(string $string, int $block_size): string	Add padding data
sodium_unpad(string $string, int $block_size): string	Remove padding data
SodiumException()	(new) Exceptions thrown by the sodium functions
solr_get_version(): string	Returns the current version of the Apache Solr extension
>addDocument(SolrInputDocument $doc, bool $overwrite = true, int $commitWithin = ?): SolrUpdateResponse	(SolrClient) Adds a document to the index
>addDocuments(array $docs, bool $overwrite = true, int $commitWithin = ?): void	(SolrClient) Adds a collection of SolrInputDocument instances to the index
>commit(bool $softCommit = false, bool $waitSearcher = true, bool $expungeDeletes = false): SolrUpdateResponse	(SolrClient) Finalizes all add/deletes made to the index
SolrClient(array $clientOptions)	(new) Constructor for the SolrClient object
>deleteById(string $id): SolrUpdateResponse	(SolrClient) Delete by Id
>deleteByIds(array $ids): SolrUpdateResponse	(SolrClient) Deletes by Ids
>deleteByQueries(array $queries): SolrUpdateResponse	(SolrClient) Removes all documents matching any of the queries
>deleteByQuery(string $query): SolrUpdateResponse	(SolrClient) Deletes all documents matching the given query
>__destruct()	(SolrClient) Destructor for SolrClient
>getById(string $id): SolrQueryResponse	(SolrClient) Get Document By Id. Utilizes Solr Realtime Get (RTG)
>getByIds(array $ids): SolrQueryResponse	(SolrClient) Get Documents by their Ids. Utilizes Solr Realtime Get (RTG)
>getDebug(): string	(SolrClient) Returns the debug data for the last connection attempt
>getOptions(): array	(SolrClient) Returns the client options set internally
>optimize(int $maxSegments = 1, bool $softCommit = true, bool $waitSearcher = true): SolrUpdateResponse	(SolrClient) Defragments the index
>ping(): SolrPingResponse	(SolrClient) Checks if Solr server is still up
>query(SolrParams $query): SolrQueryResponse	(SolrClient) Sends a query to the server
>request(string $raw_request): SolrUpdateResponse	(SolrClient) Sends a raw update request
>rollback(): SolrUpdateResponse	(SolrClient) Rollbacks all add/deletes made to the index since the last commit
>setResponseWriter(string $responseWriter): void	(SolrClient) Sets the response writer used to prepare the response from Solr
>setServlet(int $type, string $value): bool	(SolrClient) Changes the specified servlet type to a new value
>system(): void	(SolrClient) Retrieve Solr Server information
>threads(): void	(SolrClient) Checks the threads status
>getInternalInfo(): array	(SolrClientException) Returns internal information where the Exception was thrown
SolrCollapseFunction(string $field = ?)	(new) Constructor
>getField(): string	(SolrCollapseFunction) Returns the field that is being collapsed on
>getHint(): string	(SolrCollapseFunction) Returns collapse hint
>getMax(): string	(SolrCollapseFunction) Returns max parameter
>getMin(): string	(SolrCollapseFunction) Returns min parameter
>getNullPolicy(): string	(SolrCollapseFunction) Returns null policy
>getSize(): int	(SolrCollapseFunction) Returns size parameter
>setField(string $fieldName): SolrCollapseFunction	(SolrCollapseFunction) Sets the field to collapse on
>setHint(string $hint): SolrCollapseFunction	(SolrCollapseFunction) Sets collapse hint
>setMax(string $max): SolrCollapseFunction	(SolrCollapseFunction) Selects the group heads by the max value of a numeric field or function query
>setMin(string $min): SolrCollapseFunction	(SolrCollapseFunction) Sets the initial size of the collapse data structures when collapsing on a numeric field only
>setNullPolicy(string $nullPolicy): SolrCollapseFunction	(SolrCollapseFunction) Sets the NULL Policy
>setSize(int $size): SolrCollapseFunction	(SolrCollapseFunction) Sets the initial size of the collapse data structures when collapsing on a numeric field only
>__toString(): string	(SolrCollapseFunction) Returns a string representing the constructed collapse function
>addBigramPhraseField(string $field, string $boost, string $slop = ?): SolrDisMaxQuery	(SolrDisMaxQuery) Adds a Phrase Bigram Field (pf2 parameter)
>addBoostQuery(string $field, string $value, string $boost = ?): SolrDisMaxQuery	(SolrDisMaxQuery) Adds a boost query field with value and optional boost (bq parameter)
>addPhraseField(string $field, string $boost, string $slop = ?): SolrDisMaxQuery	(SolrDisMaxQuery) Adds a Phrase Field (pf parameter)
>addQueryField(string $field, string $boost = ?): SolrDisMaxQuery	(SolrDisMaxQuery) Add a query field with optional boost (qf parameter)
>addTrigramPhraseField(string $field, string $boost, string $slop = ?): SolrDisMaxQuery	(SolrDisMaxQuery) Adds a Trigram Phrase Field (pf3 parameter)
>addUserField(string $field): SolrDisMaxQuery	(SolrDisMaxQuery) Adds a field to User Fields Parameter (uf)
SolrDisMaxQuery(string $q = ?)	(new) Class Constructor
>removeBigramPhraseField(string $field): SolrDisMaxQuery	(SolrDisMaxQuery) Removes phrase bigram field (pf2 parameter)
>removeBoostQuery(string $field): SolrDisMaxQuery	(SolrDisMaxQuery) Removes a boost query partial by field name (bq)
>removePhraseField(string $field): SolrDisMaxQuery	(SolrDisMaxQuery) Removes a Phrase Field (pf parameter)
>removeQueryField(string $field): SolrDisMaxQuery	(SolrDisMaxQuery) Removes a Query Field (qf parameter)
>removeTrigramPhraseField(string $field): SolrDisMaxQuery	(SolrDisMaxQuery) Removes a Trigram Phrase Field (pf3 parameter)
>removeUserField(string $field): SolrDisMaxQuery	(SolrDisMaxQuery) Removes a field from The User Fields Parameter (uf)
>setBigramPhraseFields(string $fields): SolrDisMaxQuery	(SolrDisMaxQuery) Sets Bigram Phrase Fields and their boosts (and slops) using pf2 parameter
>setBigramPhraseSlop(string $slop): SolrDisMaxQuery	(SolrDisMaxQuery) Sets Bigram Phrase Slop (ps2 parameter)
>setBoostFunction(string $function): SolrDisMaxQuery	(SolrDisMaxQuery) Sets a Boost Function (bf parameter)
>setBoostQuery(string $q): SolrDisMaxQuery	(SolrDisMaxQuery) Directly Sets Boost Query Parameter (bq)
>setMinimumMatch(string $value): SolrDisMaxQuery	(SolrDisMaxQuery) Set Minimum "Should" Match (mm)
>setPhraseFields(string $fields): SolrDisMaxQuery	(SolrDisMaxQuery) Sets Phrase Fields and their boosts (and slops) using pf2 parameter
>setPhraseSlop(string $slop): SolrDisMaxQuery	(SolrDisMaxQuery) Sets the default slop on phrase queries (ps parameter)
>setQueryAlt(string $q): SolrDisMaxQuery	(SolrDisMaxQuery) Set Query Alternate (q.alt parameter)
>setQueryPhraseSlop(string $slop): SolrDisMaxQuery	(SolrDisMaxQuery) Specifies the amount of slop permitted on phrase queries explicitly included in the user's query string (qf parameter)
>setTieBreaker(string $tieBreaker): SolrDisMaxQuery	(SolrDisMaxQuery) Sets Tie Breaker parameter (tie parameter)
>setTrigramPhraseFields(string $fields): SolrDisMaxQuery	(SolrDisMaxQuery) Directly Sets Trigram Phrase Fields (pf3 parameter)
>setTrigramPhraseSlop(string $slop): SolrDisMaxQuery	(SolrDisMaxQuery) Sets Trigram Phrase Slop (ps3 parameter)
>setUserFields(string $fields): SolrDisMaxQuery	(SolrDisMaxQuery) Sets User Fields parameter (uf)
>useDisMaxQueryParser(): SolrDisMaxQuery	(SolrDisMaxQuery) Switch QueryParser to be DisMax Query Parser
>useEDisMaxQueryParser(): SolrDisMaxQuery	(SolrDisMaxQuery) Switch QueryParser to be EDisMax
>addField(string $fieldName, string $fieldValue): bool	(SolrDocument) Adds a field to the document
>clear(): bool	(SolrDocument) Drops all the fields in the document
>__clone(): void	(SolrDocument) Creates a copy of a SolrDocument object
SolrDocument()	(new) Constructor
>current(): SolrDocumentField	(SolrDocument) Retrieves the current field
>deleteField(string $fieldName): bool	(SolrDocument) Removes a field from the document
>__destruct()	(SolrDocument) Destructor
>fieldExists(string $fieldName): bool	(SolrDocument) Checks if a field exists in the document
>__get(string $fieldName): SolrDocumentField	(SolrDocument) Access the field as a property
>getChildDocuments(): array	(SolrDocument) Returns an array of child documents (SolrDocument)
>getChildDocumentsCount(): int	(SolrDocument) Returns the number of child documents
>getField(string $fieldName): SolrDocumentField	(SolrDocument) Retrieves a field by name
>getFieldCount(): int	(SolrDocument) Returns the number of fields in this document
>getFieldNames(): array	(SolrDocument) Returns an array of fields names in the document
>getInputDocument(): SolrInputDocument	(SolrDocument) Returns a SolrInputDocument equivalent of the object
>hasChildDocuments(): bool	(SolrDocument) Checks whether the document has any child documents
>__isset(string $fieldName): bool	(SolrDocument) Checks if a field exists
>key(): string	(SolrDocument) Retrieves the current key
>merge(SolrDocument $sourceDoc, bool $overwrite = true): bool	(SolrDocument) Merges source to the current SolrDocument
>next(): void	(SolrDocument) Moves the internal pointer to the next field
>offsetExists(string $fieldName): bool	(SolrDocument) Checks if a particular field exists
>offsetGet(string $fieldName): SolrDocumentField	(SolrDocument) Retrieves a field
>offsetSet(string $fieldName, string $fieldValue): void	(SolrDocument) Adds a field to the document
>offsetUnset(string $fieldName): void	(SolrDocument) Removes a field
>reset(): bool	(SolrDocument) Alias SolrDocument::clear
>rewind(): void	(SolrDocument) Resets the internal pointer to the beginning
>serialize(): string	(SolrDocument) Used for custom serialization
>__set(string $fieldName, string $fieldValue): bool	(SolrDocument) Adds another field to the document
>sort(int $sortOrderBy, int $sortDirection = SolrDocument::SORT_ASC): bool	(SolrDocument) Sorts the fields in the document
>toArray(): array	(SolrDocument) Returns an array representation of the document
>unserialize(string $serialized): void	(SolrDocument) Custom serialization of SolrDocument objects
>__unset(string $fieldName): bool	(SolrDocument) Removes a field from the document
>valid(): bool	(SolrDocument) Checks if the current position internally is still valid
SolrDocumentField()	(new) Constructor
>__destruct()	(SolrDocumentField) Destructor
>getInternalInfo(): array	(SolrException) Returns internal information where the Exception was thrown
SolrGenericResponse()	(new) Constructor
>__destruct()	(SolrGenericResponse) Destructor
>getInternalInfo(): array	(SolrIllegalArgumentException) Returns internal information where the Exception was thrown
>getInternalInfo(): array	(SolrIllegalOperationException) Returns internal information where the Exception was thrown
>addChildDocument(SolrInputDocument $child): void	(SolrInputDocument) Adds a child document for block indexing
>addChildDocuments(array $docs): void	(SolrInputDocument) Adds an array of child documents
>addField(string $fieldName, string $fieldValue, float $fieldBoostValue = 0.0): bool	(SolrInputDocument) Adds a field to the document
>clear(): bool	(SolrInputDocument) Resets the input document
>__clone(): void	(SolrInputDocument) Creates a copy of a SolrDocument
SolrInputDocument()	(new) Constructor
>deleteField(string $fieldName): bool	(SolrInputDocument) Removes a field from the document
>__destruct()	(SolrInputDocument) Destructor
>fieldExists(string $fieldName): bool	(SolrInputDocument) Checks if a field exists
>getBoost(): float	(SolrInputDocument) Retrieves the current boost value for the document
>getChildDocuments(): array	(SolrInputDocument) Returns an array of child documents (SolrInputDocument)
>getChildDocumentsCount(): int	(SolrInputDocument) Returns the number of child documents
>getField(string $fieldName): SolrDocumentField	(SolrInputDocument) Retrieves a field by name
>getFieldBoost(string $fieldName): float	(SolrInputDocument) Retrieves the boost value for a particular field
>getFieldCount(): int|false	(SolrInputDocument) Returns the number of fields in the document
>getFieldNames(): array	(SolrInputDocument) Returns an array containing all the fields in the document
>hasChildDocuments(): bool	(SolrInputDocument) Returns true if the document has any child documents
>merge(SolrInputDocument $sourceDoc, bool $overwrite = true): bool	(SolrInputDocument) Merges one input document into another
>reset(): bool	(SolrInputDocument) Alias SolrInputDocument::clear
>setBoost(float $documentBoostValue): bool	(SolrInputDocument) Sets the boost value for this document
>setFieldBoost(string $fieldName, float $fieldBoostValue): bool	(SolrInputDocument) Sets the index-time boost value for a field
>sort(int $sortOrderBy, int $sortDirection = SolrInputDocument::SORT_ASC): bool	(SolrInputDocument) Sorts the fields within the document
>toArray(): array	(SolrInputDocument) Returns an array representation of the input document
SolrModifiableParams()	(new) Constructor
>__destruct()	(SolrModifiableParams) Destructor
SolrObject()	(new) Creates Solr object
>__destruct()	(SolrObject) Destructor
>getPropertyNames(): array	(SolrObject) Returns an array of all the names of the properties
>offsetExists(string $property_name): bool	(SolrObject) Checks if the property exists
>offsetGet(string $property_name): mixed	(SolrObject) Used to retrieve a property
>offsetSet(string $property_name, string $property_value): void	(SolrObject) Sets the value for a property
>offsetUnset(string $property_name): void	(SolrObject) Unsets the value for the property
>add(string $name, string $value): SolrParams	(SolrParams) Alias SolrParams::addParam
>addParam(string $name, string $value): SolrParams	(SolrParams) Adds a parameter to the object
>get(string $param_name): mixed	(SolrParams) Alias SolrParams::getParam
>getParam(string $param_name = ?): mixed	(SolrParams) Returns a parameter value
>getParams(): array	(SolrParams) Returns an array of non URL-encoded parameters
>getPreparedParams(): array	(SolrParams) Returns an array of URL-encoded parameters
>serialize(): string	(SolrParams) Used for custom serialization
>set(string $name, string $value): void	(SolrParams) Alias SolrParams::setParam
>setParam(string $name, string $value): SolrParams	(SolrParams) Sets the parameter to the specified value
>toString(bool $url_encode = false): string	(SolrParams) Returns all the name-value pair parameters in the object
>unserialize(string $serialized): void	(SolrParams) Used for custom serialization
SolrPingResponse()	(new) Constructor
>__destruct()	(SolrPingResponse) Destructor
>getResponse(): string	(SolrPingResponse) Returns the response from the server
>addExpandFilterQuery(string $fq): SolrQuery	(SolrQuery) Overrides main filter query, determines which documents to include in the main group
>addExpandSortField(string $field, string $order = ?): SolrQuery	(SolrQuery) Orders the documents within the expanded groups (expand.sort parameter)
>addFacetDateField(string $dateField): SolrQuery	(SolrQuery) Maps to facet.date
>addFacetDateOther(string $value, string $field_override = ?): SolrQuery	(SolrQuery) Adds another facet.date.other parameter
>addFacetField(string $field): SolrQuery	(SolrQuery) Adds another field to the facet
>addFacetQuery(string $facetQuery): SolrQuery	(SolrQuery) Adds a facet query
>addField(string $field): SolrQuery	(SolrQuery) Specifies which fields to return in the result
>addFilterQuery(string $fq): SolrQuery	(SolrQuery) Specifies a filter query
>addGroupField(string $value): SolrQuery	(SolrQuery) Add a field to be used to group results
>addGroupFunction(string $value): SolrQuery	(SolrQuery) Allows grouping results based on the unique values of a function query (group.func parameter)
>addGroupQuery(string $value): SolrQuery	(SolrQuery) Allows grouping of documents that match the given query
>addGroupSortField(string $field, int $order = ?): SolrQuery	(SolrQuery) Add a group sort field (group.sort parameter)
>addHighlightField(string $field): SolrQuery	(SolrQuery) Maps to hl.fl
>addMltField(string $field): SolrQuery	(SolrQuery) Sets a field to use for similarity
>addMltQueryField(string $field, float $boost): SolrQuery	(SolrQuery) Maps to mlt.qf
>addSortField(string $field, int $order = SolrQuery::ORDER_DESC): SolrQuery	(SolrQuery) Used to control how the results should be sorted
>addStatsFacet(string $field): SolrQuery	(SolrQuery) Requests a return of sub results for values within the given facet
>addStatsField(string $field): SolrQuery	(SolrQuery) Maps to stats.field parameter
>collapse(SolrCollapseFunction $collapseFunction): SolrQuery	(SolrQuery) Collapses the result set to a single document per group
SolrQuery(string $q = ?)	(new) Constructor
>__destruct()	(SolrQuery) Destructor
>getExpand(): bool	(SolrQuery) Returns true if group expanding is enabled
>getExpandFilterQueries(): array	(SolrQuery) Returns the expand filter queries
>getExpandQuery(): array	(SolrQuery) Returns the expand query expand.q parameter
>getExpandRows(): int	(SolrQuery) Returns The number of rows to display in each group (expand.rows)
>getExpandSortFields(): array	(SolrQuery) Returns an array of fields
>getFacet(): bool	(SolrQuery) Returns the value of the facet parameter
>getFacetDateEnd(string $field_override = ?): string	(SolrQuery) Returns the value for the facet.date.end parameter
>getFacetDateFields(): array	(SolrQuery) Returns all the facet.date fields
>getFacetDateGap(string $field_override = ?): string	(SolrQuery) Returns the value of the facet.date.gap parameter
>getFacetDateHardEnd(string $field_override = ?): string	(SolrQuery) Returns the value of the facet.date.hardend parameter
>getFacetDateOther(string $field_override = ?): array	(SolrQuery) Returns the value for the facet.date.other parameter
>getFacetDateStart(string $field_override = ?): string	(SolrQuery) Returns the lower bound for the first date range for all date faceting on this field
>getFacetFields(): array	(SolrQuery) Returns all the facet fields
>getFacetLimit(string $field_override = ?): int	(SolrQuery) Returns the maximum number of constraint counts that should be returned for the facet fields
>getFacetMethod(string $field_override = ?): string	(SolrQuery) Returns the value of the facet.method parameter
>getFacetMinCount(string $field_override = ?): int	(SolrQuery) Returns the minimum counts for facet fields should be included in the response
>getFacetMissing(string $field_override = ?): bool	(SolrQuery) Returns the current state of the facet.missing parameter
>getFacetOffset(string $field_override = ?): int	(SolrQuery) Returns an offset into the list of constraints to be used for pagination
>getFacetPrefix(string $field_override = ?): string	(SolrQuery) Returns the facet prefix
>getFacetQueries(): array	(SolrQuery) Returns all the facet queries
>getFacetSort(string $field_override = ?): int	(SolrQuery) Returns the facet sort type
>getFields(): array	(SolrQuery) Returns the list of fields that will be returned in the response
>getFilterQueries(): array	(SolrQuery) Returns an array of filter queries
>getGroup(): bool	(SolrQuery) Returns true if grouping is enabled
>getGroupCachePercent(): int	(SolrQuery) Returns group cache percent value
>getGroupFacet(): bool	(SolrQuery) Returns the group.facet parameter value
>getGroupFields(): array	(SolrQuery) Returns group fields (group.field parameter values)
>getGroupFormat(): string	(SolrQuery) Returns the group.format value
>getGroupFunctions(): array	(SolrQuery) Returns group functions (group.func parameter values)
>getGroupLimit(): int	(SolrQuery) Returns the group.limit value
>getGroupMain(): bool	(SolrQuery) Returns the group.main value
>getGroupNGroups(): bool	(SolrQuery) Returns the group.ngroups value
>getGroupOffset(): int	(SolrQuery) Returns the group.offset value
>getGroupQueries(): array	(SolrQuery) Returns all the group.query parameter values
>getGroupSortFields(): array	(SolrQuery) Returns the group.sort value
>getGroupTruncate(): bool	(SolrQuery) Returns the group.truncate value
>getHighlight(): bool	(SolrQuery) Returns the state of the hl parameter
>getHighlightAlternateField(string $field_override = ?): string	(SolrQuery) Returns the highlight field to use as backup or default
>getHighlightFields(): array	(SolrQuery) Returns all the fields that Solr should generate highlighted snippets for
>getHighlightFormatter(string $field_override = ?): string	(SolrQuery) Returns the formatter for the highlighted output
>getHighlightFragmenter(string $field_override = ?): string	(SolrQuery) Returns the text snippet generator for highlighted text
>getHighlightFragsize(string $field_override = ?): int	(SolrQuery) Returns the number of characters of fragments to consider for highlighting
>getHighlightHighlightMultiTerm(): bool	(SolrQuery) Returns whether or not to enable highlighting for range/wildcard/fuzzy/prefix queries
>getHighlightMaxAlternateFieldLength(string $field_override = ?): int	(SolrQuery) Returns the maximum number of characters of the field to return
>getHighlightMaxAnalyzedChars(): int	(SolrQuery) Returns the maximum number of characters into a document to look for suitable snippets
>getHighlightMergeContiguous(string $field_override = ?): bool	(SolrQuery) Returns whether or not the collapse contiguous fragments into a single fragment
>getHighlightQuery(): string	(SolrQuery) return the highlightquery (hl.q)
>getHighlightRegexMaxAnalyzedChars(): int	(SolrQuery) Returns the maximum number of characters from a field when using the regex fragmenter
>getHighlightRegexPattern(): string	(SolrQuery) Returns the regular expression for fragmenting
>getHighlightRegexSlop(): float	(SolrQuery) Returns the deviation factor from the ideal fragment size
>getHighlightRequireFieldMatch(): bool	(SolrQuery) Returns if a field will only be highlighted if the query matched in this particular field
>getHighlightSimplePost(string $field_override = ?): string	(SolrQuery) Returns the text which appears after a highlighted term
>getHighlightSimplePre(string $field_override = ?): string	(SolrQuery) Returns the text which appears before a highlighted term
>getHighlightSnippets(string $field_override = ?): int	(SolrQuery) Returns the maximum number of highlighted snippets to generate per field
>getHighlightUsePhraseHighlighter(): bool	(SolrQuery) Returns the state of the hl.usePhraseHighlighter parameter
>getMlt(): bool	(SolrQuery) Returns whether or not MoreLikeThis results should be enabled
>getMltBoost(): bool	(SolrQuery) Returns whether or not the query will be boosted by the interesting term relevance
>getMltCount(): int	(SolrQuery) Returns the number of similar documents to return for each result
>getMltFields(): array	(SolrQuery) Returns all the fields to use for similarity
>getMltMaxNumQueryTerms(): int	(SolrQuery) Returns the maximum number of query terms that will be included in any generated query
>getMltMaxNumTokens(): int	(SolrQuery) Returns the maximum number of tokens to parse in each document field that is not stored with TermVector support
>getMltMaxWordLength(): int	(SolrQuery) Returns the maximum word length above which words will be ignored
>getMltMinDocFrequency(): int	(SolrQuery) Returns the treshold frequency at which words will be ignored which do not occur in at least this many docs
>getMltMinTermFrequency(): int	(SolrQuery) Returns the frequency below which terms will be ignored in the source document
>getMltMinWordLength(): int	(SolrQuery) Returns the minimum word length below which words will be ignored
>getMltQueryFields(): array	(SolrQuery) Returns the query fields and their boosts
>getQuery(): string	(SolrQuery) Returns the main query
>getRows(): int	(SolrQuery) Returns the maximum number of documents
>getSortFields(): array	(SolrQuery) Returns all the sort fields
>getStart(): int	(SolrQuery) Returns the offset in the complete result set
>getStats(): bool	(SolrQuery) Returns whether or not stats is enabled
>getStatsFacets(): array	(SolrQuery) Returns all the stats facets that were set
>getStatsFields(): array	(SolrQuery) Returns all the statistics fields
>getTerms(): bool	(SolrQuery) Returns whether or not the TermsComponent is enabled
>getTermsField(): string	(SolrQuery) Returns the field from which the terms are retrieved
>getTermsIncludeLowerBound(): bool	(SolrQuery) Returns whether or not to include the lower bound in the result set
>getTermsIncludeUpperBound(): bool	(SolrQuery) Returns whether or not to include the upper bound term in the result set
>getTermsLimit(): int	(SolrQuery) Returns the maximum number of terms Solr should return
>getTermsLowerBound(): string	(SolrQuery) Returns the term to start at
>getTermsMaxCount(): int	(SolrQuery) Returns the maximum document frequency
>getTermsMinCount(): int	(SolrQuery) Returns the minimum document frequency to return in order to be included
>getTermsPrefix(): string	(SolrQuery) Returns the term prefix
>getTermsReturnRaw(): bool	(SolrQuery) Whether or not to return raw characters
>getTermsSort(): int	(SolrQuery) Returns an integer indicating how terms are sorted
>getTermsUpperBound(): string	(SolrQuery) Returns the term to stop at
>getTimeAllowed(): int	(SolrQuery) Returns the time in milliseconds allowed for the query to finish
>removeExpandFilterQuery(string $fq): SolrQuery	(SolrQuery) Removes an expand filter query
>removeExpandSortField(string $field): SolrQuery	(SolrQuery) Removes an expand sort field from the expand.sort parameter
>removeFacetDateField(string $field): SolrQuery	(SolrQuery) Removes one of the facet date fields
>removeFacetDateOther(string $value, string $field_override = ?): SolrQuery	(SolrQuery) Removes one of the facet.date.other parameters
>removeFacetField(string $field): SolrQuery	(SolrQuery) Removes one of the facet.date parameters
>removeFacetQuery(string $value): SolrQuery	(SolrQuery) Removes one of the facet.query parameters
>removeField(string $field): SolrQuery	(SolrQuery) Removes a field from the list of fields
>removeFilterQuery(string $fq): SolrQuery	(SolrQuery) Removes a filter query
>removeHighlightField(string $field): SolrQuery	(SolrQuery) Removes one of the fields used for highlighting
>removeMltField(string $field): SolrQuery	(SolrQuery) Removes one of the moreLikeThis fields
>removeMltQueryField(string $queryField): SolrQuery	(SolrQuery) Removes one of the moreLikeThis query fields
>removeSortField(string $field): SolrQuery	(SolrQuery) Removes one of the sort fields
>removeStatsFacet(string $value): SolrQuery	(SolrQuery) Removes one of the stats.facet parameters
>removeStatsField(string $field): SolrQuery	(SolrQuery) Removes one of the stats.field parameters
>setEchoHandler(bool $flag): SolrQuery	(SolrQuery) Toggles the echoHandler parameter
>setEchoParams(string $type): SolrQuery	(SolrQuery) Determines what kind of parameters to include in the response
>setExpand(bool $value): SolrQuery	(SolrQuery) Enables/Disables the Expand Component
>setExpandQuery(string $q): SolrQuery	(SolrQuery) Sets the expand.q parameter
>setExpandRows(int $value): SolrQuery	(SolrQuery) Sets the number of rows to display in each group (expand.rows). Server Default 5
>setExplainOther(string $query): SolrQuery	(SolrQuery) Sets the explainOther common query parameter
>setFacet(bool $flag): SolrQuery	(SolrQuery) Maps to the facet parameter. Enables or disables facetting
>setFacetDateEnd(string $value, string $field_override = ?): SolrQuery	(SolrQuery) Maps to facet.date.end
>setFacetDateGap(string $value, string $field_override = ?): SolrQuery	(SolrQuery) Maps to facet.date.gap
>setFacetDateHardEnd(bool $value, string $field_override = ?): SolrQuery	(SolrQuery) Maps to facet.date.hardend
>setFacetDateStart(string $value, string $field_override = ?): SolrQuery	(SolrQuery) Maps to facet.date.start
>setFacetEnumCacheMinDefaultFrequency(int $frequency, string $field_override = ?): SolrQuery	(SolrQuery) Sets the minimum document frequency used for determining term count
>setFacetLimit(int $limit, string $field_override = ?): SolrQuery	(SolrQuery) Maps to facet.limit
>setFacetMethod(string $method, string $field_override = ?): SolrQuery	(SolrQuery) Specifies the type of algorithm to use when faceting a field
>setFacetMinCount(int $mincount, string $field_override = ?): SolrQuery	(SolrQuery) Maps to facet.mincount
>setFacetMissing(bool $flag, string $field_override = ?): SolrQuery	(SolrQuery) Maps to facet.missing
>setFacetOffset(int $offset, string $field_override = ?): SolrQuery	(SolrQuery) Sets the offset into the list of constraints to allow for pagination
>setFacetPrefix(string $prefix, string $field_override = ?): SolrQuery	(SolrQuery) Specifies a string prefix with which to limits the terms on which to facet
>setFacetSort(int $facetSort, string $field_override = ?): SolrQuery	(SolrQuery) Determines the ordering of the facet field constraints
>setGroup(bool $value): SolrQuery	(SolrQuery) Enable/Disable result grouping (group parameter)
>setGroupCachePercent(int $percent): SolrQuery	(SolrQuery) Enables caching for result grouping
>setGroupFacet(bool $value): SolrQuery	(SolrQuery) Sets group.facet parameter
>setGroupFormat(string $value): SolrQuery	(SolrQuery) Sets the group format, result structure (group.format parameter)
>setGroupLimit(int $value): SolrQuery	(SolrQuery) Specifies the number of results to return for each group. The server default value is 1
>setGroupMain(string $value): SolrQuery	(SolrQuery) If true, the result of the first field grouping command is used as the main result list in the response, using group.format=simple
>setGroupNGroups(bool $value): SolrQuery	(SolrQuery) If true, Solr includes the number of groups that have matched the query in the results
>setGroupOffset(int $value): SolrQuery	(SolrQuery) Sets the group.offset parameter
>setGroupTruncate(bool $value): SolrQuery	(SolrQuery) If true, facet counts are based on the most relevant document of each group matching the query
>setHighlight(bool $flag): SolrQuery	(SolrQuery) Enables or disables highlighting
>setHighlightAlternateField(string $field, string $field_override = ?): SolrQuery	(SolrQuery) Specifies the backup field to use
>setHighlightFormatter(string $formatter, string $field_override = ?): SolrQuery	(SolrQuery) Specify a formatter for the highlight output
>setHighlightFragmenter(string $fragmenter, string $field_override = ?): SolrQuery	(SolrQuery) Sets a text snippet generator for highlighted text
>setHighlightFragsize(int $size, string $field_override = ?): SolrQuery	(SolrQuery) The size of fragments to consider for highlighting
>setHighlightHighlightMultiTerm(bool $flag): SolrQuery	(SolrQuery) Use SpanScorer to highlight phrase terms
>setHighlightMaxAlternateFieldLength(int $fieldLength, string $field_override = ?): SolrQuery	(SolrQuery) Sets the maximum number of characters of the field to return
>setHighlightMaxAnalyzedChars(int $value): SolrQuery	(SolrQuery) Specifies the number of characters into a document to look for suitable snippets
>setHighlightMergeContiguous(bool $flag, string $field_override = ?): SolrQuery	(SolrQuery) Whether or not to collapse contiguous fragments into a single fragment
>setHighlightQuery(string $q): SolrQuery	(SolrQuery) A query designated for highlighting (hl.q)
>setHighlightRegexMaxAnalyzedChars(int $maxAnalyzedChars): SolrQuery	(SolrQuery) Specify the maximum number of characters to analyze
>setHighlightRegexPattern(string $value): SolrQuery	(SolrQuery) Specify the regular expression for fragmenting
>setHighlightRegexSlop(float $factor): SolrQuery	(SolrQuery) Sets the factor by which the regex fragmenter can stray from the ideal fragment size
>setHighlightRequireFieldMatch(bool $flag): SolrQuery	(SolrQuery) Require field matching during highlighting
>setHighlightSimplePost(string $simplePost, string $field_override = ?): SolrQuery	(SolrQuery) Sets the text which appears after a highlighted term
>setHighlightSimplePre(string $simplePre, string $field_override = ?): SolrQuery	(SolrQuery) Sets the text which appears before a highlighted term
>setHighlightSnippets(int $value, string $field_override = ?): SolrQuery	(SolrQuery) Sets the maximum number of highlighted snippets to generate per field
>setHighlightUsePhraseHighlighter(bool $flag): SolrQuery	(SolrQuery) Whether to highlight phrase terms only when they appear within the query phrase
>setMlt(bool $flag): SolrQuery	(SolrQuery) Enables or disables moreLikeThis
>setMltBoost(bool $flag): SolrQuery	(SolrQuery) Set if the query will be boosted by the interesting term relevance
>setMltCount(int $count): SolrQuery	(SolrQuery) Set the number of similar documents to return for each result
>setMltMaxNumQueryTerms(int $value): SolrQuery	(SolrQuery) Sets the maximum number of query terms included
>setMltMaxNumTokens(int $value): SolrQuery	(SolrQuery) Specifies the maximum number of tokens to parse
>setMltMaxWordLength(int $maxWordLength): SolrQuery	(SolrQuery) Sets the maximum word length
>setMltMinDocFrequency(int $minDocFrequency): SolrQuery	(SolrQuery) Sets the mltMinDoc frequency
>setMltMinTermFrequency(int $minTermFrequency): SolrQuery	(SolrQuery) Sets the frequency below which terms will be ignored in the source docs
>setMltMinWordLength(int $minWordLength): SolrQuery	(SolrQuery) Sets the minimum word length
>setOmitHeader(bool $flag): SolrQuery	(SolrQuery) Exclude the header from the returned results
>setQuery(string $query): SolrQuery	(SolrQuery) Sets the search query
>setRows(int $rows): SolrQuery	(SolrQuery) Specifies the maximum number of rows to return in the result
>setShowDebugInfo(bool $flag): SolrQuery	(SolrQuery) Flag to show debug information
>setStart(int $start): SolrQuery	(SolrQuery) Specifies the number of rows to skip
>setStats(bool $flag): SolrQuery	(SolrQuery) Enables or disables the Stats component
>setTerms(bool $flag): SolrQuery	(SolrQuery) Enables or disables the TermsComponent
>setTermsField(string $fieldname): SolrQuery	(SolrQuery) Sets the name of the field to get the Terms from
>setTermsIncludeLowerBound(bool $flag): SolrQuery	(SolrQuery) Include the lower bound term in the result set
>setTermsIncludeUpperBound(bool $flag): SolrQuery	(SolrQuery) Include the upper bound term in the result set
>setTermsLimit(int $limit): SolrQuery	(SolrQuery) Sets the maximum number of terms to return
>setTermsLowerBound(string $lowerBound): SolrQuery	(SolrQuery) Specifies the Term to start from
>setTermsMaxCount(int $frequency): SolrQuery	(SolrQuery) Sets the maximum document frequency
>setTermsMinCount(int $frequency): SolrQuery	(SolrQuery) Sets the minimum document frequency
>setTermsPrefix(string $prefix): SolrQuery	(SolrQuery) Restrict matches to terms that start with the prefix
>setTermsReturnRaw(bool $flag): SolrQuery	(SolrQuery) Return the raw characters of the indexed term
>setTermsSort(int $sortType): SolrQuery	(SolrQuery) Specifies how to sort the returned terms
>setTermsUpperBound(string $upperBound): SolrQuery	(SolrQuery) Sets the term to stop at
>setTimeAllowed(int $timeAllowed): SolrQuery	(SolrQuery) The time allowed for search to finish
SolrQueryResponse()	(new) Constructor
>__destruct()	(SolrQueryResponse) Destructor
>getDigestedResponse(): string	(SolrResponse) Returns the XML response as serialized PHP data
>getHttpStatus(): int	(SolrResponse) Returns the HTTP status of the response
>getHttpStatusMessage(): string	(SolrResponse) Returns more details on the HTTP status
>getRawRequest(): string	(SolrResponse) Returns the raw request sent to the Solr server
>getRawRequestHeaders(): string	(SolrResponse) Returns the raw request headers sent to the Solr server
>getRawResponse(): string	(SolrResponse) Returns the raw response from the server
>getRawResponseHeaders(): string	(SolrResponse) Returns the raw response headers from the server
>getRequestUrl(): string	(SolrResponse) Returns the full URL the request was sent to
>getResponse(): SolrObject	(SolrResponse) Returns a SolrObject representing the XML response from the server
>setParseMode(int $parser_mode = ?): bool	(SolrResponse) Sets the parse mode
>success(): bool	(SolrResponse) Was the request a success
>getInternalInfo(): array	(SolrServerException) Returns internal information where the Exception was thrown
SolrUpdateResponse()	(new) Constructor
>__destruct()	(SolrUpdateResponse) Destructor
SolrUtils::digestXmlResponse(string $xmlresponse, int $parse_mode = ?): SolrObject	Parses an response XML string into a SolrObject
SolrUtils::escapeQueryChars(string $str): string|false	Escapes a lucene query string
SolrUtils::getSolrVersion(): string	Returns the current version of the Solr extension
SolrUtils::queryPhrase(string $str): string	Prepares a phrase from an unescaped lucene string
SolrClientException()	(new) An exception thrown when there is an error while making a request to the server from the client
SolrException()	(new) This is the base class for all exception thrown by the Solr extension classes
SolrIllegalArgumentException()	(new) This object is thrown when an illegal or invalid argument is passed to a method
SolrIllegalOperationException()	(new) This object is thrown when an illegal or unsupported operation is performed on an object
SolrMissingMandatoryParameterException()	(new) 
SolrParams()	(new) Represents a collection of name-value pairs sent to the Solr server during a request
SolrResponse()	(new) Represents a response from the Solr server
SolrServerException()	(new) An exception thrown when there is an error produced by the Solr Server itself
SolrUtils()	(new) Contains utility methods for retrieving the current extension version and preparing query phrases
>append(Iterator $iterator): void	(AppendIterator) Appends an iterator
AppendIterator()	(new) Constructs an AppendIterator
>current(): mixed	(AppendIterator) Gets the current value
>getArrayIterator(): ArrayIterator	(AppendIterator) Gets the ArrayIterator
>getIteratorIndex(): int|null	(AppendIterator) Gets an index of iterators
>key(): scalar	(AppendIterator) Gets the current key
>next(): void	(AppendIterator) Moves to the next element
>rewind(): void	(AppendIterator) Rewinds the Iterator
>valid(): bool	(AppendIterator) Checks validity of the current element
>append(mixed $value): void	(ArrayIterator) Append an element
>asort(int $flags = SORT_REGULAR): true	(ArrayIterator) Sort entries by values
ArrayIterator(array|object $array = [], int $flags = ?)	(new) Construct an ArrayIterator
>count(): int	(ArrayIterator) Count elements
>current(): mixed	(ArrayIterator) Return current array entry
>getArrayCopy(): array	(ArrayIterator) Get array copy
>getFlags(): int	(ArrayIterator) Get behavior flags
>key(): string|int|null	(ArrayIterator) Return current array key
>ksort(int $flags = SORT_REGULAR): true	(ArrayIterator) Sort entries by keys
>natcasesort(): true	(ArrayIterator) Sort entries naturally, case insensitive
>natsort(): true	(ArrayIterator) Sort entries naturally
>next(): void	(ArrayIterator) Move to next entry
>offsetExists(mixed $key): bool	(ArrayIterator) Check if offset exists
>offsetGet(mixed $key): mixed	(ArrayIterator) Get value for an offset
>offsetSet(mixed $key, mixed $value): void	(ArrayIterator) Set value for an offset
>offsetUnset(mixed $key): void	(ArrayIterator) Unset value for an offset
>rewind(): void	(ArrayIterator) Rewind array back to the start
>seek(int $offset): void	(ArrayIterator) Seeks to a position
>serialize(): string	(ArrayIterator) Serialize
>setFlags(int $flags): void	(ArrayIterator) Set behaviour flags
>uasort(callable $callback): true	(ArrayIterator) Sort with a user-defined comparison function and maintain index association
>uksort(callable $callback): true	(ArrayIterator) Sort by keys using a user-defined comparison function
>unserialize(string $data): void	(ArrayIterator) Unserialize
>valid(): bool	(ArrayIterator) Check whether array contains more entries
>append(mixed $value): void	(ArrayObject) Appends the value
>asort(int $flags = SORT_REGULAR): true	(ArrayObject) Sort the entries by value
ArrayObject(array|object $array = [], int $flags = ?, string $iteratorClass = ArrayIterator::class)	(new) Construct a new array object
>count(): int	(ArrayObject) Get the number of public properties in the ArrayObject
>exchangeArray(array|object $array): array	(ArrayObject) Exchange the array for another one
>getArrayCopy(): array	(ArrayObject) Creates a copy of the ArrayObject
>getFlags(): int	(ArrayObject) Gets the behavior flags
>getIterator(): Iterator	(ArrayObject) Create a new iterator from an ArrayObject instance
>getIteratorClass(): string	(ArrayObject) Gets the iterator classname for the ArrayObject
>ksort(int $flags = SORT_REGULAR): true	(ArrayObject) Sort the entries by key
>natcasesort(): true	(ArrayObject) Sort an array using a case insensitive "natural order" algorithm
>natsort(): true	(ArrayObject) Sort entries using a "natural order" algorithm
>offsetExists(mixed $key): bool	(ArrayObject) Returns whether the requested index exists
>offsetGet(mixed $key): mixed	(ArrayObject) Returns the value at the specified index
>offsetSet(mixed $key, mixed $value): void	(ArrayObject) Sets the value at the specified index to newval
>offsetUnset(mixed $key): void	(ArrayObject) Unsets the value at the specified index
>serialize(): string	(ArrayObject) Serialize an ArrayObject
>setFlags(int $flags): void	(ArrayObject) Sets the behavior flags
>setIteratorClass(string $iteratorClass): void	(ArrayObject) Sets the iterator classname for the ArrayObject
>uasort(callable $callback): true	(ArrayObject) Sort the entries with a user-defined comparison function and maintain key association
>uksort(callable $callback): true	(ArrayObject) Sort the entries by keys using a user-defined comparison function
>unserialize(string $data): void	(ArrayObject) Unserialize an ArrayObject
CachingIterator(Iterator $iterator, int $flags = CachingIterator::CALL_TOSTRING)	(new) Construct a new CachingIterator object for the iterator
>count(): int	(CachingIterator) The number of elements in the iterator
>current(): mixed	(CachingIterator) Return the current element
>getCache(): array	(CachingIterator) Retrieve the contents of the cache
>getFlags(): int	(CachingIterator) Get flags used
>hasNext(): bool	(CachingIterator) Check whether the inner iterator has a valid next element
>key(): scalar	(CachingIterator) Return the key for the current element
>next(): void	(CachingIterator) Move the iterator forward
>offsetExists(string $key): bool	(CachingIterator) The offsetExists purpose
>offsetGet(string $key): mixed	(CachingIterator) The offsetGet purpose
>offsetSet(string $key, mixed $value): void	(CachingIterator) The offsetSet purpose
>offsetUnset(string $key): void	(CachingIterator) The offsetUnset purpose
>rewind(): void	(CachingIterator) Rewind the iterator
>setFlags(int $flags): void	(CachingIterator) The setFlags purpose
>__toString(): string	(CachingIterator) Return the string representation of the current element
>valid(): bool	(CachingIterator) Check whether the current element is valid
>accept(): bool	(CallbackFilterIterator) Calls the callback with the current value, the current key and the inner iterator as arguments
CallbackFilterIterator(Iterator $iterator, callable $callback)	(new) Create a filtered iterator from another iterator
DirectoryIterator(string $directory)	(new) Constructs a new directory iterator from a path
>current(): mixed	(DirectoryIterator) Return the current DirectoryIterator item
>getBasename(string $suffix = ""): string	(DirectoryIterator) Get base name of current DirectoryIterator item
>getExtension(): string	(DirectoryIterator) Gets the file extension
>getFilename(): string	(DirectoryIterator) Return file name of current DirectoryIterator item
>isDot(): bool	(DirectoryIterator) Determine if current DirectoryIterator item is '.' or '..'
>key(): mixed	(DirectoryIterator) Return the key for the current DirectoryIterator item
>next(): void	(DirectoryIterator) Move forward to next DirectoryIterator item
>rewind(): void	(DirectoryIterator) Rewind the DirectoryIterator back to the start
>seek(int $offset): void	(DirectoryIterator) Seek to a DirectoryIterator item
>__toString(): string	(DirectoryIterator) Get file name as a string
>valid(): bool	(DirectoryIterator) Check whether current DirectoryIterator position is a valid file
>current(): never	(EmptyIterator) The current() method
>key(): never	(EmptyIterator) The key() method
>next(): void	(EmptyIterator) The next() method
>rewind(): void	(EmptyIterator) The rewind() method
>valid(): false	(EmptyIterator) Checks whether the current element is valid
FilesystemIterator(string $directory, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS)	(new) Constructs a new filesystem iterator
>current(): string|SplFileInfo|FilesystemIterator	(FilesystemIterator) The current file
>getFlags(): int	(FilesystemIterator) Get the handling flags
>key(): string	(FilesystemIterator) Retrieve the key for the current file
>next(): void	(FilesystemIterator) Move to the next file
>rewind(): void	(FilesystemIterator) Rewinds back to the beginning
>setFlags(int $flags): void	(FilesystemIterator) Sets handling flags
>accept(): bool	(FilterIterator) Check whether the current element of the iterator is acceptable
FilterIterator(Iterator $iterator)	(new) Construct a filterIterator
>current(): mixed	(FilterIterator) Get the current element value
>key(): mixed	(FilterIterator) Get the current key
>next(): void	(FilterIterator) Move the iterator forward
>rewind(): void	(FilterIterator) Rewind the iterator
>valid(): bool	(FilterIterator) Check whether the current element is valid
class_implements(object|string $object_or_class, bool $autoload = true): array|false	Return the interfaces which are implemented by the given class or interface
class_parents(object|string $object_or_class, bool $autoload = true): array|false	Return the parent classes of the given class
class_uses(object|string $object_or_class, bool $autoload = true): array|false	Return the traits used by the given class
iterator_apply(Traversable $iterator, callable $callback, array|null $args = null): int	Call a function for every element in an iterator
iterator_count(Traversable|array $iterator): int	Count the elements in an iterator
iterator_to_array(Traversable|array $iterator, bool $preserve_keys = true): array	Copy the iterator into an array
spl_autoload_call(string $class): void	Try all registered __autoload() functions to load the requested class
spl_autoload_extensions(string|null $file_extensions = null): string	Register and return default file extensions for spl_autoload
spl_autoload_functions(): array	Return all registered __autoload() functions
spl_autoload_register(callable|null $callback = null, bool $throw = true, bool $prepend = false): bool	Register given function as __autoload() implementation
spl_autoload_unregister(callable $callback): bool	Unregister given function as __autoload() implementation
spl_autoload(string $class, string|null $file_extensions = null): void	Default implementation for __autoload()
spl_classes(): array	Return available SPL classes
spl_object_hash(object $object): string	Return hash id for given object
spl_object_id(object $object): int	Return the integer object handle for given object
GlobIterator(string $pattern, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO)	(new) Construct a directory using glob
>count(): int	(GlobIterator) Get the number of directories and files
InfiniteIterator(Iterator $iterator)	(new) Constructs an InfiniteIterator
>next(): void	(InfiniteIterator) Moves the inner Iterator forward or rewinds it
IteratorIterator(Traversable $iterator, string|null $class = null)	(new) Create an iterator from anything that is traversable
>current(): mixed	(IteratorIterator) Get the current value
>getInnerIterator(): Iterator|null	(IteratorIterator) Get the inner iterator
>key(): mixed	(IteratorIterator) Get the key of the current element
>next(): void	(IteratorIterator) Forward to the next element
>rewind(): void	(IteratorIterator) Rewind to the first element
>valid(): bool	(IteratorIterator) Checks if the current element is valid
LimitIterator(Iterator $iterator, int $offset = ?, int $limit = -1)	(new) Construct a LimitIterator
>current(): mixed	(LimitIterator) Get current element
>getPosition(): int	(LimitIterator) Return the current position
>key(): mixed	(LimitIterator) Get current key
>next(): void	(LimitIterator) Move the iterator forward
>rewind(): void	(LimitIterator) Rewind the iterator to the specified starting offset
>seek(int $offset): int	(LimitIterator) Seek to the given position
>valid(): bool	(LimitIterator) Check whether the current element is valid
>attachIterator(Iterator $iterator, string|int|null $info = null): void	(MultipleIterator) Attaches iterator information
MultipleIterator(int $flags = MultipleIterator::MIT_NEED_ALL | MultipleIterator::MIT_KEYS_NUMERIC)	(new) Constructs a new MultipleIterator
>containsIterator(Iterator $iterator): bool	(MultipleIterator) Checks if an iterator is attached
>countIterators(): int	(MultipleIterator) Gets the number of attached iterator instances
>current(): array	(MultipleIterator) Gets the registered iterator instances
>detachIterator(Iterator $iterator): void	(MultipleIterator) Detaches an iterator
>getFlags(): int	(MultipleIterator) Gets the flag information
>key(): array	(MultipleIterator) Gets the registered iterator instances
>next(): void	(MultipleIterator) Moves all attached iterator instances forward
>rewind(): void	(MultipleIterator) Rewinds all attached iterator instances
>setFlags(int $flags): void	(MultipleIterator) Sets flags
>valid(): bool	(MultipleIterator) Checks the validity of sub iterators
NoRewindIterator(Iterator $iterator)	(new) Construct a NoRewindIterator
>current(): mixed	(NoRewindIterator) Get the current value
>key(): mixed	(NoRewindIterator) Get the current key
>next(): void	(NoRewindIterator) Forward to the next element
>rewind(): void	(NoRewindIterator) Prevents the rewind operation on the inner iterator
>valid(): bool	(NoRewindIterator) Validates the iterator
>getInnerIterator(): Iterator|null	(OuterIterator) Returns the inner iterator for the current entry
>accept(): bool	(ParentIterator) Determines acceptability
ParentIterator(RecursiveIterator $iterator)	(new) Constructs a ParentIterator
>getChildren(): ParentIterator	(ParentIterator) Return the inner iterator's children contained in a ParentIterator
>hasChildren(): bool	(ParentIterator) Check whether the inner iterator's current element has children
>next(): void	(ParentIterator) Move the iterator forward
>rewind(): void	(ParentIterator) Rewind the iterator
>getChildren(): RecursiveArrayIterator|null	(RecursiveArrayIterator) Returns an iterator for the current entry if it is an array or an object
>hasChildren(): bool	(RecursiveArrayIterator) Returns whether current entry is an array or an object
RecursiveCachingIterator(Iterator $iterator, int $flags = RecursiveCachingIterator::CALL_TOSTRING)	(new) Construct
>getChildren(): RecursiveCachingIterator|null	(RecursiveCachingIterator) Return the inner iterator's children as a RecursiveCachingIterator
>hasChildren(): bool	(RecursiveCachingIterator) Check whether the current element of the inner iterator has children
RecursiveCallbackFilterIterator(RecursiveIterator $iterator, callable $callback)	(new) Create a RecursiveCallbackFilterIterator from a RecursiveIterator
>getChildren(): RecursiveCallbackFilterIterator	(RecursiveCallbackFilterIterator) Return the inner iterator's children contained in a RecursiveCallbackFilterIterator
>hasChildren(): bool	(RecursiveCallbackFilterIterator) Check whether the inner iterator's current element has children
RecursiveDirectoryIterator(string $directory, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO)	(new) Constructs a RecursiveDirectoryIterator
>getChildren(): RecursiveDirectoryIterator	(RecursiveDirectoryIterator) Returns an iterator for the current entry if it is a directory
>getSubPath(): string	(RecursiveDirectoryIterator) Get sub path
>getSubPathname(): string	(RecursiveDirectoryIterator) Get sub path and name
>hasChildren(bool $allowLinks = false): bool	(RecursiveDirectoryIterator) Returns whether current entry is a directory and not '.' or '..'
>key(): string	(RecursiveDirectoryIterator) Return path and filename of current dir entry
>next(): void	(RecursiveDirectoryIterator) Move to next entry
>rewind(): void	(RecursiveDirectoryIterator) Rewind dir back to the start
RecursiveFilterIterator(RecursiveIterator $iterator)	(new) Create a RecursiveFilterIterator from a RecursiveIterator
>getChildren(): RecursiveFilterIterator|null	(RecursiveFilterIterator) Return the inner iterator's children contained in a RecursiveFilterIterator
>hasChildren(): bool	(RecursiveFilterIterator) Check whether the inner iterator's current element has children
>getChildren(): RecursiveIterator|null	(RecursiveIterator) Returns an iterator for the current entry
>hasChildren(): bool	(RecursiveIterator) Returns if an iterator can be created for the current entry
>beginChildren(): void	(RecursiveIteratorIterator) Begin children
>beginIteration(): void	(RecursiveIteratorIterator) Begin Iteration
>callGetChildren(): RecursiveIterator|null	(RecursiveIteratorIterator) Get children
>callHasChildren(): bool	(RecursiveIteratorIterator) Has children
RecursiveIteratorIterator(Traversable $iterator, int $mode = RecursiveIteratorIterator::LEAVES_ONLY, int $flags = ?)	(new) Construct a RecursiveIteratorIterator
>current(): mixed	(RecursiveIteratorIterator) Access the current element value
>endChildren(): void	(RecursiveIteratorIterator) End children
>endIteration(): void	(RecursiveIteratorIterator) End Iteration
>getDepth(): int	(RecursiveIteratorIterator) Get the current depth of the recursive iteration
>getInnerIterator(): RecursiveIterator	(RecursiveIteratorIterator) Get inner iterator
>getMaxDepth(): int|false	(RecursiveIteratorIterator) Get max depth
>getSubIterator(int|null $level = null): RecursiveIterator|null	(RecursiveIteratorIterator) The current active sub iterator
>key(): mixed	(RecursiveIteratorIterator) Access the current key
>next(): void	(RecursiveIteratorIterator) Move forward to the next element
>nextElement(): void	(RecursiveIteratorIterator) Next element
>rewind(): void	(RecursiveIteratorIterator) Rewind the iterator to the first element of the top level inner iterator
>setMaxDepth(int $maxDepth = -1): void	(RecursiveIteratorIterator) Set max depth
>valid(): bool	(RecursiveIteratorIterator) Check whether the current position is valid
RecursiveRegexIterator(RecursiveIterator $iterator, string $pattern, int $mode = RecursiveRegexIterator::MATCH, int $flags = ?, int $pregFlags = ?)	(new) Creates a new RecursiveRegexIterator
>getChildren(): RecursiveRegexIterator	(RecursiveRegexIterator) Returns an iterator for the current entry
>hasChildren(): bool	(RecursiveRegexIterator) Returns whether an iterator can be obtained for the current entry
>beginChildren(): void	(RecursiveTreeIterator) Begin children
>beginIteration(): RecursiveIterator	(RecursiveTreeIterator) Begin iteration
>callGetChildren(): RecursiveIterator	(RecursiveTreeIterator) Get children
>callHasChildren(): bool	(RecursiveTreeIterator) Has children
RecursiveTreeIterator(RecursiveIterator|IteratorAggregate $iterator, int $flags = RecursiveTreeIterator::BYPASS_KEY, int $cachingIteratorFlags = CachingIterator::CATCH_GET_CHILD, int $mode = RecursiveTreeIterator::SELF_FIRST)	(new) Construct a RecursiveTreeIterator
>current(): mixed	(RecursiveTreeIterator) Get current element
>endChildren(): void	(RecursiveTreeIterator) End children
>endIteration(): void	(RecursiveTreeIterator) End iteration
>getEntry(): string	(RecursiveTreeIterator) Get current entry
>getPostfix(): string	(RecursiveTreeIterator) Get the postfix
>getPrefix(): string	(RecursiveTreeIterator) Get the prefix
>key(): mixed	(RecursiveTreeIterator) Get the key of the current element
>next(): void	(RecursiveTreeIterator) Move to next element
>nextElement(): void	(RecursiveTreeIterator) Next element
>rewind(): void	(RecursiveTreeIterator) Rewind iterator
>setPostfix(string $postfix): void	(RecursiveTreeIterator) Set postfix
>setPrefixPart(int $part, string $value): void	(RecursiveTreeIterator) Set a part of the prefix
>valid(): bool	(RecursiveTreeIterator) Check validity
>accept(): bool	(RegexIterator) Get accept status
RegexIterator(Iterator $iterator, string $pattern, int $mode = RegexIterator::MATCH, int $flags = ?, int $pregFlags = ?)	(new) Create a new RegexIterator
>getFlags(): int	(RegexIterator) Get flags
>getMode(): int	(RegexIterator) Returns operation mode
>getPregFlags(): int	(RegexIterator) Returns the regular expression flags
>getRegex(): string	(RegexIterator) Returns current regular expression
>setFlags(int $flags): void	(RegexIterator) Sets the flags
>setMode(int $mode): void	(RegexIterator) Sets the operation mode
>setPregFlags(int $pregFlags): void	(RegexIterator) Sets the regular expression flags
>seek(int $offset): void	(SeekableIterator) Seeks to a position
>add(int $index, mixed $value): void	(SplDoublyLinkedList) Add/insert a new value at the specified index
>bottom(): mixed	(SplDoublyLinkedList) Peeks at the node from the beginning of the doubly linked list
>count(): int	(SplDoublyLinkedList) Counts the number of elements in the doubly linked list
>current(): mixed	(SplDoublyLinkedList) Return current array entry
>getIteratorMode(): int	(SplDoublyLinkedList) Returns the mode of iteration
>isEmpty(): bool	(SplDoublyLinkedList) Checks whether the doubly linked list is empty
>key(): int	(SplDoublyLinkedList) Return current node index
>next(): void	(SplDoublyLinkedList) Move to next entry
>offsetExists(int $index): bool	(SplDoublyLinkedList) Returns whether the requested $index exists
>offsetGet(int $index): mixed	(SplDoublyLinkedList) Returns the value at the specified $index
>offsetSet(int|null $index, mixed $value): void	(SplDoublyLinkedList) Sets the value at the specified $index to $value
>offsetUnset(int $index): void	(SplDoublyLinkedList) Unsets the value at the specified $index
>pop(): mixed	(SplDoublyLinkedList) Pops a node from the end of the doubly linked list
>prev(): void	(SplDoublyLinkedList) Move to previous entry
>push(mixed $value): void	(SplDoublyLinkedList) Pushes an element at the end of the doubly linked list
>rewind(): void	(SplDoublyLinkedList) Rewind iterator back to the start
>serialize(): string	(SplDoublyLinkedList) Serializes the storage
>setIteratorMode(int $mode): int	(SplDoublyLinkedList) Sets the mode of iteration
>shift(): mixed	(SplDoublyLinkedList) Shifts a node from the beginning of the doubly linked list
>top(): mixed	(SplDoublyLinkedList) Peeks at the node from the end of the doubly linked list
>unserialize(string $data): void	(SplDoublyLinkedList) Unserializes the storage
>unshift(mixed $value): void	(SplDoublyLinkedList) Prepends the doubly linked list with an element
>valid(): bool	(SplDoublyLinkedList) Check whether the doubly linked list contains more nodes
SplFileInfo(string $filename)	(new) Construct a new SplFileInfo object
>getATime(): int|false	(SplFileInfo) Gets last access time of the file
>getBasename(string $suffix = ""): string	(SplFileInfo) Gets the base name of the file
>getCTime(): int|false	(SplFileInfo) Gets the inode change time
>getExtension(): string	(SplFileInfo) Gets the file extension
>getFileInfo(string|null $class = null): SplFileInfo	(SplFileInfo) Gets an SplFileInfo object for the file
>getFilename(): string	(SplFileInfo) Gets the filename
>getGroup(): int|false	(SplFileInfo) Gets the file group
>getInode(): int|false	(SplFileInfo) Gets the inode for the file
>getLinkTarget(): string|false	(SplFileInfo) Gets the target of a link
>getMTime(): int|false	(SplFileInfo) Gets the last modified time
>getOwner(): int|false	(SplFileInfo) Gets the owner of the file
>getPath(): string	(SplFileInfo) Gets the path without filename
>getPathInfo(string|null $class = null): SplFileInfo|null	(SplFileInfo) Gets an SplFileInfo object for the path
>getPathname(): string	(SplFileInfo) Gets the path to the file
>getPerms(): int|false	(SplFileInfo) Gets file permissions
>getRealPath(): string|false	(SplFileInfo) Gets absolute path to file
>getSize(): int|false	(SplFileInfo) Gets file size
>getType(): string|false	(SplFileInfo) Gets file type
>isDir(): bool	(SplFileInfo) Tells if the file is a directory
>isExecutable(): bool	(SplFileInfo) Tells if the file is executable
>isFile(): bool	(SplFileInfo) Tells if the object references a regular file
>isLink(): bool	(SplFileInfo) Tells if the file is a link
>isReadable(): bool	(SplFileInfo) Tells if file is readable
>isWritable(): bool	(SplFileInfo) Tells if the entry is writable
>openFile(string $mode = "r", bool $useIncludePath = false, resource|null $context = null): SplFileObject	(SplFileInfo) Gets an SplFileObject object for the file
>setFileClass(string $class = SplFileObject::class): void	(SplFileInfo) Sets the class used with SplFileInfo::openFile
>setInfoClass(string $class = SplFileInfo::class): void	(SplFileInfo) Sets the class used with SplFileInfo::getFileInfo and SplFileInfo::getPathInfo
>__toString(): string	(SplFileInfo) Returns the path to the file as a string
SplFileObject(string $filename, string $mode = "r", bool $useIncludePath = false, resource|null $context = null)	(new) Construct a new file object
>current(): string|array|false	(SplFileObject) Retrieve current line of file
>eof(): bool	(SplFileObject) Reached end of file
>fflush(): bool	(SplFileObject) Flushes the output to the file
>fgetc(): string|false	(SplFileObject) Gets character from file
>fgetcsv(string $separator = ",", string $enclosure = "\"", string $escape = "\\"): array|false	(SplFileObject) Gets line from file and parse as CSV fields
>fgets(): string	(SplFileObject) Gets line from file
>fgetss(string $allowable_tags = ?): string	(SplFileObject) Gets line from file and strip HTML tags
>flock(int $operation, int $wouldBlock = null): bool	(SplFileObject) Portable file locking
>fpassthru(): int	(SplFileObject) Output all remaining data on a file pointer
>fputcsv(array $fields, string $separator = ",", string $enclosure = "\"", string $escape = "\\", string $eol = "\n"): int|false	(SplFileObject) Write a field array as a CSV line
>fread(int $length): string|false	(SplFileObject) Read from file
>fscanf(string $format, mixed ...$vars): array|int|null	(SplFileObject) Parses input from file according to a format
>fseek(int $offset, int $whence = SEEK_SET): int	(SplFileObject) Seek to a position
>fstat(): array	(SplFileObject) Gets information about the file
>ftell(): int|false	(SplFileObject) Return current file position
>ftruncate(int $size): bool	(SplFileObject) Truncates the file to a given length
>fwrite(string $data, int $length = ?): int|false	(SplFileObject) Write to file
>getChildren(): null	(SplFileObject) No purpose
>getCsvControl(): array	(SplFileObject) Get the delimiter, enclosure and escape character for CSV
>getCurrentLine()	(SplFileObject) Alias of SplFileObject::fgets
>getFlags(): int	(SplFileObject) Gets flags for the SplFileObject
>getMaxLineLen(): int	(SplFileObject) Get maximum line length
>hasChildren(): false	(SplFileObject) SplFileObject does not have children
>key(): int	(SplFileObject) Get line number
>next(): void	(SplFileObject) Read next line
>rewind(): void	(SplFileObject) Rewind the file to the first line
>seek(int $line): void	(SplFileObject) Seek to specified line
>setCsvControl(string $separator = ",", string $enclosure = "\"", string $escape = "\\"): void	(SplFileObject) Set the delimiter, enclosure and escape character for CSV
>setFlags(int $flags): void	(SplFileObject) Sets flags for the SplFileObject
>setMaxLineLen(int $maxLength): void	(SplFileObject) Set maximum line length
>__toString(): string	(SplFileObject) Returns the current line as a string
>valid(): bool	(SplFileObject) Not at EOF
SplFixedArray(int $size = ?)	(new) Constructs a new fixed array
>count(): int	(SplFixedArray) Returns the size of the array
>current(): mixed	(SplFixedArray) Return current array entry
SplFixedArray::fromArray(array $array, bool $preserveKeys = true): SplFixedArray	Import a PHP array in a SplFixedArray instance
>getIterator(): Iterator	(SplFixedArray) Retrieve the iterator to go through the array
>getSize(): int	(SplFixedArray) Gets the size of the array
>jsonSerialize(): array	(SplFixedArray) Returns a representation that can be converted to JSON
>key(): int	(SplFixedArray) Return current array index
>next(): void	(SplFixedArray) Move to next entry
>offsetExists(int $index): bool	(SplFixedArray) Returns whether the requested index exists
>offsetGet(int $index): mixed	(SplFixedArray) Returns the value at the specified index
>offsetSet(int $index, mixed $value): void	(SplFixedArray) Sets a new value at a specified index
>offsetUnset(int $index): void	(SplFixedArray) Unsets the value at the specified $index
>rewind(): void	(SplFixedArray) Rewind iterator back to the start
>__serialize(): array	(SplFixedArray) Serializes the SplFixedArray object
>setSize(int $size): true	(SplFixedArray) Change the size of an array
>toArray(): array	(SplFixedArray) Returns a PHP array from the fixed array
>__unserialize(array $data): void	(SplFixedArray) Deserializes the $data parameter into an SplFixedArray object
>valid(): bool	(SplFixedArray) Check whether the array contains more elements
>__wakeup(): void	(SplFixedArray) Reinitialises the array after being unserialised
>compare(mixed $value1, mixed $value2): int	(SplHeap) Compare elements in order to place them correctly in the heap while sifting up
>count(): int	(SplHeap) Counts the number of elements in the heap
>current(): mixed	(SplHeap) Return current node pointed by the iterator
>extract(): mixed	(SplHeap) Extracts a node from top of the heap and sift up
>insert(mixed $value): true	(SplHeap) Inserts an element in the heap by sifting it up
>isCorrupted(): bool	(SplHeap) Tells if the heap is in a corrupted state
>isEmpty(): bool	(SplHeap) Checks whether the heap is empty
>key(): int	(SplHeap) Return current node index
>next(): void	(SplHeap) Move to the next node
>recoverFromCorruption(): true	(SplHeap) Recover from the corrupted state and allow further actions on the heap
>rewind(): void	(SplHeap) Rewind iterator back to the start (no-op)
>top(): mixed	(SplHeap) Peeks at the node from the top of the heap
>valid(): bool	(SplHeap) Check whether the heap contains more nodes
>compare(mixed $value1, mixed $value2): int	(SplMaxHeap) Compare elements in order to place them correctly in the heap while sifting up
>compare(mixed $value1, mixed $value2): int	(SplMinHeap) Compare elements in order to place them correctly in the heap while sifting up
>addAll(SplObjectStorage $storage): int	(SplObjectStorage) Adds all objects from another storage
>attach(object $object, mixed $info = null): void	(SplObjectStorage) Adds an object in the storage
>contains(object $object): bool	(SplObjectStorage) Checks if the storage contains a specific object
>count(int $mode = COUNT_NORMAL): int	(SplObjectStorage) Returns the number of objects in the storage
>current(): object	(SplObjectStorage) Returns the current storage entry
>detach(object $object): void	(SplObjectStorage) Removes an object from the storage
>getHash(object $object): string	(SplObjectStorage) Calculate a unique identifier for the contained objects
>getInfo(): mixed	(SplObjectStorage) Returns the data associated with the current iterator entry
>key(): int	(SplObjectStorage) Returns the index at which the iterator currently is
>next(): void	(SplObjectStorage) Move to the next entry
>offsetExists(object $object): bool	(SplObjectStorage) Checks whether an object exists in the storage
>offsetGet(object $object): mixed	(SplObjectStorage) Returns the data associated with an object
>offsetSet(object $object, mixed $info = null): void	(SplObjectStorage) Associates data to an object in the storage
>offsetUnset(object $object): void	(SplObjectStorage) Removes an object from the storage
>removeAll(SplObjectStorage $storage): int	(SplObjectStorage) Removes objects contained in another storage from the current storage
>removeAllExcept(SplObjectStorage $storage): int	(SplObjectStorage) Removes all objects except for those contained in another storage from the current storage
>rewind(): void	(SplObjectStorage) Rewind the iterator to the first storage element
>seek(int $offset): void	(SplObjectStorage) Seeks iterator to a position
>serialize(): string	(SplObjectStorage) Serializes the storage
>setInfo(mixed $info): void	(SplObjectStorage) Sets the data associated with the current iterator entry
>unserialize(string $data): void	(SplObjectStorage) Unserializes a storage from its string representation
>valid(): bool	(SplObjectStorage) Returns if the current iterator entry is valid
>update(SplSubject $subject): void	(SplObserver) Receive update from subject
>compare(mixed $priority1, mixed $priority2): int	(SplPriorityQueue) Compare priorities in order to place elements correctly in the heap while sifting up
>count(): int	(SplPriorityQueue) Counts the number of elements in the queue
>current(): mixed	(SplPriorityQueue) Return current node pointed by the iterator
>extract(): mixed	(SplPriorityQueue) Extracts a node from top of the heap and sift up
>getExtractFlags(): int	(SplPriorityQueue) Get the flags of extraction
>insert(mixed $value, mixed $priority): true	(SplPriorityQueue) Inserts an element in the queue by sifting it up
>isCorrupted(): bool	(SplPriorityQueue) Tells if the priority queue is in a corrupted state
>isEmpty(): bool	(SplPriorityQueue) Checks whether the queue is empty
>key(): int	(SplPriorityQueue) Return current node index
>next(): void	(SplPriorityQueue) Move to the next node
>recoverFromCorruption(): true	(SplPriorityQueue) Recover from the corrupted state and allow further actions on the queue
>rewind(): void	(SplPriorityQueue) Rewind iterator back to the start (no-op)
>setExtractFlags(int $flags): int	(SplPriorityQueue) Sets the mode of extraction
>top(): mixed	(SplPriorityQueue) Peeks at the node from the top of the queue
>valid(): bool	(SplPriorityQueue) Check whether the queue contains more nodes
>dequeue(): mixed	(SplQueue) Dequeues a node from the queue
>enqueue(mixed $value): void	(SplQueue) Adds an element to the queue
>attach(SplObserver $observer): void	(SplSubject) Attach an SplObserver
>detach(SplObserver $observer): void	(SplSubject) Detach an observer
>notify(): void	(SplSubject) Notify an observer
SplTempFileObject(int $maxMemory = 2 * 1024 * 1024)	(new) Construct a new temporary file object
BadFunctionCallException()	(new) Exception thrown if a callback refers to an undefined function or if some arguments are missing
BadMethodCallException()	(new) Exception thrown if a callback refers to an undefined method or if some arguments are missing
DomainException()	(new) Exception thrown if a value does not adhere to a defined valid data domain
EmptyIterator()	(new) The EmptyIterator class for an empty iterator
InvalidArgumentException()	(new) Exception thrown if an argument is not of the expected type
LengthException()	(new) Exception thrown if a length is invalid
LogicException()	(new) Exception that represents error in the program logic
OuterIterator()	(new) Classes implementing OuterIterator can be used to iterate over iterators
OutOfBoundsException()	(new) Exception thrown if a value is not a valid key
OutOfRangeException()	(new) Exception thrown when an illegal index was requested
OverflowException()	(new) Exception thrown when adding an element to a full container
RangeException()	(new) Exception thrown to indicate range errors during program execution
RecursiveArrayIterator()	(new) This iterator allows for unsetting and modifying values and keys while iterating over arrays and objects, in the same way as the ArrayIterator
RecursiveIterator()	(new) Classes implementing RecursiveIterator can be used to iterate over iterators recursively
RuntimeException()	(new) Exception thrown if an error which can only be found on runtime occurs
SeekableIterator()	(new) The Seekable iterator
SplDoublyLinkedList()	(new) The SplDoublyLinkedList class provides the main functionalities of a doubly linked list
SplHeap()	(new) The SplHeap class provides the main functionalities of a Heap
SplMaxHeap()	(new) The SplMaxHeap class provides the main functionalities of a heap, keeping the maximum on the top
SplMinHeap()	(new) The SplMinHeap class provides the main functionalities of a heap, keeping the minimum on the top
SplObjectStorage()	(new) The SplObjectStorage class provides a map from objects to data or, by ignoring data, an object set
SplObserver()	(new) The SplObserver interface is used alongside SplSubject to implement the Observer Design Pattern
SplPriorityQueue()	(new) The SplPriorityQueue class provides the main functionalities of a prioritized queue, implemented using a max heap
SplQueue()	(new) The SplQueue class provides the main functionalities of a queue implemented using a doubly linked list by setting the iterator mode to SplDoublyLinkedList::IT_MODE_FIFO
SplStack()	(new) The SplStack class provides the main functionalities of a stack implemented using a doubly linked list by setting the iterator mode to SplDoublyLinkedList::IT_MODE_LIFO
SplSubject()	(new) The SplSubject interface is used alongside SplObserver to implement the Observer Design Pattern
UnderflowException()	(new) Exception thrown when performing an invalid operation on an empty container, such as removing an element
UnexpectedValueException()	(new) Exception thrown if a value does not match with a set of values
>backup(SQLite3 $destination, string $sourceDatabase = "main", string $destinationDatabase = "main"): bool	(SQLite3) Backup one database to another database
>busyTimeout(int $milliseconds): bool	(SQLite3) Sets the busy connection handler
>changes(): int	(SQLite3) Returns the number of database rows that were changed (or inserted or deleted) by the most recent SQL statement
>close(): bool	(SQLite3) Closes the database connection
SQLite3(string $filename, int $flags = SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE, string $encryptionKey = "")	(new) Instantiates an SQLite3 object and opens an SQLite 3 database
>createAggregate(string $name, callable $stepCallback, callable $finalCallback, int $argCount = -1): bool	(SQLite3) Registers a PHP function for use as an SQL aggregate function
>createCollation(string $name, callable $callback): bool	(SQLite3) Registers a PHP function for use as an SQL collating function
>createFunction(string $name, callable $callback, int $argCount = -1, int $flags = ?): bool	(SQLite3) Registers a PHP function for use as an SQL scalar function
>enableExceptions(bool $enable = false): bool	(SQLite3) Enable throwing exceptions
SQLite3::escapeString(string $string): string	Returns a string that has been properly escaped
>exec(string $query): bool	(SQLite3) Executes a result-less query against a given database
>lastErrorCode(): int	(SQLite3) Returns the numeric result code of the most recent failed SQLite request
>lastErrorMsg(): string	(SQLite3) Returns English text describing the most recent failed SQLite request
>lastInsertRowID(): int	(SQLite3) Returns the row ID of the most recent INSERT into the database
>loadExtension(string $name): bool	(SQLite3) Attempts to load an SQLite extension library
>open(string $filename, int $flags = SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE, string $encryptionKey = ""): void	(SQLite3) Opens an SQLite database
>openBlob(string $table, string $column, int $rowid, string $database = "main", int $flags = SQLITE3_OPEN_READONLY): resource|false	(SQLite3) Opens a stream resource to read a BLOB
>prepare(string $query): SQLite3Stmt|false	(SQLite3) Prepares an SQL statement for execution
>query(string $query): SQLite3Result|false	(SQLite3) Executes an SQL query
>querySingle(string $query, bool $entireRow = false): mixed	(SQLite3) Executes a query and returns a single result
>setAuthorizer(callable|null $callback): bool	(SQLite3) Configures a callback to be used as an authorizer to limit what a statement can do
SQLite3::version(): array	Returns the SQLite3 library version as a string constant and as a number
>columnName(int $column): string|false	(SQLite3Result) Returns the name of the nth column
>columnType(int $column): int|false	(SQLite3Result) Returns the type of the nth column
SQLite3Result()	(new) Constructs an SQLite3Result
>fetchArray(int $mode = SQLITE3_BOTH): array|false	(SQLite3Result) Fetches a result row as an associative or numerically indexed array or both
>finalize(): true	(SQLite3Result) Closes the result set
>numColumns(): int	(SQLite3Result) Returns the number of columns in the result set
>reset(): bool	(SQLite3Result) Resets the result set back to the first row
>bindParam(string|int $param, mixed $var, int $type = SQLITE3_TEXT): bool	(SQLite3Stmt) Binds a parameter to a statement variable
>bindValue(string|int $param, mixed $value, int $type = SQLITE3_TEXT): bool	(SQLite3Stmt) Binds the value of a parameter to a statement variable
>clear(): bool	(SQLite3Stmt) Clears all current bound parameters
>close(): true	(SQLite3Stmt) Closes the prepared statement
SQLite3Stmt(SQLite3 $sqlite3, string $query)	(new) Constructs an SQLite3Stmt object
>execute(): SQLite3Result|false	(SQLite3Stmt) Executes a prepared statement and returns a result set object
>getSQL(bool $expand = false): string|false	(SQLite3Stmt) Get the SQL of the statement
>paramCount(): int	(SQLite3Stmt) Returns the number of parameters within the prepared statement
>readOnly(): bool	(SQLite3Stmt) Returns whether a statement is definitely read only
>reset(): bool	(SQLite3Stmt) Resets the prepared statement
SQLite3Exception()	(new) Represents a SQLite3 specific exception
sqlsrv_begin_transaction(resource $conn): bool	Begins a database transaction
sqlsrv_cancel(resource $stmt): bool	Cancels a statement
sqlsrv_client_info(resource $conn): array	Returns information about the client and specified connection
sqlsrv_close(resource $conn): bool	Closes an open connection and releases resourses associated with the connection
sqlsrv_commit(resource $conn): bool	Commits a transaction that was begun with sqlsrv_begin_transaction
sqlsrv_configure(string $setting, mixed $value): bool	Changes the driver error handling and logging configurations
sqlsrv_connect(string $serverName, array $connectionInfo = ?): resource	Opens a connection to a Microsoft SQL Server database
sqlsrv_errors(int $errorsOrWarnings = ?): mixed	Returns error and warning information about the last SQLSRV operation performed
sqlsrv_execute(resource $stmt): bool	Executes a statement prepared with sqlsrv_prepare
sqlsrv_fetch_array(resource $stmt, int $fetchType = ?, int $row = ?, int $offset = ?): array	Returns a row as an array
sqlsrv_fetch_object(resource $stmt, string $className = ?, array $ctorParams = ?, int $row = ?, int $offset = ?): mixed	Retrieves the next row of data in a result set as an object
sqlsrv_fetch(resource $stmt, int $row = ?, int $offset = ?): mixed	Makes the next row in a result set available for reading
sqlsrv_field_metadata(resource $stmt): mixed	Retrieves metadata for the fields of a statement prepared by sqlsrv_prepare or sqlsrv_query
sqlsrv_free_stmt(resource $stmt): bool	Frees all resources for the specified statement
sqlsrv_get_config(string $setting): mixed	Returns the value of the specified configuration setting
sqlsrv_get_field(resource $stmt, int $fieldIndex, int $getAsType = ?): mixed	Gets field data from the currently selected row
sqlsrv_has_rows(resource $stmt): bool	Indicates whether the specified statement has rows
sqlsrv_next_result(resource $stmt): mixed	Makes the next result of the specified statement active
sqlsrv_num_fields(resource $stmt): mixed	Retrieves the number of fields (columns) on a statement
sqlsrv_num_rows(resource $stmt): mixed	Retrieves the number of rows in a result set
sqlsrv_prepare(resource $conn, string $sql, array $params = ?, array $options = ?): mixed	Prepares a query for execution
sqlsrv_query(resource $conn, string $sql, array $params = ?, array $options = ?): mixed	Prepares and executes a query
sqlsrv_rollback(resource $conn): bool	Rolls back a transaction that was begun with sqlsrv_begin_transaction
sqlsrv_rows_affected(resource $stmt): int|false	Returns the number of rows modified by the last INSERT, UPDATE, or DELETE query executed
sqlsrv_send_stream_data(resource $stmt): bool	Sends data from parameter streams to the server
sqlsrv_server_info(resource $conn): array	Returns information about the server
ssdeep_fuzzy_compare(string $signature1, string $signature2): int	Calculates the match score between two fuzzy hash signatures
ssdeep_fuzzy_hash_filename(string $file_name): string	Create a fuzzy hash from a file
ssdeep_fuzzy_hash(string $to_hash): string	Create a fuzzy hash from a string
ssh2_auth_agent(resource $session, string $username): bool	Authenticate over SSH using the ssh agent
ssh2_auth_hostbased_file(resource $session, string $username, string $hostname, string $pubkeyfile, string $privkeyfile, string $passphrase = ?, string $local_username = ?): bool	Authenticate using a public hostkey
ssh2_auth_none(resource $session, string $username): mixed	Authenticate as "none"
ssh2_auth_password(resource $session, string $username, string $password): bool	Authenticate over SSH using a plain password
ssh2_auth_pubkey_file(resource $session, string $username, string $pubkeyfile, string $privkeyfile, string $passphrase = ?): bool	Authenticate using a public key
ssh2_connect(string $host, int $port = 22, array $methods = ?, array $callbacks = ?): resource|false	Connect to an SSH server
ssh2_disconnect(resource $session): bool	Close a connection to a remote SSH server
ssh2_exec(resource $session, string $command, string $pty = ?, array $env = ?, int $width = 80, int $height = 25, int $width_height_type = SSH2_TERM_UNIT_CHARS): resource|false	Execute a command on a remote server
ssh2_fetch_stream(resource $channel, int $streamid): resource	Fetch an extended data stream
ssh2_fingerprint(resource $session, int $flags = SSH2_FINGERPRINT_MD5 | SSH2_FINGERPRINT_HEX): string	Retrieve fingerprint of remote server
ssh2_forward_accept(resource $listener): resource|false	Accept a connection created by a listener
ssh2_forward_listen(resource $session, int $port, string $host = ?, int $max_connections = 16): resource|false	Bind a port on the remote server and listen for connections
ssh2_methods_negotiated(resource $session): array	Return list of negotiated methods
ssh2_poll(array $desc, int $timeout = 30): int	Poll the channels/listeners/streams for events
ssh2_publickey_add(resource $pkey, string $algoname, string $blob, bool $overwrite = false, array $attributes = ?): bool	Add an authorized publickey
ssh2_publickey_init(resource $session): resource|false	Initialize Publickey subsystem
ssh2_publickey_list(resource $pkey): array	List currently authorized publickeys
ssh2_publickey_remove(resource $pkey, string $algoname, string $blob): bool	Remove an authorized publickey
ssh2_scp_recv(resource $session, string $remote_file, string $local_file): bool	Request a file via SCP
ssh2_scp_send(resource $session, string $local_file, string $remote_file, int $create_mode = 0644): bool	Send a file via SCP
ssh2_send_eof(resource $channel): bool	Send EOF to stream
ssh2_sftp_chmod(resource $sftp, string $filename, int $mode): bool	Changes file mode
ssh2_sftp_lstat(resource $sftp, string $path): array	Stat a symbolic link
ssh2_sftp_mkdir(resource $sftp, string $dirname, int $mode = 0777, bool $recursive = false): bool	Create a directory
ssh2_sftp_readlink(resource $sftp, string $link): string	Return the target of a symbolic link
ssh2_sftp_realpath(resource $sftp, string $filename): string	Resolve the realpath of a provided path string
ssh2_sftp_rename(resource $sftp, string $from, string $to): bool	Rename a remote file
ssh2_sftp_rmdir(resource $sftp, string $dirname): bool	Remove a directory
ssh2_sftp_stat(resource $sftp, string $path): array	Stat a file on a remote filesystem
ssh2_sftp_symlink(resource $sftp, string $target, string $link): bool	Create a symlink
ssh2_sftp_unlink(resource $sftp, string $filename): bool	Delete a file
ssh2_sftp(resource $session): resource|false	Initialize SFTP subsystem
ssh2_shell(resource $session, string $termtype = "vanilla", array|null $env = null, int $width = 80, int $height = 25, int $width_height_type = SSH2_TERM_UNIT_CHARS): resource|false	Request an interactive shell
ssh2_tunnel(resource $session, string $host, int $port): resource	Open a tunnel through a remote server
stats_absolute_deviation(array $a): float	Returns the absolute deviation of an array of values
stats_cdf_beta(float $par1, float $par2, float $par3, int $which): float	Calculates any one parameter of the beta distribution given values for the others
stats_cdf_binomial(float $par1, float $par2, float $par3, int $which): float	Calculates any one parameter of the binomial distribution given values for the others
stats_cdf_cauchy(float $par1, float $par2, float $par3, int $which): float	Calculates any one parameter of the Cauchy distribution given values for the others
stats_cdf_chisquare(float $par1, float $par2, int $which): float	Calculates any one parameter of the chi-square distribution given values for the others
stats_cdf_exponential(float $par1, float $par2, int $which): float	Calculates any one parameter of the exponential distribution given values for the others
stats_cdf_f(float $par1, float $par2, float $par3, int $which): float	Calculates any one parameter of the F distribution given values for the others
stats_cdf_gamma(float $par1, float $par2, float $par3, int $which): float	Calculates any one parameter of the gamma distribution given values for the others
stats_cdf_laplace(float $par1, float $par2, float $par3, int $which): float	Calculates any one parameter of the Laplace distribution given values for the others
stats_cdf_logistic(float $par1, float $par2, float $par3, int $which): float	Calculates any one parameter of the logistic distribution given values for the others
stats_cdf_negative_binomial(float $par1, float $par2, float $par3, int $which): float	Calculates any one parameter of the negative binomial distribution given values for the others
stats_cdf_noncentral_chisquare(float $par1, float $par2, float $par3, int $which): float	Calculates any one parameter of the non-central chi-square distribution given values for the others
stats_cdf_noncentral_f(float $par1, float $par2, float $par3, float $par4, int $which): float	Calculates any one parameter of the non-central F distribution given values for the others
stats_cdf_noncentral_t(float $par1, float $par2, float $par3, int $which): float	Calculates any one parameter of the non-central t-distribution give values for the others
stats_cdf_normal(float $par1, float $par2, float $par3, int $which): float	Calculates any one parameter of the normal distribution given values for the others
stats_cdf_poisson(float $par1, float $par2, int $which): float	Calculates any one parameter of the Poisson distribution given values for the others
stats_cdf_t(float $par1, float $par2, int $which): float	Calculates any one parameter of the t-distribution given values for the others
stats_cdf_uniform(float $par1, float $par2, float $par3, int $which): float	Calculates any one parameter of the uniform distribution given values for the others
stats_cdf_weibull(float $par1, float $par2, float $par3, int $which): float	Calculates any one parameter of the Weibull distribution given values for the others
stats_covariance(array $a, array $b): float	Computes the covariance of two data sets
stats_dens_beta(float $x, float $a, float $b): float	Probability density function of the beta distribution
stats_dens_cauchy(float $x, float $ave, float $stdev): float	Probability density function of the Cauchy distribution
stats_dens_chisquare(float $x, float $dfr): float	Probability density function of the chi-square distribution
stats_dens_exponential(float $x, float $scale): float	Probability density function of the exponential distribution
stats_dens_f(float $x, float $dfr1, float $dfr2): float	Probability density function of the F distribution
stats_dens_gamma(float $x, float $shape, float $scale): float	Probability density function of the gamma distribution
stats_dens_laplace(float $x, float $ave, float $stdev): float	Probability density function of the Laplace distribution
stats_dens_logistic(float $x, float $ave, float $stdev): float	Probability density function of the logistic distribution
stats_dens_normal(float $x, float $ave, float $stdev): float	Probability density function of the normal distribution
stats_dens_pmf_binomial(float $x, float $n, float $pi): float	Probability mass function of the binomial distribution
stats_dens_pmf_hypergeometric(float $n1, float $n2, float $N1, float $N2): float	Probability mass function of the hypergeometric distribution
stats_dens_pmf_negative_binomial(float $x, float $n, float $pi): float	Probability mass function of the negative binomial distribution
stats_dens_pmf_poisson(float $x, float $lb): float	Probability mass function of the Poisson distribution
stats_dens_t(float $x, float $dfr): float	Probability density function of the t-distribution
stats_dens_uniform(float $x, float $a, float $b): float	Probability density function of the uniform distribution
stats_dens_weibull(float $x, float $a, float $b): float	Probability density function of the Weibull distribution
stats_harmonic_mean(array $a): number	Returns the harmonic mean of an array of values
stats_kurtosis(array $a): float	Computes the kurtosis of the data in the array
stats_rand_gen_beta(float $a, float $b): float	Generates a random deviate from the beta distribution
stats_rand_gen_chisquare(float $df): float	Generates a random deviate from the chi-square distribution
stats_rand_gen_exponential(float $av): float	Generates a random deviate from the exponential distribution
stats_rand_gen_f(float $dfn, float $dfd): float	Generates a random deviate from the F distribution
stats_rand_gen_funiform(float $low, float $high): float	Generates uniform float between low (exclusive) and high (exclusive)
stats_rand_gen_gamma(float $a, float $r): float	Generates a random deviate from the gamma distribution
stats_rand_gen_ibinomial_negative(int $n, float $p): int	Generates a random deviate from the negative binomial distribution
stats_rand_gen_ibinomial(int $n, float $pp): int	Generates a random deviate from the binomial distribution
stats_rand_gen_int(): int	Generates random integer between 1 and 2147483562
stats_rand_gen_ipoisson(float $mu): int	Generates a single random deviate from a Poisson distribution
stats_rand_gen_iuniform(int $low, int $high): int	Generates integer uniformly distributed between LOW (inclusive) and HIGH (inclusive)
stats_rand_gen_noncentral_chisquare(float $df, float $xnonc): float	Generates a random deviate from the non-central chi-square distribution
stats_rand_gen_noncentral_f(float $dfn, float $dfd, float $xnonc): float	Generates a random deviate from the noncentral F distribution
stats_rand_gen_noncentral_t(float $df, float $xnonc): float	Generates a single random deviate from a non-central t-distribution
stats_rand_gen_normal(float $av, float $sd): float	Generates a single random deviate from a normal distribution
stats_rand_gen_t(float $df): float	Generates a single random deviate from a t-distribution
stats_rand_get_seeds(): array	Get the seed values of the random number generator
stats_rand_phrase_to_seeds(string $phrase): array	Generate two seeds for the RGN random number generator
stats_rand_ranf(): float	Generates a random floating point number between 0 and 1
stats_rand_setall(int $iseed1, int $iseed2): void	Set seed values to the random generator
stats_skew(array $a): float	Computes the skewness of the data in the array
stats_standard_deviation(array $a, bool $sample = false): float	Returns the standard deviation
stats_stat_binomial_coef(int $x, int $n): float	Returns a binomial coefficient
stats_stat_correlation(array $arr1, array $arr2): float	Returns the Pearson correlation coefficient of two data sets
stats_stat_factorial(int $n): float	Returns the factorial of an integer
stats_stat_independent_t(array $arr1, array $arr2): float	Returns the t-value from the independent two-sample t-test
stats_stat_innerproduct(array $arr1, array $arr2): float	Returns the inner product of two vectors
stats_stat_paired_t(array $arr1, array $arr2): float	Returns the t-value of the dependent t-test for paired samples
stats_stat_percentile(array $arr, float $perc): float	Returns the percentile value
stats_stat_powersum(array $arr, float $power): float	Returns the power sum of a vector
stats_variance(array $a, bool $sample = false): float	Returns the variance
stomp_connect_error(): string	Returns a string description of the last connect error
stomp_version(): string	Gets the current stomp extension version
>abort(string $transaction_id, array $headers = ?): bool	(Stomp) Rolls back a transaction in progress
stomp_abort(resource $link, string $transaction_id, array $headers = ?): bool	Rolls back a transaction in progress
>ack(mixed $msg, array $headers = ?): bool	(Stomp) Acknowledges consumption of a message
stomp_ack(resource $link, mixed $msg, array $headers = ?): bool	Acknowledges consumption of a message
>begin(string $transaction_id, array $headers = ?): bool	(Stomp) Starts a transaction
stomp_begin(resource $link, string $transaction_id, array $headers = ?): bool	Starts a transaction
>commit(string $transaction_id, array $headers = ?): bool	(Stomp) Commits a transaction in progress
stomp_commit(resource $link, string $transaction_id, array $headers = ?): bool	Commits a transaction in progress
stomp_connect(string $broker = ini_get("stomp.default_broker_uri"), string $username = ?, string $password = ?, array $headers = ?): resource	Opens a connection
stomp_close(resource $link): bool	Closes stomp connection
>error(): string	(Stomp) Gets the last stomp error
stomp_error(resource $link): string	Gets the last stomp error
>getReadTimeout(): array	(Stomp) Gets read timeout
stomp_get_read_timeout(resource $link): array	Gets read timeout
>getSessionId(): string|false	(Stomp) Gets the current stomp session ID
stomp_get_session_id(resource $link): string|false	Gets the current stomp session ID
>hasFrame(): bool	(Stomp) Indicates whether or not there is a frame ready to read
stomp_has_frame(resource $link): bool	Indicates whether or not there is a frame ready to read
>readFrame(string $class_name = "stompFrame"): stompframe	(Stomp) Reads the next frame
stomp_read_frame(resource $link): array	Reads the next frame
>send(string $destination, mixed $msg, array $headers = ?): bool	(Stomp) Sends a message
stomp_send(resource $link, string $destination, mixed $msg, array $headers = ?): bool	Sends a message
>setReadTimeout(int $seconds, int $microseconds = ?): void	(Stomp) Sets read timeout
stomp_set_read_timeout(resource $link, int $seconds, int $microseconds = ?): void	Sets read timeout
>subscribe(string $destination, array $headers = ?): bool	(Stomp) Registers to listen to a given destination
stomp_subscribe(resource $link, string $destination, array $headers = ?): bool	Registers to listen to a given destination
>unsubscribe(string $destination, array $headers = ?): bool	(Stomp) Removes an existing subscription
stomp_unsubscribe(resource $link, string $destination, array $headers = ?): bool	Removes an existing subscription
>getDetails(): string	(StompException) Get exception details
StompFrame(string $command = ?, array $headers = ?, string $body = ?)	(new) Constructor
Stomp()	(new) Represents a connection between PHP and a Stomp compliant Message Broker
StompException()	(new) Represents an error raised by the stomp extension
stream_bucket_append(resource $brigade, StreamBucket $bucket): void	Append bucket to brigade
stream_bucket_make_writeable(resource $brigade): StreamBucket|null	Returns a bucket object from the brigade to operate on
stream_bucket_new(resource $stream, string $buffer): StreamBucket	Create a new bucket for use on the current stream
stream_bucket_prepend(resource $brigade, StreamBucket $bucket): void	Prepend bucket to brigade
stream_context_create(array|null $options = null, array|null $params = null): resource	Creates a stream context
stream_context_get_default(array|null $options = null): resource	Retrieve the default stream context
stream_context_get_options(resource $stream_or_context): array	Retrieve options for a stream/wrapper/context
stream_context_get_params(resource $context): array	Retrieves parameters from a context
stream_context_set_default(array $options): resource	Set the default stream context
stream_context_set_option(resource $stream_or_context, string $wrapper, string $option, mixed $value): bool	Sets an option for a stream/wrapper/context
stream_context_set_options(resource $context, array $options): true	Sets options on the specified context
stream_context_set_params(resource $context, array $params): true	Set parameters for a stream/wrapper/context
stream_copy_to_stream(resource $from, resource $to, int|null $length = null, int $offset = ?): int|false	Copies data from one stream to another
stream_filter_append(resource $stream, string $filtername, int $read_write = ?, mixed $params = ?): resource	Attach a filter to a stream
stream_filter_prepend(resource $stream, string $filtername, int $read_write = ?, mixed $params = ?): resource	Attach a filter to a stream
stream_filter_register(string $filter_name, string $class): bool	Register a user defined stream filter
stream_filter_remove(resource $stream_filter): bool	Remove a filter from a stream
stream_get_contents(resource $stream, int|null $length = null, int $offset = -1): string|false	Reads remainder of a stream into a string
stream_get_filters(): array	Retrieve list of registered filters
stream_get_line(resource $stream, int $length, string $ending = ""): string|false	Gets line from stream resource up to a given delimiter
stream_get_meta_data(resource $stream): array	Retrieves header/meta data from streams/file pointers
stream_get_transports(): array	Retrieve list of registered socket transports
stream_get_wrappers(): array	Retrieve list of registered streams
stream_is_local(resource|string $stream): bool	Checks if a stream is a local stream
stream_isatty(resource $stream): bool	Check if a stream is a TTY
(int $notification_code, int $severity, string|null $message, int $message_code, int $bytes_transferred, int $bytes_max): void	A callback function for the notification context parameter
stream_register_wrapper()	Alias of stream_wrapper_register
stream_resolve_include_path(string $filename): string|false	Resolve filename against the include path
stream_select(array|null $read, array|null $write, array|null $except, int|null $seconds, int|null $microseconds = null): int|false	Runs the equivalent of the select() system call on the given arrays of streams with a timeout specified by seconds and microseconds
stream_set_blocking(resource $stream, bool $enable): bool	Set blocking/non-blocking mode on a stream
stream_set_chunk_size(resource $stream, int $size): int	Set the stream chunk size
stream_set_read_buffer(resource $stream, int $size): int	Set read file buffering on the given stream
stream_set_timeout(resource $stream, int $seconds, int $microseconds = ?): bool	Set timeout period on a stream
stream_set_write_buffer(resource $stream, int $size): int	Sets write file buffering on the given stream
stream_socket_accept(resource $socket, float|null $timeout = null, string $peer_name = null): resource|false	Accept a connection on a socket created by stream_socket_server
stream_socket_client(string $address, int $error_code = null, string $error_message = null, float|null $timeout = null, int $flags = STREAM_CLIENT_CONNECT, resource|null $context = null): resource|false	Open Internet or Unix domain socket connection
stream_socket_enable_crypto(resource $stream, bool $enable, int|null $crypto_method = null, resource|null $session_stream = null): int|bool	Turns encryption on/off on an already connected socket
stream_socket_get_name(resource $socket, bool $remote): string|false	Retrieve the name of the local or remote sockets
stream_socket_pair(int $domain, int $type, int $protocol): array|false	Creates a pair of connected, indistinguishable socket streams
stream_socket_recvfrom(resource $socket, int $length, int $flags = ?, string|null $address = null): string|false	Receives data from a socket, connected or not
stream_socket_sendto(resource $socket, string $data, int $flags = ?, string $address = ""): int|false	Sends a message to a socket, whether it is connected or not
stream_socket_server(string $address, int $error_code = null, string $error_message = null, int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN, resource|null $context = null): resource|false	Create an Internet or Unix domain server socket
stream_socket_shutdown(resource $stream, int $mode): bool	Shutdown a full-duplex connection
stream_supports_lock(resource $stream): bool	Tells whether the stream supports locking
stream_wrapper_register(string $protocol, string $class, int $flags = ?): bool	Register a URL wrapper implemented as a PHP class
stream_wrapper_restore(string $protocol): bool	Restores a previously unregistered built-in wrapper
stream_wrapper_unregister(string $protocol): bool	Unregister a URL wrapper
>filter(resource $in, resource $out, int $consumed, bool $closing): int	(php_user_filter) Called when applying the filter
>onClose(): void	(php_user_filter) Called when closing the filter
>onCreate(): bool	(php_user_filter) Called when creating the filter
streamWrapper()	(new) Constructs a new stream wrapper
>__destruct()	(streamWrapper) Destructs an existing stream wrapper
>dir_closedir(): bool	(streamWrapper) Close directory handle
>dir_opendir(string $path, int $options): bool	(streamWrapper) Open directory handle
>dir_readdir(): string	(streamWrapper) Read entry from directory handle
>dir_rewinddir(): bool	(streamWrapper) Rewind directory handle
>mkdir(string $path, int $mode, int $options): bool	(streamWrapper) Create a directory
>rename(string $path_from, string $path_to): bool	(streamWrapper) Renames a file or directory
>rmdir(string $path, int $options): bool	(streamWrapper) Removes a directory
>stream_cast(int $cast_as): resource	(streamWrapper) Retrieve the underlaying resource
>stream_close(): void	(streamWrapper) Close a resource
>stream_eof(): bool	(streamWrapper) Tests for end-of-file on a file pointer
>stream_flush(): bool	(streamWrapper) Flushes the output
>stream_lock(int $operation): bool	(streamWrapper) Advisory file locking
>stream_metadata(string $path, int $option, mixed $value): bool	(streamWrapper) Change stream metadata
>stream_open(string $path, string $mode, int $options, string|null $opened_path): bool	(streamWrapper) Opens file or URL
>stream_read(int $count): string|false	(streamWrapper) Read from stream
>stream_seek(int $offset, int $whence): bool	(streamWrapper) Seeks to specific location in a stream
>stream_set_option(int $option, int $arg1, int $arg2): bool	(streamWrapper) Change stream options
>stream_stat(): array|false	(streamWrapper) Retrieve information about a file resource
>stream_tell(): int	(streamWrapper) Retrieve the current position of a stream
>stream_truncate(int $new_size): bool	(streamWrapper) Truncate stream
>stream_write(string $data): int	(streamWrapper) Write to stream
>unlink(string $path): bool	(streamWrapper) Delete a file
>url_stat(string $path, int $flags): array|false	(streamWrapper) Retrieve information about a file
php_user_filter()	(new) Children of this class are passed to stream_filter_register
StreamBucket()	(new) A stream bucket is a chunk of a stream which can be extracted from bucket brigades
addcslashes(string $string, string $characters): string	Quote string with slashes in a C style
addslashes(string $string): string	Quote string with slashes
bin2hex(string $string): string	Convert binary data into hexadecimal representation
chop()	Alias of rtrim
chr(int $codepoint): string	Generate a single-byte string from a number
chunk_split(string $string, int $length = 76, string $separator = "\r\n"): string	Split a string into smaller chunks
convert_cyr_string(string $str, string $from, string $to): string	Convert from one Cyrillic character set to another
convert_uudecode(string $string): string|false	Decode a uuencoded string
convert_uuencode(string $string): string	Uuencode a string
count_chars(string $string, int $mode = ?): array|string	Return information about characters used in a string
crc32(string $string): int	Calculates the crc32 polynomial of a string
crypt(string $string, string $salt): string	One-way string hashing
echo(string ...$expressions): void	Output one or more strings
explode(string $separator, string $string, int $limit = PHP_INT_MAX): array	Split a string by a string
fprintf(resource $stream, string $format, mixed ...$values): int	Write a formatted string to a stream
get_html_translation_table(int $table = HTML_SPECIALCHARS, int $flags = ENT_QUOTES | ENT_SUBSTITUTE | ENT_HTML401, string $encoding = "UTF-8"): array	Returns the translation table used by htmlspecialchars and htmlentities
hebrev(string $string, int $max_chars_per_line = ?): string	Convert logical Hebrew text to visual text
hebrevc(string $hebrew_text, int $max_chars_per_line = ?): string	Convert logical Hebrew text to visual text with newline conversion
hex2bin(string $string): string|false	Decodes a hexadecimally encoded binary string
html_entity_decode(string $string, int $flags = ENT_QUOTES | ENT_SUBSTITUTE | ENT_HTML401, string|null $encoding = null): string	Convert HTML entities to their corresponding characters
htmlentities(string $string, int $flags = ENT_QUOTES | ENT_SUBSTITUTE | ENT_HTML401, string|null $encoding = null, bool $double_encode = true): string	Convert all applicable characters to HTML entities
htmlspecialchars_decode(string $string, int $flags = ENT_QUOTES | ENT_SUBSTITUTE | ENT_HTML401): string	Convert special HTML entities back to characters
htmlspecialchars(string $string, int $flags = ENT_QUOTES | ENT_SUBSTITUTE | ENT_HTML401, string|null $encoding = null, bool $double_encode = true): string	Convert special characters to HTML entities
implode(string $separator, array $array): string	Join array elements with a string
implode(array $array): string	Join array elements with a string
implode(array $array, string $separator): string	Join array elements with a string
join()	Alias of implode
lcfirst(string $string): string	Make a string's first character lowercase
levenshtein(string $string1, string $string2, int $insertion_cost = 1, int $replacement_cost = 1, int $deletion_cost = 1): int	Calculate Levenshtein distance between two strings
localeconv(): array	Get numeric formatting information
ltrim(string $string, string $characters = " \n\r\t\v\x00"): string	Strip whitespace (or other characters) from the beginning of a string
md5_file(string $filename, bool $binary = false): string|false	Calculates the md5 hash of a given file
md5(string $string, bool $binary = false): string	Calculate the md5 hash of a string
metaphone(string $string, int $max_phonemes = ?): string	Calculate the metaphone key of a string
money_format(string $format, float $number): string	Formats a number as a currency string
nl_langinfo(int $item): string|false	Query language and locale information
nl2br(string $string, bool $use_xhtml = true): string	Inserts HTML line breaks before all newlines in a string
number_format(float $num, int $decimals = ?, string|null $decimal_separator = ".", string|null $thousands_separator = ","): string	Format a number with grouped thousands
ord(string $character): int	Convert the first byte of a string to a value between 0 and 255
parse_str(string $string, array $result): void	Parses the string into variables
print(string $expression): int	Output a string
printf(string $format, mixed ...$values): int	Output a formatted string
quoted_printable_decode(string $string): string	Convert a quoted-printable string to an 8 bit string
quoted_printable_encode(string $string): string	Convert a 8 bit string to a quoted-printable string
quotemeta(string $string): string	Quote meta characters
rtrim(string $string, string $characters = " \n\r\t\v\x00"): string	Strip whitespace (or other characters) from the end of a string
setlocale(int $category, string $locales, string ...$rest): string|false	Set locale information
setlocale(int $category, array $locale_array): string|false	Set locale information
sha1_file(string $filename, bool $binary = false): string|false	Calculate the sha1 hash of a file
sha1(string $string, bool $binary = false): string	Calculate the sha1 hash of a string
similar_text(string $string1, string $string2, float $percent = null): int	Calculate the similarity between two strings
soundex(string $string): string	Calculate the soundex key of a string
sprintf(string $format, mixed ...$values): string	Return a formatted string
sscanf(string $string, string $format, mixed ...$vars): array|int|null	Parses input from a string according to a format
str_contains(string $haystack, string $needle): bool	Determine if a string contains a given substring
str_decrement(string $string): string	Decrement an alphanumeric string
str_ends_with(string $haystack, string $needle): bool	Checks if a string ends with a given substring
str_getcsv(string $string, string $separator = ",", string $enclosure = "\"", string $escape = "\\"): array	Parse a CSV string into an array
str_increment(string $string): string	Increment an alphanumeric string
str_ireplace(array|string $search, array|string $replace, string|array $subject, int $count = null): string|array	Case-insensitive version of str_replace
str_pad(string $string, int $length, string $pad_string = " ", int $pad_type = STR_PAD_RIGHT): string	Pad a string to a certain length with another string
str_repeat(string $string, int $times): string	Repeat a string
str_replace(array|string $search, array|string $replace, string|array $subject, int $count = null): string|array	Replace all occurrences of the search string with the replacement string
str_rot13(string $string): string	Perform the rot13 transform on a string
str_shuffle(string $string): string	Randomly shuffles a string
str_split(string $string, int $length = 1): array	Convert a string to an array
str_starts_with(string $haystack, string $needle): bool	Checks if a string starts with a given substring
str_word_count(string $string, int $format = ?, string|null $characters = null): array|int	Return information about words used in a string
strcasecmp(string $string1, string $string2): int	Binary safe case-insensitive string comparison
strchr()	Alias of strstr
strcmp(string $string1, string $string2): int	Binary safe string comparison
strcoll(string $string1, string $string2): int	Locale based string comparison
strcspn(string $string, string $characters, int $offset = ?, int|null $length = null): int	Find length of initial segment not matching mask
strip_tags(string $string, array|string|null $allowed_tags = null): string	Strip HTML and PHP tags from a string
stripcslashes(string $string): string	Un-quote string quoted with addcslashes
stripos(string $haystack, string $needle, int $offset = ?): int|false	Find the position of the first occurrence of a case-insensitive substring in a string
stripslashes(string $string): string	Un-quotes a quoted string
stristr(string $haystack, string $needle, bool $before_needle = false): string|false	Case-insensitive strstr
strlen(string $string): int	Get string length
strnatcasecmp(string $string1, string $string2): int	Case insensitive string comparisons using a "natural order" algorithm
strnatcmp(string $string1, string $string2): int	String comparisons using a "natural order" algorithm
strncasecmp(string $string1, string $string2, int $length): int	Binary safe case-insensitive string comparison of the first n characters
strncmp(string $string1, string $string2, int $length): int	Binary safe string comparison of the first n characters
strpbrk(string $string, string $characters): string|false	Search a string for any of a set of characters
strpos(string $haystack, string $needle, int $offset = ?): int|false	Find the position of the first occurrence of a substring in a string
strrchr(string $haystack, string $needle, bool $before_needle = false): string|false	Find the last occurrence of a character in a string
strrev(string $string): string	Reverse a string
strripos(string $haystack, string $needle, int $offset = ?): int|false	Find the position of the last occurrence of a case-insensitive substring in a string
strrpos(string $haystack, string $needle, int $offset = ?): int|false	Find the position of the last occurrence of a substring in a string
strspn(string $string, string $characters, int $offset = ?, int|null $length = null): int	Finds the length of the initial segment of a string consisting entirely of characters contained within a given mask
strstr(string $haystack, string $needle, bool $before_needle = false): string|false	Find the first occurrence of a string
strtok(string $string, string $token): string|false	Tokenize string
strtok(string $token): string|false	Tokenize string
strtolower(string $string): string	Make a string lowercase
strtoupper(string $string): string	Make a string uppercase
strtr(string $string, string $from, string $to): string	Translate characters or replace substrings
strtr(string $string, array $replace_pairs): string	Translate characters or replace substrings
substr_compare(string $haystack, string $needle, int $offset, int|null $length = null, bool $case_insensitive = false): int	Binary safe comparison of two strings from an offset, up to length characters
substr_count(string $haystack, string $needle, int $offset = ?, int|null $length = null): int	Count the number of substring occurrences
substr_replace(array|string $string, array|string $replace, array|int $offset, array|int|null $length = null): string|array	Replace text within a portion of a string
substr(string $string, int $offset, int|null $length = null): string	Return part of a string
trim(string $string, string $characters = " \n\r\t\v\x00"): string	Strip whitespace (or other characters) from the beginning and end of a string
ucfirst(string $string): string	Make a string's first character uppercase
ucwords(string $string, string $separators = " \t\r\n\f\v"): string	Uppercase the first character of each word in a string
utf8_decode(string $string): string	Converts a string from UTF-8 to ISO-8859-1, replacing invalid or unrepresentable characters
utf8_encode(string $string): string	Converts a string from ISO-8859-1 to UTF-8
vfprintf(resource $stream, string $format, array $values): int	Write a formatted string to a stream
vprintf(string $format, array $values): int	Output a formatted string
vsprintf(string $format, array $values): string	Return a formatted string
wordwrap(string $string, int $width = 75, string $break = "\n", bool $cut_long_words = false): string	Wraps a string to a given number of characters
SVM()	(new) Construct a new SVM object
>crossvalidate(array $problem, int $number_of_folds): float	(svm) Test training params on subsets of the training data
>getOptions(): array	(SVM) Return the current training parameters
>setOptions(array $params): bool	(SVM) Set training parameters
>train(array $problem, array $weights = ?): SVMModel	(svm) Create a SVMModel based on training data
>checkProbabilityModel(): bool	(SVMModel) Returns true if the model has probability information
SVMModel(string $filename = ?)	(new) Construct a new SVMModel
>getLabels(): array	(SVMModel) Get the labels the model was trained on
>getNrClass(): int	(SVMModel) Returns the number of classes the model was trained with
>getSvmType(): int	(SVMModel) Get the SVM type the model was trained with
>getSvrProbability(): float	(SVMModel) Get the sigma value for regression types
>load(string $filename): bool	(SVMModel) Load a saved SVM Model
>predict_probability(array $data): float	(SVMModel) Return class probabilities for previous unseen data
>predict(array $data): float	(SVMModel) Predict a value for previously unseen data
>save(string $filename): bool	(SVMModel) Save a model to a file
SVMException()	(new) The exception object thrown on errors from the SVM and SVMModel classes
svn_add(string $path, bool $recursive = true, bool $force = false): bool	Schedules the addition of an item in a working directory
svn_auth_get_parameter(string $key): string	Retrieves authentication parameter
svn_auth_set_parameter(string $key, string $value): void	Sets an authentication parameter
svn_blame(string $repository_url, int $revision_no = SVN_REVISION_HEAD): array	Get the SVN blame for a file
svn_cat(string $repos_url, int $revision_no = ?): string	Returns the contents of a file in a repository
svn_checkout(string $repos, string $targetpath, int $revision = ?, int $flags = ?): bool	Checks out a working copy from the repository
svn_cleanup(string $workingdir): bool	Recursively cleanup a working copy directory, finishing incomplete operations and removing locks
svn_client_version(): string	Returns the version of the SVN client libraries
svn_commit(string $log, array $targets, bool $recursive = true): array	Sends changes from the local working copy to the repository
svn_delete(string $path, bool $force = false): bool	Delete items from a working copy or repository
svn_diff(string $path1, int $rev1, string $path2, int $rev2): array	Recursively diffs two paths
svn_export(string $frompath, string $topath, bool $working_copy = true, int $revision_no = -1): bool	Export the contents of a SVN directory
svn_fs_abort_txn(resource $txn): bool	Aborts a transaction
svn_fs_apply_text(resource $root, string $path): resource	Creates and returns a stream that will be used to replace
svn_fs_begin_txn2(resource $repos, int $rev): resource	Create a new transaction
svn_fs_change_node_prop(resource $root, string $path, string $name, string $value): bool	Return true if everything is ok, false otherwise
svn_fs_check_path(resource $fsroot, string $path): int	Determines what kind of item lives at path in a given repository fsroot
svn_fs_contents_changed(resource $root1, string $path1, resource $root2, string $path2): bool	Return true if content is different, false otherwise
svn_fs_copy(resource $from_root, string $from_path, resource $to_root, string $to_path): bool	Copies a file or a directory
svn_fs_delete(resource $root, string $path): bool	Deletes a file or a directory
svn_fs_dir_entries(resource $fsroot, string $path): array	Enumerates the directory entries under path; returns a hash of dir names to file type
svn_fs_file_contents(resource $fsroot, string $path): resource	Returns a stream to access the contents of a file from a given version of the fs
svn_fs_file_length(resource $fsroot, string $path): int	Returns the length of a file from a given version of the fs
svn_fs_is_dir(resource $root, string $path): bool	Determines if a path points to a directory
svn_fs_is_file(resource $root, string $path): bool	Determines if a path points to a file
svn_fs_make_dir(resource $root, string $path): bool	Creates a new empty directory
svn_fs_make_file(resource $root, string $path): bool	Creates a new empty file
svn_fs_node_created_rev(resource $fsroot, string $path): int	Returns the revision in which path under fsroot was created
svn_fs_node_prop(resource $fsroot, string $path, string $propname): string	Returns the value of a property for a node
svn_fs_props_changed(resource $root1, string $path1, resource $root2, string $path2): bool	Return true if props are different, false otherwise
svn_fs_revision_prop(resource $fs, int $revnum, string $propname): string	Fetches the value of a named property
svn_fs_revision_root(resource $fs, int $revnum): resource	Get a handle on a specific version of the repository root
svn_fs_txn_root(resource $txn): resource	Creates and returns a transaction root
svn_fs_youngest_rev(resource $fs): int	Returns the number of the youngest revision in the filesystem
svn_import(string $path, string $url, bool $nonrecursive): bool	Imports an unversioned path into a repository
svn_log(string $repos_url, int $start_revision = ?, int $end_revision = ?, int $limit = ?, int $flags = SVN_DISCOVER_CHANGED_PATHS | SVN_STOP_ON_COPY): array	Returns the commit log messages of a repository URL
svn_ls(string $repos_url, int $revision_no = SVN_REVISION_HEAD, bool $recurse = false, bool $peg = false): array	Returns list of directory contents in repository URL, optionally at revision number
svn_mkdir(string $path, string $log_message = ?): bool	Creates a directory in a working copy or repository
svn_repos_create(string $path, array $config = ?, array $fsconfig = ?): resource	Create a new subversion repository at path
svn_repos_fs_begin_txn_for_commit(resource $repos, int $rev, string $author, string $log_msg): resource	Create a new transaction
svn_repos_fs_commit_txn(resource $txn): int	Commits a transaction and returns the new revision
svn_repos_fs(resource $repos): resource	Gets a handle on the filesystem for a repository
svn_repos_hotcopy(string $repospath, string $destpath, bool $cleanlogs): bool	Make a hot-copy of the repos at repospath; copy it to destpath
svn_repos_open(string $path): resource	Open a shared lock on a repository
svn_repos_recover(string $path): bool	Run recovery procedures on the repository located at path
svn_revert(string $path, bool $recursive = false): bool	Revert changes to the working copy
svn_status(string $path, int $flags = ?): array	Returns the status of working copy files and directories
svn_update(string $path, int $revno = SVN_REVISION_HEAD, bool $recurse = true): int	Update working copy
swoole_async_dns_lookup(string $hostname, callable $callback): bool	Async and non-blocking hostname to IP lookup
swoole_async_read(string $filename, callable $callback, int $chunk_size = 65536, int $offset = ?): bool	Read file stream asynchronously
swoole_async_readfile(string $filename, callable $callback): bool	Read a file asynchronously
swoole_async_set(array $settings): void	Update the async I/O options
swoole_async_write(string $filename, string $content, int $offset = ?, callable $callback = ?): bool	Write data to a file stream asynchronously
swoole_async_writefile(string $filename, string $content, callable $callback = ?, int $flags = ?): bool	Write data to a file asynchronously
swoole_clear_error(): void	Clear errors in the socket or on the last error code
swoole_client_select(array $read_array, array $write_array, array $error_array, float $timeout = 0.5): int	Get the file description which are ready to read/write or error
swoole_cpu_num(): int	Get the number of CPU
swoole_errno(): int	Get the error code of the latest system call
swoole_error_log(int $level, string $msg): void	Output error messages to the log
swoole_event_add(int $fd, callable $read_callback = ?, callable $write_callback = ?, int $events = ?): int	Add new callback functions of a socket into the EventLoop
swoole_event_defer(callable $callback): bool	Add callback function to the next event loop
swoole_event_del(int $fd): bool	Remove all event callback functions of a socket
swoole_event_exit(): void	Exit the eventloop, only available at the client side
swoole_event_set(int $fd, callable $read_callback = ?, callable $write_callback = ?, int $events = ?): bool	Update the event callback functions of a socket
swoole_event_wait(): void	Start the event loop
swoole_event_write(int $fd, string $data): bool	Write data to a socket
swoole_get_local_ip(): array	Get the IPv4 IP addresses of each NIC on the machine
swoole_last_error(): int	Get the lastest error message
swoole_load_module(string $filename): mixed	Load a swoole extension
swoole_select(array $read_array, array $write_array, array $error_array, float $timeout = ?): int	Select the file descriptions which are ready to read/write or error in the eventloop
swoole_set_process_name(string $process_name, int $size = 128): void	Set the process name
swoole_strerror(int $errno, int $error_type = ?): string	Convert the Errno into error messages
swoole_timer_after(int $ms, callable $callback, mixed $param = ?): int	Trigger a one time callback function in the future
swoole_timer_exists(int $timer_id): bool	Check if a timer callback function is existed
swoole_timer_tick(int $ms, callable $callback, mixed $param = ?): int	Trigger a timer tick callback function by time interval
swoole_version(): string	Get the version of Swoole
Swoole\Async::dnsLookup(string $hostname, callable $callback): void	Async and non-blocking hostname to IP lookup.
Swoole\Async::read(string $filename, callable $callback, int $chunk_size = ?, int $offset = ?): bool	Read file stream asynchronously.
Swoole\Async::readFile(string $filename, callable $callback): void	Read a file asynchronously.
Swoole\Async::set(array $settings): void	Update the async I/O options.
Swoole\Async::write(string $filename, string $content, int $offset = ?, callable $callback = ?): void	Write data to a file stream asynchronously.
Swoole\Async::writeFile(string $filename, string $content, callable $callback = ?, string $flags = ?): void	Description
>add(int $add_value = ?): int	(Swoole\Atomic) Add a number to the value to the atomic object.
>cmpset(int $cmp_value, int $new_value): int	(Swoole\Atomic) Compare and set the value of the atomic object.
Swoole\Atomic(int $value = ?)	(new) Construct a swoole atomic object.
>get(): int	(Swoole\Atomic) Get the current value of the atomic object.
>set(int $value): int	(Swoole\Atomic) Set a new value to the atomic object.
>sub(int $sub_value = ?): int	(Swoole\Atomic) Subtract a number to the value of the atomic object.
>append(string $data): int	(Swoole\Buffer) Append the string or binary data at the end of the memory buffer and return the new size of memory allocated.
>clear(): void	(Swoole\Buffer) Reset the memory buffer.
Swoole\Buffer(int $size = ?)	(new) Fixed size memory blocks allocation.
>__destruct(): void	(Swoole\Buffer) Destruct the Swoole memory buffer.
>expand(int $size): int	(Swoole\Buffer) Expand the size of memory buffer.
>read(int $offset, int $length): string	(Swoole\Buffer) Read data from the memory buffer based on offset and length.
>recycle(): void	(Swoole\Buffer) Release the memory to OS which is not used by the memory buffer.
>substr(int $offset, int $length = ?, bool $remove = ?): string	(Swoole\Buffer) Read data from the memory buffer based on offset and length. Or remove data from the memory buffer.
>__toString(): string	(Swoole\Buffer) Get the string value of the memory buffer.
>write(int $offset, string $data): void	(Swoole\Buffer) Write data to the memory buffer. The memory allocated for the buffer will not be changed.
Swoole\Channel(string $size)	(new) Construct a Swoole Channel
>__destruct(): void	(Swoole\Channel) Destruct a Swoole channel.
>pop(): mixed	(Swoole\Channel) Read and pop data from swoole channel.
>push(string $data): bool	(Swoole\Channel) Write and push data into Swoole channel.
>stats(): array	(Swoole\Channel) Get stats of swoole channel.
>close(bool $force = ?): bool	(Swoole\Client) Close the connection established.
>connect(string $host, int $port = ?, int $timeout = ?, int $flag = ?): bool	(Swoole\Client) Connect to the remote TCP or UDP port.
Swoole\Client(int $sock_type, int $is_async = ?)	(new) Create Swoole sync or async TCP/UDP client, with or without SSL.
>__destruct(): void	(Swoole\Client) Destruct the Swoole client.
>getpeername(): array	(Swoole\Client) Get the remote socket name of the connection.
>getsockname(): array	(Swoole\Client) Get the local socket name of the connection.
>isConnected(): bool	(Swoole\Client) Check if the connection is established.
>on(string $event, callable $callback): void	(Swoole\Client) Add callback functions triggered by events.
>pause(): void	(Swoole\Client) Pause receiving data.
>pipe(string $socket): void	(Swoole\Client) Redirect the data to another file descriptor.
>recv(string $size = ?, string $flag = ?): void	(Swoole\Client) Receive data from the remote socket.
>resume(): void	(Swoole\Client) Resume receiving data.
>send(string $data, string $flag = ?): int	(Swoole\Client) Send data to the remote TCP socket.
>sendfile(string $filename, int $offset = ?): bool	(Swoole\Client) Send file to the remote TCP socket.
>sendto(string $ip, int $port, string $data): bool	(Swoole\Client) Send data to the remote UDP address.
>set(array $settings): void	(Swoole\Client) Set the Swoole client parameters before the connection is established.
>sleep(): void	(Swoole\Client) Remove the TCP client from system event loop.
>wakeup(): void	(Swoole\Client) Add the TCP client back into the system event loop.
>count(): int	(Swoole\Connection\Iterator) Count connections.
>current(): Connection	(Swoole\Connection\Iterator) Return current connection entry.
>key(): int	(Swoole\Connection\Iterator) Return key of the current connection.
>next(): Connection	(Swoole\Connection\Iterator) Move to the next connection.
>offsetExists(int $index): bool	(Swoole\Connection\Iterator) Check if offset exists.
>offsetGet(string $index): Connection	(Swoole\Connection\Iterator) Offset to retrieve.
>offsetSet(int $offset, mixed $connection): void	(Swoole\Connection\Iterator) Assign a Connection to the specified offset.
>offsetUnset(int $offset): void	(Swoole\Connection\Iterator) Unset an offset.
>rewind(): void	(Swoole\Connection\Iterator) Rewinds iterator
>valid(): bool	(Swoole\Connection\Iterator) Check if current position is valid.
Swoole\Coroutine::call_user_func_array(callable $callback, array $param_array): mixed	Call a callback with an array of parameters
Swoole\Coroutine::call_user_func(callable $callback, mixed ...$args): mixed	Call a callback given by the first parameter
Swoole\Coroutine::cli_wait(): ReturnType	Description
Swoole\Coroutine::create(): ReturnType	Description
Swoole\Coroutine::getuid(): ReturnType	Description
Swoole\Coroutine::resume(): ReturnType	Description
Swoole\Coroutine::suspend(): ReturnType	Description
>close(): ReturnType	(Swoole\Coroutine\Client) Description
>connect(): ReturnType	(Swoole\Coroutine\Client) Description
Swoole\Coroutine\Client()	(new) Description
>__destruct(): ReturnType	(Swoole\Coroutine\Client) Description
>getpeername(): ReturnType	(Swoole\Coroutine\Client) Description
>getsockname(): ReturnType	(Swoole\Coroutine\Client) Description
>isConnected(): ReturnType	(Swoole\Coroutine\Client) Description
>recv(): ReturnType	(Swoole\Coroutine\Client) Description
>send(): ReturnType	(Swoole\Coroutine\Client) Description
>sendfile(): ReturnType	(Swoole\Coroutine\Client) Description
>sendto(): ReturnType	(Swoole\Coroutine\Client) Description
>set(): ReturnType	(Swoole\Coroutine\Client) Description
>addFile(): ReturnType	(Swoole\Coroutine\Http\Client) Description
>close(): ReturnType	(Swoole\Coroutine\Http\Client) Description
Swoole\Coroutine\Http\Client()	(new) Description
>__destruct(): ReturnType	(Swoole\Coroutine\Http\Client) Description
>execute(): ReturnType	(Swoole\Coroutine\Http\Client) Description
>get(): ReturnType	(Swoole\Coroutine\Http\Client) Description
>getDefer(): ReturnType	(Swoole\Coroutine\Http\Client) Description
>isConnected(): ReturnType	(Swoole\Coroutine\Http\Client) Description
>post(): ReturnType	(Swoole\Coroutine\Http\Client) Description
>recv(): ReturnType	(Swoole\Coroutine\Http\Client) Description
>set(): ReturnType	(Swoole\Coroutine\Http\Client) Description
>setCookies(): ReturnType	(Swoole\Coroutine\Http\Client) Description
>setData(): ReturnType	(Swoole\Coroutine\Http\Client) Description
>setDefer(): ReturnType	(Swoole\Coroutine\Http\Client) Description
>setHeaders(): ReturnType	(Swoole\Coroutine\Http\Client) Description
>setMethod(): ReturnType	(Swoole\Coroutine\Http\Client) Description
>close(): ReturnType	(Swoole\Coroutine\MySQL) Description
>connect(): ReturnType	(Swoole\Coroutine\MySQL) Description
Swoole\Coroutine\MySQL()	(new) Description
>__destruct(): ReturnType	(Swoole\Coroutine\MySQL) Description
>getDefer(): ReturnType	(Swoole\Coroutine\MySQL) Description
>query(): ReturnType	(Swoole\Coroutine\MySQL) Description
>recv(): ReturnType	(Swoole\Coroutine\MySQL) Description
>setDefer(): ReturnType	(Swoole\Coroutine\MySQL) Description
Swoole\Event::add(int $fd, callable $read_callback, callable $write_callback = ?, string $events = ?): bool	Add new callback functions of a socket into the EventLoop.
Swoole\Event::defer(mixed $callback): void	Add a callback function to the next event loop.
Swoole\Event::del(string $fd): bool	Remove all event callback functions of a socket.
Swoole\Event::exit(): void	Exit the eventloop, only available at client side.
Swoole\Event::set(int $fd, string $read_callback = ?, string $write_callback = ?, string $events = ?): bool	Update the event callback functions of a socket.
Swoole\Event::wait(): void	Description
Swoole\Event::write(string $fd, string $data): void	Write data to the socket.
>addFile(string $path, string $name, string $type = ?, string $filename = ?, string $offset = ?): void	(Swoole\Http\Client) Add a file to the post form.
>close(): void	(Swoole\Http\Client) Close the http connection.
Swoole\Http\Client(string $host, string $port = ?, bool $ssl = ?)	(new) Construct the async HTTP client.
>__destruct(): void	(Swoole\Http\Client) Destruct the HTTP client.
>download(string $path, string $file, callable $callback, int $offset = ?): void	(Swoole\Http\Client) Download a file from the remote server.
>execute(string $path, string $callback): void	(Swoole\Http\Client) Send the HTTP request after setting the parameters.
>get(string $path, callable $callback): void	(Swoole\Http\Client) Send GET http request to the remote server.
>isConnected(): bool	(Swoole\Http\Client) Check if the HTTP connection is connected.
>on(string $event_name, callable $callback): void	(Swoole\Http\Client) Register callback function by event name.
>post(string $path, string $data, callable $callback): void	(Swoole\Http\Client) Send POST http request to the remote server.
>push(string $data, string $opcode = ?, string $finish = ?): void	(Swoole\Http\Client) Push data to websocket client.
>set(array $settings): void	(Swoole\Http\Client) Update the HTTP client parameters.
>setCookies(array $cookies): void	(Swoole\Http\Client) Set the http request cookies.
>setData(string $data): ReturnType	(Swoole\Http\Client) Set the HTTP request body data.
>setHeaders(array $headers): void	(Swoole\Http\Client) Set the HTTP request headers.
>setMethod(string $method): void	(Swoole\Http\Client) Set the HTTP request method.
>upgrade(string $path, string $callback): void	(Swoole\Http\Client) Upgrade to websocket protocol.
>__destruct(): void	(Swoole\Http\Request) Destruct the HTTP request.
>rawcontent(): string	(Swoole\Http\Request) Get the raw HTTP POST body.
>cookie(string $name, string $value = ?, string $expires = ?, string $path = ?, string $domain = ?, string $secure = ?, string $httponly = ?): string	(Swoole\Http\Response) Set the cookies of the HTTP response.
>__destruct(): void	(Swoole\Http\Response) Destruct the HTTP response.
>end(string $content = ?): void	(Swoole\Http\Response) Send data for the HTTP request and finish the response.
>gzip(string $compress_level = ?): ReturnType	(Swoole\Http\Response) Enable the gzip of response content.
>header(string $key, string $value, string $ucwords = ?): void	(Swoole\Http\Response) Set the HTTP response headers.
>initHeader(): ReturnType	(Swoole\Http\Response) Init the HTTP response header.
>rawcookie(string $name, string $value = ?, string $expires = ?, string $path = ?, string $domain = ?, string $secure = ?, string $httponly = ?): ReturnType	(Swoole\Http\Response) Set the raw cookies to the HTTP response.
>sendfile(string $filename, int $offset = ?): ReturnType	(Swoole\Http\Response) Send file through the HTTP response.
>status(string $http_code): ReturnType	(Swoole\Http\Response) Set the status code of the HTTP response.
>write(string $content): void	(Swoole\Http\Response) Append HTTP body content to the HTTP response.
>on(string $event_name, callable $callback): void	(Swoole\Http\Server) Bind callback function to HTTP server by event name.
>start(): void	(Swoole\Http\Server) Start the swoole http server.
Swoole\Lock(string $type = ?, string $file_lock_location = ?)	(new) Construct a memory lock.
>__destruct(): void	(Swoole\Lock) Destroy a Swoole memory lock.
>lock_read(): void	(Swoole\Lock) Lock a read-write lock for reading.
>lock(): void	(Swoole\Lock) Try to acquire the lock. It will block if the lock is not available.
>trylock_read(): void	(Swoole\Lock) Try to lock a read-write lock for reading and return straight away even the lock is not available.
>trylock(): void	(Swoole\Lock) Try to acquire the lock and return straight away even the lock is not available.
>unlock(): void	(Swoole\Lock) Release the lock.
Swoole\Mmap::open(string $filename, string $size = ?, string $offset = ?): ReturnType	Map a file into memory and return the stream resource which can be used by PHP stream operations.
>close(): void	(Swoole\MySQL) Close the async MySQL connection.
>connect(array $server_config, callable $callback): void	(Swoole\MySQL) Connect to the remote MySQL server.
Swoole\MySQL()	(new) Construct an async MySQL client.
>__destruct(): void	(Swoole\MySQL) Destroy the async MySQL client.
>getBuffer(): ReturnType	(Swoole\MySQL) Description
>on(string $event_name, callable $callback): void	(Swoole\MySQL) Register callback function based on event name.
>query(string $sql, callable $callback): ReturnType	(Swoole\MySQL) Run the SQL query.
Swoole\Process::alarm(int $interval_usec): void	High precision timer which triggers signal with fixed interval.
>close(): void	(Swoole\Process) Close the pipe to the child process.
Swoole\Process(callable $callback, bool $redirect_stdin_and_stdout = ?, int $pipe_type = ?)	(new) Construct a process.
Swoole\Process::daemon(bool $nochdir = ?, bool $noclose = ?): void	Change the process to be a daemon process.
>__destruct(): void	(Swoole\Process) Destroy the process.
>exec(string $exec_file, string $args): ReturnType	(Swoole\Process) Execute system commands.
>exit(string $exit_code = ?): void	(Swoole\Process) Stop the child processes.
>freeQueue(): void	(Swoole\Process) Destroy the message queue created by swoole_process::useQueue.
Swoole\Process::kill(int $pid, int $signal_no = ?): bool	Send signal to the child process.
>name(string $process_name): bool	(Swoole\Process) Set name of the process.
>pop(int $maxsize = ?): mixed	(Swoole\Process) Read and pop data from the message queue.
>push(string $data): bool	(Swoole\Process) Write and push data into the message queue.
>read(int $maxsize = ?): string	(Swoole\Process) Read data sending to the process.
Swoole\Process::signal(string $signal_no, callable $callback): void	Send signal to the child processes.
>start(): void	(Swoole\Process) Start the process.
>statQueue(): array	(Swoole\Process) Get the stats of the message queue used as the communication method between processes.
>useQueue(int $key, int $mode = ?): bool	(Swoole\Process) Create a message queue as the communication method between the parent process and child processes.
Swoole\Process::wait(bool $blocking = ?): array	Wait for the events of child processes.
>write(string $data): int	(Swoole\Process) Write data into the pipe and communicate with the parent process or child processes.
Swoole\Redis\Server::format(string $type, string $value = ?): ReturnType	Description
>setHandler(string $command, string $callback, string $number_of_string_param = ?, string $type_of_array_param = ?): ReturnType	(Swoole\Redis\Server) Description
>start(): ReturnType	(Swoole\Redis\Server) Description
Swoole\Serialize::pack(string $data, int $is_fast = ?): ReturnType	Serialize the data.
Swoole\Serialize::unpack(string $data, string $args = ?): ReturnType	Unserialize the data.
>addlistener(string $host, int $port, string $socket_type): void	(Swoole\Server) Add a new listener to the server.
>addProcess(swoole_process $process): bool	(Swoole\Server) Add a user defined swoole_process to the server.
>after(int $after_time_ms, callable $callback, string $param = ?): ReturnType	(Swoole\Server) Trigger a callback function after a period of time.
>bind(int $fd, int $uid): bool	(Swoole\Server) Bind the connection to a user defined user ID.
>clearTimer(int $timer_id): void	(Swoole\Server) Stop and destroy a timer.
swoole_timer_clear(int $timer_id): void	Stop and destroy a timer.
>close(int $fd, bool $reset = ?): bool	(Swoole\Server) Close a connection to the client.
>confirm(int $fd): bool	(Swoole\Server) Check status of the connection.
>connection_info(int $fd, int $reactor_id = ?): array	(Swoole\Server) Get the connection info by file description.
>connection_list(int $start_fd, int $pagesize = ?): array	(Swoole\Server) Get all of the established connections.
Swoole\Server(string $host, int $port = ?, integr $mode = ?, int $sock_type = ?)	(new) Construct a Swoole server.
>defer(callable $callback): void	(Swoole\Server) Delay execution of the callback function at the end of current EventLoop.
>exist(int $fd): bool	(Swoole\Server) Check if the connection is existed.
>finish(string $data): void	(Swoole\Server) Used in task process for sending result to the worker process when the task is finished.
>getClientInfo(int $fd, int $reactor_id = ?, bool $ignore_error = ?): array	(Swoole\Server) Get the connection info by file description.
>getClientList(int $start_fd, int $pagesize = ?): array	(Swoole\Server) Get all of the established connections.
>getLastError(): int	(Swoole\Server) Get the error code of the most recent error.
>heartbeat(bool $if_close_connection): mixed	(Swoole\Server) Check all the connections on the server.
>listen(string $host, int $port, string $socket_type): bool	(Swoole\Server) Listen on the given IP and port, socket type.
>on(string $event_name, callable $callback): void	(Swoole\Server) Register a callback function by event name.
>pause(int $fd): void	(Swoole\Server) Stop receiving data from the connection.
>protect(int $fd, bool $is_protected = ?): void	(Swoole\Server) Set the connection to be protected mode.
>reload(): bool	(Swoole\Server) Restart all the worker process.
>resume(int $fd): void	(Swoole\Server) Start receiving data from the connection.
>send(int $fd, string $data, int $reactor_id = ?): bool	(Swoole\Server) Send data to the client.
>sendfile(int $fd, string $filename, int $offset = ?): bool	(Swoole\Server) Send file to the connection.
>sendMessage(int $worker_id, string $data): bool	(Swoole\Server) Send message to worker processes by ID.
>sendto(string $ip, int $port, string $data, string $server_socket = ?): bool	(Swoole\Server) Send data to the remote UDP address.
>sendwait(int $fd, string $data): bool	(Swoole\Server) Send data to the remote socket in the blocking way.
>set(array $settings): ReturnType	(Swoole\Server) Set the runtime settings of the swoole server.
>shutdown(): void	(Swoole\Server) Shutdown the master server process, this function can be called in worker processes.
>start(): void	(Swoole\Server) Start the Swoole server.
>stats(): array	(Swoole\Server) Get the stats of the Swoole server.
>stop(int $worker_id = ?): bool	(Swoole\Server) Stop the Swoole server.
>task(string $data, int $dst_worker_id = ?, callable $callback = ?): mixed	(Swoole\Server) Send data to the task worker processes.
>taskwait(string $data, float $timeout = ?, int $worker_id = ?): void	(Swoole\Server) Send data to the task worker processes in blocking way.
>taskWaitMulti(array $tasks, float $timeout_ms = ?): void	(Swoole\Server) Execute multiple tasks concurrently.
>tick(int $interval_ms, callable $callback): void	(Swoole\Server) Repeats a given function at every given time-interval.
Swoole\Server\Port()	(new) Construct a server port
>__destruct(): void	(Swoole\Server\Port) Destroy server port
>on(string $event_name, callable $callback): ReturnType	(Swoole\Server\Port) Register callback functions by event.
>set(array $settings): void	(Swoole\Server\Port) Set protocol of the server port.
>column(string $name, string $type, int $size = ?): ReturnType	(Swoole\Table) Set the data type and size of the columns.
Swoole\Table(int $table_size)	(new) Construct a Swoole memory table with fixed size.
>count(): int	(Swoole\Table) Count the rows in the table, or count all the elements in the table if $mode = 1.
>create(): void	(Swoole\Table) Create the swoole memory table.
>current(): array	(Swoole\Table) Get the current row.
>decr(string $key, string $column, int $decrby = ?): ReturnType	(Swoole\Table) Decrement the value in the Swoole table by $row_key and $column_key.
>del(string $key): void	(Swoole\Table) Delete a row in the Swoole table by $row_key.
>destroy(): void	(Swoole\Table) Destroy the Swoole table.
>exist(string $key): bool	(Swoole\Table) Check if a row is existed by $row_key.
>get(string $row_key, string $column_key): int	(Swoole\Table) Get the value in the Swoole table by $row_key and $column_key.
>incr(string $key, string $column, int $incrby = ?): void	(Swoole\Table) Increment the value by $row_key and $column_key.
>key(): string	(Swoole\Table) Get the key of current row.
>next(): ReturnType	(Swoole\Table) Iterator the next row.
>rewind(): void	(Swoole\Table) Rewind the iterator.
>set(string $key, array $value): VOID	(Swoole\Table) Update a row of the table by $row_key.
>valid(): bool	(Swoole\Table) Check if the current row is valid.
Swoole\Timer::after(int $after_time_ms, callable $callback): void	Trigger a callback function after a period of time.
Swoole\Timer::clear(int $timer_id): void	Delete a timer by timer ID.
Swoole\Timer::exists(int $timer_id): bool	Check if a timer is existed.
Swoole\Timer::tick(int $interval_ms, callable $callback, string $param = ?): void	Repeats a given function at every given time-interval.
>exist(int $fd): bool	(Swoole\WebSocket\Server) Check if the file descriptor exists.
>on(string $event_name, callable $callback): ReturnType	(Swoole\WebSocket\Server) Register event callback function
Swoole\WebSocket\Server::pack(string $data, string $opcode = ?, string $finish = ?, string $mask = ?): binary	Get a pack of binary data to send in a single frame.
>push(string $fd, string $data, string $opcode = ?, string $finish = ?): void	(Swoole\WebSocket\Server) Push data to the remote client.
Swoole\WebSocket\Server::unpack(binary $data): string	Unpack the binary data received from the client.
Swoole\Async()	(new) 
Swoole\Connection\Iterator()	(new) 
Swoole\Coroutine\MySQL\Exception()	(new) 
Swoole\Coroutine()	(new) 
Swoole\Event()	(new) 
Swoole\Exception()	(new) 
Swoole\Http\Request()	(new) 
Swoole\Http\Response()	(new) 
Swoole\Http\Server()	(new) 
Swoole\Mmap()	(new) 
Swoole\Module()	(new) 
Swoole\MySQL\Exception()	(new) 
Swoole\Redis\Server()	(new) 
Swoole\Serialize()	(new) 
Swoole\Timer()	(new) 
Swoole\WebSocket\Frame()	(new) 
Swoole\WebSocket\Server()	(new) 
SyncEvent(string $name = ?, bool $manual = false, bool $prefire = false)	(new) Constructs a new SyncEvent object
>fire(): bool	(SyncEvent) Fires/sets the event
>reset(): bool	(SyncEvent) Resets a manual event
>wait(int $wait = -1): bool	(SyncEvent) Waits for the event to be fired/set
SyncMutex(string $name = ?)	(new) Constructs a new SyncMutex object
>lock(int $wait = -1): bool	(SyncMutex) Waits for an exclusive lock
>unlock(bool $all = false): bool	(SyncMutex) Unlocks the mutex
SyncReaderWriter(string $name = ?, int $autounlock = 1)	(new) Constructs a new SyncReaderWriter object
>readlock(int $wait = -1): bool	(SyncReaderWriter) Waits for a read lock
>readunlock(): bool	(SyncReaderWriter) Releases a read lock
>writelock(int $wait = -1): bool	(SyncReaderWriter) Waits for an exclusive write lock
>writeunlock(): bool	(SyncReaderWriter) Releases a write lock
SyncSemaphore(string $name = ?, int $initialval = 1, bool $autounlock = true)	(new) Constructs a new SyncSemaphore object
>lock(int $wait = -1): bool	(SyncSemaphore) Decreases the count of the semaphore or waits
>unlock(int $prevcount = ?): bool	(SyncSemaphore) Increases the count of the semaphore
SyncSharedMemory(string $name, int $size)	(new) Constructs a new SyncSharedMemory object
>first(): bool	(SyncSharedMemory) Check to see if the object is the first instance system-wide of named shared memory
>read(int $start = ?, int $length = ?)	(SyncSharedMemory) Copy data from named shared memory
>size(): int	(SyncSharedMemory) Returns the size of the named shared memory
>write(string $string = ?, int $start = ?)	(SyncSharedMemory) Copy data to named shared memory
is_tainted(string $string): bool	Checks whether a string is tainted
taint(string $string, string ...$strings): bool	Taint a string
untaint(string $string, string ...$strings): bool	Untaint strings
tcpwrap_check(string $daemon, string $address, string $user = ?, bool $nodns = false): bool	Performs a tcpwrap check
ob_tidyhandler(string $input, int $mode = ?): string	ob_start callback function to repair the buffer
tidy_access_count(tidy $tidy): int	Returns the Number of Tidy accessibility warnings encountered for specified document
tidy_config_count(tidy $tidy): int	Returns the Number of Tidy configuration errors encountered for specified document
tidy_error_count(tidy $tidy): int	Returns the Number of Tidy errors encountered for specified document
tidy_get_output(tidy $tidy): string	Return a string representing the parsed tidy markup
tidy_warning_count(tidy $tidy): int	Returns the Number of Tidy warnings encountered for specified document
>body(): tidyNode|null	(tidy) Returns a tidyNode object starting from the ltbodygt tag of the tidy parse tree
tidy_get_body(tidy $tidy): tidyNode|null	Returns a tidyNode object starting from the ltbodygt tag of the tidy parse tree
>cleanRepair(): bool	(tidy) Execute configured cleanup and repair operations on parsed markup
tidy_clean_repair(tidy $tidy): bool	Execute configured cleanup and repair operations on parsed markup
tidy(string|null $filename = null, array|string|null $config = null, string|null $encoding = null, bool $useIncludePath = false)	(new) Constructs a new tidy object
>diagnose(): bool	(tidy) Run configured diagnostics on parsed and repaired markup
tidy_diagnose(tidy $tidy): bool	Run configured diagnostics on parsed and repaired markup
tidy_get_error_buffer(tidy $tidy): string|false	Return warnings and errors which occurred parsing the specified document
>getConfig(): array	(tidy) Get current Tidy configuration
tidy_get_config(tidy $tidy): array	Get current Tidy configuration
>getHtmlVer(): int	(tidy) Get the Detected HTML version for the specified document
tidy_get_html_ver(tidy $tidy): int	Get the Detected HTML version for the specified document
>getOpt(string $option): string|int|bool	(tidy) Returns the value of the specified configuration option for the tidy document
tidy_getopt(tidy $tidy, string $option): string|int|bool	Returns the value of the specified configuration option for the tidy document
>getOptDoc(string $option): string|false	(tidy) Returns the documentation for the given option name
tidy_get_opt_doc(tidy $tidy, string $option): string|false	Returns the documentation for the given option name
>getRelease(): string	(tidy) Get release date (version) for Tidy library
tidy_get_release(): string	Get release date (version) for Tidy library
>getStatus(): int	(tidy) Get status of specified document
tidy_get_status(tidy $tidy): int	Get status of specified document
>head(): tidyNode|null	(tidy) Returns a tidyNode object starting from the ltheadgt tag of the tidy parse tree
tidy_get_head(tidy $tidy): tidyNode|null	Returns a tidyNode object starting from the ltheadgt tag of the tidy parse tree
>html(): tidyNode|null	(tidy) Returns a tidyNode object starting from the lthtmlgt tag of the tidy parse tree
tidy_get_html(tidy $tidy): tidyNode|null	Returns a tidyNode object starting from the lthtmlgt tag of the tidy parse tree
>isXhtml(): bool	(tidy) Indicates if the document is a XHTML document
tidy_is_xhtml(tidy $tidy): bool	Indicates if the document is a XHTML document
>isXml(): bool	(tidy) Indicates if the document is a generic (non HTML/XHTML) XML document
tidy_is_xml(tidy $tidy): bool	Indicates if the document is a generic (non HTML/XHTML) XML document
>parseFile(string $filename, array|string|null $config = null, string|null $encoding = null, bool $useIncludePath = false): bool	(tidy) Parse markup in file or URI
tidy_parse_file(string $filename, array|string|null $config = null, string|null $encoding = null, bool $useIncludePath = false): tidy|false	Parse markup in file or URI
>parseString(string $string, array|string|null $config = null, string|null $encoding = null): bool	(tidy) Parse a document stored in a string
tidy_parse_string(string $string, array|string|null $config = null, string|null $encoding = null): tidy|false	Parse a document stored in a string
tidy::repairFile(string $filename, array|string|null $config = null, string|null $encoding = null, bool $useIncludePath = false): string|false	Repair a file and return it as a string
tidy_repair_file(string $filename, array|string|null $config = null, string|null $encoding = null, bool $useIncludePath = false): string|false	Repair a file and return it as a string
tidy::repairString(string $string, array|string|null $config = null, string|null $encoding = null): string|false	Repair a string using an optionally provided configuration file
tidy_repair_string(string $string, array|string|null $config = null, string|null $encoding = null): string|false	Repair a string using an optionally provided configuration file
>root(): tidyNode|null	(tidy) Returns a tidyNode object representing the root of the tidy parse tree
tidy_get_root(tidy $tidy): tidyNode|null	Returns a tidyNode object representing the root of the tidy parse tree
tidyNode()	(new) Private constructor to disallow direct instantiation
>getNextSibling(): tidyNode|null	(tidyNode) Returns the next sibling node of the current node
>getParent(): tidyNode|null	(tidyNode) Returns the parent node of the current node
>getPreviousSibling(): tidyNode|null	(tidyNode) Returns the previous sibling node of the current node
>hasChildren(): bool	(tidyNode) Checks if a node has children
>hasSiblings(): bool	(tidyNode) Checks if a node has siblings
>isAsp(): bool	(tidyNode) Checks if this node is ASP
>isComment(): bool	(tidyNode) Checks if a node represents a comment
>isHtml(): bool	(tidyNode) Checks if a node is an element node
>isJste(): bool	(tidyNode) Checks if this node is JSTE
>isPhp(): bool	(tidyNode) Checks if a node is PHP
>isText(): bool	(tidyNode) Checks if a node represents text (no markup)
token_get_all(string $code, int $flags = ?): array	Split given source into PHP tokens
token_name(int $id): string	Get the symbolic name of a given PHP token
PhpToken(int $id, string $text, int $line = -1, int $pos = -1)	(new) Returns a new PhpToken object
>getTokenName(): string|null	(PhpToken) Returns the name of the token.
>is(int|string|array $kind): bool	(PhpToken) Tells whether the token is of given kind.
>isIgnorable(): bool	(PhpToken) Tells whether the token would be ignored by the PHP parser.
>__toString(): string	(PhpToken) Returns the textual content of the token.
PhpToken::tokenize(string $code, int $flags = ?): array	Splits given source into PHP tokens, represented by PhpToken objects.
trader_acos(array $real): array	Vector Trigonometric ACos
trader_ad(array $high, array $low, array $close, array $volume): array	Chaikin A/D Line
trader_add(array $real0, array $real1): array	Vector Arithmetic Add
trader_adosc(array $high, array $low, array $close, array $volume, int $fastPeriod = ?, int $slowPeriod = ?): array	Chaikin A/D Oscillator
trader_adx(array $high, array $low, array $close, int $timePeriod = ?): array	Average Directional Movement Index
trader_adxr(array $high, array $low, array $close, int $timePeriod = ?): array	Average Directional Movement Index Rating
trader_apo(array $real, int $fastPeriod = ?, int $slowPeriod = ?, int $mAType = ?): array	Absolute Price Oscillator
trader_aroon(array $high, array $low, int $timePeriod = ?): array	Aroon
trader_aroonosc(array $high, array $low, int $timePeriod = ?): array	Aroon Oscillator
trader_asin(array $real): array	Vector Trigonometric ASin
trader_atan(array $real): array	Vector Trigonometric ATan
trader_atr(array $high, array $low, array $close, int $timePeriod = ?): array	Average True Range
trader_avgprice(array $open, array $high, array $low, array $close): array	Average Price
trader_bbands(array $real, int $timePeriod = ?, float $nbDevUp = ?, float $nbDevDn = ?, int $mAType = ?): array	Bollinger Bands
trader_beta(array $real0, array $real1, int $timePeriod = ?): array	Beta
trader_bop(array $open, array $high, array $low, array $close): array	Balance Of Power
trader_cci(array $high, array $low, array $close, int $timePeriod = ?): array	Commodity Channel Index
trader_cdl2crows(array $open, array $high, array $low, array $close): array	Two Crows
trader_cdl3blackcrows(array $open, array $high, array $low, array $close): array	Three Black Crows
trader_cdl3inside(array $open, array $high, array $low, array $close): array	Three Inside Up/Down
trader_cdl3linestrike(array $open, array $high, array $low, array $close): array	Three-Line Strike
trader_cdl3outside(array $open, array $high, array $low, array $close): array	Three Outside Up/Down
trader_cdl3starsinsouth(array $open, array $high, array $low, array $close): array	Three Stars In The South
trader_cdl3whitesoldiers(array $open, array $high, array $low, array $close): array	Three Advancing White Soldiers
trader_cdlabandonedbaby(array $open, array $high, array $low, array $close, float $penetration = ?): array	Abandoned Baby
trader_cdladvanceblock(array $open, array $high, array $low, array $close): array	Advance Block
trader_cdlbelthold(array $open, array $high, array $low, array $close): array	Belt-hold
trader_cdlbreakaway(array $open, array $high, array $low, array $close): array	Breakaway
trader_cdlclosingmarubozu(array $open, array $high, array $low, array $close): array	Closing Marubozu
trader_cdlconcealbabyswall(array $open, array $high, array $low, array $close): array	Concealing Baby Swallow
trader_cdlcounterattack(array $open, array $high, array $low, array $close): array	Counterattack
trader_cdldarkcloudcover(array $open, array $high, array $low, array $close, float $penetration = ?): array	Dark Cloud Cover
trader_cdldoji(array $open, array $high, array $low, array $close): array	Doji
trader_cdldojistar(array $open, array $high, array $low, array $close): array	Doji Star
trader_cdldragonflydoji(array $open, array $high, array $low, array $close): array	Dragonfly Doji
trader_cdlengulfing(array $open, array $high, array $low, array $close): array	Engulfing Pattern
trader_cdleveningdojistar(array $open, array $high, array $low, array $close, float $penetration = ?): array	Evening Doji Star
trader_cdleveningstar(array $open, array $high, array $low, array $close, float $penetration = ?): array	Evening Star
trader_cdlgapsidesidewhite(array $open, array $high, array $low, array $close): array	Up/Down-gap side-by-side white lines
trader_cdlgravestonedoji(array $open, array $high, array $low, array $close): array	Gravestone Doji
trader_cdlhammer(array $open, array $high, array $low, array $close): array	Hammer
trader_cdlhangingman(array $open, array $high, array $low, array $close): array	Hanging Man
trader_cdlharami(array $open, array $high, array $low, array $close): array	Harami Pattern
trader_cdlharamicross(array $open, array $high, array $low, array $close): array	Harami Cross Pattern
trader_cdlhighwave(array $open, array $high, array $low, array $close): array	High-Wave Candle
trader_cdlhikkake(array $open, array $high, array $low, array $close): array	Hikkake Pattern
trader_cdlhikkakemod(array $open, array $high, array $low, array $close): array	Modified Hikkake Pattern
trader_cdlhomingpigeon(array $open, array $high, array $low, array $close): array	Homing Pigeon
trader_cdlidentical3crows(array $open, array $high, array $low, array $close): array	Identical Three Crows
trader_cdlinneck(array $open, array $high, array $low, array $close): array	In-Neck Pattern
trader_cdlinvertedhammer(array $open, array $high, array $low, array $close): array	Inverted Hammer
trader_cdlkicking(array $open, array $high, array $low, array $close): array	Kicking
trader_cdlkickingbylength(array $open, array $high, array $low, array $close): array	Kicking - bull/bear determined by the longer marubozu
trader_cdlladderbottom(array $open, array $high, array $low, array $close): array	Ladder Bottom
trader_cdllongleggeddoji(array $open, array $high, array $low, array $close): array	Long Legged Doji
trader_cdllongline(array $open, array $high, array $low, array $close): array	Long Line Candle
trader_cdlmarubozu(array $open, array $high, array $low, array $close): array	Marubozu
trader_cdlmatchinglow(array $open, array $high, array $low, array $close): array	Matching Low
trader_cdlmathold(array $open, array $high, array $low, array $close, float $penetration = ?): array	Mat Hold
trader_cdlmorningdojistar(array $open, array $high, array $low, array $close, float $penetration = ?): array	Morning Doji Star
trader_cdlmorningstar(array $open, array $high, array $low, array $close, float $penetration = ?): array	Morning Star
trader_cdlonneck(array $open, array $high, array $low, array $close): array	On-Neck Pattern
trader_cdlpiercing(array $open, array $high, array $low, array $close): array	Piercing Pattern
trader_cdlrickshawman(array $open, array $high, array $low, array $close): array	Rickshaw Man
trader_cdlrisefall3methods(array $open, array $high, array $low, array $close): array	Rising/Falling Three Methods
trader_cdlseparatinglines(array $open, array $high, array $low, array $close): array	Separating Lines
trader_cdlshootingstar(array $open, array $high, array $low, array $close): array	Shooting Star
trader_cdlshortline(array $open, array $high, array $low, array $close): array	Short Line Candle
trader_cdlspinningtop(array $open, array $high, array $low, array $close): array	Spinning Top
trader_cdlstalledpattern(array $open, array $high, array $low, array $close): array	Stalled Pattern
trader_cdlsticksandwich(array $open, array $high, array $low, array $close): array	Stick Sandwich
trader_cdltakuri(array $open, array $high, array $low, array $close): array	Takuri (Dragonfly Doji with very long lower shadow)
trader_cdltasukigap(array $open, array $high, array $low, array $close): array	Tasuki Gap
trader_cdlthrusting(array $open, array $high, array $low, array $close): array	Thrusting Pattern
trader_cdltristar(array $open, array $high, array $low, array $close): array	Tristar Pattern
trader_cdlunique3river(array $open, array $high, array $low, array $close): array	Unique 3 River
trader_cdlupsidegap2crows(array $open, array $high, array $low, array $close): array	Upside Gap Two Crows
trader_cdlxsidegap3methods(array $open, array $high, array $low, array $close): array	Upside/Downside Gap Three Methods
trader_ceil(array $real): array	Vector Ceil
trader_cmo(array $real, int $timePeriod = ?): array	Chande Momentum Oscillator
trader_correl(array $real0, array $real1, int $timePeriod = ?): array	Pearson's Correlation Coefficient (r)
trader_cos(array $real): array	Vector Trigonometric Cos
trader_cosh(array $real): array	Vector Trigonometric Cosh
trader_dema(array $real, int $timePeriod = ?): array	Double Exponential Moving Average
trader_div(array $real0, array $real1): array	Vector Arithmetic Div
trader_dx(array $high, array $low, array $close, int $timePeriod = ?): array	Directional Movement Index
trader_ema(array $real, int $timePeriod = ?): array	Exponential Moving Average
trader_errno(): int	Get error code
trader_exp(array $real): array	Vector Arithmetic Exp
trader_floor(array $real): array	Vector Floor
trader_get_compat(): int	Get compatibility mode
trader_get_unstable_period(int $functionId): int	Get unstable period
trader_ht_dcperiod(array $real): array	Hilbert Transform - Dominant Cycle Period
trader_ht_dcphase(array $real): array	Hilbert Transform - Dominant Cycle Phase
trader_ht_phasor(array $real): array	Hilbert Transform - Phasor Components
trader_ht_sine(array $real): array	Hilbert Transform - SineWave
trader_ht_trendline(array $real): array	Hilbert Transform - Instantaneous Trendline
trader_ht_trendmode(array $real): array	Hilbert Transform - Trend vs Cycle Mode
trader_kama(array $real, int $timePeriod = ?): array	Kaufman Adaptive Moving Average
trader_linearreg_angle(array $real, int $timePeriod = ?): array	Linear Regression Angle
trader_linearreg_intercept(array $real, int $timePeriod = ?): array	Linear Regression Intercept
trader_linearreg_slope(array $real, int $timePeriod = ?): array	Linear Regression Slope
trader_linearreg(array $real, int $timePeriod = ?): array	Linear Regression
trader_ln(array $real): array	Vector Log Natural
trader_log10(array $real): array	Vector Log10
trader_ma(array $real, int $timePeriod = ?, int $mAType = ?): array	Moving average
trader_macd(array $real, int $fastPeriod = ?, int $slowPeriod = ?, int $signalPeriod = ?): array	Moving Average Convergence/Divergence
trader_macdext(array $real, int $fastPeriod = ?, int $fastMAType = ?, int $slowPeriod = ?, int $slowMAType = ?, int $signalPeriod = ?, int $signalMAType = ?): array	MACD with controllable MA type
trader_macdfix(array $real, int $signalPeriod = ?): array	Moving Average Convergence/Divergence Fix 12/26
trader_mama(array $real, float $fastLimit = ?, float $slowLimit = ?): array	MESA Adaptive Moving Average
trader_mavp(array $real, array $periods, int $minPeriod = ?, int $maxPeriod = ?, int $mAType = ?): array	Moving average with variable period
trader_max(array $real, int $timePeriod = ?): array	Highest value over a specified period
trader_maxindex(array $real, int $timePeriod = ?): array	Index of highest value over a specified period
trader_medprice(array $high, array $low): array	Median Price
trader_mfi(array $high, array $low, array $close, array $volume, int $timePeriod = ?): array	Money Flow Index
trader_midpoint(array $real, int $timePeriod = ?): array	MidPoint over period
trader_midprice(array $high, array $low, int $timePeriod = ?): array	Midpoint Price over period
trader_min(array $real, int $timePeriod = ?): array	Lowest value over a specified period
trader_minindex(array $real, int $timePeriod = ?): array	Index of lowest value over a specified period
trader_minmax(array $real, int $timePeriod = ?): array	Lowest and highest values over a specified period
trader_minmaxindex(array $real, int $timePeriod = ?): array	Indexes of lowest and highest values over a specified period
trader_minus_di(array $high, array $low, array $close, int $timePeriod = ?): array	Minus Directional Indicator
trader_minus_dm(array $high, array $low, int $timePeriod = ?): array	Minus Directional Movement
trader_mom(array $real, int $timePeriod = ?): array	Momentum
trader_mult(array $real0, array $real1): array	Vector Arithmetic Mult
trader_natr(array $high, array $low, array $close, int $timePeriod = ?): array	Normalized Average True Range
trader_obv(array $real, array $volume): array	On Balance Volume
trader_plus_di(array $high, array $low, array $close, int $timePeriod = ?): array	Plus Directional Indicator
trader_plus_dm(array $high, array $low, int $timePeriod = ?): array	Plus Directional Movement
trader_ppo(array $real, int $fastPeriod = ?, int $slowPeriod = ?, int $mAType = ?): array	Percentage Price Oscillator
trader_roc(array $real, int $timePeriod = ?): array	Rate of change : ((price/prevPrice)-1)*100
trader_rocp(array $real, int $timePeriod = ?): array	Rate of change Percentage: (price-prevPrice)/prevPrice
trader_rocr(array $real, int $timePeriod = ?): array	Rate of change ratio: (price/prevPrice)
trader_rocr100(array $real, int $timePeriod = ?): array	Rate of change ratio 100 scale: (price/prevPrice)*100
trader_rsi(array $real, int $timePeriod = ?): array	Relative Strength Index
trader_sar(array $high, array $low, float $acceleration = ?, float $maximum = ?): array	Parabolic SAR
trader_sarext(array $high, array $low, float $startValue = ?, float $offsetOnReverse = ?, float $accelerationInitLong = ?, float $accelerationLong = ?, float $accelerationMaxLong = ?, float $accelerationInitShort = ?, float $accelerationShort = ?, float $accelerationMaxShort = ?): array	Parabolic SAR - Extended
trader_set_compat(int $compatId): void	Set compatibility mode
trader_set_unstable_period(int $functionId, int $timePeriod): void	Set unstable period
trader_sin(array $real): array	Vector Trigonometric Sin
trader_sinh(array $real): array	Vector Trigonometric Sinh
trader_sma(array $real, int $timePeriod = ?): array	Simple Moving Average
trader_sqrt(array $real): array	Vector Square Root
trader_stddev(array $real, int $timePeriod = ?, float $nbDev = ?): array	Standard Deviation
trader_stoch(array $high, array $low, array $close, int $fastK_Period = ?, int $slowK_Period = ?, int $slowK_MAType = ?, int $slowD_Period = ?, int $slowD_MAType = ?): array	Stochastic
trader_stochf(array $high, array $low, array $close, int $fastK_Period = ?, int $fastD_Period = ?, int $fastD_MAType = ?): array	Stochastic Fast
trader_stochrsi(array $real, int $timePeriod = ?, int $fastK_Period = ?, int $fastD_Period = ?, int $fastD_MAType = ?): array	Stochastic Relative Strength Index
trader_sub(array $real0, array $real1): array	Vector Arithmetic Subtraction
trader_sum(array $real, int $timePeriod = ?): array	Summation
trader_t3(array $real, int $timePeriod = ?, float $vFactor = ?): array	Triple Exponential Moving Average (T3)
trader_tan(array $real): array	Vector Trigonometric Tan
trader_tanh(array $real): array	Vector Trigonometric Tanh
trader_tema(array $real, int $timePeriod = ?): array	Triple Exponential Moving Average
trader_trange(array $high, array $low, array $close): array	True Range
trader_trima(array $real, int $timePeriod = ?): array	Triangular Moving Average
trader_trix(array $real, int $timePeriod = ?): array	1-day Rate-Of-Change (ROC) of a Triple Smooth EMA
trader_tsf(array $real, int $timePeriod = ?): array	Time Series Forecast
trader_typprice(array $high, array $low, array $close): array	Typical Price
trader_ultosc(array $high, array $low, array $close, int $timePeriod1 = ?, int $timePeriod2 = ?, int $timePeriod3 = ?): array	Ultimate Oscillator
trader_var(array $real, int $timePeriod = ?, float $nbDev = ?): array	Variance
trader_wclprice(array $high, array $low, array $close): array	Weighted Close Price
trader_willr(array $high, array $low, array $close, int $timePeriod = ?): array	Williams' %R
trader_wma(array $real, int $timePeriod = ?): array	Weighted Moving Average
UI\Draw\Text\Font\fontFamilies(): array	Retrieve Font Families
UI\quit(): void	Quit UI Loop
UI\run(int $flags = ?): void	Enter UI Loop
>onDraw(UI\Draw\Pen $pen, UI\Size $areaSize, UI\Point $clipPoint, UI\Size $clipSize)	(UI\Area) Draw Callback
>onKey(string $key, int $ext, int $flags)	(UI\Area) Key Callback
>onMouse(UI\Point $areaPoint, UI\Size $areaSize, int $flags)	(UI\Area) Mouse Callback
>redraw()	(UI\Area) Redraw Area
>scrollTo(UI\Point $point, UI\Size $size)	(UI\Area) Area Scroll
>setSize(UI\Size $size)	(UI\Area) Set Size
>destroy()	(UI\Control) Destroy Control
>disable()	(UI\Control) Disable Control
>enable()	(UI\Control) Enable Control
>getParent(): UI\Control	(UI\Control) Get Parent Control
>getTopLevel(): int	(UI\Control) Get Top Level
>hide()	(UI\Control) Hide Control
>isEnabled(): bool	(UI\Control) Determine if Control is enabled
>isVisible(): bool	(UI\Control) Determine if Control is visible
>setParent(UI\Control $parent)	(UI\Control) Set Parent Control
>show()	(UI\Control) Control Show
>append(Control $control, bool $stretchy = false): int	(UI\Controls\Box) Append Control
UI\Controls\Box(int $orientation = UI\Controls\Box::Horizontal)	(new) Construct a new Box
>delete(int $index): bool	(UI\Controls\Box) Delete Control
>getOrientation(): int	(UI\Controls\Box) Get Orientation
>isPadded(): bool	(UI\Controls\Box) Padding Detection
>setPadded(bool $padded)	(UI\Controls\Box) Set Padding
UI\Controls\Button(string $text)	(new) Construct a new Button
>getText(): string	(UI\Controls\Button) Get Text
>onClick()	(UI\Controls\Button) Click Handler
>setText(string $text)	(UI\Controls\Button) Set Text
UI\Controls\Check(string $text)	(new) Construct a new Check
>getText(): string	(UI\Controls\Check) Get Text
>isChecked(): bool	(UI\Controls\Check) Checked Detection
>onToggle()	(UI\Controls\Check) Toggle Callback
>setChecked(bool $checked)	(UI\Controls\Check) Set Checked
>setText(string $text)	(UI\Controls\Check) Set Text
>getColor(): UI\Color	(UI\Controls\ColorButton) Get Color
>onChange()	(UI\Controls\ColorButton) Change Handler
>setColor(UI\Draw\Color $color)	(UI\Controls\ColorButton) Set Color
>setColor(int $color)	(UI\Controls\ColorButton) Set Color
>append(string $text)	(UI\Controls\Combo) Append Option
>getSelected(): int	(UI\Controls\Combo) Get Selected Option
>onSelected()	(UI\Controls\Combo) Selected Handler
>setSelected(int $index)	(UI\Controls\Combo) Set Selected Option
>append(string $text)	(UI\Controls\EditableCombo) Append Option
>getText(): string	(UI\Controls\EditableCombo) Get Text
>onChange()	(UI\Controls\EditableCombo) Change Handler
>setText(string $text)	(UI\Controls\EditableCombo) Set Text
UI\Controls\Entry(int $type = UI\Controls\Entry::Normal)	(new) Construct a new Entry
>getText(): string	(UI\Controls\Entry) Get Text
>isReadOnly(): bool	(UI\Controls\Entry) Detect Read Only
>onChange()	(UI\Controls\Entry) Change Handler
>setReadOnly(bool $readOnly)	(UI\Controls\Entry) Set Read Only
>setText(string $text)	(UI\Controls\Entry) Set Text
>append(string $label, UI\Control $control, bool $stretchy = false): int	(UI\Controls\Form) Append Control
>delete(int $index): bool	(UI\Controls\Form) Delete Control
>isPadded(): bool	(UI\Controls\Form) Padding Detection
>setPadded(bool $padded)	(UI\Controls\Form) Set Padding
>append(UI\Control $control, int $left, int $top, int $xspan, int $yspan, bool $hexpand, int $halign, bool $vexpand, int $valign)	(UI\Controls\Grid) Append Control
>isPadded(): bool	(UI\Controls\Grid) Padding Detection
>setPadded(bool $padding)	(UI\Controls\Grid) Set Padding
>append(UI\Control $control)	(UI\Controls\Group) Append Control
UI\Controls\Group(string $title)	(new) Construct a new Group
>getTitle(): string	(UI\Controls\Group) Get Title
>hasMargin(): bool	(UI\Controls\Group) Margin Detection
>setMargin(bool $margin)	(UI\Controls\Group) Set Margin
>setTitle(string $title)	(UI\Controls\Group) Set Title
UI\Controls\Label(string $text)	(new) Construct a new Label
>getText(): string	(UI\Controls\Label) Get Text
>setText(string $text)	(UI\Controls\Label) Set Text
>append(string $text)	(UI\Controls\MultilineEntry) Append Text
UI\Controls\MultilineEntry(int $type = ?)	(new) Construct a new Multiline Entry
>getText(): string	(UI\Controls\MultilineEntry) Get Text
>isReadOnly(): bool	(UI\Controls\MultilineEntry) Read Only Detection
>onChange()	(UI\Controls\MultilineEntry) Change Handler
>setReadOnly(bool $readOnly)	(UI\Controls\MultilineEntry) Set Read Only
>setText(string $text)	(UI\Controls\MultilineEntry) Set Text
UI\Controls\Picker(int $type = UI\Controls\Picker::Date)	(new) Construct a new Picker
>getValue(): int	(UI\Controls\Progress) Get Value
>setValue(int $value)	(UI\Controls\Progress) Set Value
>append(string $text)	(UI\Controls\Radio) Append Option
>getSelected(): int	(UI\Controls\Radio) Get Selected Option
>onSelected()	(UI\Controls\Radio) Selected Handler
>setSelected(int $index)	(UI\Controls\Radio) Set Selected Option
UI\Controls\Separator(int $type = UI\Controls\Separator::Horizontal)	(new) Construct a new Separator
UI\Controls\Slider(int $min, int $max)	(new) Construct a new Slider
>getValue(): int	(UI\Controls\Slider) Get Value
>onChange()	(UI\Controls\Slider) Change Handler
>setValue(int $value)	(UI\Controls\Slider) Set Value
UI\Controls\Spin(int $min, int $max)	(new) Construct a new Spin
>getValue(): int	(UI\Controls\Spin) Get Value
>onChange()	(UI\Controls\Spin) Change Handler
>setValue(int $value)	(UI\Controls\Spin) Set Value
>append(string $name, UI\Control $control): int	(UI\Controls\Tab) Append Page
>delete(int $index): bool	(UI\Controls\Tab) Delete Page
>hasMargin(int $page): bool	(UI\Controls\Tab) Margin Detection
>insertAt(string $name, int $page, UI\Control $control)	(UI\Controls\Tab) Insert Page
>pages(): int	(UI\Controls\Tab) Page Count
>setMargin(int $page, bool $margin)	(UI\Controls\Tab) Set Margin
UI\Draw\Brush(UI\Draw\Color $color)	(new) Construct a new Brush
UI\Draw\Brush(int $color)	(new) Construct a new Brush
>getColor(): UI\Draw\Color	(UI\Draw\Brush) Get Color
>setColor(UI\Draw\Color $color): void	(UI\Draw\Brush) Set Color
>setColor(int $color): void	(UI\Draw\Brush) Set Color
>addStop(float $position, UI\Draw\Color $color): int	(UI\Draw\Brush\Gradient) Stop Manipulation
>addStop(float $position, int $color): int	(UI\Draw\Brush\Gradient) Stop Manipulation
>delStop(int $index): int	(UI\Draw\Brush\Gradient) Stop Manipulation
>setStop(int $index, float $position, UI\Draw\Color $color): bool	(UI\Draw\Brush\Gradient) Stop Manipulation
>setStop(int $index, float $position, int $color): bool	(UI\Draw\Brush\Gradient) Stop Manipulation
UI\Draw\Brush\LinearGradient(UI\Point $start, UI\Point $end)	(new) Construct a Linear Gradient
UI\Draw\Brush\RadialGradient(UI\Point $start, UI\Point $outer, float $radius)	(new) Construct a new Radial Gradient
UI\Draw\Color(UI\Draw\Color $color = ?)	(new) Construct new Color
UI\Draw\Color(int $color = ?)	(new) Construct new Color
>getChannel(int $channel): float	(UI\Draw\Color) Color Manipulation
>setChannel(int $channel, float $value): void	(UI\Draw\Color) Color Manipulation
>invert()	(UI\Draw\Matrix) Invert Matrix
>isInvertible(): bool	(UI\Draw\Matrix) Invertible Detection
>multiply(UI\Draw\Matrix $matrix): UI\Draw\Matrix	(UI\Draw\Matrix) Multiply Matrix
>rotate(UI\Point $point, float $amount)	(UI\Draw\Matrix) Rotate Matrix
>scale(UI\Point $center, UI\Point $point)	(UI\Draw\Matrix) Scale Matrix
>skew(UI\Point $point, UI\Point $amount)	(UI\Draw\Matrix) Skew Matrix
>translate(UI\Point $point)	(UI\Draw\Matrix) Translate Matrix
>addRectangle(UI\Point $point, UI\Size $size)	(UI\Draw\Path) Draw a Rectangle
>arcTo(UI\Point $point, float $radius, float $angle, float $sweep, float $negative)	(UI\Draw\Path) Draw an Arc
>bezierTo(UI\Point $point, float $radius, float $angle, float $sweep, float $negative)	(UI\Draw\Path) Draw Bezier Curve
>closeFigure()	(UI\Draw\Path) Close Figure
UI\Draw\Path(int $mode = UI\Draw\Path::Winding)	(new) Construct a new Path
>end()	(UI\Draw\Path) Finalize Path
>lineTo(UI\Point $point, float $radius, float $angle, float $sweep, float $negative)	(UI\Draw\Path) Draw a Line
>newFigure(UI\Point $point)	(UI\Draw\Path) Draw Figure
>newFigureWithArc(UI\Point $point, float $radius, float $angle, float $sweep, float $negative)	(UI\Draw\Path) Draw Figure with Arc
>clip(UI\Draw\Path $path)	(UI\Draw\Pen) Clip a Path
>fill(UI\Draw\Path $path, UI\Draw\Brush $with)	(UI\Draw\Pen) Fill a Path
>fill(UI\Draw\Path $path, UI\Draw\Color $with)	(UI\Draw\Pen) Fill a Path
>fill(UI\Draw\Path $path, int $with)	(UI\Draw\Pen) Fill a Path
>restore()	(UI\Draw\Pen) Restore
>save()	(UI\Draw\Pen) Save
>stroke(UI\Draw\Path $path, UI\Draw\Brush $with, UI\Draw\Stroke $stroke)	(UI\Draw\Pen) Stroke a Path
>stroke(UI\Draw\Path $path, UI\Draw\Color $with, UI\Draw\Stroke $stroke)	(UI\Draw\Pen) Stroke a Path
>stroke(UI\Draw\Path $path, int $with, UI\Draw\Stroke $stroke)	(UI\Draw\Pen) Stroke a Path
>transform(UI\Draw\Matrix $matrix)	(UI\Draw\Pen) Matrix Transform
>write(UI\Point $point, UI\Draw\Text\Layout $layout)	(UI\Draw\Pen) Draw Text at Point
UI\Draw\Stroke(int $cap = UI\Draw\Line\Cap::Flat, int $join = UI\Draw\Line\Join::Miter, float $thickness = 1, float $miterLimit = 10)	(new) Construct a new Stroke
>getCap(): int	(UI\Draw\Stroke) Get Line Cap
>getJoin(): int	(UI\Draw\Stroke) Get Line Join
>getMiterLimit(): float	(UI\Draw\Stroke) Get Miter Limit
>getThickness(): float	(UI\Draw\Stroke) Get Thickness
>setCap(int $cap)	(UI\Draw\Stroke) Set Line Cap
>setJoin(int $join)	(UI\Draw\Stroke) Set Line Join
>setMiterLimit(float $limit)	(UI\Draw\Stroke) Set Miter Limit
>setThickness(float $thickness)	(UI\Draw\Stroke) Set Thickness
UI\Draw\Text\Font(UI\Draw\Text\Font\Descriptor $descriptor)	(new) Construct a new Font
>getAscent(): float	(UI\Draw\Text\Font) Font Metrics
>getDescent(): float	(UI\Draw\Text\Font) Font Metrics
>getLeading(): float	(UI\Draw\Text\Font) Font Metrics
>getUnderlinePosition(): float	(UI\Draw\Text\Font) Font Metrics
>getUnderlineThickness(): float	(UI\Draw\Text\Font) Font Metrics
UI\Draw\Text\Font\Descriptor(string $family, float $size, int $weight = UI\Draw\Text\Font\Weight::Normal, int $italic = UI\Draw\Text\Font\Italic::Normal, int $stretch = UI\Draw\Text\Font\Stretch::Normal)	(new) Construct a new Font Descriptor
>getFamily(): string	(UI\Draw\Text\Font\Descriptor) Get Font Family
>getItalic(): int	(UI\Draw\Text\Font\Descriptor) Style Detection
>getSize(): float	(UI\Draw\Text\Font\Descriptor) Size Detection
>getStretch(): int	(UI\Draw\Text\Font\Descriptor) Style Detection
>getWeight(): int	(UI\Draw\Text\Font\Descriptor) Weight Detection
UI\Draw\Text\Layout(string $text, UI\Draw\Text\Font $font, float $width)	(new) Construct a new Text Layout
>setColor(UI\Draw\Color $color, int $start = ?, int $end = ?)	(UI\Draw\Text\Layout) Set Color
>setColor(int $color, int $start = ?, int $end = ?)	(UI\Draw\Text\Layout) Set Color
>setWidth(float $width)	(UI\Draw\Text\Layout) Set Width
UI\Executor()	(new) Construct a new Executor
UI\Executor(int $microseconds)	(new) Construct a new Executor
UI\Executor(int $seconds, int $microseconds)	(new) Construct a new Executor
>kill(): void	(UI\Executor) Stop Executor
>onExecute(): void	(UI\Executor) Execution Callback
>setInterval(int $microseconds): bool	(UI\Executor) Interval Manipulation
>setInterval(int $seconds, int $microseconds): bool	(UI\Executor) Interval Manipulation
>append(string $name, string $type = UI\MenuItem::class): UI\MenuItem	(UI\Menu) Append Menu Item
>appendAbout(string $type = UI\MenuItem::class): UI\MenuItem	(UI\Menu) Append About Menu Item
>appendCheck(string $name, string $type = UI\MenuItem::class): UI\MenuItem	(UI\Menu) Append Checkable Menu Item
>appendPreferences(string $type = UI\MenuItem::class): UI\MenuItem	(UI\Menu) Append Preferences Menu Item
>appendQuit(string $type = UI\MenuItem::class): UI\MenuItem	(UI\Menu) Append Quit Menu Item
>appendSeparator()	(UI\Menu) Append Menu Item Separator
UI\Menu(string $name)	(new) Construct a new Menu
>disable()	(UI\MenuItem) Disable Menu Item
>enable()	(UI\MenuItem) Enable Menu Item
>isChecked(): bool	(UI\MenuItem) Detect Checked
>onClick()	(UI\MenuItem) On Click Callback
>setChecked(bool $checked)	(UI\MenuItem) Set Checked
UI\Point::at(float $point): UI\Point	Size Coercion
UI\Point::at(UI\Size $size): UI\Point	Size Coercion
UI\Point(float $x, float $y)	(new) Construct a new Point
>getX(): float	(UI\Point) Retrieves X
>getY(): float	(UI\Point) Retrieves Y
>setX(float $point)	(UI\Point) Set X
>setY(float $point)	(UI\Point) Set Y
UI\Size(float $width, float $height)	(new) Construct a new Size
>getHeight(): float	(UI\Size) Retrieves Height
>getWidth(): float	(UI\Size) Retrives Width
UI\Size::of(float $size): UI\Size	Point Coercion
UI\Size::of(UI\Point $point): UI\Size	Point Coercion
>setHeight(float $size)	(UI\Size) Set Height
>setWidth(float $size)	(UI\Size) Set Width
>add(UI\Control $control)	(UI\Window) Add a Control
UI\Window(string $title, Size $size, bool $menu = false)	(new) Construct a new Window
>error(string $title, string $msg)	(UI\Window) Show Error Box
>getSize(): UI\Size	(UI\Window) Get Window Size
>getTitle(): string	(UI\Window) Get Title
>hasBorders(): bool	(UI\Window) Border Detection
>hasMargin(): bool	(UI\Window) Margin Detection
>isFullScreen(): bool	(UI\Window) Full Screen Detection
>msg(string $title, string $msg)	(UI\Window) Show Message Box
>onClosing(): int	(UI\Window) Closing Callback
>open(): string	(UI\Window) Open Dialog
>save(): string	(UI\Window) Save Dialog
>setBorders(bool $borders)	(UI\Window) Border Use
>setFullScreen(bool $full)	(UI\Window) Full Screen Use
>setMargin(bool $margin)	(UI\Window) Margin Use
>setSize(UI\Size $size)	(UI\Window) Set Size
>setTitle(string $title)	(UI\Window) Window Title
UI\Area()	(new) An Area represents a canvas which can be used to draw, and respond to mouse and key events
UI\Control()	(new) This is the closed base class for all UI Controls
UI\Controls\ColorButton()	(new) A Color Button is a button which displays a color picker when clicked
UI\Controls\Combo()	(new) A Combo control represents a list of options, like the familiar select HTML element
UI\Controls\EditableCombo()	(new) An Editable Combo is a Combo which allows the user to enter custom options
UI\Controls\Form()	(new) A Form is a control which allows the arrangement of other controls into a familiar layout (the form)
UI\Controls\Grid()	(new) A Grid is a control which is allows the arrangement of children into a grid
UI\Controls\Progress()	(new) A Progress control is a familiar Progress bar: It represents progress as a percentage, with a possible range of 0 to 100 (inclusive)
UI\Controls\Radio()	(new) A Radio is similar to the radio input type familiar from HTML
UI\Controls\Tab()	(new) A Tab can contain many pages of Controls, each with a title, each selectable by the user
UI\Draw\Brush\Gradient()	(new) Abstract for gradient brushes
UI\Draw\Line\Cap()	(new) 
UI\Draw\Line\Join()	(new) 
UI\Draw\Matrix()	(new) 
UI\Draw\Pen()	(new) The Pen is passed to the Area Draw event handler, it is used for clipping, filling, stroking, and writing to Draw Paths
UI\Draw\Text\Font\Italic()	(new) 
UI\Draw\Text\Font\Stretch()	(new) 
UI\Draw\Text\Font\Weight()	(new) 
UI\Exception\InvalidArgumentException()	(new) 
UI\Exception\RuntimeException()	(new) 
UI\Key()	(new) 
UI\MenuItem()	(new) Menu Items should only be created by the Menu
odbc_autocommit(Odbc\Connection $odbc, bool|null $enable = null): int|bool	Toggle autocommit behaviour
odbc_binmode(Odbc\Result $statement, int $mode): true	Handling of binary column data
odbc_close_all(): void	Close all ODBC connections
odbc_close(Odbc\Connection $odbc): void	Close an ODBC connection
odbc_columnprivileges(Odbc\Connection $odbc, string|null $catalog, string $schema, string $table, string $column): Odbc\Result|false	Lists columns and associated privileges for the given table
odbc_columns(Odbc\Connection $odbc, string|null $catalog = null, string|null $schema = null, string|null $table = null, string|null $column = null): Odbc\Result|false	Lists the column names in specified tables
odbc_commit(Odbc\Connection $odbc): bool	Commit an ODBC transaction
odbc_connect(string $dsn, string|null $user = null, string|null $password = null, int $cursor_option = SQL_CUR_USE_DRIVER): Odbc\Connection|false	Connect to a datasource
odbc_connection_string_is_quoted(string $str): bool	Determines if an ODBC connection string value is quoted
odbc_connection_string_quote(string $str): string	Quotes an ODBC connection string value
odbc_connection_string_should_quote(string $str): bool	Determines if an ODBC connection string value should be quoted
odbc_cursor(Odbc\Result $statement): string|false	Get cursorname
odbc_data_source(Odbc\Connection $odbc, int $fetch_type): array|null|false	Returns information about available DSNs
odbc_do()	Alias of odbc_exec
odbc_error(Odbc\Connection|null $odbc = null): string	Get the last error code
odbc_errormsg(Odbc\Connection|null $odbc = null): string	Get the last error message
odbc_exec(Odbc\Connection $odbc, string $query): Odbc\Result|false	Directly execute an SQL statement
odbc_execute(Odbc\Result $statement, array $params = []): bool	Execute a prepared statement
odbc_fetch_array(Odbc\Result $statement, int|null $row = null): array|false	Fetch a result row as an associative array
odbc_fetch_into(Odbc\Result $statement, array $array, int|null $row = null): int|false	Fetch one result row into array
odbc_fetch_object(Odbc\Result $statement, int|null $row = null): stdClass|false	Fetch a result row as an object
odbc_fetch_row(Odbc\Result $statement, int|null $row = null): bool	Fetch a row
odbc_field_len(Odbc\Result $statement, int $field): int|false	Get the length (precision) of a field
odbc_field_name(Odbc\Result $statement, int $field): string|false	Get the columnname
odbc_field_num(Odbc\Result $statement, string $field): int|false	Return column number
odbc_field_precision()	Alias of odbc_field_len
odbc_field_scale(Odbc\Result $statement, int $field): int|false	Get the scale of a field
odbc_field_type(Odbc\Result $statement, int $field): string|false	Datatype of a field
odbc_foreignkeys(Odbc\Connection $odbc, string|null $pk_catalog, string $pk_schema, string $pk_table, string $fk_catalog, string $fk_schema, string $fk_table): Odbc\Result|false	Retrieves a list of foreign keys
odbc_free_result(Odbc\Result $statement): true	Free objects associated with a result
odbc_gettypeinfo(Odbc\Connection $odbc, int $data_type = ?): Odbc\Result|false	Retrieves information about data types supported by the data source
odbc_longreadlen(Odbc\Result $statement, int $length): true	Handling of LONG columns
odbc_next_result(Odbc\Result $statement): bool	Checks if multiple results are available
odbc_num_fields(Odbc\Result $statement): int	Number of columns in a result
odbc_num_rows(Odbc\Result $statement): int	Number of rows in a result
odbc_pconnect(string $dsn, string|null $user = null, string|null $password = null, int $cursor_option = SQL_CUR_USE_DRIVER): Odbc\Connection|false	Open a persistent database connection
odbc_prepare(Odbc\Connection $odbc, string $query): Odbc\Result|false	Prepares a statement for execution
odbc_primarykeys(Odbc\Connection $odbc, string|null $catalog, string $schema, string $table): Odbc\Result|false	Gets the primary keys for a table
odbc_procedurecolumns(Odbc\Connection $odbc, string|null $catalog = null, string|null $schema = null, string|null $procedure = null, string|null $column = null): Odbc\Result|false	Retrieve information about parameters to procedures
odbc_procedures(Odbc\Connection $odbc, string|null $catalog = null, string|null $schema = null, string|null $procedure = null): Odbc\Result|false	Get the list of procedures stored in a specific data source
odbc_result_all(Odbc\Result $statement, string $format = ""): int|false	Print result as HTML table
odbc_result(Odbc\Result $statement, string|int $field): string|bool|null	Get result data
odbc_rollback(Odbc\Connection $odbc): bool	Rollback a transaction
odbc_setoption(Odbc\Connection|Odbc\Result $odbc, int $which, int $option, int $value): bool	Adjust ODBC settings
odbc_specialcolumns(Odbc\Connection $odbc, int $type, string|null $catalog, string $schema, string $table, int $scope, int $nullable): Odbc\Result|false	Retrieves special columns
odbc_statistics(Odbc\Connection $odbc, string|null $catalog, string $schema, string $table, int $unique, int $accuracy): Odbc\Result|false	Retrieve statistics about a table
odbc_tableprivileges(Odbc\Connection $odbc, string|null $catalog, string $schema, string $table): Odbc\Result|false	Lists tables and the privileges associated with each table
odbc_tables(Odbc\Connection $odbc, string|null $catalog = null, string|null $schema = null, string|null $table = null, string|null $types = null): Odbc\Result|false	Get the list of table names stored in a specific data source
uopz_add_function(string $function, Closure $handler, int $flags = ZEND_ACC_PUBLIC): bool	Adds non-existent function or method
uopz_add_function(string $class, string $function, Closure $handler, int $flags = ZEND_ACC_PUBLIC, int $all = true): bool	Adds non-existent function or method
uopz_allow_exit(bool $allow): void	Allows control over disabled exit opcode
uopz_backup(string $function): void	Backup a function
uopz_backup(string $class, string $function): void	Backup a function
uopz_compose(string $name, array $classes, array $methods = ?, array $properties = ?, int $flags = ?): void	Compose a class
uopz_copy(string $function): Closure	Copy a function
uopz_copy(string $class, string $function): Closure	Copy a function
uopz_del_function(string $function): bool	Deletes previously added function or method
uopz_del_function(string $class, string $function, int $all = true): bool	Deletes previously added function or method
uopz_delete(string $function): void	Delete a function
uopz_delete(string $class, string $function): void	Delete a function
uopz_extend(string $class, string $parent): bool	Extend a class at runtime
uopz_flags(string $function, int $flags = PHP_INT_MAX): int	Get or set flags on function or class
uopz_flags(string $class, string $function, int $flags = PHP_INT_MAX): int	Get or set flags on function or class
uopz_function(string $function, Closure $handler, int $modifiers = ?): void	Creates a function at runtime
uopz_function(string $class, string $function, Closure $handler, int $modifiers = ?): void	Creates a function at runtime
uopz_get_exit_status(): mixed	Retrieve the last set exit status
uopz_get_hook(string $function): Closure	Gets previously set hook on function or method
uopz_get_hook(string $class, string $function): Closure	Gets previously set hook on function or method
uopz_get_mock(string $class): mixed	Get the current mock for a class
uopz_get_property(string $class, string $property): mixed	Gets value of class or instance property
uopz_get_property(object $instance, string $property): mixed	Gets value of class or instance property
uopz_get_return(string $function): mixed	Gets a previous set return value for a function
uopz_get_return(string $class, string $function): mixed	Gets a previous set return value for a function
uopz_get_static(string $class, string $function): array	Gets the static variables from function or method scope
uopz_get_static(string $function): array	Gets the static variables from function or method scope
uopz_implement(string $class, string $interface): bool	Implements an interface at runtime
uopz_overload(int $opcode, Callable $callable): void	Overload a VM opcode
uopz_redefine(string $constant, mixed $value): bool	Redefine a constant
uopz_redefine(string $class, string $constant, mixed $value): bool	Redefine a constant
uopz_rename(string $function, string $rename): void	Rename a function at runtime
uopz_rename(string $class, string $function, string $rename): void	Rename a function at runtime
uopz_restore(string $function): void	Restore a previously backed up function
uopz_restore(string $class, string $function): void	Restore a previously backed up function
uopz_set_hook(string $function, Closure $hook): bool	Sets hook to execute when entering a function or method
uopz_set_hook(string $class, string $function, Closure $hook): bool	Sets hook to execute when entering a function or method
uopz_set_mock(string $class, mixed $mock): void	Use mock instead of class for new objects
uopz_set_property(string $class, string $property, mixed $value): void	Sets value of existing class or instance property
uopz_set_property(object $instance, string $property, mixed $value): void	Sets value of existing class or instance property
uopz_set_return(string $function, mixed $value, bool $execute = false): bool	Provide a return value for an existing function
uopz_set_return(string $class, string $function, mixed $value, bool $execute = false): bool	Provide a return value for an existing function
uopz_undefine(string $constant): bool	Undefine a constant
uopz_undefine(string $class, string $constant): bool	Undefine a constant
uopz_unset_hook(string $function): bool	Removes previously set hook on function or method
uopz_unset_hook(string $class, string $function): bool	Removes previously set hook on function or method
uopz_unset_mock(string $class): void	Unset previously set mock
uopz_unset_return(string $function): bool	Unsets a previously set return value for a function
uopz_unset_return(string $class, string $function): bool	Unsets a previously set return value for a function
uopz_set_static(string $function, array $static): void	Sets the static variables in function or method scope
uopz_set_static(string $class, string $function, array $static): void	Sets the static variables in function or method scope
base64_decode(string $string, bool $strict = false): string|false	Decodes data encoded with MIME base64
base64_encode(string $string): string	Encodes data with MIME base64
get_headers(string $url, bool $associative = false, resource|null $context = null): array|false	Fetches all the headers sent by the server in response to an HTTP request
get_meta_tags(string $filename, bool $use_include_path = false): array|false	Extracts all meta tag content attributes from a file and returns an array
http_build_query(array|object $data, string $numeric_prefix = "", string|null $arg_separator = null, int $encoding_type = PHP_QUERY_RFC1738): string	Generate URL-encoded query string
parse_url(string $url, int $component = -1): int|string|array|null|false	Parse a URL and return its components
rawurldecode(string $string): string	Decode URL-encoded strings
rawurlencode(string $string): string	URL-encode according to RFC 3986
urldecode(string $string): string	Decodes URL-encoded string
urlencode(string $string): string	URL-encodes string
V8Js(string $object_name = "PHP", array $variables = array(), array $extensions = array(), bool $report_uncaught_exceptions = true)	(new) Construct a new V8Js object
>executeString(string $script, string $identifier = "V8Js::executeString()", int $flags = V8Js::FLAG_NONE): mixed	(V8Js) Execute a string as Javascript code
V8Js::getExtensions(): array	Return an array of registered extensions
>getPendingException(): V8JsException	(V8Js) Return pending uncaught Javascript exception
V8Js::registerExtension(string $extension_name, string $script, array $dependencies = array(), bool $auto_enable = false): bool	Register Javascript extensions for V8Js
>getJsFileName(): string	(V8JsException) The getJsFileName purpose
>getJsLineNumber(): int	(V8JsException) The getJsLineNumber purpose
>getJsSourceLine(): string	(V8JsException) The getJsSourceLine purpose
>getJsTrace(): string	(V8JsException) The getJsTrace purpose
V8JsException()	(new) 
boolval(mixed $value): bool	Get the boolean value of a variable
debug_zval_dump(mixed $value, mixed ...$values): void	Dumps a string representation of an internal zval structure to output
doubleval()	Alias of floatval
empty(mixed $var): bool	Determine whether a variable is empty
floatval(mixed $value): float	Get float value of a variable
get_debug_type(mixed $value): string	Gets the type name of a variable in a way that is suitable for debugging
get_defined_vars(): array	Returns an array of all defined variables
get_resource_id(resource $resource): int	Returns an integer identifier for the given resource
get_resource_type(resource $resource): string	Returns the resource type
gettype(mixed $value): string	Get the type of a variable
intval(mixed $value, int $base = 10): int	Get the integer value of a variable
is_array(mixed $value): bool	Finds whether a variable is an array
is_bool(mixed $value): bool	Finds out whether a variable is a boolean
is_callable(mixed $value, bool $syntax_only = false, string $callable_name = null): bool	Verify that a value can be called as a function from the current scope
is_countable(mixed $value): bool	Verify that the contents of a variable is a countable value
is_double()	Alias of is_float
is_float(mixed $value): bool	Finds whether the type of a variable is float
is_int(mixed $value): bool	Find whether the type of a variable is integer
is_integer()	Alias of is_int
is_iterable(mixed $value): bool	Verify that the contents of a variable is an iterable value
is_long()	Alias of is_int
is_null(mixed $value): bool	Finds whether a variable is null
is_numeric(mixed $value): bool	Finds whether a variable is a number or a numeric string
is_object(mixed $value): bool	Finds whether a variable is an object
is_real()	Alias of is_float
is_resource(mixed $value): bool	Finds whether a variable is a resource
is_scalar(mixed $value): bool	Finds whether a variable is a scalar
is_string(mixed $value): bool	Find whether the type of a variable is string
isset(mixed $var, mixed ...$vars): bool	Determine if a variable is declared and is different than null
print_r(mixed $value, bool $return = false): string|true	Prints human-readable information about a variable
serialize(mixed $value): string	Generates a storable representation of a value
settype(mixed $var, string $type): bool	Set the type of a variable
strval(mixed $value): string	Get string value of a variable
unserialize(string $data, array $options = []): mixed	Creates a PHP value from a stored representation
unset(mixed $var, mixed ...$vars): void	Unset a given variable
var_dump(mixed $value, mixed ...$values): void	Dumps information about a variable
var_export(mixed $value, bool $return = false): string|null	Outputs or returns a parsable string representation of a variable
var_representation(mixed $value, int $flags = ?): string	Returns a short, readable, parsable string representation of a variable
>auth(): bool	(VarnishAdmin) Authenticate on a varnish instance
>ban(string $vcl_regex): int	(VarnishAdmin) Ban URLs using a VCL expression
>banUrl(string $vcl_regex): int	(VarnishAdmin) Ban an URL using a VCL expression
>clearPanic(): int	(VarnishAdmin) Clear varnish instance panic messages
>connect(): bool	(VarnishAdmin) Connect to a varnish instance administration interface
VarnishAdmin(array $args = ?)	(new) VarnishAdmin constructor
>disconnect(): bool	(VarnishAdmin) Disconnect from a varnish instance administration interface
>getPanic(): string	(VarnishAdmin) Get the last panic message on a varnish instance
>getParams(): array	(VarnishAdmin) Fetch current varnish instance configuration parameters
>isRunning(): bool	(VarnishAdmin) Check if the varnish slave process is currently running
>setCompat(int $compat): void	(VarnishAdmin) Set the class compat configuration param
>setHost(string $host): void	(VarnishAdmin) Set the class host configuration param
>setIdent(string $ident): void	(VarnishAdmin) Set the class ident configuration param
>setParam(string $name, string|int $value): int	(VarnishAdmin) Set configuration param on the current varnish instance
>setPort(int $port): void	(VarnishAdmin) Set the class port configuration param
>setSecret(string $secret): void	(VarnishAdmin) Set the class secret configuration param
>setTimeout(int $timeout): void	(VarnishAdmin) Set the class timeout configuration param
>start(): int	(VarnishAdmin) Start varnish worker process
>stop(): int	(VarnishAdmin) Stop varnish worker process
VarnishLog(array $args = ?)	(new) Varnishlog constructor
>getLine(): array	(VarnishLog) Get next log line
VarnishLog::getTagName(int $index): string	Get the log tag string representation by its index
VarnishStat(array $args = ?)	(new) VarnishStat constructor
>getSnapshot(): array	(VarnishStat) Get the current varnish instance statistics snapshot
VarnishException()	(new) 
wddx_add_vars(resource $packet_id, mixed $var_name, mixed ...$var_names): bool	Add variables to a WDDX packet with the specified ID
wddx_deserialize(string $packet): mixed	Unserializes a WDDX packet
wddx_packet_end(resource $packet_id): string	Ends a WDDX packet with the specified ID
wddx_packet_start(string $comment = ?): resource	Starts a new WDDX packet with structure inside it
wddx_serialize_value(mixed $var, string $comment = ?): string	Serialize a single value into a WDDX packet
wddx_serialize_vars(mixed $var_name, mixed ...$var_names): string	Serialize variables into a WDDX packet
win32_add_right_access_service(string $servicename, string $username, int $right, string $machine = null): void	Add rights access for an username to the service
win32_add_service_env_var(string $servicename, string $varname, string $value): void	Add a custom environment variables on service
win32_continue_service(string $servicename, string $machine = null): void	Resumes a paused service
win32_create_service(array $details, string $machine = null): void	Creates a new service entry in the SCM database
win32_delete_service(string $servicename, string $machine = null): void	Deletes a service entry from the SCM database
win32_get_last_control_message(): int	Returns the last control message that was sent to this service
win32_get_service_env_vars(string $servicename): array	Read all custom environment variables on service
win32_pause_service(string $servicename, string $machine = null): void	Pauses a service
win32_query_service_status(string $servicename, string $machine = null): array	Queries the status of a service
win32_read_all_rights_access_service(string $servicename, string $machine = null): array	Read all service rights access
win32_read_right_access_service(string $servicename, string $username, string $machine = null): Win32Service\RightInfo	Read the service rights access for an username
win32_remove_right_access_service(string $servicename, string $username, string $machine = null): void	Remove the service rights access for an username
win32_remove_service_env_var(string $servicename, string $varname): void	Remove a custom environment variables on service
win32_send_custom_control(string $servicename, int $control, string $machine = null): void	Send a custom control to the service
win32_set_service_exit_code(int $exitCode = 1): int	Define or return the exit code for the current running service
win32_set_service_exit_mode(bool $gracefulMode = true): bool	Define or return the exit mode for the current running service
win32_set_service_pause_resume_state(bool $state = true): bool	Define or return the pause/resume capability for the current running service
win32_set_service_status(int $status, int $checkpoint = ?): void	Update the service status
win32_start_service_ctrl_dispatcher(string $name, bool $gracefulMode = true): void	Registers the script with the SCM, so that it can act as the service with the given name
win32_start_service(string $servicename, string $machine = null): void	Starts a service
win32_stop_service(string $servicename, string $machine = null): void	Stops a service
Win32Service\RightInfo()	(new) Create a new RightInfo (not used)
>getDomain(): null|string	(Win32Service\RightInfo) Return the user's domain
>getFullUsername(): null|string	(Win32Service\RightInfo) Return the domain and username
>getRights(): array	(Win32Service\RightInfo) Return the rights list
>getUsername(): null|string	(Win32Service\RightInfo) Return the username
>isDenyAccess(): bool	(Win32Service\RightInfo) Return true if the RightInfo concerns deny access to the resource
>isGrantAccess(): bool	(Win32Service\RightInfo) Return true if the RightInfo concern grants access to the resource
Win32ServiceException()	(new) The exception replaces the old mechanism where the error value needed to be compared to constants to detect which error was emitted
wincache_fcache_fileinfo(bool $summaryonly = false): array|false	Retrieves information about files cached in the file cache
wincache_fcache_meminfo(): array|false	Retrieves information about file cache memory usage
wincache_lock(string $key, bool $isglobal = false): bool	Acquires an exclusive lock on a given key
wincache_ocache_fileinfo(bool $summaryonly = false): array|false	Retrieves information about files cached in the opcode cache
wincache_ocache_meminfo(): array|false	Retrieves information about opcode cache memory usage
wincache_refresh_if_changed(array $files = NULL): bool	Refreshes the cache entries for the cached files
wincache_rplist_fileinfo(bool $summaryonly = false): array|false	Retrieves information about resolve file path cache
wincache_rplist_meminfo(): array|false	Retrieves information about memory usage by the resolve file path cache
wincache_scache_info(bool $summaryonly = false): array|false	Retrieves information about files cached in the session cache
wincache_scache_meminfo(): array|false	Retrieves information about session cache memory usage
wincache_ucache_add(string $key, mixed $value, int $ttl = ?): bool	Adds a variable in user cache only if variable does not already exist in the cache
wincache_ucache_add(array $values, mixed $unused = NULL, int $ttl = ?): bool	Adds a variable in user cache only if variable does not already exist in the cache
wincache_ucache_cas(string $key, int $old_value, int $new_value): bool	Compares the variable with old value and assigns new value to it
wincache_ucache_clear(): bool	Deletes entire content of the user cache
wincache_ucache_dec(string $key, int $dec_by = 1, bool $success = ?): mixed	Decrements the value associated with the key
wincache_ucache_delete(mixed $key): bool	Deletes variables from the user cache
wincache_ucache_exists(string $key): bool	Checks if a variable exists in the user cache
wincache_ucache_get(mixed $key, bool $success = ?): mixed	Gets a variable stored in the user cache
wincache_ucache_inc(string $key, int $inc_by = 1, bool $success = ?): mixed	Increments the value associated with the key
wincache_ucache_info(bool $summaryonly = false, string $key = NULL): array|false	Retrieves information about data stored in the user cache
wincache_ucache_meminfo(): array|false	Retrieves information about user cache memory usage
wincache_ucache_set(mixed $key, mixed $value, int $ttl = ?): bool	Adds a variable in user cache and overwrites a variable if it already exists in the cache
wincache_ucache_set(array $values, mixed $unused = NULL, int $ttl = ?): bool	Adds a variable in user cache and overwrites a variable if it already exists in the cache
wincache_unlock(string $key): bool	Releases an exclusive lock on a given key
wkhtmltox\Image\Converter(string $buffer = ?, array $settings = ?)	(new) Create a new Image converter
>convert(): string|null	(wkhtmltox\Image\Converter) Perform Image conversion
>getVersion(): string	(wkhtmltox\Image\Converter) Determine version of Converter
>add(wkhtmltox\PDF\Object $object): void	(wkhtmltox\PDF\Converter) Add an object for conversion
wkhtmltox\PDF\Converter(array $settings = ?)	(new) Create a new PDF converter
>convert(): string|null	(wkhtmltox\PDF\Converter) Perform PDF conversion
>getVersion(): string	(wkhtmltox\PDF\Converter) Determine version of Converter
wkhtmltox\PDF\Object(string $buffer, array $settings = ?)	(new) Create a new PDF Object
xattr_get(string $filename, string $name, int $flags = ?): string|false	Get an extended attribute
xattr_list(string $filename, int $flags = ?): array	Get a list of extended attributes
xattr_remove(string $filename, string $name, int $flags = ?): bool	Remove an extended attribute
xattr_set(string $filename, string $name, string $value, int $flags = ?): bool	Set an extended attribute
xattr_supported(string $filename, int $flags = ?): bool	Check if filesystem supports extended attributes
xdiff_file_bdiff_size(string $file): int	Read a size of file created by applying a binary diff
xdiff_file_bdiff(string $old_file, string $new_file, string $dest): bool	Make binary diff of two files
xdiff_file_bpatch(string $file, string $patch, string $dest): bool	Patch a file with a binary diff
xdiff_file_diff_binary(string $old_file, string $new_file, string $dest): bool	Alias xdiff_file_bdiff
xdiff_file_diff(string $old_file, string $new_file, string $dest, int $context = 3, bool $minimal = false): bool	Make unified diff of two files
xdiff_file_merge3(string $old_file, string $new_file1, string $new_file2, string $dest): mixed	Merge 3 files into one
xdiff_file_patch_binary(string $file, string $patch, string $dest): bool	Alias xdiff_file_bpatch
xdiff_file_patch(string $file, string $patch, string $dest, int $flags = DIFF_PATCH_NORMAL): mixed	Patch a file with an unified diff
xdiff_file_rabdiff(string $old_file, string $new_file, string $dest): bool	Make binary diff of two files using the Rabin's polynomial fingerprinting algorithm
xdiff_string_bdiff_size(string $patch): int	Read a size of file created by applying a binary diff
xdiff_string_bdiff(string $old_data, string $new_data): string	Make binary diff of two strings
xdiff_string_bpatch(string $str, string $patch): string	Patch a string with a binary diff
xdiff_string_bdiff(string $old_data, string $new_data): string	Alias xdiff_string_bdiff
xdiff_string_diff(string $old_data, string $new_data, int $context = 3, bool $minimal = false): string	Make unified diff of two strings
xdiff_string_merge3(string $old_data, string $new_data1, string $new_data2, string $error = ?): mixed	Merge 3 strings into one
xdiff_string_patch_binary(string $str, string $patch): string	Alias xdiff_string_bpatch
xdiff_string_patch(string $str, string $patch, int $flags = ?, string $error = ?): string	Patch a string with an unified diff
xdiff_string_bdiff(string $old_data, string $new_data): string	Make binary diff of two strings using the Rabin's polynomial fingerprinting algorithm
xhprof_disable(): array	Stops xhprof profiler
xhprof_enable(int $flags = ?, array $options = ?): void	Start xhprof profiler
xhprof_sample_disable(): array	Stops xhprof sample profiler
xhprof_sample_enable(): void	Start XHProf profiling in sampling mode
>align(resource $handle, int $style)	(Vtiful\Kernel\Format) Vtiful\Kernel\Format align
>bold(resource $handle)	(Vtiful\Kernel\Format) Vtiful\Kernel\Format bold
>italic(resource $handle)	(Vtiful\Kernel\Format) Vtiful\Kernel\Format italic
>underline(resource $handle, int $style)	(Vtiful\Kernel\Format) Vtiful\Kernel\Format underline
>addSheet(string $sheetName)	(Vtiful\Kernel\Excel) Vtiful\Kernel\Excel addSheet
>autoFilter(string $scope)	(Vtiful\Kernel\Excel) Vtiful\Kernel\Excel autoFilter
>constMemory(string $fileName, string $sheetName = ?)	(Vtiful\Kernel\Excel) Vtiful\Kernel\Excel constMemory
Vtiful\Kernel\Excel(array $config)	(new) Vtiful\Kernel\Excel constructor
>data(array $data)	(Vtiful\Kernel\Excel) Vtiful\Kernel\Excel data
>fileName(string $fileName, string $sheetName = ?)	(Vtiful\Kernel\Excel) Vtiful\Kernel\Excel fileName
>getHandle()	(Vtiful\Kernel\Excel) Vtiful\Kernel\Excel getHandle
>header(array $headerData)	(Vtiful\Kernel\Excel) Vtiful\Kernel\Excel header
>insertFormula(int $row, int $column, string $formula)	(Vtiful\Kernel\Excel) Vtiful\Kernel\Excel insertFormula
>insertImage(int $row, int $column, string $localImagePath)	(Vtiful\Kernel\Excel) Vtiful\Kernel\Excel insertImage
>insertText(int $row, int $column, int|float|string $data, string $format = ?)	(Vtiful\Kernel\Excel) Vtiful\Kernel\Excel insertText
>mergeCells(string $scope, string $data)	(Vtiful\Kernel\Excel) Vtiful\Kernel\Excel mergeCells
>output()	(Vtiful\Kernel\Excel) Vtiful\Kernel\Excel output
>setColumn(string $range, float $width, resource $format = ?)	(Vtiful\Kernel\Excel) Vtiful\Kernel\Excel setColumn
>setRow(string $range, float $height, resource $format = ?)	(Vtiful\Kernel\Excel) Vtiful\Kernel\Excel setRow
Vtiful\Kernel\Format()	(new) Create a cell format object
xml_error_string(int $error_code): string|null	Get XML parser error string
xml_get_current_byte_index(XMLParser $parser): int	Get current byte index for an XML parser
xml_get_current_column_number(XMLParser $parser): int	Get current column number for an XML parser
xml_get_current_line_number(XMLParser $parser): int	Get current line number for an XML parser
xml_get_error_code(XMLParser $parser): int	Get XML parser error code
xml_parse_into_struct(XMLParser $parser, string $data, array $values, array $index = null): int|false	Parse XML data into an array structure
xml_parse(XMLParser $parser, string $data, bool $is_final = false): int	Start parsing an XML document
xml_parser_create_ns(string|null $encoding = null, string $separator = ":"): XMLParser	Create an XML parser with namespace support
xml_parser_create(string|null $encoding = null): XMLParser	Create an XML parser
xml_parser_free(XMLParser $parser): bool	Free an XML parser
xml_parser_get_option(XMLParser $parser, int $option): string|int|bool	Get options from an XML parser
xml_parser_set_option(XMLParser $parser, int $option, string|int|bool $value): bool	Set options in an XML parser
xml_set_character_data_handler(XMLParser $parser, callable|string|null $handler): true	Set up character data handler
xml_set_default_handler(XMLParser $parser, callable|string|null $handler): true	Set up default handler
xml_set_element_handler(XMLParser $parser, callable|string|null $start_handler, callable|string|null $end_handler): true	Set up start and end element handlers
xml_set_end_namespace_decl_handler(XMLParser $parser, callable|string|null $handler): true	Set up end namespace declaration handler
xml_set_external_entity_ref_handler(XMLParser $parser, callable|string|null $handler): true	Set up external entity reference handler
xml_set_notation_decl_handler(XMLParser $parser, callable|string|null $handler): true	Set up notation declaration handler
xml_set_object(XMLParser $parser, object $object): true	Use XML Parser within an object
xml_set_processing_instruction_handler(XMLParser $parser, callable|string|null $handler): true	Set up processing instruction (PI) handler
xml_set_start_namespace_decl_handler(XMLParser $parser, callable|string|null $handler): true	Set up start namespace declaration handler
xml_set_unparsed_entity_decl_handler(XMLParser $parser, callable|string|null $handler): true	Set up unparsed entity declaration handler
XMLParser()	(new) A fully opaque class which replaces xml resources as of PHP 8
XMLDiff\Base(string $nsname)	(new) Constructor
>diff(mixed $from, mixed $to): mixed	(XMLDiff\Base) Produce diff of two XML documents
>merge(mixed $src, mixed $diff): mixed	(XMLDiff\Base) Produce new XML document based on diff
>diff(DOMDocument $from, DOMDocument $to): DOMDocument	(XMLDiff\DOM) Diff two DOMDocument objects
>merge(DOMDocument $src, DOMDocument $diff): DOMDocument	(XMLDiff\DOM) Produce merged DOMDocument
>diff(string $from, string $to): string	(XMLDiff\File) Diff two XML files
>merge(string $src, string $diff): string	(XMLDiff\File) Produce merged XML document
>diff(string $from, string $to): string	(XMLDiff\Memory) Diff two XML documents
>merge(string $src, string $diff): string	(XMLDiff\Memory) Produce merged XML document
XMLDiff\DOM()	(new) 
XMLDiff\Exception()	(new) 
XMLDiff\File()	(new) 
XMLDiff\Memory()	(new) 
>close(): true	(XMLReader) Close the XMLReader input
>expand(DOMNode|null $baseNode = null): DOMNode|false	(XMLReader) Returns a copy of the current node as a DOM object
XMLReader::fromStream(resource $stream, string|null $encoding = null, int $flags = ?, string|null $documentUri = null): static	Creates an XMLReader from a stream to read from
XMLReader::fromString(string $source, string|null $encoding = null, int $flags = ?): static	Creates an XMLReader from an XML string
XMLReader::fromUri(string $uri, string|null $encoding = null, int $flags = ?): static	Creates an XMLReader from a URI to read from
>getAttribute(string $name): string|null	(XMLReader) Get the value of a named attribute
>getAttributeNo(int $index): string|null	(XMLReader) Get the value of an attribute by index
>getAttributeNs(string $name, string $namespace): string|null	(XMLReader) Get the value of an attribute by localname and URI
>getParserProperty(int $property): bool	(XMLReader) Indicates if specified property has been set
>isValid(): bool	(XMLReader) Indicates if the parsed document is valid
>lookupNamespace(string $prefix): string|null	(XMLReader) Lookup namespace for a prefix
>moveToAttribute(string $name): bool	(XMLReader) Move cursor to a named attribute
>moveToAttributeNo(int $index): bool	(XMLReader) Move cursor to an attribute by index
>moveToAttributeNs(string $name, string $namespace): bool	(XMLReader) Move cursor to a named attribute
>moveToElement(): bool	(XMLReader) Position cursor on the parent Element of current Attribute
>moveToFirstAttribute(): bool	(XMLReader) Position cursor on the first Attribute
>moveToNextAttribute(): bool	(XMLReader) Position cursor on the next Attribute
>next(string|null $name = null): bool	(XMLReader) Move cursor to next node skipping all subtrees
XMLReader::open(string $uri, string|null $encoding = null, int $flags = ?): XMLReader	Set the URI containing the XML to parse
>open(string $uri, string|null $encoding = null, int $flags = ?): bool	(XMLReader) Set the URI containing the XML to parse
>read(): bool	(XMLReader) Move to next node in document
>readInnerXml(): string	(XMLReader) Retrieve XML from current node
>readOuterXml(): string	(XMLReader) Retrieve XML from current node, including itself
>readString(): string	(XMLReader) Reads the contents of the current node as a string
>setParserProperty(int $property, bool $value): bool	(XMLReader) Set parser options
>setRelaxNGSchema(string|null $filename): bool	(XMLReader) Set the filename or URI for a RelaxNG Schema
>setRelaxNGSchemaSource(string|null $source): bool	(XMLReader) Set the data containing a RelaxNG Schema
>setSchema(string|null $filename): bool	(XMLReader) Validate document against XSD
XMLReader::XML(string $source, string|null $encoding = null, int $flags = ?): XMLReader	Set the data containing the XML to parse
>XML(string $source, string|null $encoding = null, int $flags = ?): bool	(XMLReader) Set the data containing the XML to parse
XMLReader()	(new) The XMLReader extension is an XML Pull parser
xmlrpc_decode_request(string $xml, string $method, string $encoding = ?): mixed	Decodes XML into native PHP types
xmlrpc_decode(string $xml, string $encoding = "iso-8859-1"): mixed	Decodes XML into native PHP types
xmlrpc_encode_request(string $method, mixed $params, array $output_options = ?): string	Generates XML for a method request
xmlrpc_encode(mixed $value): string	Generates XML for a PHP value
xmlrpc_get_type(mixed $value): string	Gets xmlrpc type for a PHP value
xmlrpc_is_fault(array $arg): bool	Determines if an array value represents an XMLRPC fault
xmlrpc_parse_method_descriptions(string $xml): array	Decodes XML into a list of method descriptions
xmlrpc_server_add_introspection_data(resource $server, array $desc): int	Adds introspection documentation
xmlrpc_server_call_method(resource $server, string $xml, mixed $user_data, array $output_options = ?): string	Parses XML requests and call methods
xmlrpc_server_create(): resource	Creates an xmlrpc server
xmlrpc_server_destroy(resource $server): bool	Destroys server resources
xmlrpc_server_register_introspection_callback(resource $server, string $function): bool	Register a PHP function to generate documentation
xmlrpc_server_register_method(resource $server, string $method_name, string $function): bool	Register a PHP function to resource method matching method_name
xmlrpc_set_type(string $value, string $type): bool	Sets xmlrpc type, base64 or datetime, for a PHP string value
>endAttribute(): bool	(XMLWriter) End attribute
xmlwriter_end_attribute(XMLWriter $writer): bool	End attribute
>endCdata(): bool	(XMLWriter) End current CDATA
xmlwriter_end_cdata(XMLWriter $writer): bool	End current CDATA
>endComment(): bool	(XMLWriter) Create end comment
xmlwriter_end_comment(XMLWriter $writer): bool	Create end comment
>endDocument(): bool	(XMLWriter) End current document
xmlwriter_end_document(XMLWriter $writer): bool	End current document
>endDtd(): bool	(XMLWriter) End current DTD
xmlwriter_end_dtd(XMLWriter $writer): bool	End current DTD
>endDtdAttlist(): bool	(XMLWriter) End current DTD AttList
xmlwriter_end_dtd_attlist(XMLWriter $writer): bool	End current DTD AttList
>endDtdElement(): bool	(XMLWriter) End current DTD element
xmlwriter_end_dtd_element(XMLWriter $writer): bool	End current DTD element
>endDtdEntity(): bool	(XMLWriter) End current DTD Entity
xmlwriter_end_dtd_entity(XMLWriter $writer): bool	End current DTD Entity
>endElement(): bool	(XMLWriter) End current element
xmlwriter_end_element(XMLWriter $writer): bool	End current element
>endPi(): bool	(XMLWriter) End current PI
xmlwriter_end_pi(XMLWriter $writer): bool	End current PI
>flush(bool $empty = true): string|int	(XMLWriter) Flush current buffer
xmlwriter_flush(XMLWriter $writer, bool $empty = true): string|int	Flush current buffer
>fullEndElement(): bool	(XMLWriter) End current element
xmlwriter_full_end_element(XMLWriter $writer): bool	End current element
>openMemory(): bool	(XMLWriter) Create new xmlwriter using memory for string output
xmlwriter_open_memory(): XMLWriter|false	Create new xmlwriter using memory for string output
>openUri(string $uri): bool	(XMLWriter) Create new xmlwriter using source uri for output
xmlwriter_open_uri(string $uri): XMLWriter|false	Create new xmlwriter using source uri for output
>outputMemory(bool $flush = true): string	(XMLWriter) Returns current buffer
xmlwriter_output_memory(XMLWriter $writer, bool $flush = true): string	Returns current buffer
>setIndent(bool $enable): bool	(XMLWriter) Toggle indentation on/off
xmlwriter_set_indent(XMLWriter $writer, bool $enable): bool	Toggle indentation on/off
>setIndentString(string $indentation): bool	(XMLWriter) Set string used for indenting
xmlwriter_set_indent_string(XMLWriter $writer, string $indentation): bool	Set string used for indenting
>startAttribute(string $name): bool	(XMLWriter) Create start attribute
xmlwriter_start_attribute(XMLWriter $writer, string $name): bool	Create start attribute
>startAttributeNs(string|null $prefix, string $name, string|null $namespace): bool	(XMLWriter) Create start namespaced attribute
xmlwriter_start_attribute_ns(XMLWriter $writer, string|null $prefix, string $name, string|null $namespace): bool	Create start namespaced attribute
>startCdata(): bool	(XMLWriter) Create start CDATA tag
xmlwriter_start_cdata(XMLWriter $writer): bool	Create start CDATA tag
>startComment(): bool	(XMLWriter) Create start comment
xmlwriter_start_comment(XMLWriter $writer): bool	Create start comment
>startDocument(string|null $version = "1.0", string|null $encoding = null, string|null $standalone = null): bool	(XMLWriter) Create document tag
xmlwriter_start_document(XMLWriter $writer, string|null $version = "1.0", string|null $encoding = null, string|null $standalone = null): bool	Create document tag
>startDtd(string $qualifiedName, string|null $publicId = null, string|null $systemId = null): bool	(XMLWriter) Create start DTD tag
xmlwriter_start_dtd(XMLWriter $writer, string $qualifiedName, string|null $publicId = null, string|null $systemId = null): bool	Create start DTD tag
>startDtdAttlist(string $name): bool	(XMLWriter) Create start DTD AttList
xmlwriter_start_dtd_attlist(XMLWriter $writer, string $name): bool	Create start DTD AttList
>startDtdElement(string $qualifiedName): bool	(XMLWriter) Create start DTD element
xmlwriter_start_dtd_element(XMLWriter $writer, string $qualifiedName): bool	Create start DTD element
>startDtdEntity(string $name, bool $isParam): bool	(XMLWriter) Create start DTD Entity
xmlwriter_start_dtd_entity(XMLWriter $writer, string $name, bool $isParam): bool	Create start DTD Entity
>startElement(string $name): bool	(XMLWriter) Create start element tag
xmlwriter_start_element(XMLWriter $writer, string $name): bool	Create start element tag
>startElementNs(string|null $prefix, string $name, string|null $namespace): bool	(XMLWriter) Create start namespaced element tag
xmlwriter_start_element_ns(XMLWriter $writer, string|null $prefix, string $name, string|null $namespace): bool	Create start namespaced element tag
>startPi(string $target): bool	(XMLWriter) Create start PI tag
xmlwriter_start_pi(XMLWriter $writer, string $target): bool	Create start PI tag
>text(string $content): bool	(XMLWriter) Write text
xmlwriter_text(XMLWriter $writer, string $content): bool	Write text
XMLWriter::toMemory(): static	Create new XMLWriter using memory for string output
XMLWriter::toStream(resource $stream): static	Create new XMLWriter using a stream for output
XMLWriter::toUri(string $uri): static	Create new XMLWriter using a URI for output
>writeAttribute(string $name, string $value): bool	(XMLWriter) Write full attribute
xmlwriter_write_attribute(XMLWriter $writer, string $name, string $value): bool	Write full attribute
>writeAttributeNs(string|null $prefix, string $name, string|null $namespace, string $value): bool	(XMLWriter) Write full namespaced attribute
xmlwriter_write_attribute_ns(XMLWriter $writer, string|null $prefix, string $name, string|null $namespace, string $value): bool	Write full namespaced attribute
>writeCdata(string $content): bool	(XMLWriter) Write full CDATA tag
xmlwriter_write_cdata(XMLWriter $writer, string $content): bool	Write full CDATA tag
>writeComment(string $content): bool	(XMLWriter) Write full comment tag
xmlwriter_write_comment(XMLWriter $writer, string $content): bool	Write full comment tag
>writeDtd(string $name, string|null $publicId = null, string|null $systemId = null, string|null $content = null): bool	(XMLWriter) Write full DTD tag
xmlwriter_write_dtd(XMLWriter $writer, string $name, string|null $publicId = null, string|null $systemId = null, string|null $content = null): bool	Write full DTD tag
>writeDtdAttlist(string $name, string $content): bool	(XMLWriter) Write full DTD AttList tag
xmlwriter_write_dtd_attlist(XMLWriter $writer, string $name, string $content): bool	Write full DTD AttList tag
>writeDtdElement(string $name, string $content): bool	(XMLWriter) Write full DTD element tag
xmlwriter_write_dtd_element(XMLWriter $writer, string $name, string $content): bool	Write full DTD element tag
>writeDtdEntity(string $name, string $content, bool $isParam = false, string|null $publicId = null, string|null $systemId = null, string|null $notationData = null): bool	(XMLWriter) Write full DTD Entity tag
xmlwriter_write_dtd_entity(XMLWriter $writer, string $name, string $content, bool $isParam = false, string|null $publicId = null, string|null $systemId = null, string|null $notationData = null): bool	Write full DTD Entity tag
>writeElement(string $name, string|null $content = null): bool	(XMLWriter) Write full element tag
xmlwriter_write_element(XMLWriter $writer, string $name, string|null $content = null): bool	Write full element tag
>writeElementNs(string|null $prefix, string $name, string|null $namespace, string|null $content = null): bool	(XMLWriter) Write full namespaced element tag
xmlwriter_write_element_ns(XMLWriter $writer, string|null $prefix, string $name, string|null $namespace, string|null $content = null): bool	Write full namespaced element tag
>writePi(string $target, string $content): bool	(XMLWriter) Writes a PI
xmlwriter_write_pi(XMLWriter $writer, string $target, string $content): bool	Writes a PI
>writeRaw(string $content): bool	(XMLWriter) Write a raw XML text
xmlwriter_write_raw(XMLWriter $writer, string $content): bool	Write a raw XML text
XMLWriter()	(new) 
crypt_checksalt(string $salt): string|null	Validate a crypt setting string
crypt_gensalt(string $prefix = null, int $count = ?): string|null	Compile a string for use as the salt argument to crypt
crypt_preferred_method(): string|null	Get the prefix of the preferred hash method
XSLTProcessor()	(new) Creates a new XSLTProcessor object
>getParameter(string $namespace, string $name): string|false	(XSLTProcessor) Get value of a parameter
>getSecurityPrefs(): int	(XSLTProcessor) Get security preferences
>hasExsltSupport(): bool	(XSLTProcessor) Determine if PHP has EXSLT support
>importStylesheet(object $stylesheet): bool	(XSLTProcessor) Import stylesheet
>registerPHPFunctionNS(string $namespaceURI, string $name, callable $callable): void	(XSLTProcessor) Register a PHP function as namespaced XSLT function
>registerPHPFunctions(array|string|null $functions = null): void	(XSLTProcessor) Enables the ability to use PHP functions as XSLT functions
>removeParameter(string $namespace, string $name): bool	(XSLTProcessor) Remove parameter
>setParameter(string $namespace, string $name, string $value): bool	(XSLTProcessor) Set value for a parameter
>setParameter(string $namespace, array $options): bool	(XSLTProcessor) Set value for a parameter
>setProfiling(string|null $filename): true	(XSLTProcessor) Sets profiling output file
>setSecurityPrefs(int $preferences): int	(XSLTProcessor) Set security preferences
>transformToDoc(object $document, string|null $returnClass = null): object|false	(XSLTProcessor) Transform to a document
>transformToUri(object $document, string $uri): int	(XSLTProcessor) Transform to URI
>transformToXml(object $document): string|null|false	(XSLTProcessor) Transform to XML
>add(string $keys, mixed $value, int $ttl = ?): bool	(Yac) Store into cache
>add(array $key_vals): bool	(Yac) Store into cache
Yac(string $prefix = "")	(new) Constructor
>delete(string|array $keys, int $ttl = ?): bool	(Yac) Remove items from cache
>dump(int $$num): mixed	(Yac) Dump cache
>flush(): bool	(Yac) Flush the cache
>get(string|array $key, int $cas = null): mixed	(Yac) Retrieve values from cache
>__get(string $key): mixed	(Yac) Getter
>info(): array	(Yac) Status of cache
>set(string $keys, mixed $value, int $ttl = ?): bool	(Yac) Store into cache
>add(array $key_vals): bool	(Yac) Store into cache
>__set(string $keys, mixed $value): mixed	(Yac) Setter
Yaconf::get(string $name, mixed $default_value = NULL): mixed	Retrieve a item
Yaconf::has(string $name): bool	Determine if a item exists
Yaconf()	(new) Yaconf is a configurations container, it parses INIT files, stores the result in PHP when PHP is started, the result lives with the whole PHP lifecycle
>execute(mixed ...$args): mixed	(Yaf_Action_Abstract) Action entry point
>getController(): Yaf_Controller_Abstract	(Yaf_Action_Abstract) Retrieve controller object
>getControllerName(): string	(Yaf_Action_Abstract) Get controller name
Yaf_Application::app(): mixed	Retrieve an Application instance
>bootstrap(Yaf_Bootstrap_Abstract $bootstrap = ?): void	(Yaf_Application) Call bootstrap
>clearLastError(): Yaf_Application	(Yaf_Application) Clear the last error info
Yaf_Application(mixed $config, string $envrion = ?)	(new) Yaf_Application constructor
>__destruct()	(Yaf_Application) The __destruct purpose
>environ(): void	(Yaf_Application) Retrive environ
>execute(callable $entry, string ...$args): void	(Yaf_Application) Execute a callback
>getAppDirectory(): Yaf_Application	(Yaf_Application) Get the application directory
>getConfig(): Yaf_Config_Abstract	(Yaf_Application) Retrive the config instance
>getDispatcher(): Yaf_Dispatcher	(Yaf_Application) Get Yaf_Dispatcher instance
>getLastErrorMsg(): string	(Yaf_Application) Get message of the last occurred error
>getLastErrorNo(): int	(Yaf_Application) Get code of last occurred error
>getModules(): array	(Yaf_Application) Get defined module names
>run(): void	(Yaf_Application) Start Yaf_Application
>setAppDirectory(string $directory): Yaf_Application	(Yaf_Application) Change the application directory
>get(string $name, mixed $value): mixed	(Yaf_Config_Abstract) Getter
>readonly(): bool	(Yaf_Config_Abstract) Find a config whether readonly
>set(): Yaf_Config_Abstract	(Yaf_Config_Abstract) Setter
>toArray(): array	(Yaf_Config_Abstract) Cast to array
Yaf_Config_Ini(string $config_file, string $section = ?)	(new) Yaf_Config_Ini constructor
>count(): void	(Yaf_Config_Ini) Count all elements in Yaf_Config.ini
>current(): void	(Yaf_Config_Ini) Retrieve the current value
>__get(string $name = ?): void	(Yaf_Config_Ini) Retrieve a element
>__isset(string $name): void	(Yaf_Config_Ini) Determine if a key is exists
>key(): void	(Yaf_Config_Ini) Fetch current element's key
>next(): void	(Yaf_Config_Ini) Advance the internal pointer
>offsetExists(string $name): void	(Yaf_Config_Ini) The offsetExists purpose
>offsetGet(string $name): void	(Yaf_Config_Ini) The offsetGet purpose
>offsetSet(string $name, string $value): void	(Yaf_Config_Ini) The offsetSet purpose
>offsetUnset(string $name): void	(Yaf_Config_Ini) The offsetUnset purpose
>readonly(): void	(Yaf_Config_Ini) The readonly purpose
>rewind(): void	(Yaf_Config_Ini) The rewind purpose
>__set(string $name, mixed $value): void	(Yaf_Config_Ini) The __set purpose
>toArray(): array	(Yaf_Config_Ini) Return config as a PHP array
>valid(): void	(Yaf_Config_Ini) The valid purpose
Yaf_Config_Simple(array $configs, bool $readonly = false)	(new) The __construct purpose
>count(): void	(Yaf_Config_Simple) The count purpose
>current(): void	(Yaf_Config_Simple) The current purpose
>__get(string $name = ?): void	(Yaf_Config_Simple) The __get purpose
>__isset(string $name): void	(Yaf_Config_Simple) The __isset purpose
>key(): void	(Yaf_Config_Simple) The key purpose
>next(): void	(Yaf_Config_Simple) The next purpose
>offsetExists(string $name): void	(Yaf_Config_Simple) The offsetExists purpose
>offsetGet(string $name): void	(Yaf_Config_Simple) The offsetGet purpose
>offsetSet(string $name, string $value): void	(Yaf_Config_Simple) The offsetSet purpose
>offsetUnset(string $name): void	(Yaf_Config_Simple) The offsetUnset purpose
>readonly(): void	(Yaf_Config_Simple) The readonly purpose
>rewind(): void	(Yaf_Config_Simple) The rewind purpose
>__set(string $name, string $value): void	(Yaf_Config_Simple) The __set purpose
>toArray(): array	(Yaf_Config_Simple) Returns a PHP array
>valid(): void	(Yaf_Config_Simple) The valid purpose
Yaf_Controller_Abstract()	(new) Yaf_Controller_Abstract constructor
>display(string $tpl, array $parameters = ?): bool	(Yaf_Controller_Abstract) The display purpose
>forward(string $action, array $paramters = ?): bool	(Yaf_Controller_Abstract) Forward to another action
>forward(string $controller, string $action, array $paramters = ?): bool	(Yaf_Controller_Abstract) Forward to another action
>forward(string $module, string $controller, string $action, array $paramters = ?): bool	(Yaf_Controller_Abstract) Forward to another action
>getInvokeArg(string $name): void	(Yaf_Controller_Abstract) The getInvokeArg purpose
>getInvokeArgs(): void	(Yaf_Controller_Abstract) The getInvokeArgs purpose
>getModuleName(): string	(Yaf_Controller_Abstract) Get module name
>getName(): string	(Yaf_Controller_Abstract) Get self name
>getRequest(): Yaf_Request_Abstract	(Yaf_Controller_Abstract) Retrieve current request object
>getResponse(): Yaf_Response_Abstract	(Yaf_Controller_Abstract) Retrieve current response object
>getView(): Yaf_View_Interface	(Yaf_Controller_Abstract) Retrieve the view engine
>getViewpath(): string	(Yaf_Controller_Abstract) The getViewpath purpose
>init(): void	(Yaf_Controller_Abstract) Controller initializer
>initView(array $options = ?): void	(Yaf_Controller_Abstract) The initView purpose
>redirect(string $url): bool	(Yaf_Controller_Abstract) Redirect to a URL
>render(string $tpl, array $parameters = ?): string	(Yaf_Controller_Abstract) Render view template
>setViewpath(string $view_directory): void	(Yaf_Controller_Abstract) The setViewpath purpose
>autoRender(bool $flag = ?): Yaf_Dispatcher	(Yaf_Dispatcher) Switch on/off autorendering
>catchException(bool $flag = ?): Yaf_Dispatcher	(Yaf_Dispatcher) Switch on/off exception catching
Yaf_Dispatcher()	(new) Yaf_Dispatcher constructor
>disableView(): bool	(Yaf_Dispatcher) Disable view rendering
>dispatch(Yaf_Request_Abstract $request): Yaf_Response_Abstract	(Yaf_Dispatcher) Dispatch a request
>enableView(): Yaf_Dispatcher	(Yaf_Dispatcher) Enable view rendering
>flushInstantly(bool $flag = ?): Yaf_Dispatcher	(Yaf_Dispatcher) Switch on/off the instant flushing
>getApplication(): Yaf_Application	(Yaf_Dispatcher) Retrieve the application
>getDefaultAction(): string	(Yaf_Dispatcher) Retrive the default action name
>getDefaultController(): string	(Yaf_Dispatcher) Retrive the default controller name
>getDefaultModule(): string	(Yaf_Dispatcher) Retrive the default module name
Yaf_Dispatcher::getInstance(): Yaf_Dispatcher	Retrive the dispatcher instance
>getRequest(): Yaf_Request_Abstract	(Yaf_Dispatcher) Retrive the request instance
>getRouter(): Yaf_Router	(Yaf_Dispatcher) Retrive router instance
>initView(string $templates_dir, array $options = ?): Yaf_View_Interface	(Yaf_Dispatcher) Initialize view and return it
>registerPlugin(Yaf_Plugin_Abstract $plugin): Yaf_Dispatcher	(Yaf_Dispatcher) Register a plugin
>returnResponse(bool $flag): Yaf_Dispatcher	(Yaf_Dispatcher) The returnResponse purpose
>setDefaultAction(string $action): Yaf_Dispatcher	(Yaf_Dispatcher) Change default action name
>setDefaultController(string $controller): Yaf_Dispatcher	(Yaf_Dispatcher) Change default controller name
>setDefaultModule(string $module): Yaf_Dispatcher	(Yaf_Dispatcher) Change default module name
>setErrorHandler(call $callback, int $error_types): Yaf_Dispatcher	(Yaf_Dispatcher) Set error handler
>setRequest(Yaf_Request_Abstract $request): Yaf_Dispatcher	(Yaf_Dispatcher) The setRequest purpose
>setView(Yaf_View_Interface $view): Yaf_Dispatcher	(Yaf_Dispatcher) Set a custom view engine
>throwException(bool $flag = ?): Yaf_Dispatcher	(Yaf_Dispatcher) Switch on/off exception throwing
Yaf_Exception()	(new) The __construct purpose
>getPrevious(): void	(Yaf_Exception) The getPrevious purpose
>autoload(): void	(Yaf_Loader) The autoload purpose
>clearLocalNamespace(): void	(Yaf_Loader) The clearLocalNamespace purpose
Yaf_Loader()	(new) The __construct purpose
Yaf_Loader::getInstance(): void	The getInstance purpose
>getLibraryPath(bool $is_global = false): Yaf_Loader	(Yaf_Loader) Get the library path
>getLocalNamespace(): void	(Yaf_Loader) The getLocalNamespace purpose
>getNamespacePath(string $namespaces): string	(Yaf_Loader) Retieve path of a registered namespace
>getNamespaces(): array	(Yaf_Loader) Retrive all register namespaces info
Yaf_Loader::import(): void	The import purpose
>isLocalName(): void	(Yaf_Loader) The isLocalName purpose
>registerLocalNamespace(mixed $prefix): void	(Yaf_Loader) Register local class prefix
>registerNamespace(string|array $namespaces, string $path = ?): bool	(Yaf_Loader) Register namespace with searching path
>setLibraryPath(string $directory, bool $is_global = false): Yaf_Loader	(Yaf_Loader) Change the library path
>dispatchLoopShutdown(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response): void	(Yaf_Plugin_Abstract) The dispatchLoopShutdown purpose
>dispatchLoopStartup(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response): void	(Yaf_Plugin_Abstract) Hook before dispatch loop
>postDispatch(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response): void	(Yaf_Plugin_Abstract) The postDispatch purpose
>preDispatch(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response): void	(Yaf_Plugin_Abstract) The preDispatch purpose
>preResponse(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response): void	(Yaf_Plugin_Abstract) The preResponse purpose
>routerShutdown(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response): void	(Yaf_Plugin_Abstract) The routerShutdown purpose
>routerStartup(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response): void	(Yaf_Plugin_Abstract) RouterStartup hook
Yaf_Registry()	(new) Yaf_Registry implements singleton
Yaf_Registry::del(string $name): void	Remove an item from registry
Yaf_Registry::get(string $name): mixed	Retrieve an item from registry
Yaf_Registry::has(string $name): bool	Check whether an item exists
Yaf_Registry::set(string $name, string $value): bool	Add an item into registry
>clearParams(): bool	(Yaf_Request_Abstract) Remove all params
>getActionName(): void	(Yaf_Request_Abstract) The getActionName purpose
>getBaseUri(): void	(Yaf_Request_Abstract) The getBaseUri purpose
>getControllerName(): void	(Yaf_Request_Abstract) The getControllerName purpose
>getEnv(string $name, string $default = ?): void	(Yaf_Request_Abstract) Retrieve ENV varialbe
>getException(): void	(Yaf_Request_Abstract) The getException purpose
>getLanguage(): void	(Yaf_Request_Abstract) Retrieve client's preferred language
>getMethod(): string	(Yaf_Request_Abstract) Retrieve the request method
>getModuleName(): void	(Yaf_Request_Abstract) The getModuleName purpose
>getParam(string $name, string $default = ?): mixed	(Yaf_Request_Abstract) Retrieve calling parameter
>getParams(): array	(Yaf_Request_Abstract) Retrieve all calling parameters
>getRequestUri(): void	(Yaf_Request_Abstract) The getRequestUri purpose
>getServer(string $name, string $default = ?): void	(Yaf_Request_Abstract) Retrieve SERVER variable
>isCli(): bool	(Yaf_Request_Abstract) Determine if request is CLI request
>isDispatched(): bool	(Yaf_Request_Abstract) Determin if the request is dispatched
>isGet(): bool	(Yaf_Request_Abstract) Determine if request is GET request
>isHead(): bool	(Yaf_Request_Abstract) Determine if request is HEAD request
>isOptions(): bool	(Yaf_Request_Abstract) Determine if request is OPTIONS request
>isPost(): bool	(Yaf_Request_Abstract) Determine if request is POST request
>isPut(): bool	(Yaf_Request_Abstract) Determine if request is PUT request
>isRouted(): bool	(Yaf_Request_Abstract) Determin if request has been routed
>isXmlHttpRequest(): bool	(Yaf_Request_Abstract) Determine if request is AJAX request
>setActionName(string $action, bool $format_name = true): void	(Yaf_Request_Abstract) Set action name
>setBaseUri(string $uir): bool	(Yaf_Request_Abstract) Set base URI
>setControllerName(string $controller, bool $format_name = true): void	(Yaf_Request_Abstract) Set controller name
>setDispatched(): void	(Yaf_Request_Abstract) The setDispatched purpose
>setModuleName(string $module, bool $format_name = true): void	(Yaf_Request_Abstract) Set module name
>setParam(string $name, string $value = ?): bool	(Yaf_Request_Abstract) Set a calling parameter to a request
>setRequestUri(string $uir): void	(Yaf_Request_Abstract) The setRequestUri purpose
>setRouted(string $flag = ?): void	(Yaf_Request_Abstract) The setRouted purpose
Yaf_Request_Http(string $request_uri = ?, string $base_uri = ?)	(new) Constructor of Yaf_Request_Http
>get(string $name, string $default = ?): mixed	(Yaf_Request_Http) Retrieve variable from client
>getCookie(string $name, string $default = ?): mixed	(Yaf_Request_Http) Retrieve Cookie variable
>getFiles(): void	(Yaf_Request_Http) The getFiles purpose
>getPost(string $name, string $default = ?): mixed	(Yaf_Request_Http) Retrieve POST variable
>getQuery(string $name, string $default = ?): mixed	(Yaf_Request_Http) Fetch a query parameter
>getRaw(): mixed	(Yaf_Request_Http) Retrieve Raw request body
>getRequest(): void	(Yaf_Request_Http) The getRequest purpose
>isXmlHttpRequest(): bool	(Yaf_Request_Http) Determin if request is Ajax Request
Yaf_Request_Simple(string $method = ?, string $module = ?, string $controller = ?, string $action = ?, array $params = ?)	(new) Constructor of Yaf_Request_Simple
>get(): void	(Yaf_Request_Simple) The get purpose
>getCookie(): void	(Yaf_Request_Simple) The getCookie purpose
>getFiles(): void	(Yaf_Request_Simple) The getFiles purpose
>getPost(): void	(Yaf_Request_Simple) The getPost purpose
>getQuery(): void	(Yaf_Request_Simple) The getQuery purpose
>getRequest(): void	(Yaf_Request_Simple) The getRequest purpose
>isXmlHttpRequest(): void	(Yaf_Request_Simple) Determin if request is AJAX request
>appendBody(string $content, string $key = ?): bool	(Yaf_Response_Abstract) Append to response body
>clearBody(string $key = ?): bool	(Yaf_Response_Abstract) Discard all exists response body
>clearHeaders(): void	(Yaf_Response_Abstract) Discard all set headers
Yaf_Response_Abstract()	(new) The __construct purpose
>__destruct()	(Yaf_Response_Abstract) The __destruct purpose
>getBody(string $key = ?): mixed	(Yaf_Response_Abstract) Retrieve a exists content
>getHeader(): void	(Yaf_Response_Abstract) The getHeader purpose
>prependBody(string $content, string $key = ?): bool	(Yaf_Response_Abstract) The prependBody purpose
>response(): void	(Yaf_Response_Abstract) Send response
>setAllHeaders(): void	(Yaf_Response_Abstract) The setAllHeaders purpose
>setBody(string $content, string $key = ?): bool	(Yaf_Response_Abstract) Set content to response
>setHeader(string $name, string $value, bool $replace = ?): bool	(Yaf_Response_Abstract) Set reponse header
>setRedirect(string $url): bool	(Yaf_Response_Abstract) The setRedirect purpose
>__toString(): string	(Yaf_Response_Abstract) Retrieve all bodys as string
>assemble(array $info, array $query = ?): string	(Yaf_Route_Interface) Assemble a request
>route(Yaf_Request_Abstract $request): bool	(Yaf_Route_Interface) Route a request
>assemble(array $info, array $query = ?): string	(Yaf_Route_Map) Assemble a url
Yaf_Route_Map(string $controller_prefer = false, string $delimiter = "")	(new) The __construct purpose
>route(Yaf_Request_Abstract $request): bool	(Yaf_Route_Map) The route purpose
>assemble(array $info, array $query = ?): string|null	(Yaf_Route_Regex) Assemble a url
Yaf_Route_Regex(string $match, array $route, array $map = ?, array $verify = ?, string $reverse = ?)	(new) Yaf_Route_Regex constructor
>route(Yaf_Request_Abstract $request): bool	(Yaf_Route_Regex) The route purpose
>assemble(array $info, array $query = ?): string	(Yaf_Route_Rewrite) Assemble a url
Yaf_Route_Rewrite(string $match, array $route, array $verify = ?)	(new) Yaf_Route_Rewrite constructor
>route(Yaf_Request_Abstract $request): bool	(Yaf_Route_Rewrite) The route purpose
>assemble(array $info, array $query = ?): string	(Yaf_Route_Simple) Assemble a url
Yaf_Route_Simple(string $module_name, string $controller_name, string $action_name)	(new) Yaf_Route_Simple constructor
>route(Yaf_Request_Abstract $request): bool	(Yaf_Route_Simple) Route a request
>assemble(array $info, array $query = ?): string	(Yaf_Route_Static) Assemble a url
>match(string $uri): void	(Yaf_Route_Static) The match purpose
>route(Yaf_Request_Abstract $request): bool	(Yaf_Route_Static) Route a request
>assemble(array $info, array $query = ?): string	(Yaf_Route_Supervar) Assemble a url
Yaf_Route_Supervar(string $supervar_name)	(new) The __construct purpose
>route(Yaf_Request_Abstract $request): bool	(Yaf_Route_Supervar) The route purpose
>addConfig(Yaf_Config_Abstract $config): bool	(Yaf_Router) Add config-defined routes into Router
>addRoute(string $name, Yaf_Route_Abstract $route): bool	(Yaf_Router) Add new Route into Router
Yaf_Router()	(new) Yaf_Router constructor
>getCurrentRoute(): string	(Yaf_Router) Get the effective route name
>getRoute(string $name): Yaf_Route_Interface	(Yaf_Router) Retrieve a route by name
>getRoutes(): mixed	(Yaf_Router) Retrieve registered routes
>route(Yaf_Request_Abstract $request): bool	(Yaf_Router) The route purpose
Yaf_Session()	(new) Constructor of Yaf_Session
>count(): void	(Yaf_Session) The count purpose
>current(): void	(Yaf_Session) The current purpose
>del(string $name): void	(Yaf_Session) The del purpose
>__get(string $name): void	(Yaf_Session) The __get purpose
Yaf_Session::getInstance(): void	The getInstance purpose
>has(string $name): void	(Yaf_Session) The has purpose
>__isset(string $name): void	(Yaf_Session) The __isset purpose
>key(): void	(Yaf_Session) The key purpose
>next(): void	(Yaf_Session) The next purpose
>offsetExists(string $name): void	(Yaf_Session) The offsetExists purpose
>offsetGet(string $name): void	(Yaf_Session) The offsetGet purpose
>offsetSet(string $name, string $value): void	(Yaf_Session) The offsetSet purpose
>offsetUnset(string $name): void	(Yaf_Session) The offsetUnset purpose
>rewind(): void	(Yaf_Session) The rewind purpose
>__set(string $name, string $value): void	(Yaf_Session) The __set purpose
>start(): void	(Yaf_Session) The start purpose
>__unset(string $name): void	(Yaf_Session) The __unset purpose
>valid(): void	(Yaf_Session) The valid purpose
>assign(string $name, string $value = ?): bool	(Yaf_View_Interface) Assign value to View engine
>display(string $tpl, array $tpl_vars = ?): bool	(Yaf_View_Interface) Render and output a template
>getScriptPath(): void	(Yaf_View_Interface) The getScriptPath purpose
>render(string $tpl, array $tpl_vars = ?): string	(Yaf_View_Interface) Render a template
>setScriptPath(string $template_dir): void	(Yaf_View_Interface) The setScriptPath purpose
>assign(string $name, mixed $value = ?): bool	(Yaf_View_Simple) Assign values
>assignRef(string $name, mixed $value): bool	(Yaf_View_Simple) The assignRef purpose
>clear(string $name = ?): bool	(Yaf_View_Simple) Clear Assigned values
Yaf_View_Simple(string $template_dir, array $options = ?)	(new) Constructor of Yaf_View_Simple
>display(string $tpl, array $tpl_vars = ?): bool	(Yaf_View_Simple) Render and display
>eval(string $tpl_content, array $tpl_vars = ?): string	(Yaf_View_Simple) Render template
>__get(string $name = ?): void	(Yaf_View_Simple) Retrieve assigned variable
>getScriptPath(): string	(Yaf_View_Simple) Get templates directory
>__isset(string $name): void	(Yaf_View_Simple) The __isset purpose
>render(string $tpl, array $tpl_vars = ?): string	(Yaf_View_Simple) Render template
>__set(string $name, mixed $value): void	(Yaf_View_Simple) Set value to engine
>setScriptPath(string $template_dir): bool	(Yaf_View_Simple) Set tempaltes directory
Yaf_Action_Abstract()	(new) A action can be defined in a separate file in Yaf(see Yaf_Controller_Abstract)
Yaf_Bootstrap_Abstract()	(new) Bootstrap is a mechanism used to do some initial config before a Application run
Yaf_Config_Abstract()	(new) 
Yaf_Exception_DispatchFailed()	(new) 
Yaf_Exception_LoadFailed_Action()	(new) 
Yaf_Exception_LoadFailed_Controller()	(new) 
Yaf_Exception_LoadFailed_Module()	(new) 
Yaf_Exception_LoadFailed_View()	(new) 
Yaf_Exception_LoadFailed()	(new) 
Yaf_Exception_RouterFailed()	(new) 
Yaf_Exception_StartupError()	(new) 
Yaf_Exception_TypeError()	(new) 
Yaf_Plugin_Abstract()	(new) Plugins allow for easy extensibility and customization of the framework
Yaf_Request_Abstract()	(new) 
Yaf_Response_Cli()	(new) 
Yaf_Response_Http()	(new) 
Yaf_Route_Interface()	(new) Yaf_Route_Interface used for developer defined their custom route
Yaf_Route_Static()	(new) Defaultly, Yaf_Router only have a Yaf_Route_Static as its default route
Yaf_View_Interface()	(new) Yaf provides a ability for developers to use custom view engine instead of built-in engine which is Yaf_View_Simple
yaml_emit_file(string $filename, mixed $data, int $encoding = YAML_ANY_ENCODING, int $linebreak = YAML_ANY_BREAK, array $callbacks = null): bool	Send the YAML representation of a value to a file
yaml_emit(mixed $data, int $encoding = YAML_ANY_ENCODING, int $linebreak = YAML_ANY_BREAK, array $callbacks = null): string	Returns the YAML representation of a value
yaml_parse_file(string $filename, int $pos = ?, int $ndocs = ?, array $callbacks = null): mixed	Parse a YAML stream from a file
yaml_parse_url(string $url, int $pos = ?, int $ndocs = ?, array $callbacks = null): mixed	Parse a Yaml stream from a URL
yaml_parse(string $input, int $pos = ?, int $ndocs = ?, array $callbacks = null): mixed	Parse a YAML stream
>__call(string $method, array $parameters): void	(Yar_Client) Call service
Yar_Client(string $url, array $options = ?)	(new) Create a client
>setOpt(int $name, mixed $value): Yar_Client|false	(Yar_Client) Set calling contexts
>getType(): string	(Yar_Client_Exception) Retrieve exception's type
Yar_Concurrent_Client::call(string $uri, string $method, array $parameters = ?, callable $callback = ?, callable $error_callback = ?, array $options = ?): int	Register a concurrent call
Yar_Concurrent_Client::loop(callable $callback = ?, callable $error_callback = ?): bool	Send all calls
Yar_Concurrent_Client::reset(): bool	Clean all registered calls
Yar_Server(Object $obj)	(new) Register a server
>handle(): bool	(Yar_Server) Start RPC Server
>getType(): string	(Yar_Server_Exception) Retrieve exception's type
Yar_Client_Exception()	(new) 
Yar_Client_Packager_Exception()	(new) 
Yar_Client_Protocol_Exception()	(new) 
Yar_Client_Transport_Exception()	(new) 
Yar_Concurrent_Client()	(new) 
Yar_Server_Exception()	(new) If service threw exceptions, A Yar_Server_Exception will be threw in client side
Yar_Server_Output_Exception()	(new) 
Yar_Server_Packager_Exception()	(new) 
Yar_Server_Protocol_Exception()	(new) 
Yar_Server_Request_Exception()	(new) 
yaz_addinfo(resource $id): string	Returns additional error information
yaz_ccl_conf(resource $id, array $config): void	Configure CCL parser
yaz_ccl_parse(resource $id, string $query, array $result): bool	Invoke CCL Parser
yaz_close(resource $id): bool	Close YAZ connection
yaz_connect(string $zurl, mixed $options = ?): mixed	Prepares for a connection to a Z39.50 server
yaz_database(resource $id, string $databases): bool	Specifies the databases within a session
yaz_element(resource $id, string $elementset): bool	Specifies Element-Set Name for retrieval
yaz_errno(resource $id): int	Returns error number
yaz_error(resource $id): string	Returns error description
yaz_es_result(resource $id): array	Inspects Extended Services Result
yaz_es(resource $id, string $type, array $args): void	Prepares for an Extended Service Request
yaz_get_option(resource $id, string $name): string	Returns value of option for connection
yaz_hits(resource $id, array $searchresult = ?): int	Returns number of hits for last search
yaz_itemorder(resource $id, array $args): void	Prepares for Z39.50 Item Order with an ILL-Request package
yaz_present(resource $id): bool	Prepares for retrieval (Z39.50 present)
yaz_range(resource $id, int $start, int $number): void	Specifies a range of records to retrieve
yaz_record(resource $id, int $pos, string $type): string	Returns a record
yaz_scan_result(resource $id, array $result = ?): array	Returns Scan Response result
yaz_scan(resource $id, string $type, string $startterm, array $flags = ?): void	Prepares for a scan
yaz_schema(resource $id, string $schema): void	Specifies schema for retrieval
yaz_search(resource $id, string $type, string $query): bool	Prepares for a search
yaz_set_option(resource $id, string $name, string $value): void	Sets one or more options for connection
yaz_set_option(resource $id, array $options): void	Sets one or more options for connection
yaz_sort(resource $id, string $criteria): void	Sets sorting criteria
yaz_syntax(resource $id, string $syntax): void	Specifies the preferred record syntax for retrieval
yaz_wait(array $options = ?): mixed	Wait for Z39.50 requests to complete
zip_close(resource $zip): void	Close a ZIP file archive
zip_entry_close(resource $zip_entry): bool	Close a directory entry
zip_entry_compressedsize(resource $zip_entry): int|false	Retrieve the compressed size of a directory entry
zip_entry_compressionmethod(resource $zip_entry): string|false	Retrieve the compression method of a directory entry
zip_entry_filesize(resource $zip_entry): int|false	Retrieve the actual file size of a directory entry
zip_entry_name(resource $zip_entry): string|false	Retrieve the name of a directory entry
zip_entry_open(resource $zip_dp, resource $zip_entry, string $mode = "rb"): bool	Open a directory entry for reading
zip_entry_read(resource $zip_entry, int $len = 1024): string|false	Read from an open directory entry
zip_open(string $filename): resource|int|false	Open a ZIP file archive
zip_read(resource $zip): resource|false	Read next entry in a ZIP file archive
>addEmptyDir(string $dirname, int $flags = ?): bool	(ZipArchive) Add a new directory
>addFile(string $filepath, string $entryname = "", int $start = ?, int $length = ZipArchive::LENGTH_TO_END, int $flags = ZipArchive::FL_OVERWRITE): bool	(ZipArchive) Adds a file to a ZIP archive from the given path
>addFromString(string $name, string $content, int $flags = ZipArchive::FL_OVERWRITE): bool	(ZipArchive) Add a file to a ZIP archive using its contents
>addGlob(string $pattern, int $flags = ?, array $options = []): array|false	(ZipArchive) Add files from a directory by glob pattern
>addPattern(string $pattern, string $path = ".", array $options = []): array|false	(ZipArchive) Add files from a directory by PCRE pattern
>clearError(): void	(ZipArchive) Clear the status error message, system and/or zip messages
>close(): bool	(ZipArchive) Close the active archive (opened or newly created)
>count(): int	(ZipArchive) Counts the number of files in the archive
>deleteIndex(int $index): bool	(ZipArchive) Delete an entry in the archive using its index
>deleteName(string $name): bool	(ZipArchive) Delete an entry in the archive using its name
>extractTo(string $pathto, array|string|null $files = null): bool	(ZipArchive) Extract the archive contents
>getArchiveComment(int $flags = ?): string|false	(ZipArchive) Returns the Zip archive comment
>getArchiveFlag(int $flag, int $flags = ?): int	(ZipArchive) Returns the value of a Zip archive global flag
>getCommentIndex(int $index, int $flags = ?): string|false	(ZipArchive) Returns the comment of an entry using the entry index
>getCommentName(string $name, int $flags = ?): string|false	(ZipArchive) Returns the comment of an entry using the entry name
>getExternalAttributesIndex(int $index, int $opsys, int $attr, int $flags = ?): bool	(ZipArchive) Retrieve the external attributes of an entry defined by its index
>getExternalAttributesName(string $name, int $opsys, int $attr, int $flags = ?): bool	(ZipArchive) Retrieve the external attributes of an entry defined by its name
>getFromIndex(int $index, int $len = ?, int $flags = ?): string|false	(ZipArchive) Returns the entry contents using its index
>getFromName(string $name, int $len = ?, int $flags = ?): string|false	(ZipArchive) Returns the entry contents using its name
>getNameIndex(int $index, int $flags = ?): string|false	(ZipArchive) Returns the name of an entry using its index
>getStatusString(): string	(ZipArchive) Returns the status error message, system and/or zip messages
>getStream(string $name): resource|false	(ZipArchive) Get a file handler to the entry defined by its name (read only)
>getStreamIndex(int $index, int $flags = ?): resource|false	(ZipArchive) Get a file handler to the entry defined by its index (read only)
>getStreamName(string $name, int $flags = ?): resource|false	(ZipArchive) Get a file handler to the entry defined by its name (read only)
ZipArchive::isCompressionMethodSupported(int $method, bool $enc = true): bool	Check if a compression method is supported by libzip
ZipArchive::isEncryptionMethodSupported(int $method, bool $enc = true): bool	Check if a encryption method is supported by libzip
>locateName(string $name, int $flags = ?): int|false	(ZipArchive) Returns the index of the entry in the archive
>open(string $filename, int $flags = ?): bool|int	(ZipArchive) Open a ZIP file archive
>registerCancelCallback(callable $callback): bool	(ZipArchive) Register a callback to allow cancellation during archive close.
>registerProgressCallback(float $rate, callable $callback): bool	(ZipArchive) Register a callback to provide updates during archive close.
>renameIndex(int $index, string $new_name): bool	(ZipArchive) Renames an entry defined by its index
>renameName(string $name, string $new_name): bool	(ZipArchive) Renames an entry defined by its name
>replaceFile(string $filepath, int $index, int $start = ?, int $length = ZipArchive::LENGTH_TO_END, int $flags = ?): bool	(ZipArchive) Replace file in ZIP archive with a given path
>setArchiveComment(string $comment): bool	(ZipArchive) Set the comment of a ZIP archive
>setArchiveFlag(int $flag, int $value): bool	(ZipArchive) Set a global flag of a ZIP archive
>setCommentIndex(int $index, string $comment): bool	(ZipArchive) Set the comment of an entry defined by its index
>setCommentName(string $name, string $comment): bool	(ZipArchive) Set the comment of an entry defined by its name
>setCompressionIndex(int $index, int $method, int $compflags = ?): bool	(ZipArchive) Set the compression method of an entry defined by its index
>setCompressionName(string $name, int $method, int $compflags = ?): bool	(ZipArchive) Set the compression method of an entry defined by its name
>setEncryptionIndex(int $index, int $method, string|null $password = null): bool	(ZipArchive) Set the encryption method of an entry defined by its index
>setEncryptionName(string $name, int $method, string|null $password = null): bool	(ZipArchive) Set the encryption method of an entry defined by its name
>setExternalAttributesIndex(int $index, int $opsys, int $attr, int $flags = ?): bool	(ZipArchive) Set the external attributes of an entry defined by its index
>setExternalAttributesName(string $name, int $opsys, int $attr, int $flags = ?): bool	(ZipArchive) Set the external attributes of an entry defined by its name
>setMtimeIndex(int $index, int $timestamp, int $flags = ?): bool	(ZipArchive) Set the modification time of an entry defined by its index
>setMtimeName(string $name, int $timestamp, int $flags = ?): bool	(ZipArchive) Set the modification time of an entry defined by its name
>setPassword(string $password): bool	(ZipArchive) Set the password for the active archive
>statIndex(int $index, int $flags = ?): array|false	(ZipArchive) Get the details of an entry defined by its index
>statName(string $name, int $flags = ?): array|false	(ZipArchive) Get the details of an entry defined by its name
>unchangeAll(): bool	(ZipArchive) Undo all changes done in the archive
>unchangeArchive(): bool	(ZipArchive) Revert all global changes done in the archive
>unchangeIndex(int $index): bool	(ZipArchive) Revert all changes done to an entry at the given index
>unchangeName(string $name): bool	(ZipArchive) Revert all changes done to an entry with the given name
ZipArchive()	(new) A file archive, compressed with Zip
deflate_add(DeflateContext $context, string $data, int $flush_mode = ZLIB_SYNC_FLUSH): string|false	Incrementally deflate data
deflate_init(int $encoding, array $options = []): DeflateContext|false	Initialize an incremental deflate context
gzclose(resource $stream): bool	Close an open gz-file pointer
gzcompress(string $data, int $level = -1, int $encoding = ZLIB_ENCODING_DEFLATE): string|false	Compress a string
gzdecode(string $data, int $max_length = ?): string|false	Decodes a gzip compressed string
gzdeflate(string $data, int $level = -1, int $encoding = ZLIB_ENCODING_RAW): string|false	Deflate a string
gzencode(string $data, int $level = -1, int $encoding = ZLIB_ENCODING_GZIP): string|false	Create a gzip compressed string
gzeof(resource $stream): bool	Test for EOF on a gz-file pointer
gzfile(string $filename, int $use_include_path = ?): array|false	Read entire gz-file into an array
gzgetc(resource $stream): string|false	Get character from gz-file pointer
gzgets(resource $stream, int|null $length = null): string|false	Get line from file pointer
gzgetss(resource $zp, int $length, string $allowable_tags = ?): string	Get line from gz-file pointer and strip HTML tags
gzinflate(string $data, int $max_length = ?): string|false	Inflate a deflated string
gzopen(string $filename, string $mode, int $use_include_path = ?): resource|false	Open gz-file
gzpassthru(resource $stream): int	Output all remaining data on a gz-file pointer
gzputs()	Alias of gzwrite
gzread(resource $stream, int $length): string|false	Binary-safe gz-file read
gzrewind(resource $stream): bool	Rewind the position of a gz-file pointer
gzseek(resource $stream, int $offset, int $whence = SEEK_SET): int	Seek on a gz-file pointer
gztell(resource $stream): int|false	Tell gz-file pointer read/write position
gzuncompress(string $data, int $max_length = ?): string|false	Uncompress a compressed string
gzwrite(resource $stream, string $data, int|null $length = null): int|false	Binary-safe gz-file write
inflate_get_read_len(InflateContext $context): int	Get number of bytes read so far
inflate_get_status(InflateContext $context): int	Get decompression status
inflate_add(InflateContext $context, string $data, int $flush_mode = ZLIB_SYNC_FLUSH): string|false	Incrementally inflate encoded data
inflate_init(int $encoding, array $options = []): InflateContext|false	Initialize an incremental inflate context
ob_gzhandler(string $data, int $flags): string|false	ob_start callback function to gzip output buffer
readgzfile(string $filename, int $use_include_path = ?): int|false	Output a gz-file
zlib_decode(string $data, int $max_length = ?): string|false	Uncompress any raw/gzip/zlib encoded data
zlib_encode(string $data, int $encoding, int $level = -1): string|false	Compress data with the specified encoding
zlib_get_coding_type(): string|false	Returns the coding type used for output compression
DeflateContext()	(new) A fully opaque class which replaces zlib
InflateContext()	(new) A fully opaque class which replaces zlib
ZMQ()	(new) ZMQ constructor
ZMQContext(int $io_threads = 1, bool $is_persistent = true)	(new) Construct a new ZMQContext object
>getOpt(string $key): mixed	(ZMQContext) Get context option
>getSocket(int $type, string $persistent_id = null, callable $on_new_socket = null): ZMQSocket	(ZMQContext) Create a new socket
>isPersistent(): bool	(ZMQContext) Whether the context is persistent
>setOpt(int $key, mixed $value): ZMQContext	(ZMQContext) Set a socket option
ZMQDevice(ZMQSocket $frontend, ZMQSocket $backend, ZMQSocket $listener = ?)	(new) Construct a new device
>getIdleTimeout(): ZMQDevice	(ZMQDevice) Get the idle timeout
>getTimerTimeout(): ZMQDevice	(ZMQDevice) Get the timer timeout
>run(): void	(ZMQDevice) Run the new device
>setIdleCallback(callable $cb_func, int $timeout, mixed $user_data = ?): ZMQDevice	(ZMQDevice) Set the idle callback function
>setIdleTimeout(int $timeout): ZMQDevice	(ZMQDevice) Set the idle timeout
>setTimerCallback(callable $cb_func, int $timeout, mixed $user_data = ?): ZMQDevice	(ZMQDevice) Set the timer callback function
>setTimerTimeout(int $timeout): ZMQDevice	(ZMQDevice) Set the timer timeout
>add(mixed $entry, int $type): string	(ZMQPoll) Add item to the poll set
>clear(): ZMQPoll	(ZMQPoll) Clear the poll set
>count(): int	(ZMQPoll) Count items in the poll set
>getLastErrors(): array	(ZMQPoll) Get poll errors
>poll(array $readable, array $writable, int $timeout = -1): int	(ZMQPoll) Poll the items
>remove(mixed $item): bool	(ZMQPoll) Remove item from poll set
>bind(string $dsn, bool $force = false): ZMQSocket	(ZMQSocket) Bind the socket
>connect(string $dsn, bool $force = false): ZMQSocket	(ZMQSocket) Connect the socket
ZMQSocket(ZMQContext $context, int $type, string $persistent_id = null, callable $on_new_socket = null)	(new) Construct a new ZMQSocket
>disconnect(string $dsn): ZMQSocket	(ZMQSocket) Disconnect a socket
>getEndpoints(): array	(ZMQSocket) Get list of endpoints
>getPersistentId(): string	(ZMQSocket) Get the persistent id
>getSocketType(): int	(ZMQSocket) Get the socket type
>getSockOpt(string $key): mixed	(ZMQSocket) Get socket option
>isPersistent(): bool	(ZMQSocket) Whether the socket is persistent
>recv(int $mode = ?): string	(ZMQSocket) Receives a message
>recvMulti(int $mode = ?): array	(ZMQSocket) Receives a multipart message
>send(string $message, int $mode = ?): ZMQSocket	(ZMQSocket) Sends a message
>sendmulti(array $message, int $mode = ?): ZMQSocket	(ZMQSocket) Sends a multipart message
>setSockOpt(int $key, mixed $value): ZMQSocket	(ZMQSocket) Set a socket option
>unbind(string $dsn): ZMQSocket	(ZMQSocket) Unbind the socket
ZMQContextException()	(new) 
ZMQDeviceException()	(new) 
ZMQException()	(new) 
ZMQPoll()	(new) 
ZMQPollException()	(new) 
ZMQSocketException()	(new) 
zookeeper_dispatch(): void	Calls callbacks for pending operations
>addAuth(string $scheme, string $cert, callable $completion_cb = null): bool	(Zookeeper) Specify application credentials
>close(): void	(Zookeeper) Close the zookeeper handle and free up any resources
>connect(string $host, callable $watcher_cb = null, int $recv_timeout = 10000): void	(Zookeeper) Create a handle to used communicate with zookeeper
Zookeeper(string $host = '', callable $watcher_cb = null, int $recv_timeout = 10000)	(new) Create a handle to used communicate with zookeeper
>create(string $path, string $value, array $acls, int $flags = null): string	(Zookeeper) Create a node synchronously
>delete(string $path, int $version = -1): bool	(Zookeeper) Delete a node in zookeeper synchronously
>exists(string $path, callable $watcher_cb = null): array	(Zookeeper) Checks the existence of a node in zookeeper synchronously
>get(string $path, callable $watcher_cb = null, array $stat = null, int $max_size = ?): string	(Zookeeper) Gets the data associated with a node synchronously
>getAcl(string $path): array	(Zookeeper) Gets the acl associated with a node synchronously
>getChildren(string $path, callable $watcher_cb = null): array	(Zookeeper) Lists the children of a node synchronously
>getClientId(): int	(Zookeeper) Return the client session id, only valid if the connections is currently connected (ie. last watcher state is ZOO_CONNECTED_STATE)
>getConfig(): ZookeeperConfig	(Zookeeper) Get instance of ZookeeperConfig
>getRecvTimeout(): int	(Zookeeper) Return the timeout for this session, only valid if the connections is currently connected (ie. last watcher state is ZOO_CONNECTED_STATE). This value may change after a server re-connect
>getState(): int	(Zookeeper) Get the state of the zookeeper connection
>isRecoverable(): bool	(Zookeeper) Checks if the current zookeeper connection state can be recovered
>set(string $path, string $value, int $version = -1, array $stat = null): bool	(Zookeeper) Sets the data associated with a node
>setAcl(string $path, int $version, array $acl): bool	(Zookeeper) Sets the acl associated with a node synchronously
Zookeeper::setDebugLevel(int $logLevel): bool	Sets the debugging level for the library
Zookeeper::setDeterministicConnOrder(bool $yesOrNo): bool	Enable/disable quorum endpoint order randomization
>setLogStream(resource $stream): bool	(Zookeeper) Sets the stream to be used by the library for logging
>setWatcher(callable $watcher_cb): bool	(Zookeeper) Set a watcher function
>add(string $members, int $version = -1, array $stat = null): void	(ZookeeperConfig) Add servers to the ensemble
>get(callable $watcher_cb = null, array $stat = null): string	(ZookeeperConfig) Gets the last committed configuration of the ZooKeeper cluster as it is known to the server to which the client is connected, synchronously
>remove(string $id_list, int $version = -1, array $stat = null): void	(ZookeeperConfig) Remove servers from the ensemble
>set(string $members, int $version = -1, array $stat = null): void	(ZookeeperConfig) Change ZK cluster ensemble membership and roles of ensemble peers
ZookeeperAuthenticationException()	(new) The ZooKeeper authentication exception handling class
ZookeeperConfig()	(new) The ZooKeeper Config handling class
ZookeeperConnectionException()	(new) The ZooKeeper connection exception handling class
ZookeeperException()	(new) The ZooKeeper exception handling class
ZookeeperMarshallingException()	(new) The ZooKeeper exception (while marshalling or unmarshalling data) handling class
ZookeeperNoNodeException()	(new) The ZooKeeper exception (when node does not exist) handling class
ZookeeperOperationTimeoutException()	(new) The ZooKeeper operation timeout exception handling class
ZookeeperSessionException()	(new) The ZooKeeper session exception handling class
APC_ITER_ALL
APC_ITER_ATIME
APC_ITER_CTIME
APC_ITER_DEVICE
APC_ITER_DTIME
APC_ITER_FILENAME
APC_ITER_INODE
APC_ITER_KEY
APC_ITER_MD5
APC_ITER_MEM_SIZE
APC_ITER_MTIME
APC_ITER_NONE
APC_ITER_NUM_HITS
APC_ITER_REFCOUNT
APC_ITER_TTL
APC_ITER_TYPE
APC_ITER_VALUE
APC_LIST_ACTIVE
APC_LIST_DELETED
CASE_LOWER
CASE_UPPER
SORT_ASC
SORT_DESC
SORT_REGULAR
SORT_NUMERIC
SORT_STRING
SORT_LOCALE_STRING
SORT_NATURAL
SORT_FLAG_CASE
ARRAY_FILTER_USE_KEY
ARRAY_FILTER_USE_BOTH
COUNT_NORMAL
COUNT_RECURSIVE
EXTR_OVERWRITE
EXTR_SKIP
EXTR_PREFIX_SAME
EXTR_PREFIX_ALL
EXTR_PREFIX_INVALID
EXTR_PREFIX_IF_EXISTS
EXTR_IF_EXISTS
EXTR_REFS
CAL_EASTER_DEFAULT
CAL_EASTER_ROMAN
CAL_EASTER_ALWAYS_GREGORIAN
CAL_EASTER_ALWAYS_JULIAN
CAL_GREGORIAN
CAL_JULIAN
CAL_JEWISH
CAL_FRENCH
CAL_NUM_CALS
CAL_JEWISH_ADD_ALAFIM_GERESH
CAL_JEWISH_ADD_ALAFIM
CAL_JEWISH_ADD_GERESHAYIM
CAL_DOW_DAYNO
CAL_DOW_SHORT
CAL_DOW_LONG
CAL_MONTH_GREGORIAN_SHORT
CAL_MONTH_GREGORIAN_LONG
CAL_MONTH_JULIAN_SHORT
CAL_MONTH_JULIAN_LONG
CAL_MONTH_JEWISH
CAL_MONTH_FRENCH
CommonMark\Parser\Normal
CommonMark\Parser\Normalize
CommonMark\Parser\Smart
CommonMark\Parser\ValidateUTF8
CommonMark\Render\HardBreaks
CommonMark\Render\NoBreaks
CommonMark\Render\Normal
CommonMark\Render\Safe
CommonMark\Render\SourcePos
CLSCTX_INPROC_SERVER
CLSCTX_INPROC_HANDLER
CLSCTX_LOCAL_SERVER
CLSCTX_REMOTE_SERVER
CLSCTX_SERVER
CLSCTX_ALL
VT_NULL
VT_EMPTY
VT_INT
VT_I1
VT_I2
VT_I4
VT_I8
VT_UINT
VT_UI1
VT_UI2
VT_UI4
VT_UI8
VT_R4
VT_R8
VT_BOOL
VT_ERROR
VT_CY
VT_DATE
VT_BSTR
VT_DECIMAL
VT_UNKNOWN
VT_DISPATCH
VT_VARIANT
VT_ARRAY
VT_BYREF
CP_ACP
CP_MACCP
CP_OEMCP
CP_UTF7
CP_UTF8
CP_SYMBOL
CP_THREAD_ACP
VARCMP_LT
VARCMP_EQ
VARCMP_GT
VARCMP_NULL
NORM_IGNORECASE
NORM_IGNORENONSPACE
NORM_IGNORESYMBOLS
NORM_IGNOREWIDTH
NORM_IGNOREKANATYPE
NORM_IGNOREKASHIDA
DISP_E_DIVBYZERO
DISP_E_OVERFLOW
DISP_E_BADINDEX
DISP_E_PARAMNOTFOUND
MK_E_UNAVAILABLE
LOCALE_NEUTRAL
LOCALE_SYSTEM_DEFAULT
CUBRID_INCLUDE_OID
CUBRID_ASYNC
CUBRID_EXEC_QUERY_ALL
CUBRID_NUM
CUBRID_ASSOC
CUBRID_BOTH
CUBRID_OBJECT
CUBRID_LOB
CUBRID_CURSOR_FIRST
CUBRID_CURSOR_CURRENT
CUBRID_CURSOR_LAST
CUBRID_CURSOR_SUCCESS
CUBRID_NO_MORE_DATA
CUBRID_CURSOR_ERROR
CUBRID_AUTOCOMMIT_TRUE
CUBRID_AUTOCOMMIT_FALSE
CUBRID_PARAM_ISOLATION_LEVEL
CUBRID_PARAM_LOCK_TIMEOUT
CUBRID_SCH_CLASS
CUBRID_SCH_VCLASS
CUBRID_SCH_QUERY_SPEC
CUBRID_SCH_ATTRIBUTE
CUBRID_SCH_CLASS_ATTRIBUTE
CUBRID_SCH_METHOD
CUBRID_SCH_CLASS_METHOD
CUBRID_SCH_METHOD_FILE
CUBRID_SCH_SUPERCLASS
CUBRID_SCH_SUBCLASS
CUBRID_SCH_CONSTRAINT
CUBRID_SCH_TRIGGER
CUBRID_SCH_CLASS_PRIVILEGE
CUBRID_SCH_ATTR_PRIVILEGE
CUBRID_SCH_DIRECT_SUPER_CLASS
CUBRID_SCH_PRIMARY_KEY
CUBRID_SCH_IMPORTED_KEYS
CUBRID_SCH_EXPORTED_KEYS
CUBRID_SCH_CROSS_REFERENCE
CUBRID_FACILITY_DBMS
CUBRID_FACILITY_CAS
CUBRID_FACILITY_CCI
CUBRID_FACILITY_CLIENT
CURLALTSVC_H1
CURLALTSVC_H2
CURLALTSVC_H3
CURLALTSVC_READONLYFILE
CURLAUTH_ANY
CURLAUTH_ANYSAFE
CURLAUTH_AWS_SIGV4
CURLAUTH_BASIC
CURLAUTH_BEARER
CURLAUTH_DIGEST
CURLAUTH_DIGEST_IE
CURLAUTH_GSSAPI
CURLAUTH_GSSNEGOTIATE
CURLAUTH_NEGOTIATE
CURLAUTH_NONE
CURLAUTH_NTLM
CURLAUTH_NTLM_WB
CURLAUTH_ONLY
CURLFTPAUTH_DEFAULT
CURLFTPAUTH_SSL
CURLFTPAUTH_TLS
CURLFTPMETHOD_DEFAULT
CURLFTPMETHOD_MULTICWD
CURLFTPMETHOD_NOCWD
CURLFTPMETHOD_SINGLECWD
CURLFTPSSL_ALL
CURLFTPSSL_CCC_ACTIVE
CURLFTPSSL_CCC_NONE
CURLFTPSSL_CCC_PASSIVE
CURLFTPSSL_CONTROL
CURLFTPSSL_NONE
CURLFTPSSL_TRY
CURLFTP_CREATE_DIR
CURLFTP_CREATE_DIR_NONE
CURLFTP_CREATE_DIR_RETRY
CURLGSSAPI_DELEGATION_FLAG
CURLGSSAPI_DELEGATION_POLICY_FLAG
CURLHEADER_SEPARATE
CURLHEADER_UNIFIED
CURLHSTS_ENABLE
CURLHSTS_READONLYFILE
CURLKHMATCH_LAST
CURLKHMATCH_MISMATCH
CURLKHMATCH_MISSING
CURLKHMATCH_OK
CURLMIMEOPT_FORMESCAPE
CURLMSG_DONE
CURLPIPE_HTTP1
CURLPIPE_MULTIPLEX
CURLPIPE_NOTHING
CURLPROXY_HTTP
CURLPROXY_HTTPS
CURLPROXY_HTTP_1_0
CURLPROXY_SOCKS4
CURLPROXY_SOCKS4A
CURLPROXY_SOCKS5
CURLPROXY_SOCKS5_HOSTNAME
CURLPX_BAD_ADDRESS_TYPE
CURLPX_BAD_VERSION
CURLPX_CLOSED
CURLPX_GSSAPI
CURLPX_GSSAPI_PERMSG
CURLPX_GSSAPI_PROTECTION
CURLPX_IDENTD
CURLPX_IDENTD_DIFFER
CURLPX_LONG_HOSTNAME
CURLPX_LONG_PASSWD
CURLPX_LONG_USER
CURLPX_NO_AUTH
CURLPX_OK
CURLPX_RECV_ADDRESS
CURLPX_RECV_AUTH
CURLPX_RECV_CONNECT
CURLPX_RECV_REQACK
CURLPX_REPLY_ADDRESS_TYPE_NOT_SUPPORTED
CURLPX_REPLY_COMMAND_NOT_SUPPORTED
CURLPX_REPLY_CONNECTION_REFUSED
CURLPX_REPLY_GENERAL_SERVER_FAILURE
CURLPX_REPLY_HOST_UNREACHABLE
CURLPX_REPLY_NETWORK_UNREACHABLE
CURLPX_REPLY_NOT_ALLOWED
CURLPX_REPLY_TTL_EXPIRED
CURLPX_REPLY_UNASSIGNED
CURLPX_REQUEST_FAILED
CURLPX_RESOLVE_HOST
CURLPX_SEND_AUTH
CURLPX_SEND_CONNECT
CURLPX_SEND_REQUEST
CURLPX_UNKNOWN_FAIL
CURLPX_UNKNOWN_MODE
CURLPX_USER_REJECTED
CURLSSH_AUTH_AGENT
CURLSSH_AUTH_ANY
CURLSSH_AUTH_DEFAULT
CURLSSH_AUTH_GSSAPI
CURLSSH_AUTH_HOST
CURLSSH_AUTH_KEYBOARD
CURLSSH_AUTH_NONE
CURLSSH_AUTH_PASSWORD
CURLSSH_AUTH_PUBLICKEY
CURLSSLOPT_ALLOW_BEAST
CURLSSLOPT_AUTO_CLIENT_CERT
CURLSSLOPT_NATIVE_CA
CURLSSLOPT_NO_PARTIALCHAIN
CURLSSLOPT_NO_REVOKE
CURLSSLOPT_REVOKE_BEST_EFFORT
CURLUSESSL_ALL
CURLUSESSL_CONTROL
CURLUSESSL_NONE
CURLUSESSL_TRY
CURLVERSION_NOW
CURLWS_RAW_MODE
CURL_FNMATCHFUNC_FAIL
CURL_FNMATCHFUNC_MATCH
CURL_FNMATCHFUNC_NOMATCH
CURL_HTTP_VERSION_1_0
CURL_HTTP_VERSION_1_1
CURL_HTTP_VERSION_2
CURL_HTTP_VERSION_2TLS
CURL_HTTP_VERSION_2_0
CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE
CURL_HTTP_VERSION_3
CURL_HTTP_VERSION_3ONLY
CURL_HTTP_VERSION_NONE
CURL_IPRESOLVE_V4
CURL_IPRESOLVE_V6
CURL_IPRESOLVE_WHATEVER
CURL_MAX_READ_SIZE
CURL_NETRC_IGNORED
CURL_NETRC_OPTIONAL
CURL_NETRC_REQUIRED
CURL_PUSH_DENY
CURL_PUSH_OK
CURL_READFUNC_PAUSE
CURL_REDIR_POST_301
CURL_REDIR_POST_302
CURL_REDIR_POST_303
CURL_REDIR_POST_ALL
CURL_RTSPREQ_ANNOUNCE
CURL_RTSPREQ_DESCRIBE
CURL_RTSPREQ_GET_PARAMETER
CURL_RTSPREQ_OPTIONS
CURL_RTSPREQ_PAUSE
CURL_RTSPREQ_PLAY
CURL_RTSPREQ_RECEIVE
CURL_RTSPREQ_RECORD
CURL_RTSPREQ_SETUP
CURL_RTSPREQ_SET_PARAMETER
CURL_RTSPREQ_TEARDOWN
CURL_SSLVERSION_DEFAULT
CURL_SSLVERSION_MAX_DEFAULT
CURL_SSLVERSION_MAX_NONE
CURL_SSLVERSION_MAX_TLSv1_0
CURL_SSLVERSION_MAX_TLSv1_1
CURL_SSLVERSION_MAX_TLSv1_2
CURL_SSLVERSION_MAX_TLSv1_3
CURL_SSLVERSION_SSLv2
CURL_SSLVERSION_SSLv3
CURL_SSLVERSION_TLSv1
CURL_SSLVERSION_TLSv1_0
CURL_SSLVERSION_TLSv1_1
CURL_SSLVERSION_TLSv1_2
CURL_SSLVERSION_TLSv1_3
CURL_TIMECOND_IFMODSINCE
CURL_TIMECOND_IFUNMODSINCE
CURL_TIMECOND_LASTMOD
CURL_TIMECOND_NONE
CURL_TLSAUTH_SRP
CURL_VERSION_ALTSVC
CURL_VERSION_ASYNCHDNS
CURL_VERSION_BROTLI
CURL_VERSION_CONV
CURL_VERSION_CURLDEBUG
CURL_VERSION_DEBUG
CURL_VERSION_GSASL
CURL_VERSION_GSSAPI
CURL_VERSION_GSSNEGOTIATE
CURL_VERSION_HSTS
CURL_VERSION_HTTP2
CURL_VERSION_HTTP3
CURL_VERSION_HTTPS_PROXY
CURL_VERSION_IDN
CURL_VERSION_IPV6
CURL_VERSION_KERBEROS4
CURL_VERSION_KERBEROS5
CURL_VERSION_LARGEFILE
CURL_VERSION_LIBZ
CURL_VERSION_MULTI_SSL
CURL_VERSION_NTLM
CURL_VERSION_NTLM_WB
CURL_VERSION_PSL
CURL_VERSION_SPNEGO
CURL_VERSION_SSL
CURL_VERSION_SSPI
CURL_VERSION_TLSAUTH_SRP
CURL_VERSION_UNICODE
CURL_VERSION_UNIX_SOCKETS
CURL_VERSION_ZSTD
CURL_WRITEFUNC_PAUSE
CURL_PREREQFUNC_OK
CURL_PREREQFUNC_ABORT
SUNFUNCS_RET_TIMESTAMP
SUNFUNCS_RET_STRING
SUNFUNCS_RET_DOUBLE
DATE_ATOM
DATE_COOKIE
DATE_ISO8601
DATE_ISO8601_EXPANDED
DATE_RFC822
DATE_RFC850
DATE_RFC1036
DATE_RFC1123
DATE_RFC7231
DATE_RFC2822
DATE_RFC3339
DATE_RFC3339_EXTENDED
DATE_RSS
DATE_W3C
DBA_LMDB_USE_SUB_DIR
DBA_LMDB_NO_SUB_DIR
DBASE_VERSION
DBASE_RDONLY
DBASE_RDWR
DBASE_TYPE_DBASE
DBASE_TYPE_FOXPRO
F_DUPFD
F_GETFD
F_GETFL
F_GETLK
F_GETOWN
F_RDLCK
F_SETFL
F_SETLK
F_SETLKW
F_SETOWN
F_UNLCK
F_WRLCK
O_APPEND
O_ASYNC
O_CREAT
O_EXCL
O_NDELAY
O_NOCTTY
O_NONBLOCK
O_RDONLY
O_RDWR
O_SYNC
O_TRUNC
O_WRONLY
S_IRGRP
S_IROTH
S_IRUSR
S_IRWXG
S_IRWXO
S_IRWXU
S_IWGRP
S_IWOTH
S_IWUSR
S_IXGRP
S_IXOTH
S_IXUSR
DIRECTORY_SEPARATOR
PATH_SEPARATOR
SCANDIR_SORT_ASCENDING
SCANDIR_SORT_DESCENDING
SCANDIR_SORT_NONE
XML_ELEMENT_NODE
XML_ATTRIBUTE_NODE
XML_TEXT_NODE
XML_CDATA_SECTION_NODE
XML_ENTITY_REF_NODE
XML_ENTITY_NODE
XML_PI_NODE
XML_COMMENT_NODE
XML_DOCUMENT_NODE
XML_DOCUMENT_TYPE_NODE
XML_DOCUMENT_FRAG_NODE
XML_NOTATION_NODE
XML_HTML_DOCUMENT_NODE
XML_DTD_NODE
XML_ELEMENT_DECL_NODE
XML_ATTRIBUTE_DECL_NODE
XML_ENTITY_DECL_NODE
XML_NAMESPACE_DECL_NODE
XML_ATTRIBUTE_CDATA
XML_ATTRIBUTE_ID
XML_ATTRIBUTE_IDREF
XML_ATTRIBUTE_IDREFS
XML_ATTRIBUTE_ENTITY
XML_ATTRIBUTE_NMTOKEN
XML_ATTRIBUTE_NMTOKENS
XML_ATTRIBUTE_ENUMERATION
XML_ATTRIBUTE_NOTATION
XML_LOCAL_NAMESPACE
Dom\HTML_NO_DEFAULT_NS
DOM_PHP_ERR
DOM_INDEX_SIZE_ERR
DOMSTRING_SIZE_ERR
DOM_HIERARCHY_REQUEST_ERR
DOM_WRONG_DOCUMENT_ERR
DOM_INVALID_CHARACTER_ERR
DOM_NO_DATA_ALLOWED_ERR
DOM_NO_MODIFICATION_ALLOWED_ERR
DOM_NOT_FOUND_ERR
DOM_NOT_SUPPORTED_ERR
DOM_INUSE_ATTRIBUTE_ERR
DOM_INVALID_STATE_ERR
DOM_SYNTAX_ERR
DOM_INVALID_MODIFICATION_ERR
DOM_NAMESPACE_ERR
DOM_INVALID_ACCESS_ERR
DOM_VALIDATION_ERR
EIO_PRI_MIN
EIO_PRI_DEFAULT
EIO_PRI_MAX
EIO_SEEK_SET
EIO_SEEK_CUR
EIO_SEEK_END
EIO_READDIR_DENTS
EIO_READDIR_DIRS_FIRST
EIO_READDIR_STAT_ORDER
EIO_READDIR_FOUND_UNKNOWN
EIO_DT_UNKNOWN
EIO_DT_FIFO
EIO_DT_CHR
EIO_DT_MPC
EIO_DT_DIR
EIO_DT_NAM
EIO_DT_BLK
EIO_DT_MPB
EIO_DT_REG
EIO_DT_NWK
EIO_DT_CMP
EIO_DT_LNK
EIO_DT_SOCK
EIO_DT_DOOR
EIO_DT_WHT
EIO_DT_MAX
EIO_O_RDONLY
EIO_O_WRONLY
EIO_O_RDWR
EIO_O_NONBLOCK
EIO_O_APPEND
EIO_O_CREAT
EIO_O_TRUNC
EIO_O_EXCL
EIO_O_FSYNC
EIO_S_IRUSR
EIO_S_IWUSR
EIO_S_IXUSR
EIO_S_IRGRP
EIO_S_IWGRP
EIO_S_IXGRP
EIO_S_IROTH
EIO_S_IWOTH
EIO_S_IXOTH
EIO_S_IFREG
EIO_S_IFCHR
EIO_S_IFBLK
EIO_S_IFIFO
EIO_S_IFSOCK
EIO_SYNC_FILE_RANGE_WAIT_BEFORE
EIO_SYNC_FILE_RANGE_WRITE
EIO_SYNC_FILE_RANGE_WAIT_AFTER
EIO_FALLOC_FL_KEEP_SIZE
LIBENCHANT_VERSION
ENCHANT_MYSPELL
ENCHANT_ISPELL
E_ERROR
E_WARNING
E_PARSE
E_NOTICE
E_CORE_ERROR
E_CORE_WARNING
E_COMPILE_ERROR
E_COMPILE_WARNING
E_DEPRECATED
E_USER_ERROR
E_USER_WARNING
E_USER_NOTICE
E_USER_DEPRECATED
E_STRICT
E_RECOVERABLE_ERROR
E_ALL
EXIF_USE_MBSTRING
EXP_GLOB
EXP_EXACT
EXP_REGEXP
EXP_EOF
EXP_TIMEOUT
EXP_FULLBUFFER
FANN_TRAIN_INCREMENTAL
FANN_TRAIN_BATCH
FANN_TRAIN_RPROP
FANN_TRAIN_QUICKPROP
FANN_TRAIN_SARPROP
FANN_LINEAR
FANN_THRESHOLD
FANN_THRESHOLD_SYMMETRIC
FANN_SIGMOID
FANN_SIGMOID_STEPWISE
FANN_SIGMOID_SYMMETRIC
FANN_SIGMOID_SYMMETRIC_STEPWISE
FANN_GAUSSIAN
FANN_GAUSSIAN_SYMMETRIC
FANN_GAUSSIAN_STEPWISE
FANN_ELLIOT
FANN_ELLIOT_SYMMETRIC
FANN_LINEAR_PIECE
FANN_LINEAR_PIECE_SYMMETRIC
FANN_SIN_SYMMETRIC
FANN_COS_SYMMETRIC
FANN_SIN
FANN_COS
FANN_ERRORFUNC_LINEAR
FANN_ERRORFUNC_TANH
FANN_STOPFUNC_MSE
FANN_STOPFUNC_BIT
FANN_NETTYPE_LAYER
FANN_NETTYPE_SHORTCUT
FANN_E_NO_ERROR
FANN_E_CANT_OPEN_CONFIG_R
FANN_E_CANT_OPEN_CONFIG_W
FANN_E_WRONG_CONFIG_VERSION
FANN_E_CANT_READ_CONFIG
FANN_E_CANT_READ_NEURON
FANN_E_CANT_READ_CONNECTIONS
FANN_E_WRONG_NUM_CONNECTIONS
FANN_E_CANT_OPEN_TD_W
FANN_E_CANT_OPEN_TD_R
FANN_E_CANT_READ_TD
FANN_E_CANT_ALLOCATE_MEM
FANN_E_CANT_TRAIN_ACTIVATION
FANN_E_CANT_USE_ACTIVATION
FANN_E_TRAIN_DATA_MISMATCH
FANN_E_CANT_USE_TRAIN_ALG
FANN_E_TRAIN_DATA_SUBSET
FANN_E_INDEX_OUT_OF_BOUND
FANN_E_SCALE_NOT_PRESENT
FANN_E_INPUT_NO_MATCH
FANN_E_OUTPUT_NO_MATCH
FDFValue
FDFStatus
FDFFile
FDFID
FDFFf
FDFSetFf
FDFClearFf
FDFFlags
FDFSetF
FDFClrF
FDFAP
FDFAS
FDFAction
FDFAA
FDFAPRef
FDFIF
FDFEnter
FDFExit
FDFDown
FDFUp
FDFFormat
FDFValidate
FDFKeystroke
FDFCalculate
FDFNormalAP
FDFRolloverAP
FDFDownAP
FILEINFO_NONE
FILEINFO_SYMLINK
FILEINFO_MIME_TYPE
FILEINFO_MIME_ENCODING
FILEINFO_MIME
FILEINFO_COMPRESS
FILEINFO_DEVICES
FILEINFO_CONTINUE
FILEINFO_PRESERVE_ATIME
FILEINFO_RAW
FILEINFO_EXTENSION
FILEINFO_APPLE
SEEK_SET
SEEK_CUR
SEEK_END
LOCK_SH
LOCK_EX
LOCK_UN
LOCK_NB
FILE_USE_INCLUDE_PATH
FILE_NO_DEFAULT_CONTEXT
FILE_APPEND
FILE_IGNORE_NEW_LINES
FILE_SKIP_EMPTY_LINES
FILE_BINARY
FILE_TEXT
GLOB_AVAILABLE_FLAGS
GLOB_BRACE
GLOB_ERR
GLOB_MARK
GLOB_NOCHECK
GLOB_NOESCAPE
GLOB_NOSORT
GLOB_ONLYDIR
PATHINFO_ALL
PATHINFO_DIRNAME
PATHINFO_BASENAME
PATHINFO_EXTENSION
PATHINFO_FILENAME
INI_SCANNER_NORMAL
INI_SCANNER_RAW
INI_SCANNER_TYPED
FNM_NOESCAPE
FNM_PATHNAME
FNM_PERIOD
FNM_CASEFOLD
UPLOAD_ERR_CANT_WRITE
UPLOAD_ERR_EXTENSION
UPLOAD_ERR_FORM_SIZE
UPLOAD_ERR_INI_SIZE
UPLOAD_ERR_NO_FILE
UPLOAD_ERR_NO_TMP_DIR
UPLOAD_ERR_OK
UPLOAD_ERR_PARTIAL
INPUT_POST
INPUT_GET
INPUT_COOKIE
INPUT_ENV
INPUT_SERVER
INPUT_SESSION
INPUT_REQUEST
FILTER_FLAG_NONE
FILTER_REQUIRE_SCALAR
FILTER_REQUIRE_ARRAY
FILTER_FORCE_ARRAY
FILTER_NULL_ON_FAILURE
FILTER_FLAG_STRIP_LOW
FILTER_FLAG_STRIP_HIGH
FILTER_FLAG_STRIP_BACKTICK
FILTER_FLAG_ENCODE_LOW
FILTER_FLAG_ENCODE_HIGH
FILTER_FLAG_ENCODE_AMP
FILTER_FLAG_NO_ENCODE_QUOTES
FILTER_FLAG_EMPTY_STRING_NULL
FILTER_VALIDATE_BOOL
FILTER_VALIDATE_BOOLEAN
FILTER_VALIDATE_INT
FILTER_FLAG_ALLOW_OCTAL
FILTER_FLAG_ALLOW_HEX
FILTER_VALIDATE_FLOAT
FILTER_FLAG_ALLOW_THOUSAND
FILTER_VALIDATE_REGEXP
FILTER_VALIDATE_URL
FILTER_FLAG_SCHEME_REQUIRED
FILTER_FLAG_HOST_REQUIRED
FILTER_FLAG_PATH_REQUIRED
FILTER_FLAG_QUERY_REQUIRED
FILTER_VALIDATE_DOMAIN
FILTER_FLAG_HOSTNAME
FILTER_VALIDATE_EMAIL
FILTER_FLAG_EMAIL_UNICODE
FILTER_VALIDATE_IP
FILTER_FLAG_IPV4
FILTER_FLAG_IPV6
FILTER_FLAG_NO_RES_RANGE
FILTER_FLAG_NO_PRIV_RANGE
FILTER_FLAG_GLOBAL_RANGE
FILTER_VALIDATE_MAC
FILTER_UNSAFE_RAW
FILTER_DEFAULT
FILTER_SANITIZE_STRING
FILTER_SANITIZE_STRIPPED
FILTER_SANITIZE_ENCODED
FILTER_SANITIZE_SPECIAL_CHARS
FILTER_SANITIZE_FULL_SPECIAL_CHARS
FILTER_SANITIZE_EMAIL
FILTER_SANITIZE_URL
FILTER_SANITIZE_NUMBER_INT
FILTER_SANITIZE_NUMBER_FLOAT
FILTER_FLAG_ALLOW_FRACTION
FILTER_FLAG_ALLOW_THOUSAND
FILTER_FLAG_ALLOW_SCIENTIFIC
FILTER_SANITIZE_ADD_SLASHES
FILTER_SANITIZE_MAGIC_QUOTES
FILTER_CALLBACK
FTP_ASCII
FTP_AUTOSEEK
FTP_AUTORESUME
FTP_FAILED
FTP_FINISHED
FTP_MOREDATA
FTP_TEXT
FTP_BINARY
FTP_IMAGE
FTP_TIMEOUT_SEC
FTP_USEPASVADDRESS
GEARMAN_SUCCESS
GEARMAN_IO_WAIT
GEARMAN_ERRNO
GEARMAN_NO_ACTIVE_FDS
GEARMAN_UNEXPECTED_PACKET
GEARMAN_GETADDRINFO
GEARMAN_NO_SERVERS
GEARMAN_LOST_CONNECTION
GEARMAN_MEMORY_ALLOCATION_FAILURE
GEARMAN_SERVER_ERROR
GEARMAN_WORK_DATA
GEARMAN_WORK_WARNING
GEARMAN_WORK_STATUS
GEARMAN_WORK_EXCEPTION
GEARMAN_WORK_FAIL
GEARMAN_COULD_NOT_CONNECT
GEARMAN_INVALID_FUNCTION_NAME
GEARMAN_INVALID_WORKER_FUNCTION
GEARMAN_NO_REGISTERED_FUNCTIONS
GEARMAN_NO_JOBS
GEARMAN_ECHO_DATA_CORRUPTION
GEARMAN_NEED_WORKLOAD_FN
GEARMAN_PAUSE
GEARMAN_UNKNOWN_STATE
GEARMAN_SEND_BUFFER_TOO_SMALL
GEARMAN_TIMEOUT
GEARMAN_CLIENT_GENERATE_UNIQUE
GEARMAN_CLIENT_NON_BLOCKING
GEARMAN_CLIENT_UNBUFFERED_RESULT
GEARMAN_CLIENT_FREE_TASKS
GEARMAN_WORKER_NON_BLOCKING
GEARMAN_WORKER_GRAB_UNIQ
GEARMAN_DEFAULT_TCP_HOST
GEARMAN_DEFAULT_TCP_PORT
GEARMAN_DEFAULT_SOCKET_TIMEOUT
GEARMAN_DEFAULT_SOCKET_SEND_SIZE
GEARMAN_DEFAULT_SOCKET_RECV_SIZE
GEARMAN_MAX_ERROR_SIZE
GEARMAN_PACKET_HEADER_SIZE
GEARMAN_JOB_HANDLE_SIZE
GEARMAN_OPTION_SIZE
GEARMAN_UNIQUE_SIZE
GEARMAN_MAX_COMMAND_ARGS
GEARMAN_ARGS_BUFFER_SIZE
GEARMAN_SEND_BUFFER_SIZE
GEARMAN_RECV_BUFFER_SIZE
GEARMAN_WORKER_WAIT_TIMEOUT
GEOIP_COUNTRY_EDITION
GEOIP_REGION_EDITION_REV0
GEOIP_CITY_EDITION_REV0
GEOIP_ORG_EDITION
GEOIP_ISP_EDITION
GEOIP_CITY_EDITION_REV1
GEOIP_REGION_EDITION_REV1
GEOIP_PROXY_EDITION
GEOIP_ASNUM_EDITION
GEOIP_NETSPEED_EDITION
GEOIP_DOMAIN_EDITION
GEOIP_UNKNOWN_SPEED
GEOIP_DIALUP_SPEED
GEOIP_CABLEDSL_SPEED
GEOIP_CORPORATE_SPEED
Gmagick::COLOR_BLACK
Gmagick::COLOR_BLUE
Gmagick::COLOR_CYAN
Gmagick::COLOR_GREEN
Gmagick::COLOR_RED
Gmagick::COLOR_YELLOW
Gmagick::COLOR_MAGENTA
Gmagick::COLOR_OPACITY
Gmagick::COLOR_ALPHA
Gmagick::COLOR_FUZZ
Gmagick::COMPOSITE_DEFAULT
Gmagick::COMPOSITE_UNDEFINED
Gmagick::COMPOSITE_NO
Gmagick::COMPOSITE_ADD
Gmagick::COMPOSITE_ATOP
Gmagick::COMPOSITE_BLEND
Gmagick::COMPOSITE_BUMPMAP
Gmagick::COMPOSITE_CLEAR
Gmagick::COMPOSITE_COLORBURN
Gmagick::COMPOSITE_COLORDODGE
Gmagick::COMPOSITE_COLORIZE
Gmagick::COMPOSITE_COPYBLACK
Gmagick::COMPOSITE_COPYBLUE
Gmagick::COMPOSITE_COPY
Gmagick::COMPOSITE_COPYCYAN
Gmagick::COMPOSITE_COPYGREEN
Gmagick::COMPOSITE_COPYMAGENTA
Gmagick::COMPOSITE_COPYOPACITY
Gmagick::COMPOSITE_COPYRED
Gmagick::COMPOSITE_COPYYELLOW
Gmagick::COMPOSITE_DARKEN
Gmagick::COMPOSITE_DSTATOP
Gmagick::COMPOSITE_DST
Gmagick::COMPOSITE_DSTIN
Gmagick::COMPOSITE_DSTOUT
Gmagick::COMPOSITE_DSTOVER
Gmagick::COMPOSITE_DIFFERENCE
Gmagick::COMPOSITE_DISPLACE
Gmagick::COMPOSITE_DISSOLVE
Gmagick::COMPOSITE_EXCLUSION
Gmagick::COMPOSITE_HARDLIGHT
Gmagick::COMPOSITE_HUE
Gmagick::COMPOSITE_IN
Gmagick::COMPOSITE_LIGHTEN
Gmagick::COMPOSITE_LUMINIZE
Gmagick::COMPOSITE_MINUS
Gmagick::COMPOSITE_MODULATE
Gmagick::COMPOSITE_MULTIPLY
Gmagick::COMPOSITE_OUT
Gmagick::COMPOSITE_OVER
Gmagick::COMPOSITE_OVERLAY
Gmagick::COMPOSITE_PLUS
Gmagick::COMPOSITE_REPLACE
Gmagick::COMPOSITE_SATURATE
Gmagick::COMPOSITE_SCREEN
Gmagick::COMPOSITE_SOFTLIGHT
Gmagick::COMPOSITE_SRCATOP
Gmagick::COMPOSITE_SRC
Gmagick::COMPOSITE_SRCIN
Gmagick::COMPOSITE_SRCOUT
Gmagick::COMPOSITE_SRCOVER
Gmagick::COMPOSITE_SUBTRACT
Gmagick::COMPOSITE_THRESHOLD
Gmagick::COMPOSITE_XOR
Gmagick::MONTAGEMODE_FRAME
Gmagick::MONTAGEMODE_UNFRAME
Gmagick::MONTAGEMODE_CONCATENATE
Gmagick::STYLE_NORMAL
Gmagick::STYLE_ITALIC
Gmagick::STYLE_OBLIQUE
Gmagick::STYLE_ANY
Gmagick::FILTER_UNDEFINED
Gmagick::FILTER_POINT
Gmagick::FILTER_BOX
Gmagick::FILTER_TRIANGLE
Gmagick::FILTER_HERMITE
Gmagick::FILTER_HANNING
Gmagick::FILTER_HAMMING
Gmagick::FILTER_BLACKMAN
Gmagick::FILTER_GAUSSIAN
Gmagick::FILTER_QUADRATIC
Gmagick::FILTER_CUBIC
Gmagick::FILTER_CATROM
Gmagick::FILTER_MITCHELL
Gmagick::FILTER_LANCZOS
Gmagick::FILTER_BESSEL
Gmagick::FILTER_SINC
Gmagick::IMGTYPE_UNDEFINED
Gmagick::IMGTYPE_BILEVEL
Gmagick::IMGTYPE_GRAYSCALE
Gmagick::IMGTYPE_GRAYSCALEMATTE
Gmagick::IMGTYPE_PALETTE
Gmagick::IMGTYPE_PALETTEMATTE
Gmagick::IMGTYPE_TRUECOLOR
Gmagick::IMGTYPE_TRUECOLORMATTE
Gmagick::IMGTYPE_COLORSEPARATION
Gmagick::IMGTYPE_COLORSEPARATIONMATTE
Gmagick::IMGTYPE_OPTIMIZE
Gmagick::RESOLUTION_UNDEFINED
Gmagick::RESOLUTION_PIXELSPERINCH
Gmagick::RESOLUTION_PIXELSPERCENTIMETER
Gmagick::COMPRESSION_UNDEFINED
Gmagick::COMPRESSION_NO
Gmagick::COMPRESSION_BZIP
Gmagick::COMPRESSION_FAX
Gmagick::COMPRESSION_GROUP4
Gmagick::COMPRESSION_JPEG
Gmagick::COMPRESSION_JPEG2000
Gmagick::COMPRESSION_LOSSLESSJPEG
Gmagick::COMPRESSION_LZW
Gmagick::COMPRESSION_RLE
Gmagick::COMPRESSION_ZIP
Gmagick::PAINT_POINT
Gmagick::PAINT_REPLACE
Gmagick::PAINT_FLOODFILL
Gmagick::PAINT_FILLTOBORDER
Gmagick::PAINT_RESET
Gmagick::GRAVITY_NORTHWEST
Gmagick::GRAVITY_NORTH
Gmagick::GRAVITY_NORTHEAST
Gmagick::GRAVITY_WEST
Gmagick::GRAVITY_CENTER
Gmagick::GRAVITY_EAST
Gmagick::GRAVITY_SOUTHWEST
Gmagick::GRAVITY_SOUTH
Gmagick::GRAVITY_SOUTHEAST
Gmagick::STRETCH_NORMAL
Gmagick::STRETCH_ULTRACONDENSED
Gmagick::STRETCH_CONDENSED
Gmagick::STRETCH_SEMICONDENSED
Gmagick::STRETCH_SEMIEXPANDED
Gmagick::STRETCH_EXPANDED
Gmagick::STRETCH_EXTRAEXPANDED
Gmagick::STRETCH_ULTRAEXPANDED
Gmagick::STRETCH_ANY
Gmagick::ALIGN_UNDEFINED
Gmagick::ALIGN_LEFT
Gmagick::ALIGN_CENTER
Gmagick::ALIGN_RIGHT
Gmagick::DECORATION_NO
Gmagick::DECORATION_UNDERLINE
Gmagick::DECORATION_OVERLINE
Gmagick::DECORATION_LINETROUGH
Gmagick::NOISE_UNIFORM
Gmagick::NOISE_GAUSSIAN
Gmagick::NOISE_MULTIPLICATIVEGAUSSIAN
Gmagick::NOISE_IMPULSE
Gmagick::NOISE_LAPLACIAN
Gmagick::NOISE_POISSON
Gmagick::CHANNEL_UNDEFINED
Gmagick::CHANNEL_RED
Gmagick::CHANNEL_GRAY
Gmagick::CHANNEL_CYAN
Gmagick::CHANNEL_GREEN
Gmagick::CHANNEL_MAGENTA
Gmagick::CHANNEL_BLUE
Gmagick::CHANNEL_YELLOW
Gmagick::CHANNEL_ALPHA
Gmagick::CHANNEL_OPACITY
Gmagick::CHANNEL_MATTE
Gmagick::CHANNEL_BLACK
Gmagick::CHANNEL_INDEX
Gmagick::CHANNEL_ALL
Gmagick::METRIC_UNDEFINED
Gmagick::METRIC_MEANABSOLUTEERROR
Gmagick::METRIC_MEANSQUAREERROR
Gmagick::METRIC_PEAKABSOLUTEERROR
Gmagick::METRIC_PEAKSIGNALTONOISERATIO
Gmagick::METRIC_ROOTMEANSQUAREDERROR
Gmagick::PIXEL_CHAR
Gmagick::PIXEL_DOUBLE
Gmagick::PIXEL_FLOAT
Gmagick::PIXEL_INTEGER
Gmagick::PIXEL_LONG
Gmagick::PIXEL_QUANTUM
Gmagick::PIXEL_SHORT
Gmagick::COLORSPACE_UNDEFINED
Gmagick::COLORSPACE_RGB
Gmagick::COLORSPACE_GRAY
Gmagick::COLORSPACE_TRANSPARENT
Gmagick::COLORSPACE_OHTA
Gmagick::COLORSPACE_LAB
Gmagick::COLORSPACE_XYZ
Gmagick::COLORSPACE_YCBCR
Gmagick::COLORSPACE_YCC
Gmagick::COLORSPACE_YIQ
Gmagick::COLORSPACE_YPBPR
Gmagick::COLORSPACE_YUV
Gmagick::COLORSPACE_CMYK
Gmagick::COLORSPACE_SRGB
Gmagick::COLORSPACE_HSB
Gmagick::COLORSPACE_HSL
Gmagick::COLORSPACE_HWB
Gmagick::COLORSPACE_REC601LUMA
Gmagick::COLORSPACE_REC709LUMA
Gmagick::COLORSPACE_LOG
Gmagick::VIRTUALPIXELMETHOD_UNDEFINED
Gmagick::VIRTUALPIXELMETHOD_BACKGROUND
Gmagick::VIRTUALPIXELMETHOD_CONSTANT
Gmagick::VIRTUALPIXELMETHOD_EDGE
Gmagick::VIRTUALPIXELMETHOD_MIRROR
Gmagick::VIRTUALPIXELMETHOD_TILE
Gmagick::VIRTUALPIXELMETHOD_TRANSPARENT
Gmagick::PREVIEW_UNDEFINED
Gmagick::PREVIEW_ROTATE
Gmagick::PREVIEW_SHEAR
Gmagick::PREVIEW_ROLL
Gmagick::PREVIEW_HUE
Gmagick::PREVIEW_SATURATION
Gmagick::PREVIEW_BRIGHTNESS
Gmagick::PREVIEW_GAMMA
Gmagick::PREVIEW_SPIFF
Gmagick::PREVIEW_DULL
Gmagick::PREVIEW_GRAYSCALE
Gmagick::PREVIEW_QUANTIZE
Gmagick::PREVIEW_DESPECKLE
Gmagick::PREVIEW_REDUCENOISE
Gmagick::PREVIEW_ADDNOISE
Gmagick::PREVIEW_SHARPEN
Gmagick::PREVIEW_BLUR
Gmagick::PREVIEW_THRESHOLD
Gmagick::PREVIEW_EDGEDETECT
Gmagick::PREVIEW_SPREAD
Gmagick::PREVIEW_SOLARIZE
Gmagick::PREVIEW_SHADE
Gmagick::PREVIEW_RAISE
Gmagick::PREVIEW_SEGMENT
Gmagick::PREVIEW_SWIRL
Gmagick::PREVIEW_IMPLODE
Gmagick::PREVIEW_WAVE
Gmagick::PREVIEW_OILPAINT
Gmagick::PREVIEW_CHARCOALDRAWING
Gmagick::PREVIEW_JPEG
Gmagick::RENDERINGINTENT_UNDEFINED
Gmagick::RENDERINGINTENT_SATURATION
Gmagick::RENDERINGINTENT_PERCEPTUAL
Gmagick::RENDERINGINTENT_ABSOLUTE
Gmagick::RENDERINGINTENT_RELATIVE
Gmagick::FILLRULE_UNDEFINED
Gmagick::FILLRULE_EVENODD
Gmagick::FILLRULE_NONZERO
Gmagick::PATHUNITS_UNDEFINED
Gmagick::PATHUNITS_USERSPACE
Gmagick::PATHUNITS_USERSPACEONUSE
Gmagick::PATHUNITS_OBJECTBOUNDINGBOX
Gmagick::LINECAP_UNDEFINED
Gmagick::LINECAP_BUTT
Gmagick::LINECAP_ROUND
Gmagick::LINECAP_SQUARE
Gmagick::LINEJOIN_UNDEFINED
Gmagick::LINEJOIN_MITER
Gmagick::LINEJOIN_ROUND
Gmagick::LINEJOIN_BEVEL
Gmagick::RESOURCETYPE_UNDEFINED
Gmagick::RESOURCETYPE_AREA
Gmagick::RESOURCETYPE_DISK
Gmagick::RESOURCETYPE_FILE
Gmagick::RESOURCETYPE_MAP
Gmagick::RESOURCETYPE_MEMORY
Gmagick::ORIENTATION_UNDEFINED
Gmagick::ORIENTATION_TOPLEFT
Gmagick::ORIENTATION_TOPRIGHT
Gmagick::ORIENTATION_BOTTOMRIGHT
Gmagick::ORIENTATION_BOTTOMLEFT
Gmagick::ORIENTATION_LEFTTOP
Gmagick::ORIENTATION_RIGHTTOP
Gmagick::ORIENTATION_RIGHTBOTTOM
Gmagick::ORIENTATION_LEFTBOTTOM
Gmagick::INTERLACE_UNDEFINED
Gmagick::INTERLACE_NO
Gmagick::INTERLACE_NONE
Gmagick::INTERLACE_LINE
Gmagick::INTERLACE_PLANE
Gmagick::INTERLACE_PARTITION
GMP_ROUND_ZERO
GMP_ROUND_PLUSINF
GMP_ROUND_MINUSINF
GMP_MSW_FIRST
GMP_LSW_FIRST
GMP_LITTLE_ENDIAN
GMP_BIG_ENDIAN
GMP_NATIVE_ENDIAN
GMP_VERSION
GMP_MPIR_VERSION
GNUPG_SIG_MODE_NORMAL
GNUPG_SIG_MODE_DETACH
GNUPG_SIG_MODE_CLEAR
GNUPG_VALIDITY_UNKNOWN
GNUPG_VALIDITY_UNDEFINED
GNUPG_VALIDITY_NEVER
GNUPG_VALIDITY_MARGINAL
GNUPG_VALIDITY_FULL
GNUPG_VALIDITY_ULTIMATE
GNUPG_PROTOCOL_OpenPGP
GNUPG_PROTOCOL_CMS
GNUPG_SIGSUM_VALID
GNUPG_SIGSUM_GREEN
GNUPG_SIGSUM_RED
GNUPG_SIGSUM_KEY_REVOKED
GNUPG_SIGSUM_KEY_EXPIRED
GNUPG_SIGSUM_KEY_MISSING
GNUPG_SIGSUM_SIG_EXPIRED
GNUPG_SIGSUM_CRL_MISSING
GNUPG_SIGSUM_CRL_TOO_OLD
GNUPG_SIGSUM_BAD_POLICY
GNUPG_SIGSUM_SYS_ERROR
GNUPG_ERROR_WARNING
GNUPG_ERROR_EXCEPTION
GNUPG_ERROR_SILENT
HASH_HMAC
IBASE_BKP_IGNORE_CHECKSUMS
IBASE_BKP_IGNORE_LIMBO
IBASE_BKP_METADATA_ONLY
IBASE_BKP_NO_GARBAGE_COLLECT
IBASE_BKP_OLD_DESCRIPTIONS
IBASE_BKP_NON_TRANSPORTABLE
IBASE_BKP_CONVERT
IBASE_RES_DEACTIVATE_IDX
IBASE_RES_NO_SHADOW
IBASE_RES_NO_VALIDITY
IBASE_RES_ONE_AT_A_TIME
IBASE_RES_REPLACE
IBASE_RES_CREATE
IBASE_RES_USE_ALL_SPACE
IBASE_PRP_PAGE_BUFFERS
IBASE_PRP_SWEEP_INTERVAL
IBASE_PRP_SHUTDOWN_DB
IBASE_PRP_DENY_NEW_TRANSACTIONS
IBASE_PRP_DENY_NEW_ATTACHMENTS
IBASE_PRP_RESERVE_SPACE
IBASE_PRP_RES_USE_FULL
IBASE_PRP_RES
IBASE_PRP_WRITE_MODE
IBASE_PRP_WM_ASYNC
IBASE_PRP_WM_SYNC
IBASE_PRP_ACCESS_MODE
IBASE_PRP_AM_READONLY
IBASE_PRP_AM_READWRITE
IBASE_PRP_SET_SQL_DIALECT
IBASE_PRP_ACTIVATE
IBASE_PRP_DB_ONLINE
IBASE_RPR_CHECK_DB
IBASE_RPR_IGNORE_CHECKSUM
IBASE_RPR_KILL_SHADOWS
IBASE_RPR_MEND_DB
IBASE_RPR_VALIDATE_DB
IBASE_RPR_FULL
IBASE_RPR_SWEEP_DB
IBASE_STS_DATA_PAGES
IBASE_STS_DB_LOG
IBASE_STS_HDR_PAGES
IBASE_STS_IDX_PAGES
IBASE_STS_SYS_RELATIONS
IBASE_SVC_SERVER_VERSION
IBASE_SVC_IMPLEMENTATION
IBASE_SVC_GET_ENV
IBASE_SVC_GET_ENV_LOCK
IBASE_SVC_GET_ENV_MSG
IBASE_SVC_USER_DBPATH
IBASE_SVC_SVR_DB_INFO
IBASE_SVC_GET_USERS
DB2_BINARY
DB2_CONVERT
DB2_PASSTHRU
DB2_SCROLLABLE
DB2_FORWARD_ONLY
DB2_PARAM_IN
DB2_PARAM_OUT
DB2_PARAM_INOUT
DB2_PARAM_FILE
DB2_AUTOCOMMIT_ON
DB2_AUTOCOMMIT_OFF
DB2_DOUBLE
DB2_LONG
DB2_CHAR
DB2_CASE_NATURAL
DB2_CASE_LOWER
DB2_CASE_UPPER
DB2_DEFERRED_PREPARE_ON
DB2_DEFERRED_PREPARE_OFF
ICONV_IMPL
ICONV_VERSION
ICONV_MIME_DECODE_STRICT
ICONV_MIME_DECODE_CONTINUE_ON_ERROR
GD_VERSION
GD_MAJOR_VERSION
GD_MINOR_VERSION
GD_RELEASE_VERSION
GD_EXTRA_VERSION
GD_BUNDLED
IMG_AVIF
IMG_BMP
IMG_GIF
IMG_JPG
IMG_JPEG
IMG_PNG
IMG_TGA
IMG_WBMP
IMG_XPM
IMG_WEBP
IMG_WEBP_LOSSLESS
IMG_COLOR_TILED
IMG_COLOR_STYLED
IMG_COLOR_BRUSHED
IMG_COLOR_STYLEDBRUSHED
IMG_COLOR_TRANSPARENT
IMG_AFFINE_TRANSLATE
IMG_AFFINE_SCALE
IMG_AFFINE_ROTATE
IMG_AFFINE_SHEAR_HORIZONTAL
IMG_AFFINE_SHEAR_VERTICAL
IMG_ARC_ROUNDED
IMG_ARC_PIE
IMG_ARC_CHORD
IMG_ARC_NOFILL
IMG_ARC_EDGED
IMG_GD2_RAW
IMG_GD2_COMPRESSED
IMG_EFFECT_REPLACE
IMG_EFFECT_ALPHABLEND
IMG_EFFECT_NORMAL
IMG_EFFECT_OVERLAY
IMG_EFFECT_MULTIPLY
IMG_FILTER_NEGATE
IMG_FILTER_GRAYSCALE
IMG_FILTER_BRIGHTNESS
IMG_FILTER_CONTRAST
IMG_FILTER_COLORIZE
IMG_FILTER_EDGEDETECT
IMG_FILTER_GAUSSIAN_BLUR
IMG_FILTER_SELECTIVE_BLUR
IMG_FILTER_EMBOSS
IMG_FILTER_MEAN_REMOVAL
IMG_FILTER_SMOOTH
IMG_FILTER_PIXELATE
IMG_FILTER_SCATTER
IMAGETYPE_GIF
IMAGETYPE_JPEG
IMAGETYPE_JPEG2000
IMAGETYPE_PNG
IMAGETYPE_SWF
IMAGETYPE_PSD
IMAGETYPE_BMP
IMAGETYPE_WBMP
IMAGETYPE_XBM
IMAGETYPE_TIFF_II
IMAGETYPE_TIFF_MM
IMAGETYPE_IFF
IMAGETYPE_JB2
IMAGETYPE_JPC
IMAGETYPE_JP2
IMAGETYPE_JPX
IMAGETYPE_SWC
IMAGETYPE_ICO
IMAGETYPE_WEBP
IMAGETYPE_AVIF
IMAGETYPE_UNKNOWN
IMAGETYPE_COUNT
PNG_NO_FILTER
PNG_FILTER_NONE
PNG_FILTER_SUB
PNG_FILTER_UP
PNG_FILTER_AVG
PNG_FILTER_PAETH
PNG_ALL_FILTERS
IMG_FLIP_VERTICAL
IMG_FLIP_HORIZONTAL
IMG_FLIP_BOTH
IMG_BELL
IMG_BESSEL
IMG_BILINEAR_FIXED
IMG_BICUBIC
IMG_BICUBIC_FIXED
IMG_BLACKMAN
IMG_BOX
IMG_BSPLINE
IMG_CATMULLROM
IMG_GAUSSIAN
IMG_GENERALIZED_CUBIC
IMG_HERMITE
IMG_HAMMING
IMG_HANNING
IMG_MITCHELL
IMG_POWER
IMG_QUADRATIC
IMG_SINC
IMG_NEAREST_NEIGHBOUR
IMG_WEIGHTED4
IMG_TRIANGLE
IMG_CROP_BLACK
IMG_CROP_DEFAULT
IMG_CROP_SIDES
IMG_CROP_THRESHOLD
IMG_CROP_TRANSPARENT
IMG_CROP_WHITE
imagick::COLOR_BLACK
imagick::COLOR_BLUE
imagick::COLOR_CYAN
imagick::COLOR_GREEN
imagick::COLOR_RED
imagick::COLOR_YELLOW
imagick::COLOR_MAGENTA
imagick::COLOR_OPACITY
imagick::COLOR_ALPHA
imagick::COLOR_FUZZ
imagick::DISPOSE_UNRECOGNIZED
imagick::DISPOSE_UNDEFINED
imagick::DISPOSE_NONE
imagick::DISPOSE_BACKGROUND
imagick::DISPOSE_PREVIOUS
imagick::COMPOSITE_DEFAULT
imagick::COMPOSITE_UNDEFINED
imagick::COMPOSITE_NO
imagick::COMPOSITE_ADD
imagick::COMPOSITE_ATOP
imagick::COMPOSITE_BLEND
imagick::COMPOSITE_BUMPMAP
imagick::COMPOSITE_CLEAR
imagick::COMPOSITE_COLORBURN
imagick::COMPOSITE_COLORDODGE
imagick::COMPOSITE_COLORIZE
imagick::COMPOSITE_COPYBLACK
imagick::COMPOSITE_COPYBLUE
imagick::COMPOSITE_COPY
imagick::COMPOSITE_COPYCYAN
imagick::COMPOSITE_COPYGREEN
imagick::COMPOSITE_COPYMAGENTA
imagick::COMPOSITE_COPYOPACITY
imagick::COMPOSITE_COPYRED
imagick::COMPOSITE_COPYYELLOW
imagick::COMPOSITE_DARKEN
imagick::COMPOSITE_DSTATOP
imagick::COMPOSITE_DST
imagick::COMPOSITE_DSTIN
imagick::COMPOSITE_DSTOUT
imagick::COMPOSITE_DSTOVER
imagick::COMPOSITE_DIFFERENCE
imagick::COMPOSITE_DISPLACE
imagick::COMPOSITE_DISSOLVE
imagick::COMPOSITE_EXCLUSION
imagick::COMPOSITE_HARDLIGHT
imagick::COMPOSITE_HUE
imagick::COMPOSITE_IN
imagick::COMPOSITE_LIGHTEN
imagick::COMPOSITE_LUMINIZE
imagick::COMPOSITE_MINUS
imagick::COMPOSITE_MODULATE
imagick::COMPOSITE_MULTIPLY
imagick::COMPOSITE_OUT
imagick::COMPOSITE_OVER
imagick::COMPOSITE_OVERLAY
imagick::COMPOSITE_PLUS
imagick::COMPOSITE_REPLACE
imagick::COMPOSITE_SATURATE
imagick::COMPOSITE_SCREEN
imagick::COMPOSITE_SOFTLIGHT
imagick::COMPOSITE_SRCATOP
imagick::COMPOSITE_SRC
imagick::COMPOSITE_SRCIN
imagick::COMPOSITE_SRCOUT
imagick::COMPOSITE_SRCOVER
imagick::COMPOSITE_SUBTRACT
imagick::COMPOSITE_THRESHOLD
imagick::COMPOSITE_XOR
imagick::MONTAGEMODE_FRAME
imagick::MONTAGEMODE_UNFRAME
imagick::MONTAGEMODE_CONCATENATE
imagick::STYLE_NORMAL
imagick::STYLE_ITALIC
imagick::STYLE_OBLIQUE
imagick::STYLE_ANY
imagick::FILTER_UNDEFINED
imagick::FILTER_POINT
imagick::FILTER_BOX
imagick::FILTER_TRIANGLE
imagick::FILTER_HERMITE
imagick::FILTER_HANNING
imagick::FILTER_HAMMING
imagick::FILTER_BLACKMAN
imagick::FILTER_GAUSSIAN
imagick::FILTER_QUADRATIC
imagick::FILTER_CUBIC
imagick::FILTER_CATROM
imagick::FILTER_MITCHELL
imagick::FILTER_LANCZOS
imagick::FILTER_BESSEL
imagick::FILTER_SINC
imagick::IMGTYPE_UNDEFINED
imagick::IMGTYPE_BILEVEL
imagick::IMGTYPE_GRAYSCALE
imagick::IMGTYPE_GRAYSCALEMATTE
imagick::IMGTYPE_PALETTE
imagick::IMGTYPE_PALETTEMATTE
imagick::IMGTYPE_TRUECOLOR
imagick::IMGTYPE_TRUECOLORMATTE
imagick::IMGTYPE_COLORSEPARATION
imagick::IMGTYPE_COLORSEPARATIONMATTE
imagick::IMGTYPE_OPTIMIZE
imagick::RESOLUTION_UNDEFINED
imagick::RESOLUTION_PIXELSPERINCH
imagick::RESOLUTION_PIXELSPERCENTIMETER
imagick::COMPRESSION_UNDEFINED
imagick::COMPRESSION_NO
imagick::COMPRESSION_BZIP
imagick::COMPRESSION_FAX
imagick::COMPRESSION_GROUP4
imagick::COMPRESSION_JPEG
imagick::COMPRESSION_JPEG2000
imagick::COMPRESSION_LOSSLESSJPEG
imagick::COMPRESSION_LZW
imagick::COMPRESSION_RLE
imagick::COMPRESSION_ZIP
imagick::COMPRESSION_DXT1
imagick::COMPRESSION_DXT3
imagick::COMPRESSION_DXT5
imagick::PAINT_POINT
imagick::PAINT_REPLACE
imagick::PAINT_FLOODFILL
imagick::PAINT_FILLTOBORDER
imagick::PAINT_RESET
imagick::GRAVITY_NORTHWEST
imagick::GRAVITY_NORTH
imagick::GRAVITY_NORTHEAST
imagick::GRAVITY_WEST
imagick::GRAVITY_CENTER
imagick::GRAVITY_EAST
imagick::GRAVITY_SOUTHWEST
imagick::GRAVITY_SOUTH
imagick::GRAVITY_SOUTHEAST
imagick::STRETCH_NORMAL
imagick::STRETCH_ULTRACONDENSED
imagick::STRETCH_CONDENSED
imagick::STRETCH_SEMICONDENSED
imagick::STRETCH_SEMIEXPANDED
imagick::STRETCH_EXPANDED
imagick::STRETCH_EXTRAEXPANDED
imagick::STRETCH_ULTRAEXPANDED
imagick::STRETCH_ANY
imagick::ALIGN_UNDEFINED
imagick::ALIGN_LEFT
imagick::ALIGN_CENTER
imagick::ALIGN_RIGHT
imagick::DECORATION_NO
imagick::DECORATION_UNDERLINE
imagick::DECORATION_OVERLINE
imagick::DECORATION_LINETROUGH
imagick::NOISE_UNIFORM
imagick::NOISE_GAUSSIAN
imagick::NOISE_MULTIPLICATIVEGAUSSIAN
imagick::NOISE_IMPULSE
imagick::NOISE_LAPLACIAN
imagick::NOISE_POISSON
imagick::NOISE_RANDOM
imagick::CHANNEL_UNDEFINED
imagick::CHANNEL_RED
imagick::CHANNEL_GRAY
imagick::CHANNEL_CYAN
imagick::CHANNEL_GREEN
imagick::CHANNEL_MAGENTA
imagick::CHANNEL_BLUE
imagick::CHANNEL_YELLOW
imagick::CHANNEL_ALPHA
imagick::CHANNEL_OPACITY
imagick::CHANNEL_MATTE
imagick::CHANNEL_BLACK
imagick::CHANNEL_INDEX
imagick::CHANNEL_ALL
imagick::CHANNEL_DEFAULT
imagick::METRIC_UNDEFINED
imagick::METRIC_MEANABSOLUTEERROR
imagick::METRIC_MEANSQUAREERROR
imagick::METRIC_PEAKABSOLUTEERROR
imagick::METRIC_PEAKSIGNALTONOISERATIO
imagick::METRIC_ROOTMEANSQUAREDERROR
imagick::PIXEL_CHAR
imagick::PIXEL_DOUBLE
imagick::PIXEL_FLOAT
imagick::PIXEL_INTEGER
imagick::PIXEL_LONG
imagick::PIXEL_QUANTUM
imagick::PIXEL_SHORT
imagick::EVALUATE_UNDEFINED
imagick::EVALUATE_ADD
imagick::EVALUATE_AND
imagick::EVALUATE_DIVIDE
imagick::EVALUATE_LEFTSHIFT
imagick::EVALUATE_MAX
imagick::EVALUATE_MIN
imagick::EVALUATE_MULTIPLY
imagick::EVALUATE_OR
imagick::EVALUATE_RIGHTSHIFT
imagick::EVALUATE_SET
imagick::EVALUATE_SUBTRACT
imagick::EVALUATE_XOR
imagick::EVALUATE_POW
imagick::EVALUATE_LOG
imagick::EVALUATE_THRESHOLD
imagick::EVALUATE_THRESHOLDBLACK
imagick::EVALUATE_THRESHOLDWHITE
imagick::EVALUATE_GAUSSIANNOISE
imagick::EVALUATE_IMPULSENOISE
imagick::EVALUATE_LAPLACIANNOISE
imagick::EVALUATE_MULTIPLICATIVENOISE
imagick::EVALUATE_POISSONNOISE
imagick::EVALUATE_UNIFORMNOISE
imagick::EVALUATE_COSINE
imagick::EVALUATE_SINE
imagick::EVALUATE_ADDMODULUS
imagick::COLORSPACE_UNDEFINED
imagick::COLORSPACE_RGB
imagick::COLORSPACE_GRAY
imagick::COLORSPACE_TRANSPARENT
imagick::COLORSPACE_OHTA
imagick::COLORSPACE_LAB
imagick::COLORSPACE_XYZ
imagick::COLORSPACE_YCBCR
imagick::COLORSPACE_YCC
imagick::COLORSPACE_YIQ
imagick::COLORSPACE_YPBPR
imagick::COLORSPACE_YUV
imagick::COLORSPACE_CMYK
imagick::COLORSPACE_SRGB
imagick::COLORSPACE_HSB
imagick::COLORSPACE_HSL
imagick::COLORSPACE_HWB
imagick::COLORSPACE_REC601LUMA
imagick::COLORSPACE_REC709LUMA
imagick::COLORSPACE_LOG
imagick::COLORSPACE_CMY
imagick::VIRTUALPIXELMETHOD_UNDEFINED
imagick::VIRTUALPIXELMETHOD_BACKGROUND
imagick::VIRTUALPIXELMETHOD_CONSTANT
imagick::VIRTUALPIXELMETHOD_EDGE
imagick::VIRTUALPIXELMETHOD_MIRROR
imagick::VIRTUALPIXELMETHOD_TILE
imagick::VIRTUALPIXELMETHOD_TRANSPARENT
imagick::VIRTUALPIXELMETHOD_MASK
imagick::VIRTUALPIXELMETHOD_BLACK
imagick::VIRTUALPIXELMETHOD_GRAY
imagick::VIRTUALPIXELMETHOD_WHITE
imagick::VIRTUALPIXELMETHOD_HORIZONTALTILE
imagick::VIRTUALPIXELMETHOD_VERTICALTILE
imagick::PREVIEW_UNDEFINED
imagick::PREVIEW_ROTATE
imagick::PREVIEW_SHEAR
imagick::PREVIEW_ROLL
imagick::PREVIEW_HUE
imagick::PREVIEW_SATURATION
imagick::PREVIEW_BRIGHTNESS
imagick::PREVIEW_GAMMA
imagick::PREVIEW_SPIFF
imagick::PREVIEW_DULL
imagick::PREVIEW_GRAYSCALE
imagick::PREVIEW_QUANTIZE
imagick::PREVIEW_DESPECKLE
imagick::PREVIEW_REDUCENOISE
imagick::PREVIEW_ADDNOISE
imagick::PREVIEW_SHARPEN
imagick::PREVIEW_BLUR
imagick::PREVIEW_THRESHOLD
imagick::PREVIEW_EDGEDETECT
imagick::PREVIEW_SPREAD
imagick::PREVIEW_SOLARIZE
imagick::PREVIEW_SHADE
imagick::PREVIEW_RAISE
imagick::PREVIEW_SEGMENT
imagick::PREVIEW_SWIRL
imagick::PREVIEW_IMPLODE
imagick::PREVIEW_WAVE
imagick::PREVIEW_OILPAINT
imagick::PREVIEW_CHARCOALDRAWING
imagick::PREVIEW_JPEG
imagick::RENDERINGINTENT_UNDEFINED
imagick::RENDERINGINTENT_SATURATION
imagick::RENDERINGINTENT_PERCEPTUAL
imagick::RENDERINGINTENT_ABSOLUTE
imagick::RENDERINGINTENT_RELATIVE
imagick::INTERLACE_UNDEFINED
imagick::INTERLACE_NO
imagick::INTERLACE_LINE
imagick::INTERLACE_PLANE
imagick::INTERLACE_PARTITION
imagick::INTERLACE_GIF
imagick::INTERLACE_JPEG
imagick::INTERLACE_PNG
imagick::FILLRULE_UNDEFINED
imagick::FILLRULE_EVENODD
imagick::FILLRULE_NONZERO
imagick::PATHUNITS_UNDEFINED
imagick::PATHUNITS_USERSPACE
imagick::PATHUNITS_USERSPACEONUSE
imagick::PATHUNITS_OBJECTBOUNDINGBOX
imagick::LINECAP_UNDEFINED
imagick::LINECAP_BUTT
imagick::LINECAP_ROUND
imagick::LINECAP_SQUARE
imagick::LINEJOIN_UNDEFINED
imagick::LINEJOIN_MITER
imagick::LINEJOIN_ROUND
imagick::LINEJOIN_BEVEL
imagick::RESOURCETYPE_UNDEFINED
imagick::RESOURCETYPE_AREA
imagick::RESOURCETYPE_DISK
imagick::RESOURCETYPE_FILE
imagick::RESOURCETYPE_MAP
imagick::RESOURCETYPE_MEMORY
imagick::RESOURCETYPE_THREAD
imagick::LAYERMETHOD_UNDEFINED
imagick::LAYERMETHOD_COALESCE
imagick::LAYERMETHOD_COMPAREANY
imagick::LAYERMETHOD_COMPARECLEAR
imagick::LAYERMETHOD_COMPAREOVERLAY
imagick::LAYERMETHOD_DISPOSE
imagick::LAYERMETHOD_OPTIMIZE
imagick::LAYERMETHOD_OPTIMIZEPLUS
imagick::LAYERMETHOD_OPTIMIZEIMAGE
imagick::LAYERMETHOD_OPTIMIZETRANS
imagick::LAYERMETHOD_REMOVEDUPS
imagick::LAYERMETHOD_REMOVEZERO
imagick::LAYERMETHOD_COMPOSITE
imagick::LAYERMETHOD_MERGE
imagick::LAYERMETHOD_FLATTEN
imagick::LAYERMETHOD_MOSAIC
imagick::ORIENTATION_UNDEFINED
imagick::ORIENTATION_TOPLEFT
imagick::ORIENTATION_TOPRIGHT
imagick::ORIENTATION_BOTTOMRIGHT
imagick::ORIENTATION_BOTTOMLEFT
imagick::ORIENTATION_LEFTTOP
imagick::ORIENTATION_RIGHTTOP
imagick::ORIENTATION_RIGHTBOTTOM
imagick::ORIENTATION_LEFTBOTTOM
imagick::DISTORTION_UNDEFINED
imagick::DISTORTION_AFFINE
imagick::DISTORTION_AFFINEPROJECTION
imagick::DISTORTION_ARC
imagick::DISTORTION_BILINEAR
imagick::DISTORTION_PERSPECTIVE
imagick::DISTORTION_PERSPECTIVEPROJECTION
imagick::DISTORTION_SCALEROTATETRANSLATE
imagick::DISTORTION_POLYNOMIAL
imagick::DISTORTION_POLAR
imagick::DISTORTION_DEPOLAR
imagick::DISTORTION_BARREL
imagick::DISTORTION_BARRELINVERSE
imagick::DISTORTION_SHEPARDS
imagick::DISTORTION_SENTINEL
imagick::ALPHACHANNEL_ACTIVATE
imagick::ALPHACHANNEL_DEACTIVATE
imagick::ALPHACHANNEL_RESET
imagick::ALPHACHANNEL_SET
imagick::ALPHACHANNEL_UNDEFINED
imagick::ALPHACHANNEL_COPY
imagick::ALPHACHANNEL_EXTRACT
imagick::ALPHACHANNEL_OPAQUE
imagick::ALPHACHANNEL_SHAPE
imagick::ALPHACHANNEL_TRANSPARENT
imagick::ALPHACHANNEL_BACKGROUND
imagick::ALPHACHANNEL_REMOVE
imagick::ALPHACHANNEL_ASSOCIATE
imagick::ALPHACHANNEL_DISSOCIATE
imagick::ALPHACHANNEL_ON
imagick::ALPHACHANNEL_OFF
imagick::ALPHACHANNEL_DISCRETE
imagick::SPARSECOLORMETHOD_UNDEFINED
imagick::SPARSECOLORMETHOD_BARYCENTRIC
imagick::SPARSECOLORMETHOD_BILINEAR
imagick::SPARSECOLORMETHOD_POLYNOMIAL
imagick::SPARSECOLORMETHOD_SPEPARDS
imagick::SPARSECOLORMETHOD_VORONOI
imagick::FUNCTION_UNDEFINED
imagick::FUNCTION_POLYNOMIAL
imagick::FUNCTION_SINUSOID
imagick::INTERPOLATE_UNDEFINED
imagick::INTERPOLATE_AVERAGE
imagick::INTERPOLATE_BICUBIC
imagick::INTERPOLATE_BILINEAR
imagick::INTERPOLATE_FILTER
imagick::INTERPOLATE_INTEGER
imagick::INTERPOLATE_MESH
imagick::INTERPOLATE_NEARESTNEIGHBOR
imagick::INTERPOLATE_SPLINE
imagick::DITHERMETHOD_UNDEFINED
imagick::DITHERMETHOD_NO
imagick::DITHERMETHOD_RIEMERSMA
imagick::DITHERMETHOD_FLOYDSTEINBERG
NIL
OP_DEBUG
OP_READONLY
OP_ANONYMOUS
OP_SHORTCACHE
OP_SILENT
OP_PROTOTYPE
OP_HALFOPEN
OP_EXPUNGE
OP_SECURE
CL_EXPUNGE
FT_UID
FT_PEEK
FT_NOT
FT_INTERNAL
FT_PREFETCHTEXT
ST_UID
ST_SILENT
ST_SET
CP_UID
CP_MOVE
SE_UID
SE_FREE
SE_NOPREFETCH
SO_FREE
SO_NOSERVER
SA_MESSAGES
SA_RECENT
SA_UNSEEN
SA_UIDNEXT
SA_UIDVALIDITY
SA_ALL
LATT_NOINFERIORS
LATT_NOSELECT
LATT_MARKED
LATT_UNMARKED
LATT_REFERRAL
LATT_HASCHILDREN
LATT_HASNOCHILDREN
SORTDATE
SORTARRIVAL
SORTFROM
SORTSUBJECT
SORTTO
SORTCC
SORTSIZE
TYPETEXT
TYPEMULTIPART
TYPEMESSAGE
TYPEAPPLICATION
TYPEAUDIO
TYPEIMAGE
TYPEVIDEO
TYPEMODEL
TYPEOTHER
ENC7BIT
ENC8BIT
ENCBINARY
ENCBASE64
ENCQUOTEDPRINTABLE
ENCOTHER
IMAP_OPENTIMEOUT
IMAP_READTIMEOUT
IMAP_WRITETIMEOUT
IMAP_CLOSETIMEOUT
IMAP_GC_ELT
IMAP_GC_ENV
IMAP_GC_TEXTS
CREDITS_GROUP
CREDITS_GENERAL
CREDITS_SAPI
CREDITS_MODULES
CREDITS_DOCS
CREDITS_FULLPAGE
CREDITS_QA
CREDITS_ALL
INFO_GENERAL
INFO_CREDITS
INFO_CONFIGURATION
INFO_MODULES
INFO_ENVIRONMENT
INFO_VARIABLES
INFO_LICENSE
INFO_ALL
INI_USER
INI_PERDIR
INI_SYSTEM
INI_ALL
ASSERT_ACTIVE
ASSERT_CALLBACK
ASSERT_BAIL
ASSERT_EXCEPTION
ASSERT_WARNING
ASSERT_QUIET_EVAL
PHP_WINDOWS_VERSION_MAJOR
PHP_WINDOWS_VERSION_MINOR
PHP_WINDOWS_VERSION_BUILD
PHP_WINDOWS_VERSION_PLATFORM
PHP_WINDOWS_VERSION_SP_MAJOR
PHP_WINDOWS_VERSION_SP_MINOR
PHP_WINDOWS_VERSION_SUITEMASK
PHP_WINDOWS_VERSION_PRODUCTTYPE
PHP_WINDOWS_NT_DOMAIN_CONTROLLER
PHP_WINDOWS_NT_SERVER
PHP_WINDOWS_NT_WORKSTATION
IN_ACCESS
IN_MODIFY
IN_ATTRIB
IN_CLOSE_WRITE
IN_CLOSE_NOWRITE
IN_OPEN
IN_MOVED_TO
IN_MOVED_FROM
IN_CREATE
IN_DELETE
IN_DELETE_SELF
IN_MOVE_SELF
IN_CLOSE
IN_MOVE
IN_ALL_EVENTS
IN_UNMOUNT
IN_Q_OVERFLOW
IN_IGNORED
IN_ISDIR
IN_ONLYDIR
IN_DONT_FOLLOW
IN_MASK_ADD
IN_ONESHOT
INTL_ICU_DATA_VERSION
INTL_ICU_VERSION
INTL_MAX_LOCALE_LEN
IDNA_DEFAULT
IDNA_ALLOW_UNASSIGNED
IDNA_USE_STD3_RULES
IDNA_CHECK_BIDI
IDNA_CHECK_CONTEXTJ
IDNA_NONTRANSITIONAL_TO_ASCII
IDNA_NONTRANSITIONAL_TO_UNICODE
INTL_IDNA_VARIANT_2003
INTL_IDNA_VARIANT_UTS46
GRAPHEME_EXTR_COUNT
GRAPHEME_EXTR_MAXBYTES
GRAPHEME_EXTR_MAXCHARS
IDNA_ERROR_EMPTY_LABEL
IDNA_ERROR_LABEL_TOO_LONG
IDNA_ERROR_DOMAIN_NAME_TOO_LONG
IDNA_ERROR_LEADING_HYPHEN
IDNA_ERROR_TRAILING_HYPHEN
IDNA_ERROR_HYPHEN_3_4
IDNA_ERROR_LEADING_COMBINING_MARK
IDNA_ERROR_DISALLOWED
IDNA_ERROR_PUNYCODE
IDNA_ERROR_LABEL_HAS_DOT
IDNA_ERROR_INVALID_ACE_LABEL
IDNA_ERROR_BIDI
IDNA_ERROR_CONTEXTJ
ULOC_ACTUAL_LOCALE
ULOC_VALID_LOCALE
U_AMBIGUOUS_ALIAS_WARNING
U_BAD_VARIABLE_DEFINITION
U_BRK_ASSIGN_ERROR
U_BRK_ERROR_LIMIT
U_BRK_ERROR_START
U_BRK_HEX_DIGITS_EXPECTED
U_BRK_INIT_ERROR
U_BRK_INTERNAL_ERROR
U_BRK_MALFORMED_RULE_TAG
U_BRK_MISMATCHED_PAREN
U_BRK_NEW_LINE_IN_QUOTED_STRING
U_BRK_RULE_EMPTY_SET
U_BRK_RULE_SYNTAX
U_BRK_SEMICOLON_EXPECTED
U_BRK_UNCLOSED_SET
U_BRK_UNDEFINED_VARIABLE
U_BRK_UNRECOGNIZED_OPTION
U_BRK_VARIABLE_REDFINITION
U_BUFFER_OVERFLOW_ERROR
U_CE_NOT_FOUND_ERROR
U_COLLATOR_VERSION_MISMATCH
U_DIFFERENT_UCA_VERSION
U_ENUM_OUT_OF_SYNC_ERROR
U_ERROR_LIMIT
U_ERROR_WARNING_LIMIT
U_ERROR_WARNING_START
U_FILE_ACCESS_ERROR
U_FMT_PARSE_ERROR_LIMIT
U_FMT_PARSE_ERROR_START
U_IDNA_ACE_PREFIX_ERROR
U_IDNA_CHECK_BIDI_ERROR
U_IDNA_DOMAIN_NAME_TOO_LONG_ERROR
U_IDNA_ERROR_LIMIT
U_IDNA_ERROR_START
U_IDNA_LABEL_TOO_LONG_ERROR
U_IDNA_PROHIBITED_ERROR
U_IDNA_STD3_ASCII_RULES_ERROR
U_IDNA_UNASSIGNED_ERROR
U_IDNA_VERIFICATION_ERROR
U_IDNA_ZERO_LENGTH_LABEL_ERROR
U_ILLEGAL_ARGUMENT_ERROR
U_ILLEGAL_CHAR_FOUND
U_ILLEGAL_CHAR_IN_SEGMENT
U_ILLEGAL_CHARACTER
U_ILLEGAL_ESCAPE_SEQUENCE
U_ILLEGAL_PAD_POSITION
U_INDEX_OUTOFBOUNDS_ERROR
U_INTERNAL_PROGRAM_ERROR
U_INTERNAL_TRANSLITERATOR_ERROR
U_INVALID_CHAR_FOUND
U_INVALID_FORMAT_ERROR
U_INVALID_FUNCTION
U_INVALID_ID
U_INVALID_PROPERTY_PATTERN
U_INVALID_RBT_SYNTAX
U_INVALID_STATE_ERROR
U_INVALID_TABLE_FILE
U_INVALID_TABLE_FORMAT
U_INVARIANT_CONVERSION_ERROR
U_MALFORMED_EXPONENTIAL_PATTERN
U_MALFORMED_PRAGMA
U_MALFORMED_RULE
U_MALFORMED_SET
U_MALFORMED_SYMBOL_REFERENCE
U_MALFORMED_UNICODE_ESCAPE
U_MALFORMED_VARIABLE_DEFINITION
U_MALFORMED_VARIABLE_REFERENCE
U_MEMORY_ALLOCATION_ERROR
U_MESSAGE_PARSE_ERROR
U_MISMATCHED_SEGMENT_DELIMITERS
U_MISPLACED_ANCHOR_START
U_MISPLACED_COMPOUND_FILTER
U_MISPLACED_CURSOR_OFFSET
U_MISPLACED_QUANTIFIER
U_MISSING_OPERATOR
U_MISSING_RESOURCE_ERROR
U_MISSING_SEGMENT_CLOSE
U_MULTIPLE_ANTE_CONTEXTS
U_MULTIPLE_COMPOUND_FILTERS
U_MULTIPLE_CURSORS
U_MULTIPLE_DECIMAL_SEPARATORS
U_MULTIPLE_DECIMAL_SEPERATORS
U_MULTIPLE_EXPONENTIAL_SYMBOLS
U_MULTIPLE_PAD_SPECIFIERS
U_MULTIPLE_PERCENT_SYMBOLS
U_MULTIPLE_PERMILL_SYMBOLS
U_MULTIPLE_POST_CONTEXTS
U_NO_SPACE_AVAILABLE
U_NO_WRITE_PERMISSION
U_PARSE_ERROR
U_PARSE_ERROR_LIMIT
U_PARSE_ERROR_START
U_PATTERN_SYNTAX_ERROR
U_PRIMARY_TOO_LONG_ERROR
U_REGEX_BAD_ESCAPE_SEQUENCE
U_REGEX_BAD_INTERVAL
U_REGEX_ERROR_LIMIT
U_REGEX_ERROR_START
U_REGEX_INTERNAL_ERROR
U_REGEX_INVALID_BACK_REF
U_REGEX_INVALID_FLAG
U_REGEX_INVALID_STATE
U_REGEX_LOOK_BEHIND_LIMIT
U_REGEX_MAX_LT_MIN
U_REGEX_MISMATCHED_PAREN
U_REGEX_NUMBER_TOO_BIG
U_REGEX_PROPERTY_SYNTAX
U_REGEX_RULE_SYNTAX
U_REGEX_SET_CONTAINS_STRING
U_REGEX_UNIMPLEMENTED
U_RESOURCE_TYPE_MISMATCH
U_RULE_MASK_ERROR
U_SAFECLONE_ALLOCATED_WARNING
U_SORT_KEY_TOO_SHORT_WARNING
U_STANDARD_ERROR_LIMIT
U_STATE_OLD_WARNING
U_STATE_TOO_OLD_ERROR
U_STRING_NOT_TERMINATED_WARNING
U_STRINGPREP_CHECK_BIDI_ERROR
U_STRINGPREP_PROHIBITED_ERROR
U_STRINGPREP_UNASSIGNED_ERROR
U_TOO_MANY_ALIASES_ERROR
U_TRAILING_BACKSLASH
U_TRUNCATED_CHAR_FOUND
U_UNCLOSED_SEGMENT
U_UNDEFINED_SEGMENT_REFERENCE
U_UNDEFINED_VARIABLE
U_UNEXPECTED_TOKEN
U_UNMATCHED_BRACES
U_UNQUOTED_SPECIAL
U_UNSUPPORTED_ATTRIBUTE
U_UNSUPPORTED_ERROR
U_UNSUPPORTED_ESCAPE_SEQUENCE
U_UNSUPPORTED_PROPERTY
U_UNTERMINATED_QUOTE
U_USELESS_COLLATOR_ERROR
U_USING_DEFAULT_WARNING
U_USING_FALLBACK_WARNING
U_VARIABLE_RANGE_EXHAUSTED
U_VARIABLE_RANGE_OVERLAP
U_ZERO_ERROR
JSON_ERROR_NONE
JSON_ERROR_DEPTH
JSON_ERROR_STATE_MISMATCH
JSON_ERROR_CTRL_CHAR
JSON_ERROR_SYNTAX
JSON_ERROR_UTF8
JSON_ERROR_RECURSION
JSON_ERROR_INF_OR_NAN
JSON_ERROR_UNSUPPORTED_TYPE
JSON_ERROR_INVALID_PROPERTY_NAME
JSON_ERROR_UTF16
JSON_ERROR_NON_BACKED_ENUM
JSON_BIGINT_AS_STRING
JSON_OBJECT_AS_ARRAY
JSON_HEX_TAG
JSON_HEX_AMP
JSON_HEX_APOS
JSON_HEX_QUOT
JSON_FORCE_OBJECT
JSON_NUMERIC_CHECK
JSON_PRETTY_PRINT
JSON_UNESCAPED_SLASHES
JSON_UNESCAPED_UNICODE
JSON_PARTIAL_OUTPUT_ON_ERROR
JSON_PRESERVE_ZERO_FRACTION
JSON_UNESCAPED_LINE_TERMINATORS
JSON_INVALID_UTF8_IGNORE
JSON_INVALID_UTF8_SUBSTITUTE
JSON_THROW_ON_ERROR
LDAP_DEREF_NEVER
LDAP_DEREF_SEARCHING
LDAP_DEREF_FINDING
LDAP_DEREF_ALWAYS
LDAP_OPT_DEREF
LDAP_OPT_SIZELIMIT
LDAP_OPT_TIMELIMIT
LDAP_OPT_NETWORK_TIMEOUT
LDAP_OPT_PROTOCOL_VERSION
LDAP_OPT_ERROR_NUMBER
LDAP_OPT_REFERRALS
LDAP_OPT_RESTART
LDAP_OPT_HOST_NAME
LDAP_OPT_ERROR_STRING
LDAP_OPT_DIAGNOSTIC_MESSAGE
LDAP_OPT_MATCHED_DN
LDAP_OPT_SERVER_CONTROLS
LDAP_OPT_CLIENT_CONTROLS
LDAP_OPT_DEBUG_LEVEL
LDAP_OPT_X_KEEPALIVE_IDLE
LDAP_OPT_X_KEEPALIVE_PROBES
LDAP_OPT_X_KEEPALIVE_INTERVAL
LDAP_OPT_X_TLS_CACERTDIR
LDAP_OPT_X_TLS_CACERTFILE
LDAP_OPT_X_TLS_CERTFILE
LDAP_OPT_X_TLS_CIPHER_SUITE
LDAP_OPT_X_TLS_CRLCHECK
LDAP_OPT_X_TLS_CRLFILE
LDAP_OPT_X_TLS_DHFILE
LDAP_OPT_X_TLS_KEYFILE
LDAP_OPT_X_TLS_PROTOCOL_MIN
LDAP_OPT_X_TLS_RANDOM_FILE
LDAP_OPT_X_TLS_REQUIRE_CERT
GSLC_SSL_NO_AUTH
GSLC_SSL_ONEWAY_AUTH
GSLC_SSL_TWOWAY_AUTH
LDAP_EXOP_START_TLS
LDAP_EXOP_MODIFY_PASSWD
LDAP_EXOP_REFRESH
LDAP_EXOP_WHO_AM_I
LDAP_EXOP_TURN
LDAP_CONTROL_MANAGEDSAIT
LDAP_CONTROL_PROXY_AUTHZ
LDAP_CONTROL_SUBENTRIES
LDAP_CONTROL_VALUESRETURNFILTER
LDAP_CONTROL_ASSERT
LDAP_CONTROL_PRE_READ
LDAP_CONTROL_POST_READ
LDAP_CONTROL_SORTREQUEST
LDAP_CONTROL_SORTRESPONSE
LDAP_CONTROL_PAGEDRESULTS
LDAP_CONTROL_AUTHZID_REQUEST
LDAP_CONTROL_AUTHZID_RESPONSE
LDAP_CONTROL_SYNC
LDAP_CONTROL_SYNC_STATE
LDAP_CONTROL_SYNC_DONE
LDAP_CONTROL_DONTUSECOPY
LDAP_CONTROL_PASSWORDPOLICYREQUEST
LDAP_CONTROL_PASSWORDPOLICYRESPONSE
LDAP_CONTROL_X_INCREMENTAL_VALUES
LDAP_CONTROL_X_DOMAIN_SCOPE
LDAP_CONTROL_X_PERMISSIVE_MODIFY
LDAP_CONTROL_X_SEARCH_OPTIONS
LDAP_CONTROL_X_TREE_DELETE
LDAP_CONTROL_X_EXTENDED_DN
LDAP_CONTROL_VLVREQUEST
LDAP_CONTROL_VLVRESPONSE
LDAP_ESCAPE_DN
LDAP_ESCAPE_FILTER
LDAP_MODIFY_BATCH_ATTRIB
LDAP_MODIFY_BATCH_MODTYPE
LDAP_MODIFY_BATCH_VALUES
LDAP_MODIFY_BATCH_ADD
LDAP_MODIFY_BATCH_REMOVE
LDAP_MODIFY_BATCH_REMOVE_ALL
LDAP_MODIFY_BATCH_REPLACE
LDAP_OPT_TIMEOUT
LDAP_OPT_X_SASL_AUTHCID
LDAP_OPT_X_SASL_AUTHZID
LDAP_OPT_X_SASL_MECH
LDAP_OPT_X_SASL_NOCANON
LDAP_OPT_X_SASL_REALM
LDAP_OPT_X_SASL_USERNAME
LDAP_OPT_X_TLS_ALLOW
LDAP_OPT_X_TLS_DEMAND
LDAP_OPT_X_TLS_HARD
LDAP_OPT_X_TLS_NEVER
LDAP_OPT_X_TLS_TRY
LDAP_OPT_X_TLS_CRL_ALL
LDAP_OPT_X_TLS_CRL_NONE
LDAP_OPT_X_TLS_CRL_PEER
LDAP_OPT_X_TLS_PACKAGE
LDAP_OPT_X_TLS_PROTOCOL_SSL2
LDAP_OPT_X_TLS_PROTOCOL_SSL3
LDAP_OPT_X_TLS_PROTOCOL_TLS1_0
LDAP_OPT_X_TLS_PROTOCOL_TLS1_1
LDAP_OPT_X_TLS_PROTOCOL_TLS1_2
LIBXML_BIGLINES
LIBXML_COMPACT
LIBXML_DTDATTR
LIBXML_DTDLOAD
LIBXML_DTDVALID
LIBXML_HTML_NOIMPLIED
LIBXML_HTML_NODEFDTD
LIBXML_LOADED_VERSION
LIBXML_NOBLANKS
LIBXML_NOCDATA
LIBXML_NOEMPTYTAG
LIBXML_NOENT
LIBXML_NOERROR
LIBXML_NONET
LIBXML_NOWARNING
LIBXML_NOXMLDECL
LIBXML_NO_XXE
LIBXML_NSCLEAN
LIBXML_PARSEHUGE
LIBXML_PEDANTIC
LIBXML_RECOVER
LIBXML_XINCLUDE
LIBXML_ERR_ERROR
LIBXML_ERR_FATAL
LIBXML_ERR_NONE
LIBXML_ERR_WARNING
LIBXML_VERSION
LIBXML_DOTTED_VERSION
LIBXML_SCHEMA_CREATE
MAILPARSE_EXTRACT_OUTPUT
MAILPARSE_EXTRACT_STREAM
MAILPARSE_EXTRACT_RETURN
M_PI
M_E
M_LOG2E
M_LOG10E
M_LN2
M_LN10
M_PI_2
M_PI_4
M_1_PI
M_2_PI
M_SQRTPI
M_2_SQRTPI
M_SQRT2
M_SQRT3
M_SQRT1_2
M_LNPI
M_EULER
NAN
INF
PHP_ROUND_HALF_UP
PHP_ROUND_HALF_DOWN
PHP_ROUND_HALF_EVEN
PHP_ROUND_HALF_ODD
MB_OVERLOAD_MAIL
MB_OVERLOAD_STRING
MB_OVERLOAD_REGEX
MB_CASE_UPPER
MB_CASE_LOWER
MB_CASE_TITLE
MB_CASE_FOLD
MB_CASE_LOWER_SIMPLE
MB_CASE_UPPER_SIMPLE
MB_CASE_TITLE_SIMPLE
MB_CASE_FOLD_SIMPLE
MB_ONIGURUMA_VERSION
MCRYPT_ENCRYPT
MCRYPT_DECRYPT
MCRYPT_DEV_RANDOM
MCRYPT_DEV_URANDOM
MCRYPT_RAND
MEMCACHE_COMPRESSED
MEMCACHE_HAVE_SESSION
MEMCACHE_USER1
MEMCACHE_USER2
MEMCACHE_USER3
MEMCACHE_USER4
Memcached::OPT_COMPRESSION
Memcached::OPT_COMPRESSION_TYPE
Memcached::COMPRESSION_FASTLZ
Memcached::COMPRESSION_ZLIB
Memcached::COMPRESSION_ZSTD
Memcached::OPT_COMPRESSION_LEVEL
Memcached::OPT_SERIALIZER
Memcached::SERIALIZER_PHP
Memcached::SERIALIZER_IGBINARY
Memcached::SERIALIZER_JSON
Memcached::SERIALIZER_JSON_ARRAY
Memcached::SERIALIZER_MSGPACK
Memcached::OPT_PREFIX_KEY
Memcached::OPT_HASH
Memcached::HASH_DEFAULT
Memcached::HASH_MD5
Memcached::HASH_CRC
Memcached::HASH_FNV1_64
Memcached::HASH_FNV1A_64
Memcached::HASH_FNV1_32
Memcached::HASH_FNV1A_32
Memcached::HASH_HSIEH
Memcached::HASH_MURMUR
Memcached::OPT_DISTRIBUTION
Memcached::DISTRIBUTION_MODULA
Memcached::DISTRIBUTION_CONSISTENT
Memcached::DISTRIBUTION_VIRTUAL_BUCKET
Memcached::OPT_LIBKETAMA_COMPATIBLE
Memcached::OPT_LIBKETAMA_HASH
Memcached::OPT_TCP_KEEPALIVE
Memcached::OPT_BUFFER_WRITES
Memcached::OPT_BINARY_PROTOCOL
Memcached::OPT_NO_BLOCK
Memcached::OPT_NOREPLY
Memcached::OPT_TCP_NODELAY
Memcached::OPT_SOCKET_SEND_SIZE
Memcached::OPT_SOCKET_RECV_SIZE
Memcached::OPT_CONNECT_TIMEOUT
Memcached::OPT_RETRY_TIMEOUT
Memcached::OPT_DEAD_TIMEOUT
Memcached::OPT_SEND_TIMEOUT
Memcached::OPT_RECV_TIMEOUT
Memcached::OPT_POLL_TIMEOUT
Memcached::OPT_CACHE_LOOKUPS
Memcached::OPT_SERVER_FAILURE_LIMIT
Memcached::OPT_SERVER_TIMEOUT_LIMIT
Memcached::OPT_AUTO_EJECT_HOSTS
Memcached::OPT_VERIFY_KEY
Memcached::OPT_USE_UDP
Memcached::OPT_NUMBER_OF_REPLICAS
Memcached::OPT_RANDOMIZE_REPLICA_READS
Memcached::OPT_REMOVE_FAILED_SERVERS
Memcached::HAVE_IGBINARY
Memcached::HAVE_JSON
Memcached::HAVE_MSGPACK
Memcached::HAVE_ZSTD
Memcached::HAVE_ENCODING
Memcached::HAVE_SESSION
Memcached::HAVE_SASL
Memcached::GET_EXTENDED
Memcached::GET_PRESERVE_ORDER
Memcached::RES_SUCCESS
Memcached::RES_FAILURE
Memcached::RES_HOST_LOOKUP_FAILURE
Memcached::RES_UNKNOWN_READ_FAILURE
Memcached::RES_PROTOCOL_ERROR
Memcached::RES_CLIENT_ERROR
Memcached::RES_SERVER_ERROR
Memcached::RES_WRITE_FAILURE
Memcached::RES_DATA_EXISTS
Memcached::RES_NOTSTORED
Memcached::RES_NOTFOUND
Memcached::RES_PARTIAL_READ
Memcached::RES_SOME_ERRORS
Memcached::RES_NO_SERVERS
Memcached::RES_END
Memcached::RES_ERRNO
Memcached::RES_BUFFERED
Memcached::RES_TIMEOUT
Memcached::RES_BAD_KEY_PROVIDED
Memcached::RES_STORED
Memcached::RES_DELETED
Memcached::RES_STAT
Memcached::RES_ITEM
Memcached::RES_NOT_SUPPORTED
Memcached::RES_FETCH_NOTFINISHED
Memcached::RES_SERVER_MARKED_DEAD
Memcached::RES_UNKNOWN_STAT_KEY
Memcached::RES_INVALID_HOST_PROTOCOL
Memcached::RES_MEMORY_ALLOCATION_FAILURE
Memcached::RES_CONNECTION_SOCKET_CREATE_FAILURE
Memcached::RES_PAYLOAD_FAILURE
Memcached::RES_AUTH_PROBLEM
Memcached::RES_AUTH_FAILURE
Memcached::RES_AUTH_CONTINUE
Memcached::RES_E2BIG
Memcached::RES_KEY_TOO_BIG
Memcached::RES_SERVER_TEMPORARILY_DISABLED
Memcached::RES_SERVER_MEMORY_ALLOCATION_FAILURE
MHASH_ADLER32
MHASH_CRC32
MHASH_CRC32B
MHASH_CRC32C
MHASH_FNV132
MHASH_FNV1A32
MHASH_FNV164
MHASH_FNV1A64
MHASH_GOST
MHASH_HAVAL128
MHASH_HAVAL160
MHASH_HAVAL192
MHASH_HAVAL224
MHASH_HAVAL256
MHASH_JOAAT
MHASH_MD2
MHASH_MD4
MHASH_MD5
MHASH_MURMUR3A
MHASH_MURMUR3C
MHASH_MURMUR3F
MHASH_RIPEMD128
MHASH_RIPEMD160
MHASH_RIPEMD256
MHASH_RIPEMD320
MHASH_SHA1
MHASH_SHA224
MHASH_SHA256
MHASH_SHA384
MHASH_SHA512
MHASH_SNEFRU256
MHASH_TIGER
MHASH_TIGER128
MHASH_TIGER160
MHASH_WHIRLPOOL
MHASH_XXH32
MHASH_XXH64
MHASH_XXH3
MHASH_XXH128
CONNECTION_ABORTED
CONNECTION_NORMAL
CONNECTION_TIMEOUT
__COMPILER_HALT_OFFSET__
MONGODB_VERSION
MONGODB_STABILITY
MQSERIES_MQCC_OK
MQSERIES_MQCC_WARNING
MQSERIES_MQCC_FAILED
MQSERIES_MQCC_UNKNOWN
MYSQL_CLIENT_COMPRESS
MYSQL_CLIENT_IGNORE_SPACE
MYSQL_CLIENT_INTERACTIVE
MYSQL_CLIENT_SSL
MYSQL_ASSOC
MYSQL_BOTH
MYSQL_NUM
MYSQLX_CLIENT_SSL
MYSQLX_TYPE_DECIMAL
MYSQLX_TYPE_TINY
MYSQLX_TYPE_SHORT
MYSQLX_TYPE_SMALLINT
MYSQLX_TYPE_MEDIUMINT
MYSQLX_TYPE_INT
MYSQLX_TYPE_BIGINT
MYSQLX_TYPE_LONG
MYSQLX_TYPE_FLOAT
MYSQLX_TYPE_DOUBLE
MYSQLX_TYPE_NULL
MYSQLX_TYPE_TIMESTAMP
MYSQLX_TYPE_LONGLONG
MYSQLX_TYPE_INT24
MYSQLX_TYPE_DATE
MYSQLX_TYPE_TIME
MYSQLX_TYPE_DATETIME
MYSQLX_TYPE_YEAR
MYSQLX_TYPE_NEWDATE
MYSQLX_TYPE_ENUM
MYSQLX_TYPE_SET
MYSQLX_TYPE_TINY_BLOB
MYSQLX_TYPE_MEDIUM_BLOB
MYSQLX_TYPE_LONG_BLOB
MYSQLX_TYPE_BLOB
MYSQLX_TYPE_VAR_STRING
MYSQLX_TYPE_STRING
MYSQLX_TYPE_CHAR
MYSQLX_TYPE_BYTES
MYSQLX_TYPE_INTERVAL
MYSQLX_TYPE_GEOMETRY
MYSQLX_TYPE_JSON
MYSQLX_TYPE_NEWDECIMAL
MYSQLX_TYPE_BIT
MYSQLX_LOCK_DEFAULT
MYSQLX_LOCK_NOWAIT
MYSQLX_LOCK_SKIP_LOCKED
MYSQLI_READ_DEFAULT_GROUP
MYSQLI_READ_DEFAULT_FILE
MYSQLI_OPT_CAN_HANDLE_EXPIRED_PASSWORDS
MYSQLI_OPT_LOAD_DATA_LOCAL_DIR
MYSQLI_OPT_CONNECT_TIMEOUT
MYSQLI_OPT_READ_TIMEOUT
MYSQLI_OPT_LOCAL_INFILE
MYSQLI_OPT_INT_AND_FLOAT_NATIVE
MYSQLI_OPT_NET_CMD_BUFFER_SIZE
MYSQLI_OPT_NET_READ_BUFFER_SIZE
MYSQLI_OPT_SSL_VERIFY_SERVER_CERT
MYSQLI_INIT_COMMAND
MYSQLI_CLIENT_CAN_HANDLE_EXPIRED_PASSWORDS
MYSQLI_CLIENT_FOUND_ROWS
MYSQLI_CLIENT_SSL_VERIFY_SERVER_CERT
MYSQLI_CLIENT_SSL
MYSQLI_CLIENT_COMPRESS
MYSQLI_CLIENT_INTERACTIVE
MYSQLI_CLIENT_IGNORE_SPACE
MYSQLI_CLIENT_NO_SCHEMA
MYSQLI_CLIENT_MULTI_QUERIES
MYSQLI_STORE_RESULT
MYSQLI_STORE_RESULT_COPY_DATA
MYSQLI_USE_RESULT
MYSQLI_ASSOC
MYSQLI_NUM
MYSQLI_BOTH
MYSQLI_NOT_NULL_FLAG
MYSQLI_PRI_KEY_FLAG
MYSQLI_UNIQUE_KEY_FLAG
MYSQLI_MULTIPLE_KEY_FLAG
MYSQLI_BLOB_FLAG
MYSQLI_UNSIGNED_FLAG
MYSQLI_ZEROFILL_FLAG
MYSQLI_AUTO_INCREMENT_FLAG
MYSQLI_TIMESTAMP_FLAG
MYSQLI_SET_FLAG
MYSQLI_NUM_FLAG
MYSQLI_PART_KEY_FLAG
MYSQLI_GROUP_FLAG
MYSQLI_NO_DEFAULT_VALUE_FLAG
MYSQLI_TYPE_DECIMAL
MYSQLI_TYPE_NEWDECIMAL
MYSQLI_TYPE_BIT
MYSQLI_TYPE_TINY
MYSQLI_TYPE_SHORT
MYSQLI_TYPE_LONG
MYSQLI_TYPE_FLOAT
MYSQLI_TYPE_DOUBLE
MYSQLI_TYPE_NULL
MYSQLI_TYPE_TIMESTAMP
MYSQLI_TYPE_LONGLONG
MYSQLI_TYPE_INT24
MYSQLI_TYPE_DATE
MYSQLI_TYPE_TIME
MYSQLI_TYPE_DATETIME
MYSQLI_TYPE_YEAR
MYSQLI_TYPE_NEWDATE
MYSQLI_TYPE_INTERVAL
MYSQLI_TYPE_ENUM
MYSQLI_TYPE_SET
MYSQLI_TYPE_TINY_BLOB
MYSQLI_TYPE_MEDIUM_BLOB
MYSQLI_TYPE_LONG_BLOB
MYSQLI_TYPE_BLOB
MYSQLI_TYPE_VAR_STRING
MYSQLI_TYPE_STRING
MYSQLI_TYPE_CHAR
MYSQLI_TYPE_GEOMETRY
MYSQLI_TYPE_JSON
MYSQLI_TYPE_VECTOR
MYSQLI_NEED_DATA
MYSQLI_ENUM_FLAG
MYSQLI_BINARY_FLAG
MYSQLI_CURSOR_TYPE_FOR_UPDATE
MYSQLI_CURSOR_TYPE_NO_CURSOR
MYSQLI_CURSOR_TYPE_READ_ONLY
MYSQLI_CURSOR_TYPE_SCROLLABLE
MYSQLI_STMT_ATTR_CURSOR_TYPE
MYSQLI_STMT_ATTR_PREFETCH_ROWS
MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH
MYSQLI_SET_CHARSET_NAME
MYSQLI_REPORT_INDEX
MYSQLI_REPORT_ERROR
MYSQLI_REPORT_STRICT
MYSQLI_REPORT_ALL
MYSQLI_REPORT_OFF
MYSQLI_DEBUG_TRACE_ENABLED
MYSQLI_SERVER_PUBLIC_KEY
MYSQLI_REFRESH_GRANT
MYSQLI_REFRESH_LOG
MYSQLI_REFRESH_TABLES
MYSQLI_REFRESH_HOSTS
MYSQLI_REFRESH_REPLICA
MYSQLI_REFRESH_STATUS
MYSQLI_REFRESH_THREADS
MYSQLI_REFRESH_SLAVE
MYSQLI_REFRESH_MASTER
MYSQLI_REFRESH_BACKUP_LOG
MYSQLI_TRANS_COR_AND_CHAIN
MYSQLI_TRANS_COR_AND_NO_CHAIN
MYSQLI_TRANS_COR_RELEASE
MYSQLI_TRANS_COR_NO_RELEASE
MYSQLI_TRANS_START_READ_ONLY
MYSQLI_TRANS_START_READ_WRITE
MYSQLI_TRANS_START_WITH_CONSISTENT_SNAPSHOT
MYSQLI_CLIENT_SSL_DONT_VERIFY_SERVER_CERT
MYSQLI_IS_MARIADB
MYSQLI_ASYNC
MYSQLI_ON_UPDATE_NOW_FLAG
LOG_CONS
LOG_NDELAY
LOG_ODELAY
LOG_NOWAIT
LOG_PERROR
LOG_PID
LOG_AUTH
LOG_AUTHPRIV
LOG_CRON
LOG_DAEMON
LOG_KERN
LOG_LOCAL0
LOG_LOCAL1
LOG_LOCAL2
LOG_LOCAL3
LOG_LOCAL4
LOG_LOCAL5
LOG_LOCAL6
LOG_LOCAL7
LOG_LPR
LOG_MAIL
LOG_NEWS
LOG_SYSLOG
LOG_USER
LOG_UUCP
LOG_EMERG
LOG_ALERT
LOG_CRIT
LOG_ERR
LOG_WARNING
LOG_NOTICE
LOG_INFO
LOG_DEBUG
DNS_ANY
DNS_ALL
DNS_A
DNS_AAAA
DNS_A6
DNS_CAA
DNS_CNAME
DNS_HINFO
DNS_MX
DNS_NAPTR
DNS_NS
DNS_PTR
DNS_SOA
DNS_SRV
DNS_TXT
OAUTH_SIG_METHOD_RSASHA1
OAUTH_SIG_METHOD_HMACSHA1
OAUTH_SIG_METHOD_HMACSHA256
OAUTH_AUTH_TYPE_AUTHORIZATION
OAUTH_AUTH_TYPE_NONE
OAUTH_AUTH_TYPE_URI
OAUTH_AUTH_TYPE_FORM
OAUTH_HTTP_METHOD_GET
OAUTH_HTTP_METHOD_POST
OAUTH_HTTP_METHOD_PUT
OAUTH_HTTP_METHOD_HEAD
OAUTH_HTTP_METHOD_DELETE
OAUTH_REQENGINE_STREAMS
OAUTH_REQENGINE_CURL
OAUTH_OK
OAUTH_BAD_NONCE
OAUTH_BAD_TIMESTAMP
OAUTH_CONSUMER_KEY_UNKNOWN
OAUTH_CONSUMER_KEY_REFUSED
OAUTH_INVALID_SIGNATURE
OAUTH_TOKEN_USED
OAUTH_TOKEN_EXPIRED
OAUTH_TOKEN_REVOKED
OAUTH_TOKEN_REJECTED
OAUTH_VERIFIER_INVALID
OAUTH_PARAMETER_ABSENT
OAUTH_SIGNATURE_METHOD_REJECTED
OCI_FO_ABORT
OCI_FO_BEGIN
OCI_FO_END
OCI_FO_ERROR
OCI_FO_NONE
OCI_FO_REAUTH
OCI_FO_RETRY
OCI_FO_SELECT
OCI_FO_SESSION
OCI_FO_TXNAL
OCI_ASSOC
OCI_BOTH
OCI_COMMIT_ON_SUCCESS
OCI_CRED_EXT
OCI_DEFAULT
OCI_DESCRIBE_ONLY
OCI_EXACT_FETCH
OCI_FETCHSTATEMENT_BY_COLUMN
OCI_FETCHSTATEMENT_BY_ROW
OCI_LOB_BUFFER_FREE
OCI_NO_AUTO_COMMIT
OCI_NUM
OCI_RETURN_LOBS
OCI_RETURN_NULLS
OCI_SEEK_CUR
OCI_SEEK_END
OCI_SEEK_SET
OCI_SYSDATE
OCI_SYSDBA
OCI_SYSOPER
OCI_TEMP_BLOB
OCI_TEMP_CLOB
OCI_B_BFILE
OCI_B_BIN
OCI_B_BLOB
OCI_B_BOL
OCI_B_CFILEE
OCI_B_CLOB
OCI_B_CURSOR
OCI_B_INT
OCI_B_NTY
OCI_B_NUM
OCI_B_ROWID
SQLT_AFC
SQLT_AVC
SQLT_BDOUBLE
SQLT_BFILEE
SQLT_BFLOAT
SQLT_BIN
SQLT_BLOB
SQLT_BOL
SQLT_CFILEE
SQLT_CHR
SQLT_CLOB
SQLT_FLT
SQLT_INT
SQLT_LBI
SQLT_LNG
SQLT_LVC
SQLT_NTY
SQLT_NUM
SQLT_ODT
SQLT_RDD
SQLT_RSET
SQLT_STR
SQLT_UIN
SQLT_VCS
OCI_DTYPE_FILE
OCI_DTYPE_LOB
OCI_DTYPE_ROWID
OCI_D_FILE
OCI_D_LOB
OCI_D_ROWID
ALC_FREQUENCY
ALC_REFRESH
ALC_SYNC
AL_FREQUENCY
AL_BITS
AL_CHANNELS
AL_SIZE
AL_BUFFER
AL_SOURCE_RELATIVE
AL_SOURCE_STATE
AL_PITCH
AL_GAIN
AL_MIN_GAIN
AL_MAX_GAIN
AL_MAX_DISTANCE
AL_ROLLOFF_FACTOR
AL_CONE_OUTER_GAIN
AL_CONE_INNER_ANGLE
AL_CONE_OUTER_ANGLE
AL_REFERENCE_DISTANCE
AL_POSITION
AL_VELOCITY
AL_DIRECTION
AL_ORIENTATION
AL_FORMAT_MONO8
AL_FORMAT_MONO16
AL_FORMAT_STEREO8
AL_FORMAT_STEREO16
AL_INITIAL
AL_PLAYING
AL_PAUSED
AL_STOPPED
AL_LOOPING
AL_TRUE
AL_FALSE
X509_PURPOSE_SSL_CLIENT
X509_PURPOSE_SSL_SERVER
X509_PURPOSE_NS_SSL_SERVER
X509_PURPOSE_SMIME_SIGN
X509_PURPOSE_SMIME_ENCRYPT
X509_PURPOSE_CRL_SIGN
X509_PURPOSE_ANY
OPENSSL_PKCS1_PADDING
OPENSSL_SSLV23_PADDING
OPENSSL_NO_PADDING
OPENSSL_PKCS1_OAEP_PADDING
OPENSSL_KEYTYPE_RSA
OPENSSL_KEYTYPE_DSA
OPENSSL_KEYTYPE_DH
OPENSSL_KEYTYPE_EC
OPENSSL_KEYTYPE_X25519
OPENSSL_KEYTYPE_ED25519
OPENSSL_KEYTYPE_X448
OPENSSL_KEYTYPE_ED448
OPENSSL_ALGO_DSS1
OPENSSL_ALGO_SHA1
OPENSSL_ALGO_SHA224
OPENSSL_ALGO_SHA256
OPENSSL_ALGO_SHA384
OPENSSL_ALGO_SHA512
OPENSSL_ALGO_RMD160
OPENSSL_ALGO_MD5
OPENSSL_ALGO_MD4
OPENSSL_ALGO_MD2
OPENSSL_DEFAULT_STREAM_CIPHERS
OPENSSL_CIPHER_RC2_40
OPENSSL_CIPHER_RC2_128
OPENSSL_CIPHER_RC2_64
OPENSSL_CIPHER_DES
OPENSSL_CIPHER_3DES
OPENSSL_CIPHER_AES_128_CBC
OPENSSL_CIPHER_AES_192_CBC
OPENSSL_CIPHER_AES_256_CBC
OPENSSL_VERSION_TEXT
OPENSSL_VERSION_NUMBER
OPENSSL_TLSEXT_SERVER_NAME
OPENSSL_RAW_DATA
OPENSSL_DONT_ZERO_PAD_KEY
OPENSSL_ZERO_PADDING
OPENSSL_ENCODING_SMIME
OPENSSL_ENCODING_DER
OPENSSL_ENCODING_PEM
PKCS7_TEXT
PKCS7_BINARY
PKCS7_NOINTERN
PKCS7_NOVERIFY
PKCS7_NOCHAIN
PKCS7_NOCERTS
PKCS7_NOATTR
PKCS7_DETACHED
PKCS7_NOSIGS
PKCS7_NOOLDMIMETYPE
OPENSSL_CMS_TEXT
OPENSSL_CMS_BINARY
OPENSSL_CMS_NOINTERN
OPENSSL_CMS_NOVERIFY
OPENSSL_CMS_NOCERTS
OPENSSL_CMS_NOATTR
OPENSSL_CMS_DETACHED
OPENSSL_CMS_NOSIGS
OPENSSL_CMS_OLDMIMETYPE
PHP_OUTPUT_HANDLER_START
PHP_OUTPUT_HANDLER_WRITE
PHP_OUTPUT_HANDLER_FLUSH
PHP_OUTPUT_HANDLER_CLEAN
PHP_OUTPUT_HANDLER_FINAL
PHP_OUTPUT_HANDLER_CONT
PHP_OUTPUT_HANDLER_END
PHP_OUTPUT_HANDLER_CLEANABLE
PHP_OUTPUT_HANDLER_FLUSHABLE
PHP_OUTPUT_HANDLER_REMOVABLE
PHP_OUTPUT_HANDLER_STDFLAGS
PHP_OUTPUT_HANDLER_STARTED
PHP_OUTPUT_HANDLER_DISABLED
PHP_OUTPUT_HANDLER_PROCESSED
Parle\INTERNAL_UTF32
PASSWORD_BCRYPT
PASSWORD_BCRYPT_DEFAULT_COST
PASSWORD_ARGON2I
PASSWORD_ARGON2ID
PASSWORD_ARGON2_DEFAULT_MEMORY_COST
PASSWORD_ARGON2_DEFAULT_TIME_COST
PASSWORD_ARGON2_DEFAULT_THREADS
PASSWORD_ARGON2_PROVIDER
PASSWORD_DEFAULT
WNOHANG
WUNTRACED
WCONTINUED
WEXITED
WSTOPPED
WNOWAIT
SIG_IGN
SIG_DFL
SIG_ERR
SIGHUP
SIGINFO
SIGINT
SIGQUIT
SIGILL
SIGTRAP
SIGABRT
SIGIOT
SIGBUS
SIGFPE
SIGKILL
SIGUSR1
SIGSEGV
SIGUSR2
SIGPIPE
SIGALRM
SIGTERM
SIGSTKFLT
SIGCLD
SIGCHLD
SIGCONT
SIGSTOP
SIGTSTP
SIGTTIN
SIGTTOU
SIGURG
SIGXCPU
SIGXFSZ
SIGVTALRM
SIGPROF
SIGWINCH
SIGPOLL
SIGIO
SIGPWR
SIGSYS
SIGBABY
SIGRTMIN
SIGRTMAX
SIG_BLOCK
SIG_UNBLOCK
SIG_SETMASK
SIGCKPT
SIGCKPTEXIT
SI_USER
SI_NOINFO
SI_KERNEL
SI_QUEUE
SI_TIMER
SI_MSGGQ
SI_ASYNCIO
SI_SIGIO
SI_TKILL
SI_MESGQ
CLD_EXITED
CLD_KILLED
CLD_DUMPED
CLD_TRAPPED
CLD_STOPPED
CLD_CONTINUED
TRAP_BRKPT
TRAP_TRACE
POLL_IN
POLL_OUT
POLL_MSG
POLL_ERR
POLL_PRI
POLL_HUP
ILL_ILLOPC
ILL_ILLOPN
ILL_ILLADR
ILL_ILLTRP
ILL_PRVOPC
ILL_PRVREG
ILL_COPROC
ILL_BADSTK
FPE_INTDIV
FPE_INTOVF
FPE_FLTDIV
FPE_FLTOVF
FPE_FLTUND
FPE_FLTRES
FPE_FLTINV
FPE_FLTSUB
SEGV_MAPERR
SEGV_ACCERR
BUS_ADRALN
BUS_ADRERR
BUS_OBJERR
CLONE_NEWNS
CLONE_NEWIPC
CLONE_NEWUTS
CLONE_NEWNET
CLONE_NEWPID
CLONE_NEWUSER
CLONE_NEWCGROUP
PRIO_PGRP
PRIO_USER
PRIO_PROCESS
PRIO_DARWIN_BG
PRIO_DARWIN_THREAD
PCNTL_E2BIG
PCNTL_EACCES
PCNTL_EAGAIN
PCNTL_ECAPMODE
PCNTL_ECHILD
PCNTL_EFAULT
PCNTL_EINTR
PCNTL_EINVAL
PCNTL_EIO
PCNTL_EISDIR
PCNTL_ELIBBAD
PCNTL_ELOOP
PCNTL_EMFILE
PCNTL_ENAMETOOLONG
PCNTL_ENFILE
PCNTL_ENOENT
PCNTL_ENOEXEC
PCNTL_ENOMEM
PCNTL_ENOSPC
PCNTL_ENOTDIR
PCNTL_EPERM
PCNTL_ESRCH
PCNTL_ETXTBSY
PCNTL_EUSERS
FORK_NOSIGCHLD
FORK_WAITPID
RFCFDG
RFFDG
RFLINUXTHPN
RFNOWAIT
RFPROC
RFTHREAD
RFTSIGZMB
P_ALL
P_PID
P_PGID
P_PIDFD
P_UID
P_GID
P_SID
P_JAILID
PREG_PATTERN_ORDER
PREG_SET_ORDER
PREG_OFFSET_CAPTURE
PREG_SPLIT_NO_EMPTY
PREG_SPLIT_DELIM_CAPTURE
PREG_SPLIT_OFFSET_CAPTURE
PREG_UNMATCHED_AS_NULL
PREG_NO_ERROR
PREG_INTERNAL_ERROR
PREG_BACKTRACK_LIMIT_ERROR
PREG_RECURSION_LIMIT_ERROR
PREG_BAD_UTF8_ERROR
PREG_BAD_UTF8_OFFSET_ERROR
PREG_JIT_STACKLIMIT_ERROR
PCRE_VERSION
PCRE_VERSION_MAJOR
PCRE_VERSION_MINOR
PCRE_JIT_SUPPORT
PREG_GREP_INVERT
PDO::PARAM_BOOL
PDO::PARAM_NULL
PDO::PARAM_INT
PDO::PARAM_STR
PDO::PARAM_STR_NATL
PDO::PARAM_STR_CHAR
PDO::PARAM_LOB
PDO::PARAM_STMT
PDO::PARAM_INPUT_OUTPUT
PDO::FETCH_DEFAULT
PDO::FETCH_LAZY
PDO::FETCH_ASSOC
PDO::FETCH_NAMED
PDO::FETCH_NUM
PDO::FETCH_BOTH
PDO::FETCH_OBJ
PDO::FETCH_BOUND
PDO::FETCH_COLUMN
PDO::FETCH_CLASS
PDO::FETCH_INTO
PDO::FETCH_FUNC
PDO::FETCH_GROUP
PDO::FETCH_UNIQUE
PDO::FETCH_KEY_PAIR
PDO::FETCH_CLASSTYPE
PDO::FETCH_SERIALIZE
PDO::FETCH_PROPS_LATE
PDO::ATTR_AUTOCOMMIT
PDO::ATTR_PREFETCH
PDO::ATTR_TIMEOUT
PDO::ATTR_ERRMODE
PDO::ATTR_SERVER_VERSION
PDO::ATTR_CLIENT_VERSION
PDO::ATTR_SERVER_INFO
PDO::ATTR_CONNECTION_STATUS
PDO::ATTR_CASE
PDO::ATTR_CURSOR_NAME
PDO::ATTR_CURSOR
PDO::ATTR_DRIVER_NAME
PDO::ATTR_ORACLE_NULLS
PDO::ATTR_PERSISTENT
PDO::ATTR_STATEMENT_CLASS
PDO::ATTR_FETCH_CATALOG_NAMES
PDO::ATTR_FETCH_TABLE_NAMES
PDO::ATTR_STRINGIFY_FETCHES
PDO::ATTR_MAX_COLUMN_LEN
PDO::ATTR_DEFAULT_FETCH_MODE
PDO::ATTR_EMULATE_PREPARES
PDO::ATTR_DEFAULT_STR_PARAM
PDO::ERRMODE_SILENT
PDO::ERRMODE_WARNING
PDO::ERRMODE_EXCEPTION
PDO::CASE_NATURAL
PDO::CASE_LOWER
PDO::CASE_UPPER
PDO::NULL_NATURAL
PDO::NULL_EMPTY_STRING
PDO::NULL_TO_STRING
PDO::FETCH_ORI_NEXT
PDO::FETCH_ORI_PRIOR
PDO::FETCH_ORI_FIRST
PDO::FETCH_ORI_LAST
PDO::FETCH_ORI_ABS
PDO::FETCH_ORI_REL
PDO::CURSOR_FWDONLY
PDO::CURSOR_SCROLL
PDO::ERR_NONE
PDO::PARAM_EVT_ALLOC
PDO::PARAM_EVT_FREE
PDO::PARAM_EVT_EXEC_PRE
PDO::PARAM_EVT_EXEC_POST
PDO::PARAM_EVT_FETCH_PRE
PDO::PARAM_EVT_FETCH_POST
PDO::PARAM_EVT_NORMALIZE
PDO::SQLITE_DETERMINISTIC
PDO::CUBRID_ATTR_ISOLATION_LEVEL
PDO::CUBRID_ATTR_LOCK_TIMEOUT
PDO::CUBRID_ATTR_MAX_STRING_LENGTH
PDO::TRAN_COMMIT_CLASS_UNCOMMIT_INSTANCE
PDO::TRAN_COMMIT_CLASS_COMMIT_INSTANCE
PDO::TRAN_REP_CLASS_UNCOMMIT_INSTANCE
PDO::TRAN_REP_CLASS_COMMIT_INSTANCE
PDO::TRAN_REP_CLASS_REP_INSTANCE
PDO::TRAN_SERIALIZABLE
PDO::CUBRID_SCH_TABLE
PDO::CUBRID_SCH_VIEW
PDO::CUBRID_SCH_QUERY_SPEC
PDO::CUBRID_SCH_ATTRIBUTE
PDO::CUBRID_SCH_TABLE_ATTRIBUTE
PDO::CUBRID_SCH_METHOD
PDO::CUBRID_SCH_TABLE_METHOD
PDO::CUBRID_SCH_METHOD_FILE
PDO::CUBRID_SCH_SUPER_TABLE
PDO::CUBRID_SCH_SUB_TABLE
PDO::CUBRID_SCH_CONSTRAINT
PDO::CUBRID_SCH_TRIGGER
PDO::CUBRID_SCH_TABLE_PRIVILEGE
PDO::CUBRID_SCH_COL_PRIVILEGE
PDO::CUBRID_SCH_DIRECT_SUPER_TABLE
PDO::CUBRID_SCH_PRIMARY_KEY
PDO::CUBRID_SCH_IMPORTED_KEYS
PDO::CUBRID_SCH_EXPORTED_KEYS
PDO::CUBRID_SCH_CROSS_REFERENCE
PDO::FB_ATTR_DATE_FORMAT
PDO::FB_ATTR_TIME_FORMAT
PDO::FB_ATTR_TIMESTAMP_FORMAT
PDO::MYSQL_ATTR_USE_BUFFERED_QUERY
PDO::MYSQL_ATTR_LOCAL_INFILE
PDO::MYSQL_ATTR_LOCAL_INFILE_DIRECTORY
PDO::MYSQL_ATTR_INIT_COMMAND
PDO::MYSQL_ATTR_READ_DEFAULT_FILE
PDO::MYSQL_ATTR_READ_DEFAULT_GROUP
PDO::MYSQL_ATTR_MAX_BUFFER_SIZE
PDO::MYSQL_ATTR_DIRECT_QUERY
PDO::MYSQL_ATTR_FOUND_ROWS
PDO::MYSQL_ATTR_IGNORE_SPACE
PDO::MYSQL_ATTR_COMPRESS
PDO::MYSQL_ATTR_SERVER_PUBLIC_KEY
PDO::MYSQL_ATTR_SSL_CA
PDO::MYSQL_ATTR_SSL_CAPATH
PDO::MYSQL_ATTR_SSL_CERT
PDO::MYSQL_ATTR_SSL_CIPHER
PDO::MYSQL_ATTR_SSL_KEY
PDO::MYSQL_ATTR_SSL_VERIFY_SERVER_CERT
PDO::MYSQL_ATTR_MULTI_STATEMENTS
PDO::OCI_ATTR_ACTION
PDO::OCI_ATTR_CLIENT_INFO
PDO::OCI_ATTR_CLIENT_IDENTIFIER
PDO::OCI_ATTR_MODULE
PDO_ODBC_TYPE
PDO::ODBC_ATTR_USE_CURSOR_LIBRARY
PDO::ODBC_SQL_USE_IF_NEEDED
PDO::ODBC_SQL_USE_DRIVER
PDO::ODBC_SQL_USE_ODBC
PDO::ODBC_ATTR_ASSUME_UTF8
PDO::PGSQL_ATTR_DISABLE_PREPARES
PDO::SQLSRV_TXN_READ_UNCOMMITTED
PDO::SQLSRV_TXN_READ_COMMITTED
PDO::SQLSRV_TXN_REPEATABLE_READ
PDO::SQLSRV_TXN_SNAPSHOT
PDO::SQLSRV_TXN_SERIALIZABLE
PDO::SQLSRV_ENCODING_BINARY
PDO::SQLSRV_ENCODING_SYSTEM
PDO::SQLSRV_ENCODING_UTF8
PDO::SQLSRV_ENCODING_DEFAULT
PDO::SQLSRV_ATTR_QUERY_TIMEOUT
PDO::SQLSRV_ATTR_DIRECT_QUERY
PGSQL_LIBPQ_VERSION
PGSQL_LIBPQ_VERSION_STR
PGSQL_ASSOC
PGSQL_NUM
PGSQL_BOTH
PGSQL_CONNECT_FORCE_NEW
PGSQL_CONNECT_ASYNC
PGSQL_CONNECTION_AUTH_OK
PGSQL_CONNECTION_AWAITING_RESPONSE
PGSQL_CONNECTION_BAD
PGSQL_CONNECTION_MADE
PGSQL_CONNECTION_OK
PGSQL_CONNECTION_SETENV
PGSQL_CONNECTION_SSL_STARTUP
PGSQL_CONNECTION_STARTED
PGSQL_SEEK_SET
PGSQL_SEEK_CUR
PGSQL_SEEK_END
PGSQL_EMPTY_QUERY
PGSQL_COMMAND_OK
PGSQL_TUPLES_OK
PGSQL_TUPLES_CHUNK
PGSQL_COPY_OUT
PGSQL_COPY_IN
PGSQL_BAD_RESPONSE
PGSQL_NONFATAL_ERROR
PGSQL_FATAL_ERROR
PGSQL_TRANSACTION_IDLE
PGSQL_TRANSACTION_ACTIVE
PGSQL_TRANSACTION_INTRANS
PGSQL_TRANSACTION_INERROR
PGSQL_TRANSACTION_UNKNOWN
PGSQL_DIAG_SEVERITY
PGSQL_DIAG_SQLSTATE
PGSQL_DIAG_MESSAGE_PRIMARY
PGSQL_DIAG_MESSAGE_DETAIL
PGSQL_DIAG_MESSAGE_HINT
PGSQL_DIAG_STATEMENT_POSITION
PGSQL_DIAG_INTERNAL_POSITION
PGSQL_DIAG_INTERNAL_QUERY
PGSQL_DIAG_CONTEXT
PGSQL_DIAG_SOURCE_FILE
PGSQL_DIAG_SOURCE_LINE
PGSQL_DIAG_SOURCE_FUNCTION
PGSQL_DIAG_SCHEMA_NAME
PGSQL_DIAG_TABLE_NAME
PGSQL_DIAG_COLUMN_NAME
PGSQL_DIAG_DATATYPE_NAME
PGSQL_DIAG_CONSTRAINT_NAME
PGSQL_ERRORS_TERSE
PGSQL_ERRORS_DEFAULT
PGSQL_ERRORS_VERBOSE
PGSQL_ERRORS_SQLSTATE
PGSQL_NOTICE_LAST
PGSQL_NOTICE_ALL
PGSQL_NOTICE_CLEAR
PGSQL_STATUS_LONG
PGSQL_STATUS_STRING
PGSQL_CONV_IGNORE_DEFAULT
PGSQL_CONV_FORCE_NULL
PGSQL_CONV_IGNORE_NOT_NULL
PGSQL_DML_NO_CONV
PGSQL_DML_EXEC
PGSQL_DML_ASYNC
PGSQL_DML_STRING
PGSQL_DML_ESCAPE
PGSQL_POLLING_FAILED
PGSQL_POLLING_READING
PGSQL_POLLING_WRITING
PGSQL_POLLING_OK
PGSQL_POLLING_ACTIVE
PGSQL_DIAG_SEVERITY_NONLOCALIZED
PGSQL_SHOW_CONTEXT_NEVER
PGSQL_SHOW_CONTEXT_ERRORS
PGSQL_SHOW_CONTEXT_ALWAYS
PGSQL_TRACE_SUPPRESS_TIMESTAMPS
PGSQL_TRACE_REGRESS_MODE
Phar::NONE
Phar::COMPRESSED
Phar::GZ
Phar::BZ2
Phar::PHAR
Phar::TAR
Phar::ZIP
Phar::MD5
Phar::SHA1
Phar::SHA256
Phar::SHA512
Phar::OPENSSL
Phar::OPENSSL_SHA256
Phar::OPENSSL_SHA512
Phar::PHP
Phar::PHPS
PHPDBG_VERSION
PHPDBG_FILE
PHPDBG_METHOD
PHPDBG_LINENO
PHPDBG_FUNC
PHPDBG_COLOR_PROMPT
PHPDBG_COLOR_NOTICE
PHPDBG_COLOR_ERROR
POSIX_F_OK
POSIX_R_OK
POSIX_W_OK
POSIX_X_OK
POSIX_S_IFBLK
POSIX_S_IFCHR
POSIX_S_IFIFO
POSIX_S_IFREG
POSIX_S_IFSOCK
POSIX_RLIMIT_AS
POSIX_RLIMIT_CORE
POSIX_RLIMIT_CPU
POSIX_RLIMIT_DATA
POSIX_RLIMIT_FSIZE
POSIX_RLIMIT_LOCKS
POSIX_RLIMIT_MEMLOCK
POSIX_RLIMIT_MSGQUEUE
POSIX_RLIMIT_NICE
POSIX_RLIMIT_NOFILE
POSIX_RLIMIT_NPROC
POSIX_RLIMIT_RSS
POSIX_RLIMIT_RTPRIO
POSIX_RLIMIT_RTTIME
POSIX_RLIMIT_SIGPENDING
POSIX_RLIMIT_STACK
POSIX_RLIMIT_INFINITY
POSIX_RLIMIT_KQUEUES
POSIX_RLIMIT_NPTS
POSIX_PC_LINK_MAX
POSIX_PC_MAX_CANON
POSIX_PC_MAX_INPUT
POSIX_PC_NAME_MAX
POSIX_PC_PATH_MAX
POSIX_PC_PIPE_BUF
POSIX_PC_CHOWN_RESTRICTED
POSIX_PC_NO_TRUNC
POSIX_PC_ALLOC_SIZE_MIN
POSIX_PC_ALLOC_SYMLINK_MAX
POSIX_PC_SYMLINK_MAX
POSIX_SC_ARG_MAX
POSIX_SC_PAGESIZE
POSIX_SC_NPROCESSORS_CONF
POSIX_SC_NPROCESSORS_ONLN
POSIX_SC_CHILD_MAX
POSIX_SC_CLK_TCK
ps_LINECAP_BUTT
ps_LINECAP_ROUND
ps_LINECAP_SQUARED
ps_LINEJOIN_MITER
ps_LINEJOIN_ROUND
ps_LINEJOIN_BEVEL
PSPELL_FAST
PSPELL_NORMAL
PSPELL_BAD_SPELLERS
PSPELL_RUN_TOGETHER
PTHREADS_INHERIT_ALL
PTHREADS_INHERIT_NONE
PTHREADS_INHERIT_INI
PTHREADS_INHERIT_CONSTANTS
PTHREADS_INHERIT_CLASSES
PTHREADS_INHERIT_FUNCTIONS
PTHREADS_INHERIT_INCLUDES
PTHREADS_INHERIT_COMMENTS
PTHREADS_ALLOW_HEADERS
RADIUS_MPPE_KEY_LEN
RADIUS_OPTION_SALT
RADIUS_OPTION_TAGGED
RADIUS_ACCESS_REQUEST
RADIUS_ACCESS_ACCEPT
RADIUS_ACCESS_REJECT
RADIUS_ACCESS_CHALLENGE
RADIUS_ACCOUNTING_REQUEST
RADIUS_ACCOUNTING_RESPONSE
RADIUS_COA_REQUEST
RADIUS_COA_ACK
RADIUS_COA_NAK
RADIUS_DISCONNECT_REQUEST
RADIUS_DISCONNECT_ACK
RADIUS_DISCONNECT_NAK
RADIUS_USER_NAME
RADIUS_USER_PASSWORD
RADIUS_CHAP_PASSWORD
RADIUS_NAS_IP_ADDRESS
RADIUS_NAS_PORT
RADIUS_SERVICE_TYPE
RADIUS_FRAMED_PROTOCOL
RADIUS_FRAMED_IP_ADDRESS
RADIUS_FRAMED_IP_NETMASK
RADIUS_FRAMED_ROUTING
RADIUS_FILTER_ID
RADIUS_FRAMED_MTU
RADIUS_FRAMED_COMPRESSION
RADIUS_LOGIN_IP_HOST
RADIUS_LOGIN_SERVICE
RADIUS_LOGIN_TCP_PORT
RADIUS_REPLY_MESSAGE
RADIUS_CALLBACK_NUMBER
RADIUS_CALLBACK_ID
RADIUS_FRAMED_ROUTE
RADIUS_FRAMED_IPX_NETWORK
RADIUS_STATE
RADIUS_CLASS
RADIUS_VENDOR_SPECIFIC
RADIUS_SESSION_TIMEOUT
RADIUS_IDLE_TIMEOUT
RADIUS_TERMINATION_ACTION
RADIUS_CALLED_STATION_ID
RADIUS_CALLING_STATION_ID
RADIUS_NAS_IDENTIFIER
RADIUS_PROXY_STATE
RADIUS_LOGIN_LAT_SERVICE
RADIUS_LOGIN_LAT_NODE
RADIUS_LOGIN_LAT_GROUP
RADIUS_FRAMED_APPLETALK_LINK
RADIUS_FRAMED_APPLETALK_NETWORK
RADIUS_FRAMED_APPLETALK_ZONE
RADIUS_CHAP_CHALLENGE
RADIUS_NAS_PORT_TYPE
RADIUS_PORT_LIMIT
RADIUS_LOGIN_LAT_PORT
RADIUS_CONNECT_INFO
RADIUS_ACCT_STATUS_TYPE
RADIUS_ACCT_DELAY_TIME
RADIUS_ACCT_INPUT_OCTETS
RADIUS_ACCT_OUTPUT_OCTETS
RADIUS_ACCT_SESSION_ID
RADIUS_ACCT_AUTHENTIC
RADIUS_ACCT_SESSION_TIME
RADIUS_ACCT_INPUT_PACKETS
RADIUS_ACCT_OUTPUT_PACKETS
RADIUS_ACCT_TERMINATE_CAUSE
RADIUS_ACCT_MULTI_SESSION_ID
RADIUS_ACCT_LINK_COUNT
RADIUS_LOGIN
RADIUS_FRAMED
RADIUS_CALLBACK_LOGIN
RADIUS_CALLBACK_FRAMED
RADIUS_OUTBOUND
RADIUS_ADMINISTRATIVE
RADIUS_NAS_PROMPT
RADIUS_AUTHENTICATE_ONLY
RADIUS_CALLBACK_NAS_PROMPT
RADIUS_PPP
RADIUS_SLIP
RADIUS_ARAP
RADIUS_GANDALF
RADIUS_XYLOGICS
RADIUS_COMP_NONE
RADIUS_COMP_VJ
RADIUS_COMP_IPXHDR
RADIUS_COMP_STAC_LZS
RADIUS_ASYNC
RADIUS_SYNC
RADIUS_ISDN_SYNC
RADIUS_ISDN_ASYNC_V120
RADIUS_ISDN_ASYNC_V110
RADIUS_VIRTUAL
RADIUS_PIAFS
RADIUS_HDLC_CLEAR_CHANNEL
RADIUS_X_25
RADIUS_X_75
RADIUS_G_3_FAX
RADIUS_SDSL
RADIUS_ADSL_CAP
RADIUS_ADSL_DMT
RADIUS_IDSL
RADIUS_ETHERNET
RADIUS_XDSL
RADIUS_CABLE
RADIUS_WIRELESS_OTHER
RADIUS_WIRELESS_IEEE_802_11
RADIUS_START
RADIUS_STOP
RADIUS_ACCOUNTING_ON
RADIUS_ACCOUNTING_OFF
RADIUS_AUTH_RADIUS
RADIUS_AUTH_LOCAL
RADIUS_AUTH_REMOTE
RADIUS_TERM_USER_REQUEST
RADIUS_TERM_LOST_CARRIER
RADIUS_TERM_LOST_SERVICE
RADIUS_TERM_IDLE_TIMEOUT
RADIUS_TERM_SESSION_TIMEOUT
RADIUS_TERM_ADMIN_RESET
RADIUS_TERM_ADMIN_REBOOT
RADIUS_TERM_PORT_ERROR
RADIUS_TERM_NAS_ERROR
RADIUS_TERM_NAS_REQUEST
RADIUS_TERM_NAS_REBOOT
RADIUS_TERM_PORT_UNNEEDED
RADIUS_TERM_PORT_PREEMPTED
RADIUS_TERM_PORT_SUSPENDED
RADIUS_TERM_SERVICE_UNAVAILABLE
RADIUS_TERM_CALLBACK
RADIUS_TERM_USER_ERROR
RADIUS_TERM_HOST_REQUEST
RADIUS_VENDOR_MICROSOFT
RADIUS_MICROSOFT_MS_CHAP_RESPONSE
RADIUS_MICROSOFT_MS_CHAP_ERROR
RADIUS_MICROSOFT_MS_CHAP_PW_1
RADIUS_MICROSOFT_MS_CHAP_PW_2
RADIUS_MICROSOFT_MS_CHAP_LM_ENC_PW
RADIUS_MICROSOFT_MS_CHAP_NT_ENC_PW
RADIUS_MICROSOFT_MS_MPPE_ENCRYPTION_POLICY
RADIUS_MICROSOFT_MS_MPPE_ENCRYPTION_TYPES
RADIUS_MICROSOFT_MS_RAS_VENDOR
RADIUS_MICROSOFT_MS_CHAP_DOMAIN
RADIUS_MICROSOFT_MS_CHAP_CHALLENGE
RADIUS_MICROSOFT_MS_CHAP_MPPE_KEYS
RADIUS_MICROSOFT_MS_BAP_USAGE
RADIUS_MICROSOFT_MS_LINK_UTILIZATION_THRESHOLD
RADIUS_MICROSOFT_MS_LINK_DROP_TIME_LIMIT
RADIUS_MICROSOFT_MS_MPPE_SEND_KEY
RADIUS_MICROSOFT_MS_MPPE_RECV_KEY
RADIUS_MICROSOFT_MS_RAS_VERSION
RADIUS_MICROSOFT_MS_OLD_ARAP_PASSWORD
RADIUS_MICROSOFT_MS_NEW_ARAP_PASSWORD
RADIUS_MICROSOFT_MS_ARAP_PASSWORD_CHANGE_REASON
RADIUS_MICROSOFT_MS_FILTER
RADIUS_MICROSOFT_MS_ACCT_AUTH_TYPE
RADIUS_MICROSOFT_MS_ACCT_EAP_TYPE
RADIUS_MICROSOFT_MS_CHAP2_RESPONSE
RADIUS_MICROSOFT_MS_CHAP2_SUCCESS
RADIUS_MICROSOFT_MS_CHAP2_PW
RADIUS_MICROSOFT_MS_PRIMARY_DNS_SERVER
RADIUS_MICROSOFT_MS_SECONDARY_DNS_SERVER
RADIUS_MICROSOFT_MS_PRIMARY_NBNS_SERVER
RADIUS_MICROSOFT_MS_SECONDARY_NBNS_SERVER
RADIUS_MICROSOFT_MS_ARAP_CHALLENGE
MT_RAND_MT19937
MT_RAND_PHP
RAR_HOST_MSDOS
RAR_HOST_OS2
RAR_HOST_WIN32
RAR_HOST_UNIX
RAR_HOST_BEOS
READLINE_LIB
RNP_KEYSTORE_GPG
RNP_KEYSTORE_KBX
RNP_KEYSTORE_G10
RNP_LOAD_SAVE_PUBLIC_KEYS
RNP_LOAD_SAVE_SECRET_KEYS
RNP_LOAD_SAVE_PERMISSIVE
RNP_LOAD_SAVE_SINGLE
RNP_LOAD_SAVE_BASE64
RNP_FEATURE_SYMM_ALG
RNP_FEATURE_AEAD_ALG
RNP_FEATURE_PROT_MODE
RNP_FEATURE_PK_ALG
RNP_FEATURE_HASH_ALG
RNP_FEATURE_COMP_ALG
RNP_FEATURE_CURVE
RNP_DUMP_MPI
RNP_DUMP_RAW
RNP_DUMP_GRIP
RNP_JSON_DUMP_MPI
RNP_JSON_DUMP_RAW
RNP_JSON_DUMP_GRIP
RNP_ENCRYPT_NOWRAP
RNP_KEY_EXPORT_ARMORED
RNP_KEY_EXPORT_PUBLIC
RNP_KEY_EXPORT_SECRET
RNP_KEY_EXPORT_SUBKEYS
RNP_KEY_EXPORT_BASE64
RNP_KEY_REMOVE_PUBLIC
RNP_KEY_REMOVE_SECRET
RNP_KEY_REMOVE_SUBKEYS
RPMVERSION
RPMSENSE_ANY
RPMSENSE_LESS
RPMSENSE_GREATER
RPMSENSE_EQUAL
RPMSENSE_POSTTRANS
RPMSENSE_PREREQ
RPMSENSE_PRETRANS
RPMSENSE_INTERP
RPMSENSE_SCRIPT_PRE
RPMSENSE_SCRIPT_POST
RPMSENSE_SCRIPT_PREUN
RPMSENSE_SCRIPT_POSTUN
RPMSENSE_SCRIPT_VERIFY
RPMSENSE_FIND_REQUIRES
RPMSENSE_FIND_PROVIDES
RPMSENSE_TRIGGERIN
RPMSENSE_TRIGGERUN
RPMSENSE_TRIGGERPOSTUN
RPMSENSE_MISSINGOK
RPMSENSE_RPMLIB
RPMSENSE_TRIGGERPREIN
RPMSENSE_KEYRING
RPMSENSE_CONFIG
RPMMIRE_DEFAULT
RPMMIRE_STRCMP
RPMMIRE_REGEX
RPMMIRE_GLOB
RPMTAG_ARCH
RPMTAG_ARCHSUFFIX
RPMTAG_ARCHIVESIZE
RPMTAG_BASENAMES
RPMTAG_BUGURL
RPMTAG_BUILDARCHS
RPMTAG_BUILDHOST
RPMTAG_BUILDTIME
RPMTAG_C
RPMTAG_CHANGELOGNAME
RPMTAG_CHANGELOGTEXT
RPMTAG_CHANGELOGTIME
RPMTAG_CLASSDICT
RPMTAG_CONFLICTFLAGS
RPMTAG_CONFLICTNAME
RPMTAG_CONFLICTNEVRS
RPMTAG_CONFLICTS
RPMTAG_CONFLICTVERSION
RPMTAG_COOKIE
RPMTAG_DBINSTANCE
RPMTAG_DEPENDSDICT
RPMTAG_DESCRIPTION
RPMTAG_DIRINDEXES
RPMTAG_DIRNAMES
RPMTAG_DISTRIBUTION
RPMTAG_DISTTAG
RPMTAG_DISTURL
RPMTAG_DSAHEADER
RPMTAG_E
RPMTAG_ENCODING
RPMTAG_ENHANCEFLAGS
RPMTAG_ENHANCENAME
RPMTAG_ENHANCENEVRS
RPMTAG_ENHANCES
RPMTAG_ENHANCEVERSION
RPMTAG_EPOCH
RPMTAG_EPOCHNUM
RPMTAG_EVR
RPMTAG_EXCLUDEARCH
RPMTAG_EXCLUDEOS
RPMTAG_EXCLUSIVEARCH
RPMTAG_EXCLUSIVEOS
RPMTAG_FILECAPS
RPMTAG_FILECLASS
RPMTAG_FILECOLORS
RPMTAG_FILECONTEXTS
RPMTAG_FILEDEPENDSN
RPMTAG_FILEDEPENDSX
RPMTAG_FILEDEVICES
RPMTAG_FILEDIGESTALGO
RPMTAG_FILEDIGESTS
RPMTAG_FILEFLAGS
RPMTAG_FILEGROUPNAME
RPMTAG_FILEINODES
RPMTAG_FILELANGS
RPMTAG_FILELINKTOS
RPMTAG_FILEMD5S
RPMTAG_FILEMODES
RPMTAG_FILEMTIMES
RPMTAG_FILENAMES
RPMTAG_FILENLINKS
RPMTAG_FILEPROVIDE
RPMTAG_FILERDEVS
RPMTAG_FILEREQUIRE
RPMTAG_FILESIGNATURELENGTH
RPMTAG_FILESIGNATURES
RPMTAG_FILESIZES
RPMTAG_FILESTATES
RPMTAG_FILETRIGGERCONDS
RPMTAG_FILETRIGGERFLAGS
RPMTAG_FILETRIGGERINDEX
RPMTAG_FILETRIGGERNAME
RPMTAG_FILETRIGGERPRIORITIES
RPMTAG_FILETRIGGERSCRIPTFLAGS
RPMTAG_FILETRIGGERSCRIPTPROG
RPMTAG_FILETRIGGERSCRIPTS
RPMTAG_FILETRIGGERTYPE
RPMTAG_FILETRIGGERVERSION
RPMTAG_FILEUSERNAME
RPMTAG_FILEVERIFYFLAGS
RPMTAG_FSCONTEXTS
RPMTAG_GIF
RPMTAG_GROUP
RPMTAG_HDRID
RPMTAG_HEADERCOLOR
RPMTAG_HEADERI18NTABLE
RPMTAG_HEADERIMAGE
RPMTAG_HEADERIMMUTABLE
RPMTAG_HEADERREGIONS
RPMTAG_HEADERSIGNATURES
RPMTAG_ICON
RPMTAG_INSTALLCOLOR
RPMTAG_INSTALLTID
RPMTAG_INSTALLTIME
RPMTAG_INSTFILENAMES
RPMTAG_INSTPREFIXES
RPMTAG_LICENSE
RPMTAG_LONGARCHIVESIZE
RPMTAG_LONGFILESIZES
RPMTAG_LONGSIGSIZE
RPMTAG_LONGSIZE
RPMTAG_MODULARITYLABEL
RPMTAG_N
RPMTAG_NAME
RPMTAG_NEVR
RPMTAG_NEVRA
RPMTAG_NOPATCH
RPMTAG_NOSOURCE
RPMTAG_NVR
RPMTAG_NVRA
RPMTAG_O
RPMTAG_OBSOLETEFLAGS
RPMTAG_OBSOLETENAME
RPMTAG_OBSOLETENEVRS
RPMTAG_OBSOLETES
RPMTAG_OBSOLETEVERSION
RPMTAG_OLDENHANCES
RPMTAG_OLDENHANCESFLAGS
RPMTAG_OLDENHANCESNAME
RPMTAG_OLDENHANCESVERSION
RPMTAG_OLDFILENAMES
RPMTAG_OLDSUGGESTS
RPMTAG_OLDSUGGESTSFLAGS
RPMTAG_OLDSUGGESTSNAME
RPMTAG_OLDSUGGESTSVERSION
RPMTAG_OPTFLAGS
RPMTAG_ORDERFLAGS
RPMTAG_ORDERNAME
RPMTAG_ORDERVERSION
RPMTAG_ORIGBASENAMES
RPMTAG_ORIGDIRINDEXES
RPMTAG_ORIGDIRNAMES
RPMTAG_ORIGFILENAMES
RPMTAG_OS
RPMTAG_P
RPMTAG_PACKAGER
RPMTAG_PATCH
RPMTAG_PATCHESFLAGS
RPMTAG_PATCHESNAME
RPMTAG_PATCHESVERSION
RPMTAG_PAYLOADCOMPRESSOR
RPMTAG_PAYLOADDIGEST
RPMTAG_PAYLOADDIGESTALT
RPMTAG_PAYLOADDIGESTALGO
RPMTAG_PAYLOADFLAGS
RPMTAG_PAYLOADFORMAT
RPMTAG_PKGID
RPMTAG_PLATFORM
RPMTAG_POLICIES
RPMTAG_POLICYFLAGS
RPMTAG_POLICYNAMES
RPMTAG_POLICYTYPES
RPMTAG_POLICYTYPESINDEXES
RPMTAG_POSTIN
RPMTAG_POSTINFLAGS
RPMTAG_POSTINPROG
RPMTAG_POSTTRANS
RPMTAG_POSTTRANSFLAGS
RPMTAG_POSTTRANSPROG
RPMTAG_POSTUN
RPMTAG_POSTUNFLAGS
RPMTAG_POSTUNPROG
RPMTAG_POSTUNTRANS
RPMTAG_POSTUNTRANSFLAGS
RPMTAG_POSTUNTRANSPROG
RPMTAG_PREFIXES
RPMTAG_PREIN
RPMTAG_PREINFLAGS
RPMTAG_PREINPROG
RPMTAG_PRETRANS
RPMTAG_PRETRANSFLAGS
RPMTAG_PRETRANSPROG
RPMTAG_PREUN
RPMTAG_PREUNFLAGS
RPMTAG_PREUNPROG
RPMTAG_PREUNTRANS
RPMTAG_PREUNTRANSFLAGS
RPMTAG_PREUNTRANSPROG
RPMTAG_PROVIDEFLAGS
RPMTAG_PROVIDENAME
RPMTAG_PROVIDENEVRS
RPMTAG_PROVIDES
RPMTAG_PROVIDEVERSION
RPMTAG_PUBKEYS
RPMTAG_R
RPMTAG_RECOMMENDFLAGS
RPMTAG_RECOMMENDNAME
RPMTAG_RECOMMENDNEVRS
RPMTAG_RECOMMENDS
RPMTAG_RECOMMENDVERSION
RPMTAG_RECONTEXTS
RPMTAG_RELEASE
RPMTAG_REMOVETID
RPMTAG_REQUIREFLAGS
RPMTAG_REQUIRENAME
RPMTAG_REQUIRENEVRS
RPMTAG_REQUIRES
RPMTAG_REQUIREVERSION
RPMTAG_RPMVERSION
RPMTAG_RSAHEADER
RPMTAG_SHA1HEADER
RPMTAG_SHA256HEADER
RPMTAG_SIGGPG
RPMTAG_SIGMD5
RPMTAG_SIGPGP
RPMTAG_SIGSIZE
RPMTAG_SIZE
RPMTAG_SOURCE
RPMTAG_SOURCEPACKAGE
RPMTAG_SOURCEPKGID
RPMTAG_SOURCERPM
RPMTAG_SPEC
RPMTAG_SUGGESTFLAGS
RPMTAG_SUGGESTNAME
RPMTAG_SUGGESTNEVRS
RPMTAG_SUGGESTS
RPMTAG_SUGGESTVERSION
RPMTAG_SUMMARY
RPMTAG_SUPPLEMENTFLAGS
RPMTAG_SUPPLEMENTNAME
RPMTAG_SUPPLEMENTNEVRS
RPMTAG_SUPPLEMENTS
RPMTAG_SUPPLEMENTVERSION
RPMTAG_SYSUSERS
RPMTAG_TRANSFILETRIGGERCONDS
RPMTAG_TRANSFILETRIGGERFLAGS
RPMTAG_TRANSFILETRIGGERINDEX
RPMTAG_TRANSFILETRIGGERNAME
RPMTAG_TRANSFILETRIGGERPRIORITIES
RPMTAG_TRANSFILETRIGGERSCRIPTFLAGS
RPMTAG_TRANSFILETRIGGERSCRIPTPROG
RPMTAG_TRANSFILETRIGGERSCRIPTS
RPMTAG_TRANSFILETRIGGERTYPE
RPMTAG_TRANSFILETRIGGERVERSION
RPMTAG_TRANSLATIONURL
RPMTAG_TRIGGERCONDS
RPMTAG_TRIGGERFLAGS
RPMTAG_TRIGGERINDEX
RPMTAG_TRIGGERNAME
RPMTAG_TRIGGERSCRIPTFLAGS
RPMTAG_TRIGGERSCRIPTPROG
RPMTAG_TRIGGERSCRIPTS
RPMTAG_TRIGGERTYPE
RPMTAG_TRIGGERVERSION
RPMTAG_UPSTREAMRELEASES
RPMTAG_URL
RPMTAG_V
RPMTAG_VCS
RPMTAG_VENDOR
RPMTAG_VERBOSE
RPMTAG_VERIFYSCRIPT
RPMTAG_VERIFYSCRIPTFLAGS
RPMTAG_VERIFYSCRIPTPROG
RPMTAG_VERITYSIGNATUREALGO
RPMTAG_VERITYSIGNATURES
RPMTAG_VERSION
RPMTAG_XPM
RUNKIT7_IMPORT_FUNCTIONS
RUNKIT7_IMPORT_CLASS_METHODS
RUNKIT7_IMPORT_CLASS_CONSTS
RUNKIT7_IMPORT_CLASS_PROPS
RUNKIT7_IMPORT_CLASS_STATIC_PROPS
RUNKIT7_IMPORT_CLASSES
RUNKIT7_IMPORT_OVERRIDE
RUNKIT7_ACC_RETURN_REFERENCE
RUNKIT7_ACC_PUBLIC
RUNKIT7_ACC_PROTECTED
RUNKIT7_ACC_PRIVATE
RUNKIT7_ACC_STATIC
RUNKIT7_FEATURE_MANIPULATION
RUNKIT7_FEATURE_SUPERGLOBALS
RUNKIT7_FEATURE_SANDBOX
SEASLOG_VERSION
SEASLOG_AUTHOR
SEASLOG_ALL
SEASLOG_DEBUG
SEASLOG_INFO
SEASLOG_NOTICE
SEASLOG_WARNING
SEASLOG_ERROR
SEASLOG_CRITICAL
SEASLOG_ALERT
SEASLOG_EMERGENCY
SEASLOG_DETAIL_ORDER_ASC
SEASLOG_DETAIL_ORDER_DESC
SEASLOG_APPENDER_FILE
SEASLOG_APPENDER_TCP
SEASLOG_APPENDER_UDP
SEASLOG_CLOSE_LOGGER_STREAM_MOD_ALL
SEASLOG_CLOSE_LOGGER_STREAM_MOD_ASSIGN
SEASLOG_REQUEST_VARIABLE_DOMAIN_PORT
SEASLOG_REQUEST_VARIABLE_REQUEST_URI
SEASLOG_REQUEST_VARIABLE_REQUEST_METHOD
SEASLOG_REQUEST_VARIABLE_CLIENT_IP
MSG_IPC_NOWAIT
MSG_EAGAIN
MSG_ENOMSG
MSG_NOERROR
MSG_EXCEPT
SID
PHP_SESSION_DISABLED
PHP_SESSION_NONE
PHP_SESSION_ACTIVE
SIMDJSON_ERR_CAPACITY
SIMDJSON_ERR_TAPE_ERROR
SIMDJSON_ERR_DEPTH_ERROR
SIMDJSON_ERR_STRING_ERROR
SIMDJSON_ERR_T_ATOM_ERROR
SIMDJSON_ERR_F_ATOM_ERROR
SIMDJSON_ERR_N_ATOM_ERROR
SIMDJSON_ERR_NUMBER_ERROR
SIMDJSON_ERR_UTF8_ERROR
SIMDJSON_ERR_UNINITIALIZED
SIMDJSON_ERR_EMPTY
SIMDJSON_ERR_UNESCAPED_CHARS
SIMDJSON_ERR_UNCLOSED_STRING
SIMDJSON_ERR_UNSUPPORTED_ARCHITECTURE
SIMDJSON_ERR_INCORRECT_TYPE
SIMDJSON_ERR_NUMBER_OUT_OF_RANGE
SIMDJSON_ERR_INDEX_OUT_OF_BOUNDS
SIMDJSON_ERR_NO_SUCH_FIELD
SIMDJSON_ERR_IO_ERROR
SIMDJSON_ERR_INVALID_JSON_POINTER
SIMDJSON_ERR_INVALID_URI_FRAGMENT
SIMDJSON_ERR_UNEXPECTED_ERROR
SIMDJSON_ERR_PARSER_IN_USE
SIMDJSON_ERR_OUT_OF_ORDER_ITERATION
SIMDJSON_ERR_INSUFFICIENT_PADDING
SIMDJSON_ERR_INCOMPLETE_ARRAY_OR_OBJECT
SIMDJSON_ERR_SCALAR_DOCUMENT_AS_VALUE
SIMDJSON_ERR_OUT_OF_BOUNDS
SIMDJSON_ERR_TRAILING_CONTENT
SIMDJSON_ERR_KEY_COUNT_NOT_COUNTABLE
SIMDJSON_ERR_INVALID_PROPERTY
SNMP_OID_OUTPUT_SUFFIX
SNMP_OID_OUTPUT_MODULE
SNMP_OID_OUTPUT_FULL
SNMP_OID_OUTPUT_NUMERIC
SNMP_OID_OUTPUT_UCD
SNMP_OID_OUTPUT_NONE
SNMP_VALUE_LIBRARY
SNMP_VALUE_PLAIN
SNMP_VALUE_OBJECT
SNMP_BIT_STR
SNMP_OCTET_STR
SNMP_OPAQUE
SNMP_NULL
SNMP_OBJECT_ID
SNMP_IPADDRESS
SNMP_COUNTER
SNMP_UNSIGNED
SNMP_TIMETICKS
SNMP_UINTEGER
SNMP_INTEGER
SNMP_COUNTER64
SOAP_1_1
SOAP_1_2
SOAP_PERSISTENCE_SESSION
SOAP_PERSISTENCE_REQUEST
SOAP_FUNCTIONS_ALL
SOAP_ENCODED
SOAP_LITERAL
SOAP_RPC
SOAP_DOCUMENT
SOAP_ACTOR_NEXT
SOAP_ACTOR_NONE
SOAP_ACTOR_UNLIMATERECEIVER
SOAP_COMPRESSION_ACCEPT
SOAP_COMPRESSION_GZIP
SOAP_COMPRESSION_DEFLATE
SOAP_AUTHENTICATION_BASIC
SOAP_AUTHENTICATION_DIGEST
SOAP_SSL_METHOD_TLS
SOAP_SSL_METHOD_SSLv2
SOAP_SSL_METHOD_SSLv3
SOAP_SSL_METHOD_SSLv23
UNKNOWN_TYPE
XSD_STRING
XSD_BOOLEAN
XSD_DECIMAL
XSD_FLOAT
XSD_DOUBLE
XSD_DURATION
XSD_DATETIME
XSD_TIME
XSD_DATE
XSD_GYEARMONTH
XSD_GYEAR
XSD_GMONTHDAY
XSD_GDAY
XSD_GMONTH
XSD_HEXBINARY
XSD_BASE64BINARY
XSD_ANYURI
XSD_QNAME
XSD_NOTATION
XSD_NORMALIZEDSTRING
XSD_TOKEN
XSD_LANGUAGE
XSD_NMTOKEN
XSD_NAME
XSD_NCNAME
XSD_ID
XSD_IDREF
XSD_IDREFS
XSD_ENTITY
XSD_ENTITIES
XSD_INTEGER
XSD_NONPOSITIVEINTEGER
XSD_NEGATIVEINTEGER
XSD_LONG
XSD_INT
XSD_SHORT
XSD_BYTE
XSD_NONNEGATIVEINTEGER
XSD_UNSIGNEDLONG
XSD_UNSIGNEDINT
XSD_UNSIGNEDSHORT
XSD_UNSIGNEDBYTE
XSD_POSITIVEINTEGER
XSD_NMTOKENS
XSD_ANYTYPE
XSD_ANYXML
APACHE_MAP
SOAP_ENC_OBJECT
SOAP_ENC_ARRAY
XSD_1999_TIMEINSTANT
XSD_NAMESPACE
XSD_1999_NAMESPACE
SOAP_SINGLE_ELEMENT_ARRAYS
SOAP_WAIT_ONE_WAY_CALLS
SOAP_USE_XSI_ARRAY_TYPE
WSDL_CACHE_NONE
WSDL_CACHE_DISK
WSDL_CACHE_MEMORY
WSDL_CACHE_BOTH
AF_UNIX
AF_INET
AF_INET6
AF_DIVERT
SOCK_STREAM
SOCK_DGRAM
SOCK_RAW
SOCK_SEQPACKET
SOCK_RDM
SOCK_CONN_DGRAM
SOCK_DCCP
SOCK_NONBLOCK
SOCK_CLOEXEC
MSG_OOB
MSG_WAITALL
MSG_PEEK
MSG_DONTROUTE
MSG_EOR
MSG_EOF
MSG_ZEROCOPY
SO_DEBUG
SO_REUSEADDR
SO_REUSEPORT
SO_KEEPALIVE
SO_DONTROUTE
SO_LINGER
SO_BROADCAST
SO_OOBINLINE
SO_SNDBUF
SO_RCVBUF
SO_SNDLOWAT
SO_RCVLOWAT
SO_SNDTIMEO
SO_RCVTIMEO
SO_TYPE
SO_ERROR
SO_ZEROCOPY
TCP_NODELAY
TCP_KEEPCNT
TCP_KEEPIDLE
TCP_KEEPINTVL
TCP_KEEPALIVE
TCP_NOTSENT_LOWAT
SO_MARK
SO_USER_COOKIE
SO_RTABLE
SO_ACCEPTFILTER
SO_DONTTRUNC
SO_WANTMORE
SO_INCOMING_CPU
SO_MEMINFO
SO_BPF_EXTENSIONS
SO_SETFIB
SO_ATTACH_REUSEPORT_CBPF
SO_DETACH_BPF
SO_DETACH_FILTER
SO_RERROR
SO_ZEROIZE
SO_SPLICE
SO_REUSEPORT_LB
SOL_FILTER
SOL_UDPLITE
UDPLITE_RECV_CSCOV
UDPLITE_SEND_CSCOV
TCP_DEFER_ACCEPT
TCP_CONGESTION
TCP_QUICKACK
TCP_REPAIR
TCP_SYNCNT
IP_DONTFRAG
IP_MTU_DISCOVER
IP_PMTUDISC_DO
IP_PMTUDISC_DONT
IP_PMTUDISC_WANT
IP_PMTUDISC_PROBE
IP_PMTUDISC_INTERFACE
IP_PMTUDISC_OMIT
IP_BIND_ADDRESS_NO_PORT
SOL_SOCKET
PHP_NORMAL_READ
PHP_BINARY_READ
SOL_TCP
SOL_UDP
SOCKET_EINTR
SOCKET_EBADF
SOCKET_EACCES
SOCKET_EFAULT
SOCKET_EINVAL
SOCKET_EMFILE
SOCKET_ENAMETOOLONG
SOCKET_ENOTEMPTY
SOCKET_ELOOP
SOCKET_EWOULDBLOCK
SOCKET_EREMOTE
SOCKET_EUSERS
SOCKET_ENOTSOCK
SOCKET_EDESTADDRREQ
SOCKET_EMSGSIZE
SOCKET_EPROTOTYPE
SOCKET_EPROTONOSUPPORT
SOCKET_ESOCKTNOSUPPORT
SOCKET_EOPNOTSUPP
SOCKET_EPFNOSUPPORT
SOCKET_EAFNOSUPPORT
SOCKET_EADDRNOTAVAIL
SOCKET_ENETDOWN
SOCKET_ENETUNREACH
SOCKET_ENETRESET
SOCKET_ECONNABORTED
SOCKET_ECONNRESET
SOCKET_ENOBUFS
SOCKET_EISCONN
SOCKET_ENOTCONN
SOCKET_ESHUTDOWN
SOCKET_ETIMEDOUT
SOCKET_ECONNREFUSED
SOCKET_EHOSTDOWN
SOCKET_EHOSTUNREACH
SOCKET_EALREADY
SOCKET_EINPROGRESS
SOCKET_ENOPROTOOPT
SOCKET_EADDRINUSE
SOCKET_ETOOMYREFS
SOCKET_EPROCLIM
SOCKET_EDUOT
SOCKET_ESTALE
SOCKET_EDISCON
SOCKET_SYSNOTREADY
SOCKET_VERNOTSUPPORTED
SOCKET_NOTINITIALISED
SOCKET_HOST_NOT_FOUND
SOCKET_TRY_AGAIN
SOCKET_NO_RECOVERY
SOCKET_NO_DATA
SOCKET_NO_ADDRESS
SOCKET_EPERM
SOCKET_ENOENT
SOCKET_EIO
SOCKET_ENXIO
SOCKET_E2BIG
SOCKET_EAGAIN
SOCKET_ENOMEM
SOCKET_ENOTBLK
SOCKET_EBUSY
SOCKET_EEXIST
SOCKET_EXDEV
SOCKET_ENODEV
SOCKET_ENOTDIR
SOCKET_EISDIR
SOCKET_ENFILE
SOCKET_ENOTTY
SOCKET_ENOSPC
SOCKET_ESPIPE
SOCKET_EROFS
SOCKET_EMLINK
SOCKET_EPIPE
SOCKET_ENOLCK
SOCKET_ENOSYS
SOCKET_ENOMSG
SOCKET_EIDRM
SOCKET_ECHRNG
SOCKET_EL2NSYNC
SOCKET_EL3HLT
SOCKET_EL3RST
SOCKET_ELNRNG
SOCKET_EUNATCH
SOCKET_ENOCSI
SOCKET_EL2HLT
SOCKET_EBADE
SOCKET_EBADR
SOCKET_EXFULL
SOCKET_ENOANO
SOCKET_EBADRQC
SOCKET_EBADSLT
SOCKET_ENOSTR
SOCKET_ENODATA
SOCKET_ETIME
SOCKET_ENOSR
SOCKET_ENONET
SOCKET_ENOLINK
SOCKET_EADV
SOCKET_ESRMNT
SOCKET_ECOMM
SOCKET_EPROTO
SOCKET_EMULTIHOP
SOCKET_EBADMSG
SOCKET_ENOTUNIQ
SOCKET_EBADFD
SOCKET_EREMCHG
SOCKET_ERESTART
SOCKET_ESTRPIPE
SOCKET_EPROTOOPT
SOCKET_ADDRINUSE
SOCKET_ETOOMANYREFS
SOCKET_EISNAM
SOCKET_EREMOTEIO
SOCKET_EDQUOT
SOCKET_ENOMEDIUM
SOCKET_EMEDIUMTYPE
SCM_RIGHTS
SCM_CREDENTIALS
SCM_CREDS
SCM_CREDS2
LOCAL_CREDS
LOCAL_CREDS_PERSISTENT
SKF_AD_OFF
SKF_AD_PROTOCOL
SKF_AD_PKTTYPE
SKF_AD_IFINDEX
SKF_AD_NLATTR
SKF_AD_NLATTR_NEST
SKF_AD_MARK
SKF_AD_QUEUE
SKF_AD_HATYPE
SKF_AD_RXHASH
SKF_AD_CPU
SKF_AD_ALU_XOR_X
SKF_AD_VLAN_TAG
SKF_AD_VLAN_TAG_PRESENT
SKF_AD_PAY_OFFSET
SKF_AD_RANDOM
SKF_AD_VLAN_TPID
SKF_AD_MAX
AI_ADDRCONFIG
AI_ALL
AI_CANONIDN
AI_CANONNAME
AI_IDN
AI_NUMERICHOST
AI_NUMERICSERV
AI_PASSIVE
AI_V4MAPPED
FIL_ATTACH
FIL_DETACH
IPPROTO_IP
IPPROTO_IPV6
IPV6_HOPLIMIT
IPV6_MULTICAST_HOPS
IPV6_MULTICAST_IF
IPV6_MULTICAST_LOOP
IPV6_PKTINFO
IPV6_RECVHOPLIMIT
IPV6_RECVPKTINFO
IPV6_RECVTCLASS
IPV6_TCLASS
IPV6_UNICAST_HOPS
IPV6_V6ONLY
IP_MULTICAST_IF
IP_MULTICAST_LOOP
IP_MULTICAST_TTL
IP_PORTRANGE
IP_PORTRANGE_DEFAULT
IP_PORTRANGE_HIGH
IP_PORTRANGE_LOW
MCAST_BLOCK_SOURCE
MCAST_JOIN_GROUP
MCAST_JOIN_SOURCE_GROUP
MCAST_LEAVE_GROUP
MCAST_LEAVE_SOURCE_GROUP
MCAST_UNBLOCK_SOURCE
MSG_CMSG_CLOEXEC
MSG_CONFIRM
MSG_CTRUNC
MSG_DONTWAIT
MSG_ERRQUEUE
MSG_MORE
MSG_NOSIGNAL
MSG_TRUNC
MSG_WAITFORONE
SOL_LOCAL
SOMAXCONN
SO_BINDTODEVICE
SO_FAMILY
SO_LABEL
SO_LISTENQLEN
SO_LISTENQLIMIT
SO_PASSCRED
SO_PEERLABEL
SO_EXCLUSIVEADDRUSE
SO_EXCLBIND
SO_NOSIGPIPE
SO_LINGER_SEC
SO_BINDTOIFINDEX
SODIUM_LIBRARY_VERSION
SODIUM_LIBRARY_MAJOR_VERSION
SODIUM_LIBRARY_MINOR_VERSION
SODIUM_BASE64_VARIANT_ORIGINAL
SODIUM_BASE64_VARIANT_ORIGINAL_NO_PADDING
SODIUM_BASE64_VARIANT_URLSAFE
SODIUM_BASE64_VARIANT_URLSAFE_NO_PADDING
SODIUM_CRYPTO_AEAD_AEGIS128L_KEYBYTES
SODIUM_CRYPTO_AEAD_AEGIS128L_NSECBYTES
SODIUM_CRYPTO_AEAD_AEGIS128L_NPUBBYTES
SODIUM_CRYPTO_AEAD_AEGIS128L_ABYTES
SODIUM_CRYPTO_AEAD_AEGIS256_KEYBYTES
SODIUM_CRYPTO_AEAD_AEGIS256_NSECBYTES
SODIUM_CRYPTO_AEAD_AEGIS256_NPUBBYTES
SODIUM_CRYPTO_AEAD_AEGIS256_ABYTES
SODIUM_CRYPTO_AEAD_AES256GCM_KEYBYTES
SODIUM_CRYPTO_AEAD_AES256GCM_NSECBYTES
SODIUM_CRYPTO_AEAD_AES256GCM_NPUBBYTES
SODIUM_CRYPTO_AEAD_AES256GCM_ABYTES
SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_KEYBYTES
SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_NSECBYTES
SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_NPUBBYTES
SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_ABYTES
SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_KEYBYTES
SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_NSECBYTES
SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_NPUBBYTES
SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_ABYTES
SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_ABYTES
SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_KEYBYTES
SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_NPUBBYTES
SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_NSECBYTES
SODIUM_CRYPTO_AUTH_BYTES
SODIUM_CRYPTO_AUTH_KEYBYTES
SODIUM_CRYPTO_BOX_SEALBYTES
SODIUM_CRYPTO_BOX_SECRETKEYBYTES
SODIUM_CRYPTO_BOX_PUBLICKEYBYTES
SODIUM_CRYPTO_BOX_KEYPAIRBYTES
SODIUM_CRYPTO_BOX_MACBYTES
SODIUM_CRYPTO_BOX_NONCEBYTES
SODIUM_CRYPTO_BOX_SEEDBYTES
SODIUM_CRYPTO_KDF_BYTES_MIN
SODIUM_CRYPTO_KDF_BYTES_MAX
SODIUM_CRYPTO_KDF_CONTEXTBYTES
SODIUM_CRYPTO_KDF_KEYBYTES
SODIUM_CRYPTO_KX_SEEDBYTES
SODIUM_CRYPTO_KX_SESSIONKEYBYTES
SODIUM_CRYPTO_KX_PUBLICKEYBYTES
SODIUM_CRYPTO_KX_SECRETKEYBYTES
SODIUM_CRYPTO_KX_KEYPAIRBYTES
SODIUM_CRYPTO_GENERICHASH_BYTES
SODIUM_CRYPTO_GENERICHASH_BYTES_MIN
SODIUM_CRYPTO_GENERICHASH_BYTES_MAX
SODIUM_CRYPTO_GENERICHASH_KEYBYTES
SODIUM_CRYPTO_GENERICHASH_KEYBYTES_MIN
SODIUM_CRYPTO_GENERICHASH_KEYBYTES_MAX
SODIUM_CRYPTO_PWHASH_ALG_ARGON2I13
SODIUM_CRYPTO_PWHASH_ALG_ARGON2ID13
SODIUM_CRYPTO_PWHASH_ALG_DEFAULT
SODIUM_CRYPTO_PWHASH_SALTBYTES
SODIUM_CRYPTO_PWHASH_STRPREFIX
SODIUM_CRYPTO_PWHASH_OPSLIMIT_INTERACTIVE
SODIUM_CRYPTO_PWHASH_MEMLIMIT_INTERACTIVE
SODIUM_CRYPTO_PWHASH_OPSLIMIT_MODERATE
SODIUM_CRYPTO_PWHASH_MEMLIMIT_MODERATE
SODIUM_CRYPTO_PWHASH_OPSLIMIT_SENSITIVE
SODIUM_CRYPTO_PWHASH_MEMLIMIT_SENSITIVE
SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_SALTBYTES
SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_STRPREFIX
SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_OPSLIMIT_INTERACTIVE
SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_MEMLIMIT_INTERACTIVE
SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_OPSLIMIT_SENSITIVE
SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_MEMLIMIT_SENSITIVE
SODIUM_CRYPTO_CORE_RISTRETTO255_BYTES
SODIUM_CRYPTO_CORE_RISTRETTO255_HASHBYTES
SODIUM_CRYPTO_CORE_RISTRETTO255_NONREDUCEDSCALARBYTES
SODIUM_CRYPTO_CORE_RISTRETTO255_SCALARBYTES
SODIUM_CRYPTO_SCALARMULT_BYTES
SODIUM_CRYPTO_SCALARMULT_SCALARBYTES
SODIUM_CRYPTO_SCALARMULT_RISTRETTO255_BYTES
SODIUM_CRYPTO_SCALARMULT_RISTRETTO255_SCALARBYTES
SODIUM_CRYPTO_SHORTHASH_BYTES
SODIUM_CRYPTO_SHORTHASH_KEYBYTES
SODIUM_CRYPTO_SECRETBOX_KEYBYTES
SODIUM_CRYPTO_SECRETBOX_MACBYTES
SODIUM_CRYPTO_SECRETBOX_NONCEBYTES
SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES
SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES
SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_KEYBYTES
SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_MESSAGEBYTES_MAX
SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_TAG_FINAL
SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_TAG_MESSAGE
SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_TAG_PUSH
SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_TAG_REKEY
SODIUM_CRYPTO_SIGN_BYTES
SODIUM_CRYPTO_SIGN_SEEDBYTES
SODIUM_CRYPTO_SIGN_PUBLICKEYBYTES
SODIUM_CRYPTO_SIGN_SECRETKEYBYTES
SODIUM_CRYPTO_SIGN_KEYPAIRBYTES
SODIUM_CRYPTO_STREAM_NONCEBYTES
SODIUM_CRYPTO_STREAM_KEYBYTES
SODIUM_CRYPTO_STREAM_XCHACHA20_KEYBYTES
SODIUM_CRYPTO_STREAM_XCHACHA20_NONCEBYTES
SOLR_MAJOR_VERSION
SOLR_MINOR_VERSION
SOLR_PATCH_VERSION
SOLR_EXTENSION_VERSION
SQLITE3_ASSOC
SQLITE3_NUM
SQLITE3_BOTH
SQLITE3_INTEGER
SQLITE3_FLOAT
SQLITE3_TEXT
SQLITE3_BLOB
SQLITE3_NULL
SQLITE3_OPEN_READONLY
SQLITE3_OPEN_READWRITE
SQLITE3_OPEN_CREATE
SQLITE3_DETERMINISTIC
SQLSRV_FETCH_ASSOC
SQLSRV_FETCH_NUMERIC
SQLSRV_FETCH_BOTH
SQLSRV_ERR_ALL
SQLSRV_ERR_ERRORS
SQLSRV_ERR_WARNINGS
SQLSRV_LOG_SYSTEM_ALL
SQLSRV_LOG_SYSTEM_CONN
SQLSRV_LOG_SYSTEM_INIT
SQLSRV_LOG_SYSTEM_OFF
SQLSRV_LOG_SYSTEM_STMT
SQLSRV_LOG_SYSTEM_UTIL
SQLSRV_LOG_SEVERITY_ALL
SQLSRV_LOG_SEVERITY_ERROR
SQLSRV_LOG_SEVERITY_NOTICE
SQLSRV_LOG_SEVERITY_WARNING
SQLSRV_NULLABLE_YES
SQLSRV_NULLABLE_NO
SQLSRV_NULLABLE_UNKNOWN
SQLSRV_PARAM_IN
SQLSRV_PARAM_INOUT
SQLSRV_PARAM_OUT
SQLSRV_PHPTYPE_INT
SQLSRV_PHPTYPE_DATETIME
SQLSRV_PHPTYPE_FLOAT
SQLSRV_PHPTYPE_STREAM
SQLSRV_PHPTYPE_STRING
SQLSRV_ENC_BINARY
SQLSRV_ENC_CHAR
SQLSRV_SQLTYPE_BIGINT
SQLSRV_SQLTYPE_BINARY
SQLSRV_SQLTYPE_BIT
SQLSRV_SQLTYPE_CHAR
SQLSRV_SQLTYPE_DATE
SQLSRV_SQLTYPE_DATETIME
SQLSRV_SQLTYPE_DATETIME2
SQLSRV_SQLTYPE_DATETIMEOFFSET
SQLSRV_SQLTYPE_DECIMAL
SQLSRV_SQLTYPE_FLOAT
SQLSRV_SQLTYPE_IMAGE
SQLSRV_SQLTYPE_INT
SQLSRV_SQLTYPE_MONEY
SQLSRV_SQLTYPE_NCHAR
SQLSRV_SQLTYPE_NUMERIC
SQLSRV_SQLTYPE_NVARCHAR
SQLSRV_SQLTYPE_NVARCHAR
SQLSRV_SQLTYPE_NTEXT
SQLSRV_SQLTYPE_REAL
SQLSRV_SQLTYPE_SMALLDATETIME
SQLSRV_SQLTYPE_SMALLINT
SQLSRV_SQLTYPE_SMALLMONEY
SQLSRV_SQLTYPE_TEXT
SQLSRV_SQLTYPE_TIME
SQLSRV_SQLTYPE_TIMESTAMP
SQLSRV_SQLTYPE_TINYINT
SQLSRV_SQLTYPE_UNIQUEIDENTIFIER
SQLSRV_SQLTYPE_UDT
SQLSRV_SQLTYPE_VARBINARY
SQLSRV_SQLTYPE_VARBINARY
SQLSRV_SQLTYPE_VARCHAR
SQLSRV_SQLTYPE_VARCHAR
SQLSRV_SQLTYPE_XML
SQLSRV_TXN_READ_UNCOMMITTED
SQLSRV_TXN_READ_COMMITTED
SQLSRV_TXN_REPEATABLE_READ
SQLSRV_TXN_SNAPSHOT
SQLSRV_TXN_READ_SERIALIZABLE
SQLSRV_CURSOR_FORWARD
SQLSRV_CURSOR_STATIC
SQLSRV_CURSOR_DYNAMIC
SQLSRV_CURSOR_KEYSET
SQLSRV_CURSOR_BUFFERED
SQLSRV_SCROLL_NEXT
SQLSRV_SCROLL_PRIOR
SQLSRV_SCROLL_FIRST
SQLSRV_SCROLL_LAST
SQLSRV_SCROLL_ABSOLUTE
SQLSRV_SCROLL_RELATIVE
SSH2_FINGERPRINT_MD5
SSH2_FINGERPRINT_SHA1
SSH2_FINGERPRINT_HEX
SSH2_FINGERPRINT_RAW
SSH2_TERM_UNIT_CHARS
SSH2_TERM_UNIT_PIXELS
SSH2_DEFAULT_TERM_WIDTH
SSH2_DEFAULT_TERM_HEIGHT
SSH2_DEFAULT_TERM_UNIT
SSH2_STREAM_STDIO
SSH2_STREAM_STDERR
SSH2_DEFAULT_TERMINAL
SSH2_POLLIN
SSH2_POLLEXT
SSH2_POLLOUT
SSH2_POLLERR
SSH2_POLLHUP
SSH2_POLLNVAL
SSH2_POLL_SESSION_CLOSED
SSH2_POLL_CHANNEL_CLOSED
SSH2_POLL_LISTENER_CLOSED
STREAM_CLIENT_ASYNC_CONNECT
STREAM_CLIENT_CONNECT
STREAM_CLIENT_PERSISTENT
STREAM_SERVER_BIND
STREAM_SERVER_LISTEN
STREAM_SHUT_RD
STREAM_SHUT_WR
STREAM_SHUT_RDWR
STREAM_OOB
STREAM_PEEK
STREAM_FILTER_READ
STREAM_FILTER_WRITE
STREAM_FILTER_ALL
STREAM_CRYPTO_METHOD_ANY_CLIENT
STREAM_CRYPTO_METHOD_SSLv2_CLIENT
STREAM_CRYPTO_METHOD_SSLv3_CLIENT
STREAM_CRYPTO_METHOD_SSLv23_CLIENT
STREAM_CRYPTO_METHOD_TLS_CLIENT
STREAM_CRYPTO_METHOD_TLSv1_0_CLIENT
STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT
STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT
STREAM_CRYPTO_METHOD_TLSv1_3_CLIENT
STREAM_CRYPTO_METHOD_ANY_SERVER
STREAM_CRYPTO_METHOD_SSLv2_SERVER
STREAM_CRYPTO_METHOD_SSLv3_SERVER
STREAM_CRYPTO_METHOD_SSLv23_SERVER
STREAM_CRYPTO_METHOD_TLS_SERVER
STREAM_CRYPTO_METHOD_TLSv1_0_SERVER
STREAM_CRYPTO_METHOD_TLSv1_1_SERVER
STREAM_CRYPTO_METHOD_TLSv1_2_SERVER
STREAM_CRYPTO_METHOD_TLSv1_3_SERVER
STREAM_CRYPTO_PROTO_SSLv3
STREAM_CRYPTO_PROTO_TLSv1_0
STREAM_CRYPTO_PROTO_TLSv1_1
STREAM_CRYPTO_PROTO_TLSv1_2
STREAM_CRYPTO_PROTO_TLSv1_3
STREAM_MUST_SEEK
STREAM_IGNORE_URL
STREAM_PF_INET
STREAM_PF_INET6
STREAM_PF_UNIX
STREAM_SOCK_DGRAM
STREAM_SOCK_RAW
STREAM_SOCK_RDM
STREAM_SOCK_SEQPACKET
STREAM_SOCK_STREAM
STREAM_IPPROTO_ICMP
STREAM_IPPROTO_IP
STREAM_IPPROTO_RAW
STREAM_IPPROTO_TCP
STREAM_IPPROTO_UDP
STREAM_NOTIFY_RESOLVE
STREAM_NOTIFY_CONNECT
STREAM_NOTIFY_AUTH_REQUIRED
STREAM_NOTIFY_MIME_TYPE_IS
STREAM_NOTIFY_FILE_SIZE_IS
STREAM_NOTIFY_REDIRECTED
STREAM_NOTIFY_PROGRESS
STREAM_NOTIFY_COMPLETED
STREAM_NOTIFY_FAILURE
STREAM_NOTIFY_AUTH_RESULT
STREAM_NOTIFY_SEVERITY_INFO
STREAM_NOTIFY_SEVERITY_WARN
STREAM_NOTIFY_SEVERITY_ERR
STREAM_IS_URL
STREAM_CAST_FOR_SELECT
STREAM_CAST_AS_STREAM
STREAM_META_TOUCH
STREAM_META_OWNER
STREAM_META_OWNER_NAME
STREAM_META_GROUP
STREAM_META_GROUP_NAME
STREAM_META_ACCESS
STREAM_MKDIR_RECURSIVE
STREAM_USE_PATH
STREAM_REPORT_ERRORS
STREAM_OPTION_BLOCKING
STREAM_OPTION_READ_BUFFER
STREAM_BUFFER_NONE
STREAM_BUFFER_LINE
STREAM_BUFFER_FULL
STREAM_OPTION_READ_TIMEOUT
STREAM_OPTION_WRITE_BUFFER
STREAM_URL_STAT_LINK
STREAM_URL_STAT_QUIET
PSFS_PASS_ON
PSFS_FEED_ME
PSFS_ERR_FATAL
PSFS_FLAG_NORMAL
PSFS_FLAG_FLUSH_INC
PSFS_FLAG_FLUSH_CLOSE
CRYPT_SALT_LENGTH
CRYPT_STD_DES
CRYPT_EXT_DES
CRYPT_MD5
CRYPT_BLOWFISH
CRYPT_SHA256
CRYPT_SHA512
HTML_SPECIALCHARS
HTML_ENTITIES
ENT_COMPAT
ENT_QUOTES
ENT_NOQUOTES
ENT_IGNORE
ENT_SUBSTITUTE
ENT_DISALLOWED
ENT_HTML401
ENT_XML1
ENT_XHTML
ENT_HTML5
CHAR_MAX
LC_CTYPE
LC_NUMERIC
LC_TIME
LC_COLLATE
LC_MONETARY
LC_ALL
LC_MESSAGES
STR_PAD_LEFT
STR_PAD_RIGHT
STR_PAD_BOTH
ABDAY_1
ABDAY_2
ABDAY_3
ABDAY_4
ABDAY_5
ABDAY_6
ABDAY_7
DAY_1
DAY_2
DAY_3
DAY_4
DAY_5
DAY_6
DAY_7
ABMON_1
ABMON_2
ABMON_3
ABMON_4
ABMON_5
ABMON_6
ABMON_7
ABMON_8
ABMON_9
ABMON_10
ABMON_11
ABMON_12
MON_1
MON_2
MON_3
MON_4
MON_5
MON_6
MON_7
MON_8
MON_9
MON_10
MON_11
MON_12
AM_STR
PM_STR
D_T_FMT
D_FMT
T_FMT
T_FMT_AMPM
ERA
ERA_YEAR
ERA_D_T_FMT
ERA_D_FMT
ERA_T_FMT
ALT_DIGITS
INT_CURR_SYMBOL
CURRENCY_SYMBOL
CRNCYSTR
MON_DECIMAL_POINT
MON_THOUSANDS_SEP
MON_GROUPING
POSITIVE_SIGN
NEGATIVE_SIGN
INT_FRAC_DIGITS
FRAC_DIGITS
P_CS_PRECEDES
P_SEP_BY_SPACE
N_CS_PRECEDES
N_SEP_BY_SPACE
P_SIGN_POSN
N_SIGN_POSN
DECIMAL_POINT
RADIXCHAR
THOUSANDS_SEP
THOUSEP
GROUPING
YESEXPR
NOEXPR
YESSTR
NOSTR
CODESET
SVN_REVISION_HEAD
SVN_AUTH_PARAM_DEFAULT_USERNAME
SVN_AUTH_PARAM_DEFAULT_PASSWORD
SVN_AUTH_PARAM_NON_INTERACTIVE
SVN_AUTH_PARAM_DONT_STORE_PASSWORDS
SVN_AUTH_PARAM_NO_AUTH_CACHE
SVN_AUTH_PARAM_SSL_SERVER_FAILURES
SVN_AUTH_PARAM_SSL_SERVER_CERT_INFO
SVN_AUTH_PARAM_CONFIG
SVN_AUTH_PARAM_SERVER_GROUP
SVN_AUTH_PARAM_CONFIG_DIR
PHP_SVN_AUTH_PARAM_IGNORE_SSL_VERIFY_ERRORS
SVN_FS_CONFIG_FS_TYPE
SVN_FS_TYPE_BDB
SVN_FS_TYPE_FSFS
SVN_PROP_REVISION_DATE
SVN_PROP_REVISION_ORIG_DATE
SVN_PROP_REVISION_AUTHOR
SVN_PROP_REVISION_LOG
SVN_WC_STATUS_NONE
SVN_WC_STATUS_UNVERSIONED
SVN_WC_STATUS_NORMAL
SVN_WC_STATUS_ADDED
SVN_WC_STATUS_MISSING
SVN_WC_STATUS_DELETED
SVN_WC_STATUS_REPLACED
SVN_WC_STATUS_MODIFIED
SVN_WC_STATUS_MERGED
SVN_WC_STATUS_CONFLICTED
SVN_WC_STATUS_IGNORED
SVN_WC_STATUS_OBSTRUCTED
SVN_WC_STATUS_EXTERNAL
SVN_WC_STATUS_INCOMPLETE
SVN_NODE_NONE
SVN_NODE_FILE
SVN_NODE_DIR
SVN_NODE_UNKNOWN
SWOOLE_BASE
SWOOLE_THREAD
SWOOLE_PROCESS
SWOOLE_IPC_UNSOCK
SWOOLE_IPC_MSGQUEUE
SWOOLE_IPC_PREEMPTIVE
SWOOLE_SOCK_TCP
SWOOLE_SOCK_TCP6
SWOOLE_SOCK_UDP
SWOOLE_SOCK_UDP6
SWOOLE_SOCK_UNIX_DGRAM
SWOOLE_SOCK_UNIX_STREAM
SWOOLE_TCP
SWOOLE_TCP6
SWOOLE_UDP
SWOOLE_UDP6
SWOOLE_UNIX_DGRAM
SWOOLE_UNIX_STREAM
SWOOLE_SOCK_SYNC
SWOOLE_SOCK_ASYNC
SWOOLE_SYNC
SWOOLE_ASYNC
SWOOLE_KEEP
SWOOLE_EVENT_READ
SWOOLE_EVENT_WRITE
SWOOLE_VERSION
SWOOLE_AIO_BASE
SWOOLE_AIO_LINUX
SWOOLE_FILELOCK
SWOOLE_MUTEX
SWOOLE_SEM
SWOOLE_RWLOCK
WEBSOCKET_OPCODE_TEXT
WEBSOCKET_OPCODE_BINARY
WEBSOCKET_OPCODE_PING
WEBSOCKET_STATUS_CONNECTION
WEBSOCKET_STATUS_HANDSHAKE
WEBSOCKET_STATUS_FRAME
WEBSOCKET_STATUS_ACTIVE
SWOOLE_FAST_PACK
SWOOLE_LOG_DEBUG
SWOOLE_LOG_TRACE
SWOOLE_LOG_INFO
SWOOLE_LOG_NOTICE
SWOOLE_LOG_WARNING
SWOOLE_LOG_ERROR
SWOOLE_LOG_NONE
TIDY_TAG_UNKNOWN
TIDY_TAG_A
TIDY_TAG_ABBR
TIDY_TAG_ACRONYM
TIDY_TAG_ADDRESS
TIDY_TAG_ALIGN
TIDY_TAG_APPLET
TIDY_TAG_AREA
TIDY_TAG_ARTICLE
TIDY_TAG_ASIDE
TIDY_TAG_AUDIO
TIDY_TAG_B
TIDY_TAG_BASE
TIDY_TAG_BASEFONT
TIDY_TAG_BDI
TIDY_TAG_BDO
TIDY_TAG_BGSOUND
TIDY_TAG_BIG
TIDY_TAG_BLINK
TIDY_TAG_BLOCKQUOTE
TIDY_TAG_BODY
TIDY_TAG_BR
TIDY_TAG_BUTTON
TIDY_TAG_CANVAS
TIDY_TAG_CAPTION
TIDY_TAG_CENTER
TIDY_TAG_CITE
TIDY_TAG_CODE
TIDY_TAG_COL
TIDY_TAG_COLGROUP
TIDY_TAG_COMMAND
TIDY_TAG_COMMENT
TIDY_TAG_DATALIST
TIDY_TAG_DD
TIDY_TAG_DEL
TIDY_TAG_DETAILS
TIDY_TAG_DFN
TIDY_TAG_DIALOG
TIDY_TAG_DIR
TIDY_TAG_DIV
TIDY_TAG_DL
TIDY_TAG_DT
TIDY_TAG_EM
TIDY_TAG_EMBED
TIDY_TAG_FIELDSET
TIDY_TAG_FIGCAPTION
TIDY_TAG_FIGURE
TIDY_TAG_FONT
TIDY_TAG_FOOTER
TIDY_TAG_FORM
TIDY_TAG_FRAME
TIDY_TAG_FRAMESET
TIDY_TAG_H1
TIDY_TAG_H2
TIDY_TAG_H3
TIDY_TAG_H4
TIDY_TAG_H5
TIDY_TAG_H6
TIDY_TAG_HEAD
TIDY_TAG_HEADER
TIDY_TAG_HGROUP
TIDY_TAG_HR
TIDY_TAG_HTML
TIDY_TAG_I
TIDY_TAG_IFRAME
TIDY_TAG_ILAYER
TIDY_TAG_IMG
TIDY_TAG_INPUT
TIDY_TAG_INS
TIDY_TAG_ISINDEX
TIDY_TAG_KBD
TIDY_TAG_KEYGEN
TIDY_TAG_LABEL
TIDY_TAG_LAYER
TIDY_TAG_LEGEND
TIDY_TAG_LI
TIDY_TAG_LINK
TIDY_TAG_LISTING
TIDY_TAG_MAIN
TIDY_TAG_MAP
TIDY_TAG_MARK
TIDY_TAG_MARQUEE
TIDY_TAG_MENU
TIDY_TAG_MENUITEM
TIDY_TAG_META
TIDY_TAG_METER
TIDY_TAG_MULTICOL
TIDY_TAG_NAV
TIDY_TAG_NOBR
TIDY_TAG_NOEMBED
TIDY_TAG_NOFRAMES
TIDY_TAG_NOLAYER
TIDY_TAG_NOSAVE
TIDY_TAG_NOSCRIPT
TIDY_TAG_OBJECT
TIDY_TAG_OL
TIDY_TAG_OPTGROUP
TIDY_TAG_OPTION
TIDY_TAG_OUTPUT
TIDY_TAG_P
TIDY_TAG_PARAM
TIDY_TAG_PLAINTEXT
TIDY_TAG_PRE
TIDY_TAG_PROGRESS
TIDY_TAG_Q
TIDY_TAG_RB
TIDY_TAG_RBC
TIDY_TAG_RP
TIDY_TAG_RT
TIDY_TAG_RTC
TIDY_TAG_RUBY
TIDY_TAG_S
TIDY_TAG_SAMP
TIDY_TAG_SCRIPT
TIDY_TAG_SECTION
TIDY_TAG_SELECT
TIDY_TAG_SERVER
TIDY_TAG_SERVLET
TIDY_TAG_SMALL
TIDY_TAG_SOURCE
TIDY_TAG_SPACER
TIDY_TAG_SPAN
TIDY_TAG_STRIKE
TIDY_TAG_STRONG
TIDY_TAG_STYLE
TIDY_TAG_SUB
TIDY_TAG_SUMMARY
TIDY_TAG_SUP
TIDY_TAG_TABLE
TIDY_TAG_TBODY
TIDY_TAG_TD
TIDY_TAG_TEMPLATE
TIDY_TAG_TEXTAREA
TIDY_TAG_TFOOT
TIDY_TAG_TH
TIDY_TAG_THEAD
TIDY_TAG_TIME
TIDY_TAG_TITLE
TIDY_TAG_TR
TIDY_TAG_TRACK
TIDY_TAG_TT
TIDY_TAG_U
TIDY_TAG_UL
TIDY_TAG_VAR
TIDY_TAG_VIDEO
TIDY_TAG_WBR
TIDY_TAG_XMP
TIDY_NODETYPE_ROOT
TIDY_NODETYPE_DOCTYPE
TIDY_NODETYPE_COMMENT
TIDY_NODETYPE_PROCINS
TIDY_NODETYPE_TEXT
TIDY_NODETYPE_START
TIDY_NODETYPE_END
TIDY_NODETYPE_STARTEND
TIDY_NODETYPE_CDATA
TIDY_NODETYPE_SECTION
TIDY_NODETYPE_ASP
TIDY_NODETYPE_JSTE
TIDY_NODETYPE_PHP
TIDY_NODETYPE_XMLDECL
TOKEN_PARSE
TRADER_MA_TYPE_SMA
TRADER_MA_TYPE_EMA
TRADER_MA_TYPE_WMA
TRADER_MA_TYPE_DEMA
TRADER_MA_TYPE_TEMA
TRADER_MA_TYPE_TRIMA
TRADER_MA_TYPE_KAMA
TRADER_MA_TYPE_MAMA
TRADER_MA_TYPE_T3
TRADER_REAL_MIN
TRADER_REAL_MAX
TRADER_FUNC_UNST_ADX
TRADER_FUNC_UNST_ADXR
TRADER_FUNC_UNST_ATR
TRADER_FUNC_UNST_CMO
TRADER_FUNC_UNST_DX
TRADER_FUNC_UNST_EMA
TRADER_FUNC_UNST_HT_DCPERIOD
TRADER_FUNC_UNST_HT_DCPHASE
TRADER_FUNC_UNST_HT_PHASOR
TRADER_FUNC_UNST_HT_SINE
TRADER_FUNC_UNST_HT_TRENDLINE
TRADER_FUNC_UNST_HT_TRENDMODE
TRADER_FUNC_UNST_KAMA
TRADER_FUNC_UNST_MAMA
TRADER_FUNC_UNST_MFI
TRADER_FUNC_UNST_MINUS_DI
TRADER_FUNC_UNST_MINUS_DM
TRADER_FUNC_UNST_NATR
TRADER_FUNC_UNST_PLUS_DI
TRADER_FUNC_UNST_PLUS_DM
TRADER_FUNC_UNST_RSI
TRADER_FUNC_UNST_STOCHRSI
TRADER_FUNC_UNST_T3
TRADER_FUNC_UNST_ALL
TRADER_FUNC_UNST_NONE
TRADER_COMPATIBILITY_DEFAULT
TRADER_COMPATIBILITY_METASTOCK
TRADER_ERR_SUCCESS
TRADER_ERR_LIB_NOT_INITIALIZE
TRADER_ERR_BAD_PARAM
TRADER_ERR_ALLOC_ERR
TRADER_ERR_GROUP_NOT_FOUND
TRADER_ERR_FUNC_NOT_FOUND
TRADER_ERR_INVALID_HANDLE
TRADER_ERR_INVALID_PARAM_HOLDER
TRADER_ERR_INVALID_PARAM_HOLDER_TYPE
TRADER_ERR_INVALID_PARAM_FUNCTION
TRADER_ERR_INPUT_NOT_ALL_INITIALIZE
TRADER_ERR_OUTPUT_NOT_ALL_INITIALIZE
TRADER_ERR_OUT_OF_RANGE_START_INDEX
TRADER_ERR_OUT_OF_RANGE_END_INDEX
TRADER_ERR_INVALID_LIST_TYPE
TRADER_ERR_BAD_OBJECT
TRADER_ERR_NOT_SUPPORTED
TRADER_ERR_INTERNAL_ERROR
TRADER_ERR_UNKNOWN_ERROR
ODBC_TYPE
ODBC_BINMODE_PASSTHRU
ODBC_BINMODE_RETURN
ODBC_BINMODE_CONVERT
SQL_ODBC_CURSORS
SQL_CUR_USE_DRIVER
SQL_CUR_USE_IF_NEEDED
SQL_CUR_USE_ODBC
SQL_CONCURRENCY
SQL_CONCUR_READ_ONLY
SQL_CONCUR_LOCK
SQL_CONCUR_ROWVER
SQL_CONCUR_VALUES
SQL_CURSOR_TYPE
SQL_CURSOR_FORWARD_ONLY
SQL_CURSOR_KEYSET_DRIVEN
SQL_CURSOR_DYNAMIC
SQL_CURSOR_STATIC
SQL_KEYSET_SIZE
SQL_CHAR
SQL_VARCHAR
SQL_LONGVARCHAR
SQL_WCHAR
SQL_WVARCHAR
SQL_WLONGVARCHAR
SQL_DECIMAL
SQL_NUMERIC
SQL_BIT
SQL_TINYINT
SQL_SMALLINT
SQL_INTEGER
SQL_BIGINT
SQL_REAL
SQL_FLOAT
SQL_DOUBLE
SQL_BINARY
SQL_VARBINARY
SQL_LONGVARBINARY
SQL_DATE
SQL_TIME
SQL_TIMESTAMP
SQL_TYPE_DATE
SQL_TYPE_TIME
SQL_TYPE_TIMESTAMP
SQL_BEST_ROWID
SQL_ROWVER
SQL_SCOPE_CURROW
SQL_SCOPE_TRANSACTION
SQL_SCOPE_SESSION
SQL_NO_NULLS
SQL_NULLABLE
SQL_INDEX_UNIQUE
SQL_INDEX_ALL
SQL_ENSURE
SQL_QUICK
SQL_FETCH_FIRST
SQL_FETCH_NEXT
ZEND_EXIT
ZEND_NEW
ZEND_THROW
ZEND_FETCH_CLASS
ZEND_ADD_TRAIT
ZEND_ADD_INTERFACE
ZEND_INSTANCEOF
ZEND_USER_OPCODE_CONTINUE
ZEND_USER_OPCODE_ENTER
ZEND_USER_OPCODE_LEAVE
ZEND_USER_OPCODE_DISPATCH
ZEND_USER_OPCODE_DISPATCH_TO
ZEND_USER_OPCODE_RETURN
ZEND_ACC_PUBLIC
ZEND_ACC_PROTECTED
ZEND_ACC_PRIVATE
ZEND_ACC_STATIC
ZEND_ACC_FINAL
ZEND_ACC_ABSTRACT
ZEND_ACC_CLASS
ZEND_ACC_INTERFACE
ZEND_ACC_TRAIT
ZEND_ACC_FETCH
PHP_URL_SCHEME
PHP_URL_HOST
PHP_URL_PORT
PHP_URL_USER
PHP_URL_PASS
PHP_URL_PATH
PHP_URL_QUERY
PHP_URL_FRAGMENT
PHP_QUERY_RFC1738
PHP_QUERY_RFC3986
VAR_REPRESENTATION_SINGLE_LINE
VAR_REPRESENTATION_UNESCAPED
VARNISH_STATUS_SYNTAX
VARNISH_STATUS_UNKNOWN
VARNISH_STATUS_UNIMPL
VARNISH_STATUS_TOOFEW
VARNISH_STATUS_TOOMANY
VARNISH_STATUS_PARAM
VARNISH_STATUS_AUTH
VARNISH_STATUS_OK
VARNISH_STATUS_CANT
VARNISH_STATUS_COMMS
VARNISH_STATUS_CLOSE
VARNISH_CONFIG_IDENT
VARNISH_CONFIG_HOST
VARNISH_CONFIG_PORT
VARNISH_CONFIG_TIMEOUT
VARNISH_CONFIG_SECRET
VARNISH_CONFIG_COMPAT
VARNISH_COMPAT_2
VARNISH_COMPAT_3
WIN32_SERVICE_WIN32_OWN_PROCESS
WIN32_SERVICE_INTERACTIVE_PROCESS
WIN32_SERVICE_WIN32_OWN_PROCESS_INTERACTIVE
WIN32_SERVICE_CONTINUE_PENDING
WIN32_SERVICE_PAUSE_PENDING
WIN32_SERVICE_PAUSED
WIN32_SERVICE_RUNNING
WIN32_SERVICE_START_PENDING
WIN32_SERVICE_STOP_PENDING
WIN32_SERVICE_STOPPED
WIN32_SERVICE_CONTROL_CONTINUE
WIN32_SERVICE_CONTROL_DEVICEEVENT
WIN32_SERVICE_CONTROL_HARDWAREPROFILECHANGE
WIN32_SERVICE_CONTROL_INTERROGATE
WIN32_SERVICE_CONTROL_NETBINDADD
WIN32_SERVICE_CONTROL_NETBINDDISABLE
WIN32_SERVICE_CONTROL_NETBINDENABLE
WIN32_SERVICE_CONTROL_NETBINDREMOVE
WIN32_SERVICE_CONTROL_PARAMCHANGE
WIN32_SERVICE_CONTROL_PAUSE
WIN32_SERVICE_CONTROL_POWEREVENT
WIN32_SERVICE_CONTROL_PRESHUTDOWN
WIN32_SERVICE_CONTROL_SESSIONCHANGE
WIN32_SERVICE_CONTROL_SHUTDOWN
WIN32_SERVICE_CONTROL_STOP
WIN32_SERVICE_ACCEPT_HARDWAREPROFILECHANGE
WIN32_SERVICE_ACCEPT_NETBINDCHANGE
WIN32_SERVICE_ACCEPT_PARAMCHANGE
WIN32_SERVICE_ACCEPT_PAUSE_CONTINUE
WIN32_SERVICE_ACCEPT_POWEREVENT
WIN32_SERVICE_ACCEPT_PRESHUTDOWN
WIN32_SERVICE_ACCEPT_SESSIONCHANGE
WIN32_SERVICE_ACCEPT_SHUTDOWN
WIN32_SERVICE_ACCEPT_STOP
WIN32_SERVICE_ACCEPT_TIMECHANGE
WIN32_SERVICE_ACCEPT_TRIGGEREVENT
WIN32_SERVICE_BOOT_START
WIN32_SERVICE_SYSTEM_START
WIN32_SERVICE_AUTO_START
WIN32_SERVICE_DEMAND_START
WIN32_SERVICE_DISABLED
WIN32_SERVICE_ERROR_IGNORE
WIN32_SERVICE_ERROR_NORMAL
WIN32_SERVICE_ERROR_SEVERE
WIN32_SERVICE_ERROR_CRITICAL
WIN32_SERVICE_RUNS_IN_SYSTEM_PROCESS
WIN32_ERROR_ACCESS_DENIED
WIN32_ERROR_CIRCULAR_DEPENDENCY
WIN32_ERROR_DATABASE_DOES_NOT_EXIST
WIN32_ERROR_DEPENDENT_SERVICES_RUNNING
WIN32_ERROR_DUPLICATE_SERVICE_NAME
WIN32_ERROR_FAILED_SERVICE_CONTROLLER_CONNECT
WIN32_ERROR_INSUFFICIENT_BUFFER
WIN32_ERROR_INVALID_DATA
WIN32_ERROR_INVALID_HANDLE
WIN32_ERROR_INVALID_LEVEL
WIN32_ERROR_INVALID_NAME
WIN32_ERROR_INVALID_PARAMETER
WIN32_ERROR_INVALID_SERVICE_ACCOUNT
WIN32_ERROR_INVALID_SERVICE_CONTROL
WIN32_ERROR_PATH_NOT_FOUND
WIN32_ERROR_SERVICE_ALREADY_RUNNING
WIN32_ERROR_SERVICE_CANNOT_ACCEPT_CTRL
WIN32_ERROR_SERVICE_DATABASE_LOCKED
WIN32_ERROR_SERVICE_DEPENDENCY_DELETED
WIN32_ERROR_SERVICE_DEPENDENCY_FAIL
WIN32_ERROR_SERVICE_DISABLED
WIN32_ERROR_SERVICE_DOES_NOT_EXIST
WIN32_ERROR_SERVICE_EXISTS
WIN32_ERROR_SERVICE_LOGON_FAILED
WIN32_ERROR_SERVICE_MARKED_FOR_DELETE
WIN32_ERROR_SERVICE_NO_THREAD
WIN32_ERROR_SERVICE_NOT_ACTIVE
WIN32_ERROR_SERVICE_REQUEST_TIMEOUT
WIN32_ERROR_SHUTDOWN_IN_PROGRESS
WIN32_ERROR_SERVICE_SPECIFIC_ERROR
WIN32_NO_ERROR
WIN32_ABOVE_NORMAL_PRIORITY_CLASS
WIN32_BELOW_NORMAL_PRIORITY_CLASS
WIN32_HIGH_PRIORITY_CLASS
WIN32_IDLE_PRIORITY_CLASS
WIN32_NORMAL_PRIORITY_CLASS
WIN32_REALTIME_PRIORITY_CLASS
WIN32_SC_ACTION_NONE
WIN32_SC_ACTION_RESTART
WIN32_SC_ACTION_REBOOT
WIN32_SC_ACTION_RUN_COMMAND
WIN32_INFO_SERVICE
WIN32_INFO_DISPLAY
WIN32_INFO_USER
WIN32_INFO_PASSWORD
WIN32_INFO_PATH
WIN32_INFO_PARAMS
WIN32_INFO_DESCRIPTION
WIN32_INFO_START_TYPE
WIN32_INFO_LOAD_ORDER
WIN32_INFO_SVC_TYPE
WIN32_INFO_ERROR_CONTROL
WIN32_INFO_DELAYED_START
WIN32_INFO_BASE_PRIORITY
WIN32_INFO_DEPENDENCIES
WIN32_INFO_RECOVERY_DELAY
WIN32_INFO_RECOVERY_ACTION_1
WIN32_INFO_RECOVERY_ACTION_2
WIN32_INFO_RECOVERY_ACTION_3
WIN32_INFO_RECOVERY_RESET_PERIOD
WIN32_INFO_RECOVERY_ENABLED
WIN32_INFO_RECOVERY_REBOOT_MSG
WIN32_INFO_RECOVERY_COMMAND
WIN32_SERVICE_ALL_ACCESS
WIN32_SERVICE_CHANGE_CONFIG
WIN32_SERVICE_ENUMERATE_DEPENDENTS
WIN32_SERVICE_INTERROGATE
WIN32_SERVICE_PAUSE_CONTINUE
WIN32_SERVICE_QUERY_CONFIG
WIN32_SERVICE_QUERY_STATUS
WIN32_SERVICE_START
WIN32_SERVICE_STOP
WIN32_SERVICE_USER_DEFINED_CONTROL
WIN32_ACCESS_SYSTEM_SECURITY
WIN32_DELETE
WIN32_READ_CONTROL
WIN32_WRITE_DAC
WIN32_WRITE_OWNER
WIN32_GENERIC_READ
WIN32_GENERIC_WRITE
WIN32_GENERIC_EXECUTE
XATTR_ROOT
XATTR_DONTFOLLOW
XATTR_CREATE
XATTR_REPLACE
XDIFF_PATCH_NORMAL
XDIFF_PATCH_REVERSE
XHPROF_FLAGS_NO_BUILTINS
XHPROF_FLAGS_CPU
XHPROF_FLAGS_MEMORY
XML_ERROR_NONE
XML_ERROR_NO_MEMORY
XML_ERROR_SYNTAX
XML_ERROR_NO_ELEMENTS
XML_ERROR_INVALID_TOKEN
XML_ERROR_UNCLOSED_TOKEN
XML_ERROR_PARTIAL_CHAR
XML_ERROR_TAG_MISMATCH
XML_ERROR_DUPLICATE_ATTRIBUTE
XML_ERROR_JUNK_AFTER_DOC_ELEMENT
XML_ERROR_PARAM_ENTITY_REF
XML_ERROR_UNDEFINED_ENTITY
XML_ERROR_RECURSIVE_ENTITY_REF
XML_ERROR_ASYNC_ENTITY
XML_ERROR_BAD_CHAR_REF
XML_ERROR_BINARY_ENTITY_REF
XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF
XML_ERROR_MISPLACED_XML_PI
XML_ERROR_UNKNOWN_ENCODING
XML_ERROR_INCORRECT_ENCODING
XML_ERROR_UNCLOSED_CDATA_SECTION
XML_ERROR_EXTERNAL_ENTITY_HANDLING
XML_OPTION_CASE_FOLDING
XML_OPTION_PARSE_HUGE
XML_OPTION_TARGET_ENCODING
XML_OPTION_SKIP_TAGSTART
XML_OPTION_SKIP_WHITE
XML_SAX_IMPL
CRYPT_PREFIX_STD_DES
CRYPT_PREFIX_EXT_DES
CRYPT_PREFIX_MD5
CRYPT_PREFIX_BLOWFISH
CRYPT_PREFIX_SHA256
CRYPT_PREFIX_SHA512
CRYPT_PREFIX_SCRYPT
CRYPT_PREFIX_GOST_YESCRYPT
CRYPT_PREFIX_YESCRYPT
CRYPT_SALT_OK
CRYPT_SALT_INVALID
CRYPT_SALT_METHOD_DISABLED
CRYPT_SALT_METHOD_LEGACY
CRYPT_SALT_TOO_CHEAP
PASSWORD_SHA512
PASSWORD_YESCRYPT
XSL_CLONE_AUTO
XSL_CLONE_NEVER
XSL_CLONE_ALWAYS
LIBXSLT_VERSION
LIBXSLT_DOTTED_VERSION
LIBEXSLT_VERSION
LIBEXSLT_DOTTED_VERSION
XSL_SECPREF_NONE
XSL_SECPREF_READ_FILE
XSL_SECPREF_WRITE_FILE
XSL_SECPREF_CREATE_DIRECTORY
XSL_SECPREF_READ_NETWORK
XSL_SECPREF_WRITE_NETWORK
XSL_SECPREF_DEFAULT
YAC_VERSION
YAC_MAX_KEY_LEN
YAC_MAX_VALUE_RAW_LEN
YAC_MAX_RAW_COMPRESSED_LEN
YAC_SERIALIZER_PHP
YAC_SERIALIZER_JSON
YAC_SERIALIZER_IGBINARY
YAC_SERIALIZER_MSGPACK
YAC_SERIALIZER
YAF_VERSION
YAF_ENVIRON
YAF_ERR_STARTUP_FAILED
YAF_ERR_ROUTE_FAILED
YAF_ERR_DISPATCH_FAILED
YAF_ERR_AUTOLOAD_FAILED
YAF_ERR_NOTFOUND_MODULE
YAF_ERR_NOTFOUND_CONTROLLER
YAF_ERR_NOTFOUND_ACTION
YAF_ERR_NOTFOUND_VIEW
YAF_ERR_CALL_FAILED
YAF_ERR_TYPE_ERROR
YAML_ANY_SCALAR_STYLE
YAML_PLAIN_SCALAR_STYLE
YAML_SINGLE_QUOTED_SCALAR_STYLE
YAML_DOUBLE_QUOTED_SCALAR_STYLE
YAML_LITERAL_SCALAR_STYLE
YAML_FOLDED_SCALAR_STYLE
YAML_NULL_TAG
YAML_BOOL_TAG
YAML_STR_TAG
YAML_INT_TAG
YAML_FLOAT_TAG
YAML_TIMESTAMP_TAG
YAML_SEQ_TAG
YAML_MAP_TAG
YAML_PHP_TAG
YAML_ANY_ENCODING
YAML_UTF8_ENCODING
YAML_UTF16LE_ENCODING
YAML_UTF16BE_ENCODING
YAML_ANY_BREAK
YAML_CR_BREAK
YAML_LN_BREAK
YAML_CRLN_BREAK
YAR_VERSION
YAR_CLIENT_PROTOCOL_HTTP
YAR_OPT_PACKAGER
YAR_OPT_TIMEOUT
YAR_OPT_CONNECT_TIMEOUT
YAR_OPT_HEADER
YAR_PACKAGER_PHP
YAR_PACKAGER_JSON
YAR_ERR_OKEY
YAR_ERR_OUTPUT
YAR_ERR_TRANSPORT
YAR_ERR_REQUEST
YAR_ERR_PROTOCOL
YAR_ERR_PACKAGER
YAR_ERR_EXCEPTION
ZipArchive::CREATE
ZipArchive::OVERWRITE
ZipArchive::EXCL
ZipArchive::RDONLY
ZipArchive::CHECKCONS
ZipArchive::AFL_RDONLY
ZipArchive::AFL_IS_TORRENTZIP
ZipArchive::AFL_WANT_TORRENTZIP
ZipArchive::AFL_CREATE_OR_KEEP_FILE_FOR_EMPTY_ARCHIVE
ZipArchive::FL_NOCASE
ZipArchive::FL_NODIR
ZipArchive::FL_COMPRESSED
ZipArchive::FL_UNCHANGED
ZipArchive::FL_RECOMPRESS
ZipArchive::FL_ENCRYPTED
ZipArchive::FL_OVERWRITE
ZipArchive::FL_LOCAL
ZipArchive::FL_CENTRAL
ZipArchive::FL_ENC_GUESS
ZipArchive::FL_ENC_RAW
ZipArchive::FL_ENC_STRICT
ZipArchive::FL_ENC_UTF_8
ZipArchive::FL_ENC_CP437
ZipArchive::FL_OPEN_FILE_NOW
ZipArchive::CM_DEFAULT
ZipArchive::CM_STORE
ZipArchive::CM_SHRINK
ZipArchive::CM_REDUCE_1
ZipArchive::CM_REDUCE_2
ZipArchive::CM_REDUCE_3
ZipArchive::CM_REDUCE_4
ZipArchive::CM_IMPLODE
ZipArchive::CM_DEFLATE
ZipArchive::CM_DEFLATE64
ZipArchive::CM_PKWARE_IMPLODE
ZipArchive::CM_BZIP2
ZipArchive::CM_LZMA
ZipArchive::CM_LZMA2
ZipArchive::CM_ZSTD
ZipArchive::CM_XZ
ZipArchive::CM_TERSE
ZipArchive::CM_LZ77
ZipArchive::CM_WAVPACK
ZipArchive::CM_PPMD
ZipArchive::ER_OK
ZipArchive::ER_MULTIDISK
ZipArchive::ER_RENAME
ZipArchive::ER_CLOSE
ZipArchive::ER_SEEK
ZipArchive::ER_READ
ZipArchive::ER_WRITE
ZipArchive::ER_CRC
ZipArchive::ER_ZIPCLOSED
ZipArchive::ER_NOENT
ZipArchive::ER_EXISTS
ZipArchive::ER_OPEN
ZipArchive::ER_TMPOPEN
ZipArchive::ER_ZLIB
ZipArchive::ER_MEMORY
ZipArchive::ER_CHANGED
ZipArchive::ER_COMPNOTSUPP
ZipArchive::ER_EOF
ZipArchive::ER_INVAL
ZipArchive::ER_NOZIP
ZipArchive::ER_INTERNAL
ZipArchive::ER_INCONS
ZipArchive::ER_REMOVE
ZipArchive::ER_DELETED
ZipArchive::ER_ENCRNOTSUPP
ZipArchive::ER_RDONLY
ZipArchive::ER_NOPASSWD
ZipArchive::ER_WRONGPASSWD
ZipArchive::ER_OPNOTSUPP
ZipArchive::ER_INUSE
ZipArchive::ER_TELL
ZipArchive::ER_COMPRESSED_DATA
ZipArchive::ER_CANCELLED
ZipArchive::ER_DATA_LENGTH
ZipArchive::ER_NOT_ALLOWED
ZipArchive::ER_TRUNCATED_ZIP
ZipArchive::EM_NONE
ZipArchive::EM_TRAD_PKWARE
ZipArchive::EM_AES_128
ZipArchive::EM_AES_192
ZipArchive::EM_AES_256
ZipArchive::EM_UNKNOWN
ZipArchive::LENGTH_TO_END
ZipArchive::LENGTH_UNCHECKED
ZipArchive::LIBZIP_VERSION
ZipArchive::OPSYS_DOS
ZipArchive::OPSYS_AMIGA
ZipArchive::OPSYS_OPENVMS
ZipArchive::OPSYS_UNIX
ZipArchive::OPSYS_VM_CMS
ZipArchive::OPSYS_ATARI_ST
ZipArchive::OPSYS_OS_2
ZipArchive::OPSYS_MACINTOSH
ZipArchive::OPSYS_Z_SYSTEM
ZipArchive::OPSYS_CPM
ZipArchive::OPSYS_WINDOWS_NTFS
ZipArchive::OPSYS_MVS
ZipArchive::OPSYS_VSE
ZipArchive::OPSYS_ACORN_RISC
ZipArchive::OPSYS_VFAT
ZipArchive::OPSYS_ALTERNATE_MVS
ZipArchive::OPSYS_BEOS
ZipArchive::OPSYS_TANDEM
ZipArchive::OPSYS_OS_400
ZipArchive::OPSYS_OS_X
ZipArchive::OPSYS_DEFAULT
FORCE_GZIP
FORCE_DEFLATE
ZLIB_ENCODING_RAW
ZLIB_ENCODING_DEFLATE
ZLIB_ENCODING_GZIP
ZLIB_FILTERED
ZLIB_HUFFMAN_ONLY
ZLIB_FIXED
ZLIB_RLE
ZLIB_DEFAULT_STRATEGY
ZLIB_BLOCK
ZLIB_NO_FLUSH
ZLIB_PARTIAL_FLUSH
ZLIB_SYNC_FLUSH
ZLIB_FULL_FLUSH
ZLIB_FINISH
ZLIB_VERSION
ZLIB_VERNUM
ZLIB_OK
ZLIB_STREAM_END
ZLIB_NEED_DICT
ZLIB_ERRNO
ZLIB_STREAM_ERROR
ZLIB_DATA_ERROR
ZLIB_MEM_ERROR
ZLIB_BUF_ERROR
ZLIB_VERSION_ERROR
