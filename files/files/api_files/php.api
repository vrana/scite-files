self
parent
$this
$GLOBALS
$_SERVER
$_GET
$_POST
$_FILES
$_REQUEST
$_SESSION
$_ENV
$_COOKIE
$php_errormsg
$http_response_header
$argc
$argv
abstract
and
as
break
callable
case
catch
class
clone
const
continue
declare
default
do
echo
else
elseif
enddeclare
endfor
endforeach
endif
endswitch
endwhile
extends
final
finally
fn
for
foreach
function
global
goto
if
implements
include
include_once
instanceof
insteadof
interface
match
namespace
new
or
print
private
protected
public
readonly
require
require_once
return
static
switch
throw
trait
try
use
var
while
xor
yield
from
__CLASS__
__DIR__
__FILE__
__FUNCTION__
__LINE__
__METHOD__
__PROPERTY__
__NAMESPACE__
__TRAIT__
PHP_VERSION
PHP_MAJOR_VERSION
PHP_MINOR_VERSION
PHP_RELEASE_VERSION
PHP_VERSION_ID
PHP_EXTRA_VERSION
ZEND_THREAD_SAFE
ZEND_DEBUG_BUILD
PHP_ZTS
PHP_DEBUG
DEBUG_BACKTRACE_PROVIDE_OBJECT
DEBUG_BACKTRACE_IGNORE_ARGS
PHP_MAXPATHLEN
PHP_OS
PHP_OS_FAMILY
PHP_SAPI
PHP_EOL
PHP_INT_MAX
PHP_INT_MIN
PHP_INT_SIZE
PHP_FLOAT_DIG
PHP_FLOAT_EPSILON
PHP_FLOAT_MIN
PHP_FLOAT_MAX
DEFAULT_INCLUDE_PATH
PHP_PREFIX
PHP_BINDIR
PHP_SBINDIR
PHP_BINARY
PHP_MANDIR
PHP_LIBDIR
PHP_DATADIR
PHP_SYSCONFDIR
PHP_LOCALSTATEDIR
PHP_CONFIG_FILE_PATH
PHP_CONFIG_FILE_SCAN_DIR
PHP_SHLIB_SUFFIX
PHP_FD_SETSIZE
PHP_WINDOWS_EVENT_CTRL_C
PHP_WINDOWS_EVENT_CTRL_BREAK
PHP_CLI_PROCESS_TITLE
STDERR
STDIN
STDOUT
int
float
bool
string
true
false
null
void
iterable
object
mixed
never
enum
resource
numeric
__construct(mixed ...$values)	Object constructor
__destruct()	Object destructor
__call(string $name, array $arguments): mixed	Triggered when invoking inaccessible methods in an object context
__callStatic(string $name, array $arguments): mixed	Triggered when invoking inaccessible methods in a static context
__get(string $name): mixed	Utilized for reading data from inaccessible properties
__set(string $name, mixed $value): void	Run when writing data to inaccessible properties
__isset(string $name): bool	Triggered by calling isset() or empty() on inaccessible properties
__unset(string $name): void	Invoked when unset() is used on inaccessible properties
__sleep(): array	Called by serialize()
__wakeup(): void	Called by unserialize()
__serialize(): array	Called by serialize()
__unserialize(array $data): void	Called by unserialize()
__toString(): string	Decide how to react when object is converted to a string
__invoke(mixed ...$values): mixed	Called when a script tries to call an object as a function
__set_state(array $properties): object	Called by var_export() result
__clone(): void	Called after cloning
__debugInfo(): array	Called by var_dump()
AllowDynamicProperties()	(new) Construct a new AllowDynamicProperties attribute instance
>offsetExists(mixed $offset): bool	(ArrayAccess) Whether an offset exists
>offsetGet(mixed $offset): mixed	(ArrayAccess) Offset to retrieve
>offsetSet(mixed $offset, mixed $value): void	(ArrayAccess) Assign a value to the specified offset
>offsetUnset(mixed $offset): void	(ArrayAccess) Unset an offset
Attribute(int $flags = Attribute::TARGET_ALL)	(new) Construct a new Attribute instance
Deprecated(string|null $message = null, string|null $since = null)	(new) Construct a new Deprecated attribute instance
Override()	(new) Construct a new Override attribute instance
BackedEnum::from(int|string $value): static	Maps a scalar to an enum instance
BackedEnum::tryFrom(int|string $value): static|null	Maps a scalar to an enum instance or null
Closure::bind(Closure $closure, object|null $newThis, object|string|null $newScope = "static"): Closure|null	Duplicates a closure with a specific bound object and class scope
>bindTo(object|null $newThis, object|string|null $newScope = "static"): Closure|null	(Closure) Duplicates the closure with a new bound object and class scope
>call(object $newThis, mixed ...$args): mixed	(Closure) Binds and calls the closure
Closure()	(new) Constructor that disallows instantiation
Closure::fromCallable(callable $callback): Closure	Converts a callable into a closure
>count(): int	(Countable) Count elements of an object
>__clone(): void	(Error) Clone the error
Error(string $message = "", int $code = ?, Throwable|null $previous = null)	(new) Construct the error object
>getCode(): int	(Error) Gets the error code
>getFile(): string	(Error) Gets the file in which the error occurred
>getLine(): int	(Error) Gets the line in which the error occurred
>getMessage(): string	(Error) Gets the error message
>getPrevious(): Throwable|null	(Error) Returns previous Throwable
>getTrace(): array	(Error) Gets the stack trace
>getTraceAsString(): string	(Error) Gets the stack trace as a string
>__toString(): string	(Error) String representation of the error
ErrorException(string $message = "", int $code = ?, int $severity = E_ERROR, string|null $filename = null, int|null $line = null, Throwable|null $previous = null)	(new) Constructs the exception
>getSeverity(): int	(ErrorException) Gets the exception severity
>__clone(): void	(Exception) Clone the exception
Exception(string $message = "", int $code = ?, Throwable|null $previous = null)	(new) Construct the exception
>getCode(): int	(Exception) Gets the Exception code
>getFile(): string	(Exception) Gets the file in which the exception was created
>getLine(): int	(Exception) Gets the line in which the exception was created
>getMessage(): string	(Exception) Gets the Exception message
>getPrevious(): Throwable|null	(Exception) Returns previous Throwable
>getTrace(): array	(Exception) Gets the stack trace
>getTraceAsString(): string	(Exception) Gets the stack trace as a string
>__toString(): string	(Exception) String representation of the exception
Fiber(callable $callback)	(new) Creates a new Fiber instance
Fiber::getCurrent(): Fiber|null	Gets the currently executing Fiber instance
>getReturn(): mixed	(Fiber) Gets the value returned by the Fiber
>isRunning(): bool	(Fiber) Determines if the fiber is running
>isStarted(): bool	(Fiber) Determines if the fiber has started
>isSuspended(): bool	(Fiber) Determines if the fiber is suspended
>isTerminated(): bool	(Fiber) Determines if the fiber has terminated
>resume(mixed $value = null): mixed	(Fiber) Resumes execution of the fiber with a value
>start(mixed ...$args): mixed	(Fiber) Start execution of the fiber
Fiber::suspend(mixed $value = null): mixed	Suspends execution of the current fiber
>throw(Throwable $exception): mixed	(Fiber) Resumes execution of the fiber with an exception
FiberError()	(new) Constructor to disallow direct instantiation
>current(): mixed	(Generator) Get the yielded value
>getReturn(): mixed	(Generator) Get the return value of a generator
>key(): mixed	(Generator) Get the yielded key
>next(): void	(Generator) Resume execution of the generator
>rewind(): void	(Generator) Rewind the generator to the first yield
>send(mixed $value): mixed	(Generator) Send a value to the generator
>throw(Throwable $exception): mixed	(Generator) Throw an exception into the generator
>valid(): bool	(Generator) Check if the iterator has been closed
>__wakeup(): void	(Generator) Serialize callback
InternalIterator()	(new) Private constructor to disallow direct instantiation
>current(): mixed	(InternalIterator) Return the current element
>key(): mixed	(InternalIterator) Return the key of the current element
>next(): void	(InternalIterator) Move forward to next element
>rewind(): void	(InternalIterator) Rewind the Iterator to the first element
>valid(): bool	(InternalIterator) Check if current position is valid
>current(): mixed	(Iterator) Return the current element
>key(): mixed	(Iterator) Return the key of the current element
>next(): void	(Iterator) Move forward to next element
>rewind(): void	(Iterator) Rewind the Iterator to the first element
>valid(): bool	(Iterator) Checks if current position is valid
>getIterator(): Traversable	(IteratorAggregate) Retrieve an external iterator or traversable
ReturnTypeWillChange()	(new) Construct a new ReturnTypeWillChange attribute instance
SensitiveParameter()	(new) Construct a new SensitiveParameter attribute instance
SensitiveParameterValue(mixed $value)	(new) Constructs a new SensitiveParameterValue object
>__debugInfo(): array	(SensitiveParameterValue) Protects the sensitive value against accidental exposure
>getValue(): mixed	(SensitiveParameterValue) Returns the sensitive value
>serialize(): string|null	(Serializable) String representation of object
>unserialize(string $data): void	(Serializable) Constructs the object
>__toString(): string	(Stringable) Gets a string representation of the object
>getCode(): int	(Throwable) Gets the exception code
>getFile(): string	(Throwable) Gets the file in which the object was created
>getLine(): int	(Throwable) Gets the line on which the object was instantiated
>getMessage(): string	(Throwable) Gets the message
>getPrevious(): Throwable|null	(Throwable) Returns the previous Throwable
>getTrace(): array	(Throwable) Gets the stack trace
>getTraceAsString(): string	(Throwable) Gets the stack trace as a string
>__toString(): string	(Throwable) Gets a string representation of the thrown object
UnitEnum::cases(): array	Generates a list of cases on an enum
$argc()	The number of arguments passed to script
$argv()	Array of arguments passed to script
$_COOKIE()	HTTP Cookies
$_ENV()	Environment variables
$_FILES()	HTTP File Upload variables
$_GET()	HTTP GET variables
$GLOBALS()	References all variables available in global scope
$http_response_header()	HTTP response headers
$php_errormsg()	The previous error message
$_POST()	HTTP POST variables
$_REQUEST()	HTTP Request variables
$_SERVER()	Server and execution environment information
$_SESSION()	Session variables
Superglobals()	Built-in variables that are always available in all scopes
>count(): int	(WeakMap) Counts the number of live entries in the map
>getIterator(): Iterator	(WeakMap) Retrieve an external iterator
>offsetExists(object $object): bool	(WeakMap) Checks whether a certain object is in the map
>offsetGet(object $object): mixed	(WeakMap) Returns the value pointed to by a certain object
>offsetSet(object $object, mixed $value): void	(WeakMap) Updates the map with a new key-value pair
>offsetUnset(object $object): void	(WeakMap) Removes an entry from the map
WeakReference()	(new) Constructor that disallows instantiation
WeakReference::create(object $object): WeakReference	Create a new weak reference
>get(): object|null	(WeakReference) Get a weakly referenced Object
ArgumentCountError()	(new) ArgumentCountError is thrown when too few arguments are passed to a user-defined function or method
ArithmeticError()	(new) ArithmeticError is thrown when an error occurs while performing mathematical operations
ArrayAccess()	(new) Interface to provide accessing objects as arrays
AssertionError()	(new) AssertionError is thrown when an assertion made via assert fails
BackedEnum()	(new) The BackedEnum interface is automatically applied to backed enumerations by the engine
ClosedGeneratorException()	(new) A ClosedGeneratorException is thrown when trying to retrieve a value from a closed Generator
CompileError()	(new) CompileError is thrown for some compilation errors, which formerly issued a fatal error
Countable()	(new) Classes implementing Countable can be used with the count function
DivisionByZeroError()	(new) DivisionByZeroError is thrown when an attempt is made to divide a number by zero
Generator()	(new) Generator objects are returned from generators
Iterator()	(new) Interface for external iterators or objects that can be iterated themselves internally
IteratorAggregate()	(new) Interface to create an external Iterator
ParseError()	(new) ParseError is thrown when an error occurs while parsing PHP code, such as when eval is called
__PHP_Incomplete_Class()	(new) Created by unserialize when trying to unserialize an undefined class or a class that is not listed in the allowed_classes of unserialize's $options array
RequestParseBodyException()	(new) A RequestParseBodyException is thrown in request_parse_body when the request body is invalid, according to the Content-Type header
Serializable()	(new) Interface for customized serializing
stdClass()	(new) A generic empty class with dynamic properties
Stringable()	(new) The Stringable interface denotes a class as having a __toString() method
Throwable()	(new) Throwable is the base interface for any object that can be thrown via a throw statement, including Error and Exception
Traversable()	(new) Interface to detect if a class is traversable using foreach
TypeError()	(new) A TypeError may be thrown when: The value being set for a class property does not match the property's corresponding declared type
UnhandledMatchError()	(new) An UnhandledMatchError is thrown when the subject passed to a match expression is not handled by any arm of the match expression
UnitEnum()	(new) The UnitEnum interface is automatically applied to all enumerations by the engine
ValueError()	(new) A ValueError is thrown when the type of an argument is correct but the value of it is incorrect
WeakMap()	(new) A WeakMap is map (or dictionary) that accepts objects as keys
array_all(array $array, callable $callback): bool	Checks if all array elements satisfy a callback function
array_any(array $array, callable $callback): bool	Checks if at least one array element satisfies a callback function
array_change_key_case(array $array, int $case = CASE_LOWER): array	Changes the case of all keys in an array
array_chunk(array $array, int $length, bool $preserve_keys = false): array	Split an array into chunks
array_column(array $array, int|string|null $column_key, int|string|null $index_key = null): array	Return the values from a single column in the input array
array_combine(array $keys, array $values): array	Creates an array by using one array for keys and another for its values
array_count_values(array $array): array	Counts the occurrences of each distinct value in an array
array_diff_assoc(array $array, array ...$arrays): array	Computes the difference of arrays with additional index check
array_diff_key(array $array, array ...$arrays): array	Computes the difference of arrays using keys for comparison
array_diff_uassoc(array $array, array ...$arrays, callable $key_compare_func): array	Computes the difference of arrays with additional index check which is performed by a user supplied callback function
array_diff_ukey(array $array, array ...$arrays, callable $key_compare_func): array	Computes the difference of arrays using a callback function on the keys for comparison
array_diff(array $array, array ...$arrays): array	Computes the difference of arrays
array_fill_keys(array $keys, mixed $value): array	Fill an array with values, specifying keys
array_fill(int $start_index, int $count, mixed $value): array	Fill an array with values
array_filter(array $array, callable|null $callback = null, int $mode = ?): array	Filters elements of an array using a callback function
array_find_key(array $array, callable $callback): mixed	Returns the key of the first element satisfying a callback function
array_find(array $array, callable $callback): mixed	Returns the first element satisfying a callback function
array_flip(array $array): array	Exchanges all keys with their associated values in an array
array_intersect_assoc(array $array, array ...$arrays): array	Computes the intersection of arrays with additional index check
array_intersect_key(array $array, array ...$arrays): array	Computes the intersection of arrays using keys for comparison
array_intersect_uassoc(array $array, array ...$arrays, callable $key_compare_func): array	Computes the intersection of arrays with additional index check, compares indexes by a callback function
array_intersect_ukey(array $array, array ...$arrays, callable $key_compare_func): array	Computes the intersection of arrays using a callback function on the keys for comparison
array_intersect(array $array, array ...$arrays): array	Computes the intersection of arrays
array_is_list(array $array): bool	Checks whether a given $array is a list
array_key_exists(string|int|float|bool|resource|null $key, array $array): bool	Checks if the given key or index exists in the array
array_key_first(array $array): int|string|null	Gets the first key of an array
array_key_last(array $array): int|string|null	Gets the last key of an array
array_keys(array $array): array	Return all the keys or a subset of the keys of an array
array_keys(array $array, mixed $filter_value, bool $strict = false): array	Return all the keys or a subset of the keys of an array
array_map(callable|null $callback, array $array, array ...$arrays): array	Applies the callback to the elements of the given arrays
array_merge_recursive(array ...$arrays): array	Merge one or more arrays recursively
array_merge(array ...$arrays): array	Merge one or more arrays
array_multisort(array $array1, mixed $array1_sort_order = SORT_ASC, mixed $array1_sort_flags = SORT_REGULAR, mixed ...$rest): bool	Sort multiple or multi-dimensional arrays
array_pad(array $array, int $length, mixed $value): array	Pad array to the specified length with a value
array_pop(array $array): mixed	Pop the element off the end of array
array_product(array $array): int|float	Calculate the product of values in an array
array_push(array $array, mixed ...$values): int	Push one or more elements onto the end of array
array_rand(array $array, int $num = 1): int|string|array	Pick one or more random keys out of an array
array_reduce(array $array, callable $callback, mixed $initial = null): mixed	Iteratively reduce the array to a single value using a callback function
array_replace_recursive(array $array, array ...$replacements): array	Replaces elements from passed arrays into the first array recursively
array_replace(array $array, array ...$replacements): array	Replaces elements from passed arrays into the first array
array_reverse(array $array, bool $preserve_keys = false): array	Return an array with elements in reverse order
array_search(mixed $needle, array $haystack, bool $strict = false): int|string|false	Searches the array for a given value and returns the first corresponding key if successful
array_shift(array $array): mixed	Shift an element off the beginning of array
array_slice(array $array, int $offset, int|null $length = null, bool $preserve_keys = false): array	Extract a slice of the array
array_splice(array $array, int $offset, int|null $length = null, mixed $replacement = []): array	Remove a portion of the array and replace it with something else
array_sum(array $array): int|float	Calculate the sum of values in an array
array_udiff_assoc(array $array, array ...$arrays, callable $value_compare_func): array	Computes the difference of arrays with additional index check, compares data by a callback function
array_udiff_uassoc(array $array, array ...$arrays, callable $value_compare_func, callable $key_compare_func): array	Computes the difference of arrays with additional index check, compares data and indexes by a callback function
array_udiff(array $array, array ...$arrays, callable $value_compare_func): array	Computes the difference of arrays by using a callback function for data comparison
array_uintersect_assoc(array $array, array ...$arrays, callable $value_compare_func): array	Computes the intersection of arrays with additional index check, compares data by a callback function
array_uintersect_uassoc(array $array1, array ...$arrays, callable $value_compare_func, callable $key_compare_func): array	Computes the intersection of arrays with additional index check, compares data and indexes by separate callback functions
array_uintersect(array $array, array ...$arrays, callable $value_compare_func): array	Computes the intersection of arrays, compares data by a callback function
array_unique(array $array, int $flags = SORT_STRING): array	Removes duplicate values from an array
array_unshift(array $array, mixed ...$values): int	Prepend one or more elements to the beginning of an array
array_values(array $array): array	Return all the values of an array
array_walk_recursive(array|object $array, callable $callback, mixed $arg = null): true	Apply a user function recursively to every member of an array
array_walk(array|object $array, callable $callback, mixed $arg = null): true	Apply a user supplied function to every member of an array
array(mixed ...$values): array	Create an array
arsort(array $array, int $flags = SORT_REGULAR): true	Sort an array in descending order and maintain index association
asort(array $array, int $flags = SORT_REGULAR): true	Sort an array in ascending order and maintain index association
compact(array|string $var_name, array|string ...$var_names): array	Create array containing variables and their values
count(Countable|array $value, int $mode = COUNT_NORMAL): int	Counts all elements in an array or in a Countable object
current(array|object $array): mixed	Return the current element in an array
each(array|object $array): array	Return the current key and value pair from an array and advance the array cursor
end(array|object $array): mixed	Set the internal pointer of an array to its last element
extract(array $array, int $flags = EXTR_OVERWRITE, string $prefix = ""): int	Import variables into the current symbol table from an array
in_array(mixed $needle, array $haystack, bool $strict = false): bool	Checks if a value exists in an array
key_exists()	Alias of array_key_exists
key(array|object $array): int|string|null	Fetch a key from an array
krsort(array $array, int $flags = SORT_REGULAR): true	Sort an array by key in descending order
ksort(array $array, int $flags = SORT_REGULAR): true	Sort an array by key in ascending order
list(mixed $var, mixed ...$vars = ?): array	Assign variables as if they were an array
natcasesort(array $array): true	Sort an array using a case insensitive "natural order" algorithm
natsort(array $array): true	Sort an array using a "natural order" algorithm
next(array|object $array): mixed	Advance the internal pointer of an array
pos()	Alias of current
prev(array|object $array): mixed	Rewind the internal array pointer
range(string|int|float $start, string|int|float $end, int|float $step = 1): array	Create an array containing a range of elements
reset(array|object $array): mixed	Set the internal pointer of an array to its first element
rsort(array $array, int $flags = SORT_REGULAR): true	Sort an array in descending order
shuffle(array $array): true	Shuffle an array
sizeof()	Alias of count
sort(array $array, int $flags = SORT_REGULAR): true	Sort an array in ascending order
uasort(array $array, callable $callback): true	Sort an array with a user-defined comparison function and maintain index association
uksort(array $array, callable $callback): true	Sort an array by keys using a user-defined comparison function
usort(array $array, callable $callback): true	Sort an array by values using a user-defined comparison function
__autoload(string $class): void	Attempt to load undefined class
class_alias(string $class, string $alias, bool $autoload = true): bool	Creates an alias for a class
class_exists(string $class, bool $autoload = true): bool	Checks if the class has been defined
enum_exists(string $enum, bool $autoload = true): bool	Checks if the enum has been defined
get_called_class(): string	The "Late Static Binding" class name
get_class_methods(object|string $object_or_class): array	Gets the class methods' names
get_class_vars(string $class): array	Get the default properties of the class
get_class(object $object = ?): string	Returns the name of the class of an object
get_declared_classes(): array	Returns an array with the name of the defined classes
get_declared_interfaces(): array	Returns an array of all declared interfaces
get_declared_traits(): array	Returns an array of all declared traits
get_mangled_object_vars(object $object): array	Returns an array of mangled object properties
get_object_vars(object $object): array	Gets the properties of the given object
get_parent_class(object|string $object_or_class = ?): string|false	Retrieves the parent class name for object or class
interface_exists(string $interface, bool $autoload = true): bool	Checks if the interface has been defined
is_a(mixed $object_or_class, string $class, bool $allow_string = false): bool	Checks whether the object is of a given type or subtype
is_subclass_of(mixed $object_or_class, string $class, bool $allow_string = true): bool	Checks if the object has this class as one of its parents or implements it
method_exists(object|string $object_or_class, string $method): bool	Checks if the class method exists
property_exists(object|string $object_or_class, string $property): bool	Checks if the object or class has a property
trait_exists(string $trait, bool $autoload = true): bool	Checks if the trait exists
DateInterval(string $duration)	(new) Creates a new DateInterval object
DateInterval::createFromDateString(string $datetime): DateInterval	Sets up a DateInterval from the relative parts of the string
date_interval_create_from_date_string(string $datetime): DateInterval|false	Sets up a DateInterval from the relative parts of the string
>format(string $format): string	(DateInterval) Formats the interval
DatePeriod(DateTimeInterface $start, DateInterval $interval, int $recurrences, int $options = ?)	(new) Creates a new DatePeriod object
DatePeriod(DateTimeInterface $start, DateInterval $interval, DateTimeInterface $end, int $options = ?)	(new) Creates a new DatePeriod object
DatePeriod::createFromISO8601String(string $specification, int $options = ?): static	Creates a new DatePeriod object from an ISO8601 string
>getDateInterval(): DateInterval	(DatePeriod) Gets the interval
>getEndDate(): DateTimeInterface|null	(DatePeriod) Gets the end date
>getRecurrences(): int|null	(DatePeriod) Gets the number of recurrences
>getStartDate(): DateTimeInterface	(DatePeriod) Gets the start date
>add(DateInterval $interval): DateTime	(DateTime) Modifies a DateTime object, with added amount of days, months, years, hours, minutes and seconds
date_add(DateTime $object, DateInterval $interval): DateTime	Modifies a DateTime object, with added amount of days, months, years, hours, minutes and seconds
DateTime(string $datetime = "now", DateTimeZone|null $timezone = null)	(new) Returns new DateTime object
DateTime::createFromFormat(string $format, string $datetime, DateTimeZone|null $timezone = null): DateTime|false	Parses a time string according to a specified format
date_create_from_format(string $format, string $datetime, DateTimeZone|null $timezone = null): DateTime|false	Parses a time string according to a specified format
DateTime::createFromImmutable(DateTimeImmutable $object): static	Returns new DateTime instance encapsulating the given DateTimeImmutable object
DateTime::createFromInterface(DateTimeInterface $object): DateTime	Returns new DateTime object encapsulating the given DateTimeInterface object
>getLastErrors()	(DateTime) Alias of DateTimeImmutable::getLastErrors
>modify(string $modifier): DateTime	(DateTime) Alters the timestamp
date_modify(DateTime $object, string $modifier): DateTime|false	Alters the timestamp
DateTime::__set_state(array $array): DateTime	The __set_state handler
>setDate(int $year, int $month, int $day): DateTime	(DateTime) Sets the date
date_date_set(DateTime $object, int $year, int $month, int $day): DateTime	Sets the date
>setISODate(int $year, int $week, int $dayOfWeek = 1): DateTime	(DateTime) Sets the ISO date
date_isodate_set(DateTime $object, int $year, int $week, int $dayOfWeek = 1): DateTime	Sets the ISO date
>setTime(int $hour, int $minute, int $second = ?, int $microsecond = ?): DateTime	(DateTime) Sets the time
date_time_set(DateTime $object, int $hour, int $minute, int $second = ?, int $microsecond = ?): DateTime	Sets the time
>setTimestamp(int $timestamp): DateTime	(DateTime) Sets the date and time based on an Unix timestamp
date_timestamp_set(DateTime $object, int $timestamp): DateTime	Sets the date and time based on an Unix timestamp
>setTimezone(DateTimeZone $timezone): DateTime	(DateTime) Sets the time zone for the DateTime object
date_timezone_set(DateTime $object, DateTimeZone $timezone): DateTime	Sets the time zone for the DateTime object
>sub(DateInterval $interval): DateTime	(DateTime) Subtracts an amount of days, months, years, hours, minutes and seconds from a DateTime object
date_sub(DateTime $object, DateInterval $interval): DateTime	Subtracts an amount of days, months, years, hours, minutes and seconds from a DateTime object
>add(DateInterval $interval): DateTimeImmutable	(DateTimeImmutable) Returns a new object, with added amount of days, months, years, hours, minutes and seconds
date_create_immutable(string $datetime = "now", DateTimeZone|null $timezone = null): DateTimeImmutable|false	Returns new DateTimeImmutable object
DateTimeImmutable::createFromFormat(string $format, string $datetime, DateTimeZone|null $timezone = null): DateTimeImmutable|false	Parses a time string according to a specified format
date_create_immutable_from_format(string $format, string $datetime, DateTimeZone|null $timezone = null): DateTimeImmutable|false	Parses a time string according to a specified format
DateTimeImmutable::createFromInterface(DateTimeInterface $object): DateTimeImmutable	Returns new DateTimeImmutable object encapsulating the given DateTimeInterface object
DateTimeImmutable::createFromMutable(DateTime $object): static	Returns new DateTimeImmutable instance encapsulating the given DateTime object
DateTimeImmutable::getLastErrors(): array|false	Returns the warnings and errors
>modify(string $modifier): DateTimeImmutable	(DateTimeImmutable) Creates a new object with modified timestamp
DateTimeImmutable::__set_state(array $array): DateTimeImmutable	The __set_state handler
>setDate(int $year, int $month, int $day): DateTimeImmutable	(DateTimeImmutable) Sets the date
>setISODate(int $year, int $week, int $dayOfWeek = 1): DateTimeImmutable	(DateTimeImmutable) Sets the ISO date
>setTime(int $hour, int $minute, int $second = ?, int $microsecond = ?): DateTimeImmutable	(DateTimeImmutable) Sets the time
>setTimestamp(int $timestamp): DateTimeImmutable	(DateTimeImmutable) Sets the date and time based on a Unix timestamp
>setTimezone(DateTimeZone $timezone): DateTimeImmutable	(DateTimeImmutable) Sets the time zone
>sub(DateInterval $interval): DateTimeImmutable	(DateTimeImmutable) Subtracts an amount of days, months, years, hours, minutes and seconds
>diff(DateTimeInterface $targetObject, bool $absolute = false): DateInterval	(DateTimeInterface) Returns the difference between two DateTime objects
>diff(DateTimeInterface $targetObject, bool $absolute = false): DateInterval	(DateTimeImmutable) Returns the difference between two DateTime objects
>diff(DateTimeInterface $targetObject, bool $absolute = false): DateInterval	(DateTime) Returns the difference between two DateTime objects
date_diff(DateTimeInterface $baseObject, DateTimeInterface $targetObject, bool $absolute = false): DateInterval	Returns the difference between two DateTime objects
>format(string $format): string	(DateTimeInterface) Returns date formatted according to given format
>format(string $format): string	(DateTimeImmutable) Returns date formatted according to given format
>format(string $format): string	(DateTime) Returns date formatted according to given format
date_format(DateTimeInterface $object, string $format): string	Returns date formatted according to given format
>getOffset(): int	(DateTimeInterface) Returns the timezone offset
>getOffset(): int	(DateTimeImmutable) Returns the timezone offset
>getOffset(): int	(DateTime) Returns the timezone offset
date_offset_get(DateTimeInterface $object): int	Returns the timezone offset
>getTimestamp(): int	(DateTimeInterface) Gets the Unix timestamp
>getTimestamp(): int	(DateTimeImmutable) Gets the Unix timestamp
>getTimestamp(): int	(DateTime) Gets the Unix timestamp
date_timestamp_get(DateTimeInterface $object): int	Gets the Unix timestamp
>getTimezone(): DateTimeZone|false	(DateTimeInterface) Return time zone relative to given DateTime
>getTimezone(): DateTimeZone|false	(DateTimeImmutable) Return time zone relative to given DateTime
>getTimezone(): DateTimeZone|false	(DateTime) Return time zone relative to given DateTime
date_timezone_get(DateTimeInterface $object): DateTimeZone|false	Return time zone relative to given DateTime
>__wakeup(): void	(DateTime) The __wakeup handler
>__wakeup(): void	(DateTimeImmutable) The __wakeup handler
>__wakeup(): void	(DateTimeInterface) The __wakeup handler
timezone_open(string $timezone): DateTimeZone|false	Creates new DateTimeZone object
>getLocation(): array|false	(DateTimeZone) Returns location information for a timezone
timezone_location_get(DateTimeZone $object): array|false	Returns location information for a timezone
>getName(): string	(DateTimeZone) Returns the name of the timezone
timezone_name_get(DateTimeZone $object): string	Returns the name of the timezone
>getOffset(DateTimeInterface $datetime): int	(DateTimeZone) Returns the timezone offset from GMT
timezone_offset_get(DateTimeZone $object, DateTimeInterface $datetime): int	Returns the timezone offset from GMT
>getTransitions(int $timestampBegin = PHP_INT_MIN, int $timestampEnd = PHP_INT_MAX): array|false	(DateTimeZone) Returns all transitions for the timezone
timezone_transitions_get(DateTimeZone $object, int $timestampBegin = PHP_INT_MIN, int $timestampEnd = PHP_INT_MAX): array|false	Returns all transitions for the timezone
DateTimeZone::listAbbreviations(): array	Returns associative array containing dst, offset and the timezone name
timezone_abbreviations_list(): array	Returns associative array containing dst, offset and the timezone name
DateTimeZone::listIdentifiers(int $timezoneGroup = DateTimeZone::ALL, string|null $countryCode = null): array	Returns a numerically indexed array containing all defined timezone identifiers
timezone_identifiers_list(int $timezoneGroup = DateTimeZone::ALL, string|null $countryCode = null): array	Returns a numerically indexed array containing all defined timezone identifiers
checkdate(int $month, int $day, int $year): bool	Validate a Gregorian date
date_add()	Alias of DateTime::add
date_create_from_format()	Alias of DateTime::createFromFormat
date_create_immutable_from_format()	Alias of DateTimeImmutable::createFromFormat
date_create_immutable(string $datetime = "now", DateTimeZone|null $timezone = null): DateTimeImmutable|false	create a new DateTimeImmutable object
date_create(string $datetime = "now", DateTimeZone|null $timezone = null): DateTime|false	create a new DateTime object
date_date_set()	Alias of DateTime::setDate
date_default_timezone_get(): string	Gets the default timezone used by all date/time functions in a script
date_default_timezone_set(string $timezoneId): bool	Sets the default timezone used by all date/time functions in a script
date_diff()	Alias of DateTime::diff
date_format()	Alias of DateTime::format
date_get_last_errors()	Alias of DateTimeImmutable::getLastErrors
date_interval_create_from_date_string()	Alias of DateInterval::createFromDateString
date_interval_format()	Alias of DateInterval::format
date_isodate_set()	Alias of DateTime::setISODate
date_modify()	Alias of DateTime::modify
date_offset_get()	Alias of DateTime::getOffset
date_parse_from_format(string $format, string $datetime): array	Get info about given date formatted according to the specified format
date_parse(string $datetime): array	Returns associative array with detailed info about given date/time
date_sub()	Alias of DateTime::sub
date_sun_info(int $timestamp, float $latitude, float $longitude): array	Returns an array with information about sunset/sunrise and twilight begin/end
date_sunrise(int $timestamp, int $returnFormat = SUNFUNCS_RET_STRING, float|null $latitude = null, float|null $longitude = null, float|null $zenith = null, float|null $utcOffset = null): string|int|float|false	Returns time of sunrise for a given day and location
date_sunset(int $timestamp, int $returnFormat = SUNFUNCS_RET_STRING, float|null $latitude = null, float|null $longitude = null, float|null $zenith = null, float|null $utcOffset = null): string|int|float|false	Returns time of sunset for a given day and location
date_time_set()	Alias of DateTime::setTime
date_timestamp_get()	Alias of DateTime::getTimestamp
date_timestamp_set()	Alias of DateTime::setTimestamp
date_timezone_get()	Alias of DateTime::getTimezone
date_timezone_set()	Alias of DateTime::setTimezone
date(string $format, int|null $timestamp = null): string	Format a Unix timestamp
getdate(int|null $timestamp = null): array	Get date/time information
gettimeofday(bool $as_float = false): array|float	Get current time
gmdate(string $format, int|null $timestamp = null): string	Format a GMT/UTC date/time
gmmktime(int $hour, int|null $minute = null, int|null $second = null, int|null $month = null, int|null $day = null, int|null $year = null): int|false	Get Unix timestamp for a GMT date
gmstrftime(string $format, int|null $timestamp = null): string|false	Format a GMT/UTC time/date according to locale settings
idate(string $format, int|null $timestamp = null): int|false	Format a local time/date part as integer
localtime(int|null $timestamp = null, bool $associative = false): array	Get the local time
microtime(bool $as_float = false): string|float	Return current Unix timestamp with microseconds
mktime(int $hour, int|null $minute = null, int|null $second = null, int|null $month = null, int|null $day = null, int|null $year = null): int|false	Get Unix timestamp for a date
strftime(string $format, int|null $timestamp = null): string|false	Format a local time/date according to locale settings
strptime(string $timestamp, string $format): array|false	Parse a time/date generated with strftime
strtotime(string $datetime, int|null $baseTimestamp = null): int|false	Parse about any English textual datetime description into a Unix timestamp
time(): int	Return current Unix timestamp
timezone_abbreviations_list()	Alias of DateTimeZone::listAbbreviations
timezone_identifiers_list()	Alias of DateTimeZone::listIdentifiers
timezone_location_get()	Alias of DateTimeZone::getLocation
timezone_name_from_abbr(string $abbr, int $utcOffset = -1, int $isDST = -1): string|false	Returns a timezone name by guessing from abbreviation and UTC offset
timezone_name_get()	Alias of DateTimeZone::getName
timezone_offset_get()	Alias of DateTimeZone::getOffset
timezone_open()	Alias of DateTimeZone::__construct
timezone_transitions_get()	Alias of DateTimeZone::getTransitions
timezone_version_get(): string	Gets the version of the timezonedb
DateError()	(new) Thrown when the timezone database is not found, or contains invalid data
DateException()	(new) Parent class of Date/Time exceptions, for issues that come to light due to user input, or free form text arguments that need to be parsed
DateInvalidOperationException()	(new) Thrown by DateTimeImmutable::sub and DateTime::sub when an unsupported operation is attempted
DateInvalidTimeZoneException()	(new) Thrown when an incorrect value is passed to DateTimeZone::__construct
DateMalformedIntervalStringException()	(new) Thrown when an invalid $duration argument is passed to DateInterval::__construct
DateMalformedPeriodStringException()	(new) Thrown when an invalid $isostr argument is passed to DatePeriod::__construct
DateMalformedStringException()	(new) Thrown when an invalid Date/Time string is detected
DateObjectError()	(new) Thrown when one of the Date/Time classes has not been correctly initialised
DateRangeError()	(new) Thrown by DateTime::getTimestamp, DateTimeImmutable::getTimestamp, and date_timestamp_get, on 32-bit platforms if the date object represents a date outside of the 32-bit signed range
DateTimeImmutable()	(new) Representation of date and time
DateTimeInterface()	(new) DateTimeInterface was created so that parameter, return, or property type declarations may accept either DateTimeImmutable or DateTime as a value
DateTimeZone()	(new) Representation of time zone
>close(): void	(Directory) Close directory handle
>read(): string|false	(Directory) Read entry from directory handle
>rewind(): void	(Directory) Rewind directory handle
chdir(string $directory): bool	Change directory
chroot(string $directory): bool	Change the root directory
closedir(resource|null $dir_handle = null): void	Close directory handle
dir(string $directory, resource|null $context = null): Directory|false	Return an instance of the Directory class
getcwd(): string|false	Gets the current working directory
opendir(string $directory, resource|null $context = null): resource|false	Open directory handle
readdir(resource|null $dir_handle = null): string|false	Read entry from directory handle
rewinddir(resource|null $dir_handle = null): void	Rewind directory handle
scandir(string $directory, int $sorting_order = SCANDIR_SORT_ASCENDING, resource|null $context = null): array|false	List files and directories inside the specified path
Directory()	(new) Instances of Directory are created by calling the dir function, not by the new operator
debug_backtrace(int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT, int $limit = ?): array	Generates a backtrace
debug_print_backtrace(int $options = ?, int $limit = ?): void	Prints a backtrace
error_clear_last(): void	Clear the most recent error
error_get_last(): array|null	Get the last occurred error
error_log(string $message, int $message_type = ?, string|null $destination = null, string|null $additional_headers = null): bool	Send an error message to the defined error handling routines
error_reporting(int|null $error_level = null): int	Sets which PHP errors are reported
restore_error_handler(): true	Restores the previous error handler function
restore_exception_handler(): true	Restores the previously defined exception handler function
set_error_handler(callable|null $callback, int $error_levels = E_ALL): callable|null	Sets a user-defined error handler function
set_exception_handler(callable|null $callback): callable|null	Sets a user-defined exception handler function
trigger_error(string $message, int $error_level = E_USER_NOTICE): true	Generates a user-level error/warning/notice message
user_error()	Alias of trigger_error
escapeshellarg(string $arg): string	Escape a string to be used as a shell argument
escapeshellcmd(string $command): string	Escape shell metacharacters
exec(string $command, array $output = null, int $result_code = null): string|false	Execute an external program
passthru(string $command, int $result_code = null): false|null	Execute an external program and display raw output
proc_close(resource $process): int	Close a process opened by proc_open and return the exit code of that process
proc_get_status(resource $process): array	Get information about a process opened by proc_open
proc_nice(int $priority): bool	Change the priority of the current process
proc_open(array|string $command, array $descriptor_spec, array $pipes, string|null $cwd = null, array|null $env_vars = null, array|null $options = null): resource|false	Execute a command and open file pointers for input/output
proc_terminate(resource $process, int $signal = 15): bool	Kills a process opened by proc_open
shell_exec(string $command): string|false|null	Execute command via shell and return the complete output as a string
system(string $command, int $result_code = null): string|false	Execute an external program and display the output
basename(string $path, string $suffix = ""): string	Returns trailing name component of path
chgrp(string $filename, string|int $group): bool	Changes file group
chmod(string $filename, int $permissions): bool	Changes file mode
chown(string $filename, string|int $user): bool	Changes file owner
clearstatcache(bool $clear_realpath_cache = false, string $filename = ""): void	Clears file status cache
copy(string $from, string $to, resource|null $context = null): bool	Copies file
delete()	See unlink or unset
dirname(string $path, int $levels = 1): string	Returns a parent directory's path
disk_free_space(string $directory): float|false	Returns available space on filesystem or disk partition
disk_total_space(string $directory): float|false	Returns the total size of a filesystem or disk partition
diskfreespace()	Alias of disk_free_space
fclose(resource $stream): bool	Closes an open file pointer
fdatasync(resource $stream): bool	Synchronizes data (but not meta-data) to the file
feof(resource $stream): bool	Tests for end-of-file on a file pointer
fflush(resource $stream): bool	Flushes the output to a file
fgetc(resource $stream): string|false	Gets character from file pointer
fgetcsv(resource $stream, int|null $length = null, string $separator = ",", string $enclosure = "\"", string $escape = "\\"): array|false	Gets line from file pointer and parse for CSV fields
fgets(resource $stream, int|null $length = null): string|false	Gets line from file pointer
fgetss(resource $handle, int $length = ?, string $allowable_tags = ?): string	Gets line from file pointer and strip HTML tags
file_exists(string $filename): bool	Checks whether a file or directory exists
file_get_contents(string $filename, bool $use_include_path = false, resource|null $context = null, int $offset = ?, int|null $length = null): string|false	Reads entire file into a string
file_put_contents(string $filename, mixed $data, int $flags = ?, resource|null $context = null): int|false	Write data to a file
file(string $filename, int $flags = ?, resource|null $context = null): array|false	Reads entire file into an array
fileatime(string $filename): int|false	Gets last access time of file
filectime(string $filename): int|false	Gets inode change time of file
filegroup(string $filename): int|false	Gets file group
fileinode(string $filename): int|false	Gets file inode
filemtime(string $filename): int|false	Gets file modification time
fileowner(string $filename): int|false	Gets file owner
fileperms(string $filename): int|false	Gets file permissions
filesize(string $filename): int|false	Gets file size
filetype(string $filename): string|false	Gets file type
flock(resource $stream, int $operation, int $would_block = null): bool	Portable advisory file locking
fnmatch(string $pattern, string $filename, int $flags = ?): bool	Match filename against a pattern
fopen(string $filename, string $mode, bool $use_include_path = false, resource|null $context = null): resource|false	Opens file or URL
fpassthru(resource $stream): int	Output all remaining data on a file pointer
fputcsv(resource $stream, array $fields, string $separator = ",", string $enclosure = "\"", string $escape = "\\", string $eol = "\n"): int|false	Format line as CSV and write to file pointer
fputs()	Alias of fwrite
fread(resource $stream, int $length): string|false	Binary-safe file read
fscanf(resource $stream, string $format, mixed ...$vars): array|int|false|null	Parses input from a file according to a format
fseek(resource $stream, int $offset, int $whence = SEEK_SET): int	Seeks on a file pointer
fstat(resource $stream): array|false	Gets information about a file using an open file pointer
fsync(resource $stream): bool	Synchronizes changes to the file (including meta-data)
ftell(resource $stream): int|false	Returns the current position of the file read/write pointer
ftruncate(resource $stream, int $size): bool	Truncates a file to a given length
fwrite(resource $stream, string $data, int|null $length = null): int|false	Binary-safe file write
glob(string $pattern, int $flags = ?): array|false	Find pathnames matching a pattern
is_dir(string $filename): bool	Tells whether the filename is a directory
is_executable(string $filename): bool	Tells whether the filename is executable
is_file(string $filename): bool	Tells whether the filename is a regular file
is_link(string $filename): bool	Tells whether the filename is a symbolic link
is_readable(string $filename): bool	Tells whether a file exists and is readable
is_uploaded_file(string $filename): bool	Tells whether the file was uploaded via HTTP POST
is_writable(string $filename): bool	Tells whether the filename is writable
is_writeable()	Alias of is_writable
lchgrp(string $filename, string|int $group): bool	Changes group ownership of symlink
lchown(string $filename, string|int $user): bool	Changes user ownership of symlink
link(string $target, string $link): bool	Create a hard link
linkinfo(string $path): int|false	Gets information about a link
lstat(string $filename): array|false	Gives information about a file or symbolic link
mkdir(string $directory, int $permissions = 0777, bool $recursive = false, resource|null $context = null): bool	Makes directory
move_uploaded_file(string $from, string $to): bool	Moves an uploaded file to a new location
parse_ini_file(string $filename, bool $process_sections = false, int $scanner_mode = INI_SCANNER_NORMAL): array|false	Parse a configuration file
parse_ini_string(string $ini_string, bool $process_sections = false, int $scanner_mode = INI_SCANNER_NORMAL): array|false	Parse a configuration string
pathinfo(string $path, int $flags = PATHINFO_ALL): array|string	Returns information about a file path
pclose(resource $handle): int	Closes process file pointer
popen(string $command, string $mode): resource|false	Opens process file pointer
readfile(string $filename, bool $use_include_path = false, resource|null $context = null): int|false	Outputs a file
readlink(string $path): string|false	Returns the target of a symbolic link
realpath_cache_get(): array	Get realpath cache entries
realpath_cache_size(): int	Get realpath cache size
realpath(string $path): string|false	Returns canonicalized absolute pathname
rename(string $from, string $to, resource|null $context = null): bool	Renames a file or directory
rewind(resource $stream): bool	Rewind the position of a file pointer
rmdir(string $directory, resource|null $context = null): bool	Removes directory
set_file_buffer()	Alias of stream_set_write_buffer
stat(string $filename): array|false	Gives information about a file
symlink(string $target, string $link): bool	Creates a symbolic link
tempnam(string $directory, string $prefix): string|false	Create file with unique file name
tmpfile(): resource|false	Creates a temporary file
touch(string $filename, int|null $mtime = null, int|null $atime = null): bool	Sets access and modification time of file
umask(int|null $mask = null): int	Changes the current umask
unlink(string $filename, resource|null $context = null): bool	Deletes a file
fastcgi_finish_request(): bool	Flushes all response data to the client
fpm_get_status(): array|false	Returns the current FPM pool status
call_user_func_array(callable $callback, array $args): mixed	Call a callback with an array of parameters
call_user_func(callable $callback, mixed ...$args): mixed	Call the callback given by the first parameter
create_function(string $args, string $code): string	Create a function dynamically by evaluating a string of code
forward_static_call_array(callable $callback, array $args): mixed	Call a static method and pass the arguments as array
forward_static_call(callable $callback, mixed ...$args): mixed	Call a static method
func_get_arg(int $position): mixed	Return an item from the argument list
func_get_args(): array	Returns an array comprising a function's argument list
func_num_args(): int	Returns the number of arguments passed to the function
function_exists(string $function): bool	Return true if the given function has been defined
get_defined_functions(bool $exclude_disabled = true): array	Returns an array of all defined functions
register_shutdown_function(callable $callback, mixed ...$args): void	Register a function for execution on shutdown
register_tick_function(callable $callback, mixed ...$args): bool	Register a function for execution on each tick
unregister_tick_function(callable $callback): void	De-register a function for execution on each tick
hash_algos(): array	Return a list of registered hashing algorithms
hash_copy(HashContext $context): HashContext	Copy hashing context
hash_equals(string $known_string, string $user_string): bool	Timing attack safe string comparison
hash_file(string $algo, string $filename, bool $binary = false, array $options = []): string|false	Generate a hash value using the contents of a given file
hash_final(HashContext $context, bool $binary = false): string	Finalize an incremental hash and return resulting digest
hash_hkdf(string $algo, string $key, int $length = ?, string $info = "", string $salt = ""): string	Generate a HKDF key derivation of a supplied key input
hash_hmac_algos(): array	Return a list of registered hashing algorithms suitable for hash_hmac
hash_hmac_file(string $algo, string $filename, string $key, bool $binary = false): string|false	Generate a keyed hash value using the HMAC method and the contents of a given file
hash_hmac(string $algo, string $data, string $key, bool $binary = false): string	Generate a keyed hash value using the HMAC method
hash_init(string $algo, int $flags = ?, string $key = "", array $options = []): HashContext	Initialize an incremental hashing context
hash_pbkdf2(string $algo, string $password, string $salt, int $iterations, int $length = ?, bool $binary = false, array $options = []): string	Generate a PBKDF2 key derivation of a supplied password
hash_update_file(HashContext $context, string $filename, resource|null $stream_context = null): bool	Pump data into an active hashing context from a file
hash_update_stream(HashContext $context, resource $stream, int $length = -1): int	Pump data into an active hashing context from an open stream
hash_update(HashContext $context, string $data): true	Pump data into an active hashing context
hash(string $algo, string $data, bool $binary = false, array $options = []): string	Generate a hash value (message digest)
HashContext()	(new) Private constructor to disallow direct instantiation
>__serialize(): array	(HashContext) Serializes the HashContext object
>__unserialize(array $data): void	(HashContext) Deserializes the $data parameter into a HashContext object
assert_options(int $option, mixed $value = ?): mixed	Set/get the various assert flags
assert(mixed $assertion, Throwable|string|null $description = null): bool	Checks an assertion
cli_get_process_title(): string|null	Returns the current process title
cli_set_process_title(string $title): bool	Sets the process title
dl(string $extension_filename): bool	Loads a PHP extension at runtime
extension_loaded(string $extension): bool	Find out whether an extension is loaded
gc_collect_cycles(): int	Forces collection of any existing garbage cycles
gc_disable(): void	Deactivates the circular reference collector
gc_enable(): void	Activates the circular reference collector
gc_enabled(): bool	Returns status of the circular reference collector
gc_mem_caches(): int	Reclaims memory used by the Zend Engine memory manager
gc_status(): array	Gets information about the garbage collector
get_cfg_var(string $option): string|array|false	Gets the value of a PHP configuration option
get_current_user(): string	Gets the name of the owner of the current PHP script
get_defined_constants(bool $categorize = false): array	Returns an associative array with the names of all the constants and their values
get_extension_funcs(string $extension): array|false	Returns an array with the names of the functions of a module
get_include_path(): string|false	Gets the current include_path configuration option
get_included_files(): array	Returns an array with the names of included or required files
get_loaded_extensions(bool $zend_extensions = false): array	Returns an array with the names of all modules compiled and loaded
get_magic_quotes_gpc(): false	Gets the current configuration setting of magic_quotes_gpc
get_magic_quotes_runtime(): false	Gets the current active configuration setting of magic_quotes_runtime
get_required_files()	Alias of get_included_files
get_resources(string|null $type = null): array	Returns active resources
getenv(string|null $name = null, bool $local_only = false): string|array|false	Gets the value of a single or all environment variables
getlastmod(): int|false	Gets time of last page modification
getmygid(): int|false	Get PHP script owner's GID
getmyinode(): int|false	Gets the inode of the current script
getmypid(): int|false	Gets PHP's process ID
getmyuid(): int|false	Gets PHP script owner's UID
getopt(string $short_options, array $long_options = [], int $rest_index = null): array|false	Gets options from the command line argument list
getrusage(int $mode = ?): array|false	Gets the current resource usages
ini_alter()	Alias of ini_set
ini_get_all(string|null $extension = null, bool $details = true): array|false	Gets all configuration options
ini_get(string $option): string|false	Gets the value of a configuration option
ini_parse_quantity(string $shorthand): int	Get interpreted size from ini shorthand syntax
ini_restore(string $option): void	Restores the value of a configuration option
ini_set(string $option, string|int|float|bool|null $value): string|false	Sets the value of a configuration option
memory_get_peak_usage(bool $real_usage = false): int	Returns the peak of memory allocated by PHP
memory_get_usage(bool $real_usage = false): int	Returns the amount of memory allocated to PHP
memory_reset_peak_usage(): void	Reset the peak memory usage
php_ini_loaded_file(): string|false	Retrieve a path to the loaded php.ini file
php_ini_scanned_files(): string|false	Return a list of .ini files parsed from the additional ini dir
php_sapi_name(): string|false	Returns the type of interface between web server and PHP
php_uname(string $mode = "a"): string	Returns information about the operating system PHP is running on
phpcredits(int $flags = CREDITS_ALL): true	Prints out the credits for PHP
phpinfo(int $flags = INFO_ALL): true	Outputs information about PHP's configuration
phpversion(string|null $extension = null): string|false	Gets the current PHP version
putenv(string $assignment): bool	Sets the value of an environment variable
restore_include_path(): void	Restores the value of the include_path configuration option
set_include_path(string $include_path): string|false	Sets the include_path configuration option
set_time_limit(int $seconds): bool	Limits the maximum execution time
sys_get_temp_dir(): string	Returns directory path used for temporary files
version_compare(string $version1, string $version2, string|null $operator = null): int|bool	Compares two "PHP-standardized" version number strings
zend_thread_id(): int	Returns a unique identifier for the current thread
zend_version(): string	Gets the version of the current Zend engine
json_decode(string $json, bool|null $associative = null, int $depth = 512, int $flags = ?): mixed	Decodes a JSON string
json_encode(mixed $value, int $flags = ?, int $depth = 512): string|false	Returns the JSON representation of a value
json_last_error_msg(): string	Returns the error string of the last json_encode() or json_decode() call
json_last_error(): int	Returns the last error occurred
json_validate(string $json, int $depth = 512, int $flags = ?): bool	Checks if a string contains valid JSON
>jsonSerialize(): mixed	(JsonSerializable) Specify data which should be serialized to JSON
JsonException()	(new) Exception thrown if JSON_THROW_ON_ERROR option is set for json_encode or json_decode
JsonSerializable()	(new) Objects implementing JsonSerializable can customize their JSON representation when encoded with json_encode
ezmlm_hash(string $addr): int	Calculate the hash value needed by EZMLM
mail(string $to, string $subject, string $message, array|string $additional_headers = [], string $additional_params = ""): bool	Send mail
abs(int|float $num): int|float	Absolute value
acos(float $num): float	Arc cosine
acosh(float $num): float	Inverse hyperbolic cosine
asin(float $num): float	Arc sine
asinh(float $num): float	Inverse hyperbolic sine
atan(float $num): float	Arc tangent
atan2(float $y, float $x): float	Arc tangent of two variables
atanh(float $num): float	Inverse hyperbolic tangent
base_convert(string $num, int $from_base, int $to_base): string	Convert a number between arbitrary bases
bindec(string $binary_string): int|float	Binary to decimal
ceil(int|float $num): float	Round fractions up
cos(float $num): float	Cosine
cosh(float $num): float	Hyperbolic cosine
decbin(int $num): string	Decimal to binary
dechex(int $num): string	Decimal to hexadecimal
decoct(int $num): string	Decimal to octal
deg2rad(float $num): float	Converts the number in degrees to the radian equivalent
exp(float $num): float	Calculates the exponent of e
expm1(float $num): float	Returns exp($num) - 1, computed in a way that is accurate even when the value of number is close to zero
fdiv(float $num1, float $num2): float	Divides two numbers, according to IEEE 754
floor(int|float $num): float	Round fractions down
fmod(float $num1, float $num2): float	Returns the floating point remainder (modulo) of the division of the arguments
fpow(float $num, float $exponent): float	Raise one number to the power of another, according to IEEE 754
hexdec(string $hex_string): int|float	Hexadecimal to decimal
hypot(float $x, float $y): float	Calculate the length of the hypotenuse of a right-angle triangle
intdiv(int $num1, int $num2): int	Integer division
is_finite(float $num): bool	Checks whether a float is finite
is_infinite(float $num): bool	Checks whether a float is infinite
is_nan(float $num): bool	Checks whether a float is NAN
log(float $num, float $base = M_E): float	Natural logarithm
log10(float $num): float	Base-10 logarithm
log1p(float $num): float	Returns log(1 + number), computed in a way that is accurate even when the value of number is close to zero
max(mixed $value, mixed ...$values): mixed	Find highest value
max(array $value_array): mixed	Find highest value
min(mixed $value, mixed ...$values): mixed	Find lowest value
min(array $value_array): mixed	Find lowest value
octdec(string $octal_string): int|float	Octal to decimal
pi(): float	Get value of pi
pow(mixed $num, mixed $exponent): int|float|object	Exponential expression
rad2deg(float $num): float	Converts the radian number to the equivalent number in degrees
round(int|float $num, int $precision = ?, int|RoundingMode $mode = RoundingMode::HalfAwayFromZero): float	Rounds a float
sin(float $num): float	Sine
sinh(float $num): float	Hyperbolic sine
sqrt(float $num): float	Square root
tan(float $num): float	Tangent
tanh(float $num): float	Hyperbolic tangent
connection_aborted(): int	Check whether client disconnected
connection_status(): int	Returns connection status bitfield
constant(string $name): mixed	Returns the value of a constant
define(string $constant_name, mixed $value, bool $case_insensitive = false): bool	Defines a named constant
defined(string $constant_name): bool	Checks whether a constant with the given name exists
die()	Alias of exit
eval(string $code): mixed	Evaluate a string as PHP code
exit(string|int $status = ?): never	Terminate the current script with a status code or message
get_browser(string|null $user_agent = null, bool $return_array = false): object|array|false	Tells what the user's browser is capable of
__halt_compiler(): void	Halts the compiler execution
highlight_file(string $filename, bool $return = false): string|bool	Syntax highlighting of a file
highlight_string(string $string, bool $return = false): string|true	Syntax highlighting of a string
hrtime(bool $as_number = false): array|int|float|false	Get the system's high resolution time
ignore_user_abort(bool|null $enable = null): int	Set whether a client disconnect should abort script execution
pack(string $format, mixed ...$values): string	Pack data into binary string
php_strip_whitespace(string $filename): string	Return source with stripped comments and whitespace
sapi_windows_cp_conv(int|string $in_codepage, int|string $out_codepage, string $subject): string|null	Convert string from one codepage to another
sapi_windows_cp_get(string $kind = ""): int	Get current codepage
sapi_windows_cp_is_utf8(): bool	Indicates whether the codepage is UTF-8 compatible
sapi_windows_cp_set(int $codepage): bool	Set process codepage
sapi_windows_generate_ctrl_event(int $event, int $pid = ?): bool	Send a CTRL event to another process
sapi_windows_set_ctrl_handler(callable|null $handler, bool $add = true): bool	Set or remove a CTRL event handler
sapi_windows_vt100_support(resource $stream, bool|null $enable = null): bool	Get or set VT100 support for the specified stream associated to an output buffer of a Windows console.
show_source()	Alias of highlight_file
sleep(int $seconds): int	Delay execution
sys_getloadavg(): array|false	Gets system load average
time_nanosleep(int $seconds, int $nanoseconds): array|bool	Delay for a number of seconds and nanoseconds
time_sleep_until(float $timestamp): bool	Make the script sleep until the specified time
uniqid(string $prefix = "", bool $more_entropy = false): string	Generate a time-based identifier
unpack(string $format, string $string, int $offset = ?): array|false	Unpack data from binary string
usleep(int $microseconds): void	Delay execution in microseconds
checkdnsrr(string $hostname, string $type = "MX"): bool	Check DNS records corresponding to a given Internet host name or IP address
closelog(): true	Close connection to system logger
dns_check_record()	Alias of checkdnsrr
dns_get_mx()	Alias of getmxrr
dns_get_record(string $hostname, int $type = DNS_ANY, array $authoritative_name_servers = null, array $additional_records = null, bool $raw = false): array|false	Fetch DNS Resource Records associated with a hostname
fsockopen(string $hostname, int $port = -1, int $error_code = null, string $error_message = null, float|null $timeout = null): resource|false	Open Internet or Unix domain socket connection
gethostbyaddr(string $ip): string|false	Get the Internet host name corresponding to a given IP address
gethostbyname(string $hostname): string	Get the IPv4 address corresponding to a given Internet host name
gethostbynamel(string $hostname): array|false	Get a list of IPv4 addresses corresponding to a given Internet host name
gethostname(): string|false	Gets the host name
getmxrr(string $hostname, array $hosts, array $weights = null): bool	Get MX records corresponding to a given Internet host name
getprotobyname(string $protocol): int|false	Get protocol number associated with protocol name
getprotobynumber(int $protocol): string|false	Get protocol name associated with protocol number
getservbyname(string $service, string $protocol): int|false	Get port number associated with an Internet service and protocol
getservbyport(int $port, string $protocol): string|false	Get Internet service which corresponds to port and protocol
header_register_callback(callable $callback): bool	Call a header function
header_remove(string|null $name = null): void	Remove previously set headers
header(string $header, bool $replace = true, int $response_code = ?): void	Send a raw HTTP header
headers_list(): array	Returns a list of response headers sent (or ready to send)
headers_sent(string $filename = null, int $line = null): bool	Checks if or where headers have been sent
http_clear_last_response_headers(): void	Clears the stored HTTP response headers
http_get_last_response_headers(): array|null	Retrieve last HTTP response headers
http_response_code(int $response_code = ?): int|bool	Get or Set the HTTP response code
inet_ntop(string $ip): string|false	Converts a packed internet address to a human readable representation
inet_pton(string $ip): string|false	Converts a human readable IP address to its packed in_addr representation
ip2long(string $ip): int|false	Converts a string containing an (IPv4) Internet Protocol dotted address into a long integer
long2ip(int $ip): string	Converts a long integer address into a string in (IPv4) Internet standard dotted format
net_get_interfaces(): array|false	Get network interfaces
openlog(string $prefix, int $flags, int $facility): true	Open connection to system logger
pfsockopen(string $hostname, int $port = -1, int $error_code = null, string $error_message = null, float|null $timeout = null): resource|false	Open persistent Internet or Unix domain socket connection
request_parse_body(array|null $options = null): array	Read and parse the request body and return the result
setcookie(string $name, string $value = "", int $expires_or_options = ?, string $path = "", string $domain = "", bool $secure = false, bool $httponly = false): bool	Send a cookie
setcookie(string $name, string $value = "", array $options = []): bool	Send a cookie
setrawcookie(string $name, string $value = ?, int $expires_or_options = ?, string $path = ?, string $domain = ?, bool $secure = false, bool $httponly = false): bool	Send a cookie without urlencoding the cookie value
setrawcookie(string $name, string $value = ?, array $options = []): bool	Send a cookie without urlencoding the cookie value
socket_get_status()	Alias of stream_get_meta_data
socket_set_blocking()	Alias of stream_set_blocking
socket_set_timeout()	Alias of stream_set_timeout
syslog(int $priority, string $message): true	Generate a system log message
opcache_compile_file(string $filename): bool	Compiles and caches a PHP script without executing it
opcache_get_configuration(): array|false	Get configuration information about the cache
opcache_get_status(bool $include_scripts = true): array|false	Get status information about the cache
opcache_invalidate(string $filename, bool $force = false): bool	Invalidates a cached script
opcache_is_script_cached(string $filename): bool	Tells whether a script is cached in OPCache
opcache_reset(): bool	Resets the contents of the opcode cache
flush(): void	Flush system output buffer
ob_clean(): bool	Clean (erase) the contents of the active output buffer
ob_end_clean(): bool	Clean (erase) the contents of the active output buffer and turn it off
ob_end_flush(): bool	Flush (send) the return value of the active output handler and turn the active output buffer off
ob_flush(): bool	Flush (send) the return value of the active output handler
ob_get_clean(): string|false	Get the contents of the active output buffer and turn it off
ob_get_contents(): string|false	Return the contents of the output buffer
ob_get_flush(): string|false	Flush (send) the return value of the active output handler, return the contents of the active output buffer and turn it off
ob_get_length(): int|false	Return the length of the output buffer
ob_get_level(): int	Return the nesting level of the output buffering mechanism
ob_get_status(bool $full_status = false): array	Get status of output buffers
ob_implicit_flush(bool $enable = true): void	Turn implicit flush on/off
ob_list_handlers(): array	List all output handlers in use
ob_start(callable|null $callback = null, int $chunk_size = ?, int $flags = PHP_OUTPUT_HANDLER_STDFLAGS): bool	Turn on output buffering
output_add_rewrite_var(string $name, string $value): bool	Add URL rewriter values
output_reset_rewrite_vars(): bool	Reset URL rewriter values
password_algos(): array	Get available password hashing algorithm IDs
password_get_info(string $hash): array	Returns information about the given hash
password_hash(string $password, string|int|null $algo, array $options = []): string	Creates a password hash
password_needs_rehash(string $hash, string|int|null $algo, array $options = []): bool	Checks if the given hash matches the given options
password_verify(string $password, string $hash): bool	Verifies that a password matches a hash
preg_filter(string|array $pattern, string|array $replacement, string|array $subject, int $limit = -1, int $count = null): string|array|null	Perform a regular expression search and replace
preg_grep(string $pattern, array $array, int $flags = ?): array|false	Return array entries that match the pattern
preg_last_error_msg(): string	Returns the error message of the last PCRE regex execution
preg_last_error(): int	Returns the error code of the last PCRE regex execution
preg_match_all(string $pattern, string $subject, array $matches = null, int $flags = ?, int $offset = ?): int|false	Perform a global regular expression match
preg_match(string $pattern, string $subject, array $matches = null, int $flags = ?, int $offset = ?): int|false	Perform a regular expression match
preg_quote(string $str, string|null $delimiter = null): string	Quote regular expression characters
preg_replace_callback_array(array $pattern, string|array $subject, int $limit = -1, int $count = null, int $flags = ?): string|array|null	Perform a regular expression search and replace using callbacks
preg_replace_callback(string|array $pattern, callable $callback, string|array $subject, int $limit = -1, int $count = null, int $flags = ?): string|array|null	Perform a regular expression search and replace using a callback
preg_replace(string|array $pattern, string|array $replacement, string|array $subject, int $limit = -1, int $count = null): string|array|null	Perform a regular expression search and replace
preg_split(string $pattern, string $subject, int $limit = -1, int $flags = ?): array|false	Split string by a regular expression
getrandmax(): int	Show largest possible random value
lcg_value(): float	Combined linear congruential generator
mt_getrandmax(): int	Show largest possible random value
mt_rand(): int	Generate a random value via the Mersenne Twister Random Number Generator
mt_rand(int $min, int $max): int	Generate a random value via the Mersenne Twister Random Number Generator
mt_srand(int|null $seed = null, int $mode = MT_RAND_MT19937): void	Seeds the Mersenne Twister Random Number Generator
rand(): int	Generate a random integer
rand(int $min, int $max): int	Generate a random integer
random_bytes(int $length): string	Get cryptographically secure random bytes
random_int(int $min, int $max): int	Get a cryptographically secure, uniformly selected integer
srand(int|null $seed = null, int $mode = MT_RAND_MT19937): void	Seed the random number generator
>generate(): string	(Random\Engine) Generates randomness
Random\Engine\Mt19937(int|null $seed = null, int $mode = MT_RAND_MT19937)	(new) Constructs a new Mt19937 engine
>__debugInfo(): array	(Random\Engine\Mt19937) Returns the internal state of the engine
>generate(): string	(Random\Engine\Mt19937) Generate 32 bits of randomness
>__serialize(): array	(Random\Engine\Mt19937) Serializes the Mt19937 object
>__unserialize(array $data): void	(Random\Engine\Mt19937) Deserializes the $data parameter into a Mt19937 object
Random\Engine\PcgOneseq128XslRr64(string|int|null $seed = null)	(new) Constructs a new PCG Oneseq 128 XSL RR 64 engine
>__debugInfo(): array	(Random\Engine\PcgOneseq128XslRr64) Returns the internal state of the engine
>generate(): string	(Random\Engine\PcgOneseq128XslRr64) Generate 64 bits of randomness
>jump(int $advance): void	(Random\Engine\PcgOneseq128XslRr64) Efficiently move the engine ahead multiple steps
>__serialize(): array	(Random\Engine\PcgOneseq128XslRr64) Serializes the PcgOneseq128XslRr64 object
>__unserialize(array $data): void	(Random\Engine\PcgOneseq128XslRr64) Deserializes the $data parameter into a PcgOneseq128XslRr64 object
>generate(): string	(Random\Engine\Secure) Generate cryptographically secure randomness
Random\Engine\Xoshiro256StarStar(string|int|null $seed = null)	(new) Constructs a new xoshiro256** engine
>__debugInfo(): array	(Random\Engine\Xoshiro256StarStar) Returns the internal state of the engine
>generate(): string	(Random\Engine\Xoshiro256StarStar) Generate 64 bits of randomness
>jump(): void	(Random\Engine\Xoshiro256StarStar) Efficiently move the engine ahead by 2^128 steps
>jumpLong(): void	(Random\Engine\Xoshiro256StarStar) Efficiently move the engine ahead by 2^192 steps
>__serialize(): array	(Random\Engine\Xoshiro256StarStar) Serializes the Xoshiro256StarStar object
>__unserialize(array $data): void	(Random\Engine\Xoshiro256StarStar) Deserializes the $data parameter into a Xoshiro256StarStar object
Random\Randomizer(Random\Engine|null $engine = null)	(new) Constructs a new Randomizer
>getBytes(int $length): string	(Random\Randomizer) Get random bytes
>getBytesFromString(string $string, int $length): string	(Random\Randomizer) Get random bytes from a source string
>getFloat(float $min, float $max, Random\IntervalBoundary $boundary = Random\IntervalBoundary::ClosedOpen): float	(Random\Randomizer) Get a uniformly selected float
>getInt(int $min, int $max): int	(Random\Randomizer) Get a uniformly selected integer
>nextFloat(): float	(Random\Randomizer) Get a float from the right-open interval [0.0, 1.0)
>nextInt(): int	(Random\Randomizer) Get a positive integer
>pickArrayKeys(array $array, int $num): array	(Random\Randomizer) Select random array keys
>__serialize(): array	(Random\Randomizer) Serializes the Randomizer object
>shuffleArray(array $array): array	(Random\Randomizer) Get a permutation of an array
>shuffleBytes(string $bytes): string	(Random\Randomizer) Get a byte-wise permutation of a string
>__unserialize(array $data): void	(Random\Randomizer) Deserializes the $data parameter into a Randomizer object
Random\BrokenRandomEngineError()	(new) Indicates that the used Random\Engine is broken, e
Random\CryptoSafeEngine()	(new) A marker interface indicating that the Random\Engine returns cryptographically secure randomness
Random\Engine\Secure()	(new) Generates cryptographically secure randomness using the operating system’s CSPRNG
Random\Engine()	(new) A Random\Engine provides a low-level source of randomness by returning random bytes that are consumed by high-level APIs to perform their operations
Random\RandomError()	(new) The base class for Errors that occur during generation or use of randomness
Random\RandomException()	(new) The base class for Exceptions that occur during generation or use of randomness
Reflection::export(Reflector $reflector, bool $return = false): string	Exports
Reflection::getModifierNames(int $modifiers): array	Gets modifier names
ReflectionAttribute()	(new) Private constructor to disallow direct instantiation
>getArguments(): array	(ReflectionAttribute) Gets arguments passed to attribute
>getName(): string	(ReflectionAttribute) Gets attribute name
>getTarget(): int	(ReflectionAttribute) Returns the target of the attribute as bitmask
>isRepeated(): bool	(ReflectionAttribute) Returns whether the attribute of this name has been repeated on a code element
>newInstance(): object	(ReflectionAttribute) Instantiates the attribute class represented by this ReflectionAttribute class and arguments
ReflectionClass(object|string $objectOrClass)	(new) Constructs a ReflectionClass
ReflectionClass::export(mixed $argument, bool $return = false): string	Exports a class
>getAttributes(string|null $name = null, int $flags = ?): array	(ReflectionClass) Gets Attributes
>getConstant(string $name): mixed	(ReflectionClass) Gets defined constant
>getConstants(int|null $filter = null): array	(ReflectionClass) Gets constants
>getConstructor(): ReflectionMethod|null	(ReflectionClass) Gets the constructor of the class
>getDefaultProperties(): array	(ReflectionClass) Gets default properties
>getDocComment(): string|false	(ReflectionClass) Gets doc comments
>getEndLine(): int|false	(ReflectionClass) Gets end line
>getExtension(): ReflectionExtension|null	(ReflectionClass) Gets a ReflectionExtension object for the extension which defined the class
>getExtensionName(): string|false	(ReflectionClass) Gets the name of the extension which defined the class
>getFileName(): string|false	(ReflectionClass) Gets the filename of the file in which the class has been defined
>getInterfaceNames(): array	(ReflectionClass) Gets the interface names
>getInterfaces(): array	(ReflectionClass) Gets the interfaces
>getLazyInitializer(object $object): callable|null	(ReflectionClass) Gets lazy initializer
>getMethod(string $name): ReflectionMethod	(ReflectionClass) Gets a ReflectionMethod for a class method
>getMethods(int|null $filter = null): array	(ReflectionClass) Gets an array of methods
>getModifiers(): int	(ReflectionClass) Gets the class modifiers
>getName(): string	(ReflectionClass) Gets class name
>getNamespaceName(): string	(ReflectionClass) Gets namespace name
>getParentClass(): ReflectionClass|false	(ReflectionClass) Gets parent class
>getProperties(int|null $filter = null): array	(ReflectionClass) Gets properties
>getProperty(string $name): ReflectionProperty	(ReflectionClass) Gets a ReflectionProperty for a class's property
>getReflectionConstant(string $name): ReflectionClassConstant|false	(ReflectionClass) Gets a ReflectionClassConstant for a class's constant
>getReflectionConstants(int|null $filter = null): array	(ReflectionClass) Gets class constants
>getShortName(): string	(ReflectionClass) Gets short name
>getStartLine(): int|false	(ReflectionClass) Gets starting line number
>getStaticProperties(): array	(ReflectionClass) Gets static properties
>getStaticPropertyValue(string $name, mixed $def_value = ?): mixed	(ReflectionClass) Gets static property value
>getTraitAliases(): array	(ReflectionClass) Returns an array of trait aliases
>getTraitNames(): array	(ReflectionClass) Returns an array of names of traits used by this class
>getTraits(): array	(ReflectionClass) Returns an array of traits used by this class
>hasConstant(string $name): bool	(ReflectionClass) Checks if constant is defined
>hasMethod(string $name): bool	(ReflectionClass) Checks if method is defined
>hasProperty(string $name): bool	(ReflectionClass) Checks if property is defined
>implementsInterface(ReflectionClass|string $interface): bool	(ReflectionClass) Implements interface
>initializeLazyObject(object $object): object	(ReflectionClass) Forces initialization of a lazy object
>inNamespace(): bool	(ReflectionClass) Checks if in namespace
>isAbstract(): bool	(ReflectionClass) Checks if class is abstract
>isAnonymous(): bool	(ReflectionClass) Checks if class is anonymous
>isCloneable(): bool	(ReflectionClass) Returns whether this class is cloneable
>isEnum(): bool	(ReflectionClass) Returns whether this is an enum
>isFinal(): bool	(ReflectionClass) Checks if class is final
>isInstance(object $object): bool	(ReflectionClass) Checks class for instance
>isInstantiable(): bool	(ReflectionClass) Checks if the class is instantiable
>isInterface(): bool	(ReflectionClass) Checks if the class is an interface
>isInternal(): bool	(ReflectionClass) Checks if class is defined internally by an extension, or the core
>isIterable(): bool	(ReflectionClass) Check whether this class is iterable
>isIterateable()	(ReflectionClass) Alias of ReflectionClass::isIterable
>isReadOnly(): bool	(ReflectionClass) Checks if class is readonly
>isSubclassOf(ReflectionClass|string $class): bool	(ReflectionClass) Checks if a subclass
>isTrait(): bool	(ReflectionClass) Returns whether this is a trait
>isUninitializedLazyObject(object $object): bool	(ReflectionClass) Checks if an object is lazy and uninitialized
>isUserDefined(): bool	(ReflectionClass) Checks if user defined
>markLazyObjectAsInitialized(object $object): object	(ReflectionClass) Marks a lazy object as initialized without calling the initializer or factory
>newInstance(mixed ...$args): object	(ReflectionClass) Creates a new class instance from given arguments
>newInstanceArgs(array $args = []): object|null	(ReflectionClass) Creates a new class instance from given arguments
>newInstanceWithoutConstructor(): object	(ReflectionClass) Creates a new class instance without invoking the constructor
>newLazyGhost(callable $initializer, int $options = ?): object	(ReflectionClass) Creates a new lazy ghost instance
>newLazyProxy(callable $factory, int $options = ?): object	(ReflectionClass) Creates a new lazy proxy instance
>resetAsLazyGhost(object $object, callable $initializer, int $options = ?): void	(ReflectionClass) Resets an object and marks it as lazy
>resetAsLazyProxy(object $object, callable $factory, int $options = ?): void	(ReflectionClass) Resets an object and marks it as lazy
>setStaticPropertyValue(string $name, mixed $value): void	(ReflectionClass) Sets public static property value
>__toString(): string	(ReflectionClass) Returns the string representation of the ReflectionClass object
ReflectionClassConstant(object|string $class, string $constant)	(new) Constructs a ReflectionClassConstant
ReflectionClassConstant::export(mixed $class, string $name, bool $return = ?): string	Export
>getAttributes(string|null $name = null, int $flags = ?): array	(ReflectionClassConstant) Gets Attributes
>getDeclaringClass(): ReflectionClass	(ReflectionClassConstant) Gets declaring class
>getDocComment(): string|false	(ReflectionClassConstant) Gets doc comments
>getModifiers(): int	(ReflectionClassConstant) Gets the class constant modifiers
>getName(): string	(ReflectionClassConstant) Get name of the constant
>getType(): ReflectionType|null	(ReflectionClassConstant) Gets a class constant's type
>getValue(): mixed	(ReflectionClassConstant) Gets value
>hasType(): bool	(ReflectionClassConstant) Checks if class constant has a type
>isDeprecated(): bool	(ReflectionClassConstant) Checks if deprecated
>isEnumCase(): bool	(ReflectionClassConstant) Checks if class constant is an Enum case
>isFinal(): bool	(ReflectionClassConstant) Checks if class constant is final
>isPrivate(): bool	(ReflectionClassConstant) Checks if class constant is private
>isProtected(): bool	(ReflectionClassConstant) Checks if class constant is protected
>isPublic(): bool	(ReflectionClassConstant) Checks if class constant is public
>__toString(): string	(ReflectionClassConstant) Returns the string representation of the ReflectionClassConstant object
ReflectionConstant(string $name)	(new) Constructs a ReflectionConstant
>getExtension(): ReflectionExtension|null	(ReflectionConstant) Gets ReflectionExtension of the defining extension
>getExtensionName(): string|false	(ReflectionConstant) Gets name of the defining extension
>getFileName(): string|false	(ReflectionConstant) Gets name of the defining file
>getName(): string	(ReflectionConstant) Gets name
>getNamespaceName(): string	(ReflectionConstant) Gets namespace name
>getShortName(): string	(ReflectionConstant) Gets short name
>getValue(): mixed	(ReflectionConstant) Gets value
>isDeprecated(): bool	(ReflectionConstant) Checks if deprecated
>__toString(): string	(ReflectionConstant) Returns string representation
ReflectionEnum(object|string $objectOrClass)	(new) Instantiates a ReflectionEnum object
>getBackingType(): ReflectionNamedType|null	(ReflectionEnum) Gets the backing type of an Enum, if any
>getCase(string $name): ReflectionEnumUnitCase	(ReflectionEnum) Returns a specific case of an Enum
>getCases(): array	(ReflectionEnum) Returns a list of all cases on an Enum
>hasCase(string $name): bool	(ReflectionEnum) Checks for a case on an Enum
>isBacked(): bool	(ReflectionEnum) Determines if an Enum is a Backed Enum
ReflectionEnumBackedCase(object|string $class, string $constant)	(new) Instantiates a ReflectionEnumBackedCase object
>getBackingValue(): int|string	(ReflectionEnumBackedCase) Gets the scalar value backing this Enum case
ReflectionEnumUnitCase(object|string $class, string $constant)	(new) Instantiates a ReflectionEnumUnitCase object
>getEnum(): ReflectionEnum	(ReflectionEnumUnitCase) Gets the reflection of the enum of this case
>getValue(): UnitEnum	(ReflectionEnumUnitCase) Gets the enum case object described by this reflection object
>__clone(): void	(ReflectionExtension) Clones
ReflectionExtension(string $name)	(new) Constructs a ReflectionExtension
ReflectionExtension::export(string $name, string $return = false): string	Export
>getClasses(): array	(ReflectionExtension) Gets classes
>getClassNames(): array	(ReflectionExtension) Gets class names
>getConstants(): array	(ReflectionExtension) Gets constants
>getDependencies(): array	(ReflectionExtension) Gets dependencies
>getFunctions(): array	(ReflectionExtension) Gets extension functions
>getINIEntries(): array	(ReflectionExtension) Gets extension ini entries
>getName(): string	(ReflectionExtension) Gets extension name
>getVersion(): string|null	(ReflectionExtension) Gets extension version
>info(): void	(ReflectionExtension) Print extension info
>isPersistent(): bool	(ReflectionExtension) Returns whether this extension is persistent
>isTemporary(): bool	(ReflectionExtension) Returns whether this extension is temporary
>__toString(): string	(ReflectionExtension) To string
ReflectionFiber(Fiber $fiber)	(new) Constructs a ReflectionFiber object
>getCallable(): callable	(ReflectionFiber) Gets the callable used to create the Fiber
>getExecutingFile(): string|null	(ReflectionFiber) Get the file name of the current execution point
>getExecutingLine(): int|null	(ReflectionFiber) Get the line number of the current execution point
>getFiber(): Fiber	(ReflectionFiber) Get the reflected Fiber instance
>getTrace(int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT): array	(ReflectionFiber) Get the backtrace of the current execution point
ReflectionFunction(Closure|string $function)	(new) Constructs a ReflectionFunction object
ReflectionFunction::export(string $name, string $return = ?): string	Exports function
>getClosure(): Closure	(ReflectionFunction) Returns a dynamically created closure for the function
>invoke(mixed ...$args): mixed	(ReflectionFunction) Invokes function
>invokeArgs(array $args): mixed	(ReflectionFunction) Invokes function args
>isAnonymous(): bool	(ReflectionFunction) Checks if a function is anonymous
>isDisabled(): bool	(ReflectionFunction) Checks if function is disabled
>__toString(): string	(ReflectionFunction) Returns the string representation of the ReflectionFunction object
>__clone(): void	(ReflectionFunctionAbstract) Clones function
>getAttributes(string|null $name = null, int $flags = ?): array	(ReflectionFunctionAbstract) Gets Attributes
>getClosureCalledClass(): ReflectionClass|null	(ReflectionFunctionAbstract) Returns the class corresponding to static:: inside a closure
>getClosureScopeClass(): ReflectionClass|null	(ReflectionFunctionAbstract) Returns the class corresponding to the scope inside a closure
>getClosureThis(): object|null	(ReflectionFunctionAbstract) Returns the object which corresponds to $this inside a closure
>getClosureUsedVariables(): array	(ReflectionFunctionAbstract) Returns an array of the used variables in the Closure
>getDocComment(): string|false	(ReflectionFunctionAbstract) Gets doc comment
>getEndLine(): int|false	(ReflectionFunctionAbstract) Gets end line number
>getExtension(): ReflectionExtension|null	(ReflectionFunctionAbstract) Gets extension info
>getExtensionName(): string|false	(ReflectionFunctionAbstract) Gets extension name
>getFileName(): string|false	(ReflectionFunctionAbstract) Gets file name
>getName(): string	(ReflectionFunctionAbstract) Gets function name
>getNamespaceName(): string	(ReflectionFunctionAbstract) Gets namespace name
>getNumberOfParameters(): int	(ReflectionFunctionAbstract) Gets number of parameters
>getNumberOfRequiredParameters(): int	(ReflectionFunctionAbstract) Gets number of required parameters
>getParameters(): array	(ReflectionFunctionAbstract) Gets parameters
>getReturnType(): ReflectionType|null	(ReflectionFunctionAbstract) Gets the specified return type of a function
>getShortName(): string	(ReflectionFunctionAbstract) Gets function short name
>getStartLine(): int|false	(ReflectionFunctionAbstract) Gets starting line number
>getStaticVariables(): array	(ReflectionFunctionAbstract) Gets static variables
>getTentativeReturnType(): ReflectionType|null	(ReflectionFunctionAbstract) Returns the tentative return type associated with the function
>hasReturnType(): bool	(ReflectionFunctionAbstract) Checks if the function has a specified return type
>hasTentativeReturnType(): bool	(ReflectionFunctionAbstract) Returns whether the function has a tentative return type
>inNamespace(): bool	(ReflectionFunctionAbstract) Checks if function in namespace
>isClosure(): bool	(ReflectionFunctionAbstract) Checks if closure
>isDeprecated(): bool	(ReflectionFunctionAbstract) Checks if deprecated
>isGenerator(): bool	(ReflectionFunctionAbstract) Returns whether this function is a generator
>isInternal(): bool	(ReflectionFunctionAbstract) Checks if is internal
>isStatic(): bool	(ReflectionFunctionAbstract) Checks if the function is static
>isUserDefined(): bool	(ReflectionFunctionAbstract) Checks if user defined
>isVariadic(): bool	(ReflectionFunctionAbstract) Checks if the function is variadic
>returnsReference(): bool	(ReflectionFunctionAbstract) Checks if returns reference
>__toString(): void	(ReflectionFunctionAbstract) Returns the string representation of the ReflectionFunctionAbstract object
ReflectionGenerator(Generator $generator)	(new) Constructs a ReflectionGenerator object
>getExecutingFile(): string	(ReflectionGenerator) Gets the file name of the currently executing generator
>getExecutingGenerator(): Generator	(ReflectionGenerator) Gets the executing Generator object
>getExecutingLine(): int	(ReflectionGenerator) Gets the currently executing line of the generator
>getFunction(): ReflectionFunctionAbstract	(ReflectionGenerator) Gets the function name of the generator
>getThis(): object|null	(ReflectionGenerator) Gets the $this value of the generator
>getTrace(int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT): array	(ReflectionGenerator) Gets the trace of the executing generator
>isClosed(): bool	(ReflectionGenerator) Checks if execution finished
>getTypes(): array	(ReflectionIntersectionType) Returns the types included in the intersection type
ReflectionMethod(object|string $objectOrMethod, string $method)	(new) Constructs a ReflectionMethod
ReflectionMethod(string $classMethod)	(new) Constructs a ReflectionMethod
ReflectionMethod::createFromMethodName(string $method): static	Creates a new ReflectionMethod
ReflectionMethod::export(string $class, string $name, bool $return = false): string	Export a reflection method
>getClosure(object|null $object = null): Closure	(ReflectionMethod) Returns a dynamically created closure for the method
>getDeclaringClass(): ReflectionClass	(ReflectionMethod) Gets declaring class for the reflected method
>getModifiers(): int	(ReflectionMethod) Gets the method modifiers
>getPrototype(): ReflectionMethod	(ReflectionMethod) Gets the method prototype (if there is one)
>hasPrototype(): bool	(ReflectionMethod) Returns whether a method has a prototype
>invoke(object|null $object, mixed ...$args): mixed	(ReflectionMethod) Invoke
>invokeArgs(object|null $object, array $args): mixed	(ReflectionMethod) Invoke args
>isAbstract(): bool	(ReflectionMethod) Checks if method is abstract
>isConstructor(): bool	(ReflectionMethod) Checks if method is a constructor
>isDestructor(): bool	(ReflectionMethod) Checks if method is a destructor
>isFinal(): bool	(ReflectionMethod) Checks if method is final
>isPrivate(): bool	(ReflectionMethod) Checks if method is private
>isProtected(): bool	(ReflectionMethod) Checks if method is protected
>isPublic(): bool	(ReflectionMethod) Checks if method is public
>setAccessible(bool $accessible): void	(ReflectionMethod) Set method accessibility
>__toString(): string	(ReflectionMethod) Returns the string representation of the Reflection method object
>getName(): string	(ReflectionNamedType) Get the name of the type as a string
>isBuiltin(): bool	(ReflectionNamedType) Checks if it is a built-in type
ReflectionObject(object $object)	(new) Constructs a ReflectionObject
ReflectionObject::export(string $argument, bool $return = ?): string	Export
>allowsNull(): bool	(ReflectionParameter) Checks if null is allowed
>canBePassedByValue(): bool	(ReflectionParameter) Returns whether this parameter can be passed by value
>__clone(): void	(ReflectionParameter) Clone
ReflectionParameter(string|array|object $function, int|string $param)	(new) Construct
ReflectionParameter::export(string $function, string $parameter, bool $return = ?): string	Exports
>getAttributes(string|null $name = null, int $flags = ?): array	(ReflectionParameter) Gets Attributes
>getClass(): ReflectionClass|null	(ReflectionParameter) Get a ReflectionClass object for the parameter being reflected or null
>getDeclaringClass(): ReflectionClass|null	(ReflectionParameter) Gets declaring class
>getDeclaringFunction(): ReflectionFunctionAbstract	(ReflectionParameter) Gets declaring function
>getDefaultValue(): mixed	(ReflectionParameter) Gets default parameter value
>getDefaultValueConstantName(): string|null	(ReflectionParameter) Returns the default value's constant name if default value is constant or null
>getName(): string	(ReflectionParameter) Gets parameter name
>getPosition(): int	(ReflectionParameter) Gets parameter position
>getType(): ReflectionType|null	(ReflectionParameter) Gets a parameter's type
>hasType(): bool	(ReflectionParameter) Checks if parameter has a type
>isArray(): bool	(ReflectionParameter) Checks if parameter expects an array
>isCallable(): bool	(ReflectionParameter) Returns whether parameter MUST be callable
>isDefaultValueAvailable(): bool	(ReflectionParameter) Checks if a default value is available
>isDefaultValueConstant(): bool	(ReflectionParameter) Returns whether the default value of this parameter is a constant
>isOptional(): bool	(ReflectionParameter) Checks if optional
>isPassedByReference(): bool	(ReflectionParameter) Checks if passed by reference
>isPromoted(): bool	(ReflectionParameter) Checks if a parameter is promoted to a property
>isVariadic(): bool	(ReflectionParameter) Checks if the parameter is variadic
>__toString(): string	(ReflectionParameter) To string
>__clone(): void	(ReflectionProperty) Clone
ReflectionProperty(object|string $class, string $property)	(new) Construct a ReflectionProperty object
ReflectionProperty::export(mixed $class, string $name, bool $return = ?): string	Export
>getAttributes(string|null $name = null, int $flags = ?): array	(ReflectionProperty) Gets Attributes
>getDeclaringClass(): ReflectionClass	(ReflectionProperty) Gets declaring class
>getDefaultValue(): mixed	(ReflectionProperty) Returns the default value declared for a property
>getDocComment(): string|false	(ReflectionProperty) Gets the property doc comment
>getHook(PropertyHookType $type): ReflectionMethod|null	(ReflectionProperty) Returns a reflection object for a specified hook
>getHooks(): array	(ReflectionProperty) Returns an array of all hooks on this property
>getModifiers(): int	(ReflectionProperty) Gets the property modifiers
>getName(): string	(ReflectionProperty) Gets property name
>getRawValue(object $object): mixed	(ReflectionProperty) Returns the value of a property, bypassing a get hook if defined
>getSettableType(): ReflectionType|null	(ReflectionProperty) Returns the parameter type of a setter hook
>getType(): ReflectionType|null	(ReflectionProperty) Gets a property's type
>getValue(object|null $object = null): mixed	(ReflectionProperty) Gets value
>hasDefaultValue(): bool	(ReflectionProperty) Checks if property has a default value declared
>hasHook(PropertyHookType $type): bool	(ReflectionProperty) Returns whether the property has a given hook defined
>hasHooks(): bool	(ReflectionProperty) Returns whether the property has any hooks defined
>hasType(): bool	(ReflectionProperty) Checks if property has a type
>isAbstract(): bool	(ReflectionProperty) Determines if a property is abstract
>isDefault(): bool	(ReflectionProperty) Checks if property is a default property
>isDynamic(): bool	(ReflectionProperty) Checks if property is a dynamic property
>isFinal(): bool	(ReflectionProperty) Determines if this property is final or not
>isInitialized(object|null $object = null): bool	(ReflectionProperty) Checks whether a property is initialized
>isLazy(object $object): bool	(ReflectionProperty) Checks whether a property is lazy
>isPrivate(): bool	(ReflectionProperty) Checks if property is private
>isPrivateSet(): bool	(ReflectionProperty) Checks if property is private for writing
>isPromoted(): bool	(ReflectionProperty) Checks if property is promoted
>isProtected(): bool	(ReflectionProperty) Checks if property is protected
>isProtectedSet(): bool	(ReflectionProperty) Checks whether the property is protected for writing
>isPublic(): bool	(ReflectionProperty) Checks if property is public
>isReadOnly(): bool	(ReflectionProperty) Checks if property is readonly
>isStatic(): bool	(ReflectionProperty) Checks if property is static
>isVirtual(): bool	(ReflectionProperty) Determines if a property is virtual
>setAccessible(bool $accessible): void	(ReflectionProperty) Set property accessibility
>setRawValue(object $object, mixed $value): void	(ReflectionProperty) Sets the value of a property, bypassing a set hook if defined
>setRawValueWithoutLazyInitialization(object $object, mixed $value): void	(ReflectionProperty) Set raw property value without triggering lazy initialization
>setValue(object|null $object, mixed $value): void	(ReflectionProperty) Set property value
>setValue(mixed $value): void	(ReflectionProperty) Set property value
>skipLazyInitialization(object $object): void	(ReflectionProperty) Marks property as non-lazy
>__toString(): string	(ReflectionProperty) To string
ReflectionReference()	(new) Private constructor to disallow direct instantiation
ReflectionReference::fromArrayElement(array $array, int|string $key): ReflectionReference|null	Create a ReflectionReference from an array element
>getId(): string	(ReflectionReference) Get unique ID of a reference
>allowsNull(): bool	(ReflectionType) Checks if null is allowed
>__toString(): string	(ReflectionType) To string
>getTypes(): array	(ReflectionUnionType) Returns the types included in the union type
>__clone(): void	(ReflectionZendExtension) Clone handler
ReflectionZendExtension(string $name)	(new) Constructs a ReflectionZendExtension object
ReflectionZendExtension::export(string $name, bool $return = ?): string	Export
>getAuthor(): string	(ReflectionZendExtension) Gets author
>getCopyright(): string	(ReflectionZendExtension) Gets copyright
>getName(): string	(ReflectionZendExtension) Gets name
>getURL(): string	(ReflectionZendExtension) Gets URL
>getVersion(): string	(ReflectionZendExtension) Gets version
>__toString(): string	(ReflectionZendExtension) To string handler
Reflector::export(): string	Exports
Reflection()	(new) The reflection class
ReflectionException()	(new) The ReflectionException class
ReflectionFunctionAbstract()	(new) A parent class to ReflectionFunction, read its description for details
ReflectionIntersectionType()	(new) 
ReflectionNamedType()	(new) 
ReflectionType()	(new) The ReflectionType class reports information about a function's parameter/return type or a class's property type
ReflectionUnionType()	(new) 
Reflector()	(new) Reflector is an interface implemented by all exportable Reflection classes
>append(Iterator $iterator): void	(AppendIterator) Appends an iterator
AppendIterator()	(new) Constructs an AppendIterator
>current(): mixed	(AppendIterator) Gets the current value
>getArrayIterator(): ArrayIterator	(AppendIterator) Gets the ArrayIterator
>getIteratorIndex(): int|null	(AppendIterator) Gets an index of iterators
>key(): scalar	(AppendIterator) Gets the current key
>next(): void	(AppendIterator) Moves to the next element
>rewind(): void	(AppendIterator) Rewinds the Iterator
>valid(): bool	(AppendIterator) Checks validity of the current element
>append(mixed $value): void	(ArrayIterator) Append an element
>asort(int $flags = SORT_REGULAR): true	(ArrayIterator) Sort entries by values
ArrayIterator(array|object $array = [], int $flags = ?)	(new) Construct an ArrayIterator
>count(): int	(ArrayIterator) Count elements
>current(): mixed	(ArrayIterator) Return current array entry
>getArrayCopy(): array	(ArrayIterator) Get array copy
>getFlags(): int	(ArrayIterator) Get behavior flags
>key(): string|int|null	(ArrayIterator) Return current array key
>ksort(int $flags = SORT_REGULAR): true	(ArrayIterator) Sort entries by keys
>natcasesort(): true	(ArrayIterator) Sort entries naturally, case insensitive
>natsort(): true	(ArrayIterator) Sort entries naturally
>next(): void	(ArrayIterator) Move to next entry
>offsetExists(mixed $key): bool	(ArrayIterator) Check if offset exists
>offsetGet(mixed $key): mixed	(ArrayIterator) Get value for an offset
>offsetSet(mixed $key, mixed $value): void	(ArrayIterator) Set value for an offset
>offsetUnset(mixed $key): void	(ArrayIterator) Unset value for an offset
>rewind(): void	(ArrayIterator) Rewind array back to the start
>seek(int $offset): void	(ArrayIterator) Seeks to a position
>serialize(): string	(ArrayIterator) Serialize
>setFlags(int $flags): void	(ArrayIterator) Set behaviour flags
>uasort(callable $callback): true	(ArrayIterator) Sort with a user-defined comparison function and maintain index association
>uksort(callable $callback): true	(ArrayIterator) Sort by keys using a user-defined comparison function
>unserialize(string $data): void	(ArrayIterator) Unserialize
>valid(): bool	(ArrayIterator) Check whether array contains more entries
>append(mixed $value): void	(ArrayObject) Appends the value
>asort(int $flags = SORT_REGULAR): true	(ArrayObject) Sort the entries by value
ArrayObject(array|object $array = [], int $flags = ?, string $iteratorClass = ArrayIterator::class)	(new) Construct a new array object
>count(): int	(ArrayObject) Get the number of public properties in the ArrayObject
>exchangeArray(array|object $array): array	(ArrayObject) Exchange the array for another one
>getArrayCopy(): array	(ArrayObject) Creates a copy of the ArrayObject
>getFlags(): int	(ArrayObject) Gets the behavior flags
>getIterator(): Iterator	(ArrayObject) Create a new iterator from an ArrayObject instance
>getIteratorClass(): string	(ArrayObject) Gets the iterator classname for the ArrayObject
>ksort(int $flags = SORT_REGULAR): true	(ArrayObject) Sort the entries by key
>natcasesort(): true	(ArrayObject) Sort an array using a case insensitive "natural order" algorithm
>natsort(): true	(ArrayObject) Sort entries using a "natural order" algorithm
>offsetExists(mixed $key): bool	(ArrayObject) Returns whether the requested index exists
>offsetGet(mixed $key): mixed	(ArrayObject) Returns the value at the specified index
>offsetSet(mixed $key, mixed $value): void	(ArrayObject) Sets the value at the specified index to newval
>offsetUnset(mixed $key): void	(ArrayObject) Unsets the value at the specified index
>serialize(): string	(ArrayObject) Serialize an ArrayObject
>setFlags(int $flags): void	(ArrayObject) Sets the behavior flags
>setIteratorClass(string $iteratorClass): void	(ArrayObject) Sets the iterator classname for the ArrayObject
>uasort(callable $callback): true	(ArrayObject) Sort the entries with a user-defined comparison function and maintain key association
>uksort(callable $callback): true	(ArrayObject) Sort the entries by keys using a user-defined comparison function
>unserialize(string $data): void	(ArrayObject) Unserialize an ArrayObject
CachingIterator(Iterator $iterator, int $flags = CachingIterator::CALL_TOSTRING)	(new) Construct a new CachingIterator object for the iterator
>count(): int	(CachingIterator) The number of elements in the iterator
>current(): mixed	(CachingIterator) Return the current element
>getCache(): array	(CachingIterator) Retrieve the contents of the cache
>getFlags(): int	(CachingIterator) Get flags used
>hasNext(): bool	(CachingIterator) Check whether the inner iterator has a valid next element
>key(): scalar	(CachingIterator) Return the key for the current element
>next(): void	(CachingIterator) Move the iterator forward
>offsetExists(string $key): bool	(CachingIterator) The offsetExists purpose
>offsetGet(string $key): mixed	(CachingIterator) The offsetGet purpose
>offsetSet(string $key, mixed $value): void	(CachingIterator) The offsetSet purpose
>offsetUnset(string $key): void	(CachingIterator) The offsetUnset purpose
>rewind(): void	(CachingIterator) Rewind the iterator
>setFlags(int $flags): void	(CachingIterator) The setFlags purpose
>__toString(): string	(CachingIterator) Return the string representation of the current element
>valid(): bool	(CachingIterator) Check whether the current element is valid
>accept(): bool	(CallbackFilterIterator) Calls the callback with the current value, the current key and the inner iterator as arguments
CallbackFilterIterator(Iterator $iterator, callable $callback)	(new) Create a filtered iterator from another iterator
DirectoryIterator(string $directory)	(new) Constructs a new directory iterator from a path
>current(): mixed	(DirectoryIterator) Return the current DirectoryIterator item
>getBasename(string $suffix = ""): string	(DirectoryIterator) Get base name of current DirectoryIterator item
>getExtension(): string	(DirectoryIterator) Gets the file extension
>getFilename(): string	(DirectoryIterator) Return file name of current DirectoryIterator item
>isDot(): bool	(DirectoryIterator) Determine if current DirectoryIterator item is '.' or '..'
>key(): mixed	(DirectoryIterator) Return the key for the current DirectoryIterator item
>next(): void	(DirectoryIterator) Move forward to next DirectoryIterator item
>rewind(): void	(DirectoryIterator) Rewind the DirectoryIterator back to the start
>seek(int $offset): void	(DirectoryIterator) Seek to a DirectoryIterator item
>__toString(): string	(DirectoryIterator) Get file name as a string
>valid(): bool	(DirectoryIterator) Check whether current DirectoryIterator position is a valid file
>current(): never	(EmptyIterator) The current() method
>key(): never	(EmptyIterator) The key() method
>next(): void	(EmptyIterator) The next() method
>rewind(): void	(EmptyIterator) The rewind() method
>valid(): false	(EmptyIterator) Checks whether the current element is valid
FilesystemIterator(string $directory, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS)	(new) Constructs a new filesystem iterator
>current(): string|SplFileInfo|FilesystemIterator	(FilesystemIterator) The current file
>getFlags(): int	(FilesystemIterator) Get the handling flags
>key(): string	(FilesystemIterator) Retrieve the key for the current file
>next(): void	(FilesystemIterator) Move to the next file
>rewind(): void	(FilesystemIterator) Rewinds back to the beginning
>setFlags(int $flags): void	(FilesystemIterator) Sets handling flags
>accept(): bool	(FilterIterator) Check whether the current element of the iterator is acceptable
FilterIterator(Iterator $iterator)	(new) Construct a filterIterator
>current(): mixed	(FilterIterator) Get the current element value
>key(): mixed	(FilterIterator) Get the current key
>next(): void	(FilterIterator) Move the iterator forward
>rewind(): void	(FilterIterator) Rewind the iterator
>valid(): bool	(FilterIterator) Check whether the current element is valid
class_implements(object|string $object_or_class, bool $autoload = true): array|false	Return the interfaces which are implemented by the given class or interface
class_parents(object|string $object_or_class, bool $autoload = true): array|false	Return the parent classes of the given class
class_uses(object|string $object_or_class, bool $autoload = true): array|false	Return the traits used by the given class
iterator_apply(Traversable $iterator, callable $callback, array|null $args = null): int	Call a function for every element in an iterator
iterator_count(Traversable|array $iterator): int	Count the elements in an iterator
iterator_to_array(Traversable|array $iterator, bool $preserve_keys = true): array	Copy the iterator into an array
spl_autoload_call(string $class): void	Try all registered __autoload() functions to load the requested class
spl_autoload_extensions(string|null $file_extensions = null): string	Register and return default file extensions for spl_autoload
spl_autoload_functions(): array	Return all registered __autoload() functions
spl_autoload_register(callable|null $callback = null, bool $throw = true, bool $prepend = false): bool	Register given function as __autoload() implementation
spl_autoload_unregister(callable $callback): bool	Unregister given function as __autoload() implementation
spl_autoload(string $class, string|null $file_extensions = null): void	Default implementation for __autoload()
spl_classes(): array	Return available SPL classes
spl_object_hash(object $object): string	Return hash id for given object
spl_object_id(object $object): int	Return the integer object handle for given object
GlobIterator(string $pattern, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO)	(new) Construct a directory using glob
>count(): int	(GlobIterator) Get the number of directories and files
InfiniteIterator(Iterator $iterator)	(new) Constructs an InfiniteIterator
>next(): void	(InfiniteIterator) Moves the inner Iterator forward or rewinds it
IteratorIterator(Traversable $iterator, string|null $class = null)	(new) Create an iterator from anything that is traversable
>current(): mixed	(IteratorIterator) Get the current value
>getInnerIterator(): Iterator|null	(IteratorIterator) Get the inner iterator
>key(): mixed	(IteratorIterator) Get the key of the current element
>next(): void	(IteratorIterator) Forward to the next element
>rewind(): void	(IteratorIterator) Rewind to the first element
>valid(): bool	(IteratorIterator) Checks if the current element is valid
LimitIterator(Iterator $iterator, int $offset = ?, int $limit = -1)	(new) Construct a LimitIterator
>current(): mixed	(LimitIterator) Get current element
>getPosition(): int	(LimitIterator) Return the current position
>key(): mixed	(LimitIterator) Get current key
>next(): void	(LimitIterator) Move the iterator forward
>rewind(): void	(LimitIterator) Rewind the iterator to the specified starting offset
>seek(int $offset): int	(LimitIterator) Seek to the given position
>valid(): bool	(LimitIterator) Check whether the current element is valid
>attachIterator(Iterator $iterator, string|int|null $info = null): void	(MultipleIterator) Attaches iterator information
MultipleIterator(int $flags = MultipleIterator::MIT_NEED_ALL | MultipleIterator::MIT_KEYS_NUMERIC)	(new) Constructs a new MultipleIterator
>containsIterator(Iterator $iterator): bool	(MultipleIterator) Checks if an iterator is attached
>countIterators(): int	(MultipleIterator) Gets the number of attached iterator instances
>current(): array	(MultipleIterator) Gets the registered iterator instances
>detachIterator(Iterator $iterator): void	(MultipleIterator) Detaches an iterator
>getFlags(): int	(MultipleIterator) Gets the flag information
>key(): array	(MultipleIterator) Gets the registered iterator instances
>next(): void	(MultipleIterator) Moves all attached iterator instances forward
>rewind(): void	(MultipleIterator) Rewinds all attached iterator instances
>setFlags(int $flags): void	(MultipleIterator) Sets flags
>valid(): bool	(MultipleIterator) Checks the validity of sub iterators
NoRewindIterator(Iterator $iterator)	(new) Construct a NoRewindIterator
>current(): mixed	(NoRewindIterator) Get the current value
>key(): mixed	(NoRewindIterator) Get the current key
>next(): void	(NoRewindIterator) Forward to the next element
>rewind(): void	(NoRewindIterator) Prevents the rewind operation on the inner iterator
>valid(): bool	(NoRewindIterator) Validates the iterator
>getInnerIterator(): Iterator|null	(OuterIterator) Returns the inner iterator for the current entry
>accept(): bool	(ParentIterator) Determines acceptability
ParentIterator(RecursiveIterator $iterator)	(new) Constructs a ParentIterator
>getChildren(): ParentIterator	(ParentIterator) Return the inner iterator's children contained in a ParentIterator
>hasChildren(): bool	(ParentIterator) Check whether the inner iterator's current element has children
>next(): void	(ParentIterator) Move the iterator forward
>rewind(): void	(ParentIterator) Rewind the iterator
>getChildren(): RecursiveArrayIterator|null	(RecursiveArrayIterator) Returns an iterator for the current entry if it is an array or an object
>hasChildren(): bool	(RecursiveArrayIterator) Returns whether current entry is an array or an object
RecursiveCachingIterator(Iterator $iterator, int $flags = RecursiveCachingIterator::CALL_TOSTRING)	(new) Construct
>getChildren(): RecursiveCachingIterator|null	(RecursiveCachingIterator) Return the inner iterator's children as a RecursiveCachingIterator
>hasChildren(): bool	(RecursiveCachingIterator) Check whether the current element of the inner iterator has children
RecursiveCallbackFilterIterator(RecursiveIterator $iterator, callable $callback)	(new) Create a RecursiveCallbackFilterIterator from a RecursiveIterator
>getChildren(): RecursiveCallbackFilterIterator	(RecursiveCallbackFilterIterator) Return the inner iterator's children contained in a RecursiveCallbackFilterIterator
>hasChildren(): bool	(RecursiveCallbackFilterIterator) Check whether the inner iterator's current element has children
RecursiveDirectoryIterator(string $directory, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO)	(new) Constructs a RecursiveDirectoryIterator
>getChildren(): RecursiveDirectoryIterator	(RecursiveDirectoryIterator) Returns an iterator for the current entry if it is a directory
>getSubPath(): string	(RecursiveDirectoryIterator) Get sub path
>getSubPathname(): string	(RecursiveDirectoryIterator) Get sub path and name
>hasChildren(bool $allowLinks = false): bool	(RecursiveDirectoryIterator) Returns whether current entry is a directory and not '.' or '..'
>key(): string	(RecursiveDirectoryIterator) Return path and filename of current dir entry
>next(): void	(RecursiveDirectoryIterator) Move to next entry
>rewind(): void	(RecursiveDirectoryIterator) Rewind dir back to the start
RecursiveFilterIterator(RecursiveIterator $iterator)	(new) Create a RecursiveFilterIterator from a RecursiveIterator
>getChildren(): RecursiveFilterIterator|null	(RecursiveFilterIterator) Return the inner iterator's children contained in a RecursiveFilterIterator
>hasChildren(): bool	(RecursiveFilterIterator) Check whether the inner iterator's current element has children
>getChildren(): RecursiveIterator|null	(RecursiveIterator) Returns an iterator for the current entry
>hasChildren(): bool	(RecursiveIterator) Returns if an iterator can be created for the current entry
>beginChildren(): void	(RecursiveIteratorIterator) Begin children
>beginIteration(): void	(RecursiveIteratorIterator) Begin Iteration
>callGetChildren(): RecursiveIterator|null	(RecursiveIteratorIterator) Get children
>callHasChildren(): bool	(RecursiveIteratorIterator) Has children
RecursiveIteratorIterator(Traversable $iterator, int $mode = RecursiveIteratorIterator::LEAVES_ONLY, int $flags = ?)	(new) Construct a RecursiveIteratorIterator
>current(): mixed	(RecursiveIteratorIterator) Access the current element value
>endChildren(): void	(RecursiveIteratorIterator) End children
>endIteration(): void	(RecursiveIteratorIterator) End Iteration
>getDepth(): int	(RecursiveIteratorIterator) Get the current depth of the recursive iteration
>getInnerIterator(): RecursiveIterator	(RecursiveIteratorIterator) Get inner iterator
>getMaxDepth(): int|false	(RecursiveIteratorIterator) Get max depth
>getSubIterator(int|null $level = null): RecursiveIterator|null	(RecursiveIteratorIterator) The current active sub iterator
>key(): mixed	(RecursiveIteratorIterator) Access the current key
>next(): void	(RecursiveIteratorIterator) Move forward to the next element
>nextElement(): void	(RecursiveIteratorIterator) Next element
>rewind(): void	(RecursiveIteratorIterator) Rewind the iterator to the first element of the top level inner iterator
>setMaxDepth(int $maxDepth = -1): void	(RecursiveIteratorIterator) Set max depth
>valid(): bool	(RecursiveIteratorIterator) Check whether the current position is valid
RecursiveRegexIterator(RecursiveIterator $iterator, string $pattern, int $mode = RecursiveRegexIterator::MATCH, int $flags = ?, int $pregFlags = ?)	(new) Creates a new RecursiveRegexIterator
>getChildren(): RecursiveRegexIterator	(RecursiveRegexIterator) Returns an iterator for the current entry
>hasChildren(): bool	(RecursiveRegexIterator) Returns whether an iterator can be obtained for the current entry
>beginChildren(): void	(RecursiveTreeIterator) Begin children
>beginIteration(): RecursiveIterator	(RecursiveTreeIterator) Begin iteration
>callGetChildren(): RecursiveIterator	(RecursiveTreeIterator) Get children
>callHasChildren(): bool	(RecursiveTreeIterator) Has children
RecursiveTreeIterator(RecursiveIterator|IteratorAggregate $iterator, int $flags = RecursiveTreeIterator::BYPASS_KEY, int $cachingIteratorFlags = CachingIterator::CATCH_GET_CHILD, int $mode = RecursiveTreeIterator::SELF_FIRST)	(new) Construct a RecursiveTreeIterator
>current(): mixed	(RecursiveTreeIterator) Get current element
>endChildren(): void	(RecursiveTreeIterator) End children
>endIteration(): void	(RecursiveTreeIterator) End iteration
>getEntry(): string	(RecursiveTreeIterator) Get current entry
>getPostfix(): string	(RecursiveTreeIterator) Get the postfix
>getPrefix(): string	(RecursiveTreeIterator) Get the prefix
>key(): mixed	(RecursiveTreeIterator) Get the key of the current element
>next(): void	(RecursiveTreeIterator) Move to next element
>nextElement(): void	(RecursiveTreeIterator) Next element
>rewind(): void	(RecursiveTreeIterator) Rewind iterator
>setPostfix(string $postfix): void	(RecursiveTreeIterator) Set postfix
>setPrefixPart(int $part, string $value): void	(RecursiveTreeIterator) Set a part of the prefix
>valid(): bool	(RecursiveTreeIterator) Check validity
>accept(): bool	(RegexIterator) Get accept status
RegexIterator(Iterator $iterator, string $pattern, int $mode = RegexIterator::MATCH, int $flags = ?, int $pregFlags = ?)	(new) Create a new RegexIterator
>getFlags(): int	(RegexIterator) Get flags
>getMode(): int	(RegexIterator) Returns operation mode
>getPregFlags(): int	(RegexIterator) Returns the regular expression flags
>getRegex(): string	(RegexIterator) Returns current regular expression
>setFlags(int $flags): void	(RegexIterator) Sets the flags
>setMode(int $mode): void	(RegexIterator) Sets the operation mode
>setPregFlags(int $pregFlags): void	(RegexIterator) Sets the regular expression flags
>seek(int $offset): void	(SeekableIterator) Seeks to a position
>add(int $index, mixed $value): void	(SplDoublyLinkedList) Add/insert a new value at the specified index
>bottom(): mixed	(SplDoublyLinkedList) Peeks at the node from the beginning of the doubly linked list
>count(): int	(SplDoublyLinkedList) Counts the number of elements in the doubly linked list
>current(): mixed	(SplDoublyLinkedList) Return current array entry
>getIteratorMode(): int	(SplDoublyLinkedList) Returns the mode of iteration
>isEmpty(): bool	(SplDoublyLinkedList) Checks whether the doubly linked list is empty
>key(): int	(SplDoublyLinkedList) Return current node index
>next(): void	(SplDoublyLinkedList) Move to next entry
>offsetExists(int $index): bool	(SplDoublyLinkedList) Returns whether the requested $index exists
>offsetGet(int $index): mixed	(SplDoublyLinkedList) Returns the value at the specified $index
>offsetSet(int|null $index, mixed $value): void	(SplDoublyLinkedList) Sets the value at the specified $index to $value
>offsetUnset(int $index): void	(SplDoublyLinkedList) Unsets the value at the specified $index
>pop(): mixed	(SplDoublyLinkedList) Pops a node from the end of the doubly linked list
>prev(): void	(SplDoublyLinkedList) Move to previous entry
>push(mixed $value): void	(SplDoublyLinkedList) Pushes an element at the end of the doubly linked list
>rewind(): void	(SplDoublyLinkedList) Rewind iterator back to the start
>serialize(): string	(SplDoublyLinkedList) Serializes the storage
>setIteratorMode(int $mode): int	(SplDoublyLinkedList) Sets the mode of iteration
>shift(): mixed	(SplDoublyLinkedList) Shifts a node from the beginning of the doubly linked list
>top(): mixed	(SplDoublyLinkedList) Peeks at the node from the end of the doubly linked list
>unserialize(string $data): void	(SplDoublyLinkedList) Unserializes the storage
>unshift(mixed $value): void	(SplDoublyLinkedList) Prepends the doubly linked list with an element
>valid(): bool	(SplDoublyLinkedList) Check whether the doubly linked list contains more nodes
SplFileInfo(string $filename)	(new) Construct a new SplFileInfo object
>getATime(): int|false	(SplFileInfo) Gets last access time of the file
>getBasename(string $suffix = ""): string	(SplFileInfo) Gets the base name of the file
>getCTime(): int|false	(SplFileInfo) Gets the inode change time
>getExtension(): string	(SplFileInfo) Gets the file extension
>getFileInfo(string|null $class = null): SplFileInfo	(SplFileInfo) Gets an SplFileInfo object for the file
>getFilename(): string	(SplFileInfo) Gets the filename
>getGroup(): int|false	(SplFileInfo) Gets the file group
>getInode(): int|false	(SplFileInfo) Gets the inode for the file
>getLinkTarget(): string|false	(SplFileInfo) Gets the target of a link
>getMTime(): int|false	(SplFileInfo) Gets the last modified time
>getOwner(): int|false	(SplFileInfo) Gets the owner of the file
>getPath(): string	(SplFileInfo) Gets the path without filename
>getPathInfo(string|null $class = null): SplFileInfo|null	(SplFileInfo) Gets an SplFileInfo object for the path
>getPathname(): string	(SplFileInfo) Gets the path to the file
>getPerms(): int|false	(SplFileInfo) Gets file permissions
>getRealPath(): string|false	(SplFileInfo) Gets absolute path to file
>getSize(): int|false	(SplFileInfo) Gets file size
>getType(): string|false	(SplFileInfo) Gets file type
>isDir(): bool	(SplFileInfo) Tells if the file is a directory
>isExecutable(): bool	(SplFileInfo) Tells if the file is executable
>isFile(): bool	(SplFileInfo) Tells if the object references a regular file
>isLink(): bool	(SplFileInfo) Tells if the file is a link
>isReadable(): bool	(SplFileInfo) Tells if file is readable
>isWritable(): bool	(SplFileInfo) Tells if the entry is writable
>openFile(string $mode = "r", bool $useIncludePath = false, resource|null $context = null): SplFileObject	(SplFileInfo) Gets an SplFileObject object for the file
>setFileClass(string $class = SplFileObject::class): void	(SplFileInfo) Sets the class used with SplFileInfo::openFile
>setInfoClass(string $class = SplFileInfo::class): void	(SplFileInfo) Sets the class used with SplFileInfo::getFileInfo and SplFileInfo::getPathInfo
>__toString(): string	(SplFileInfo) Returns the path to the file as a string
SplFileObject(string $filename, string $mode = "r", bool $useIncludePath = false, resource|null $context = null)	(new) Construct a new file object
>current(): string|array|false	(SplFileObject) Retrieve current line of file
>eof(): bool	(SplFileObject) Reached end of file
>fflush(): bool	(SplFileObject) Flushes the output to the file
>fgetc(): string|false	(SplFileObject) Gets character from file
>fgetcsv(string $separator = ",", string $enclosure = "\"", string $escape = "\\"): array|false	(SplFileObject) Gets line from file and parse as CSV fields
>fgets(): string	(SplFileObject) Gets line from file
>fgetss(string $allowable_tags = ?): string	(SplFileObject) Gets line from file and strip HTML tags
>flock(int $operation, int $wouldBlock = null): bool	(SplFileObject) Portable file locking
>fpassthru(): int	(SplFileObject) Output all remaining data on a file pointer
>fputcsv(array $fields, string $separator = ",", string $enclosure = "\"", string $escape = "\\", string $eol = "\n"): int|false	(SplFileObject) Write a field array as a CSV line
>fread(int $length): string|false	(SplFileObject) Read from file
>fscanf(string $format, mixed ...$vars): array|int|null	(SplFileObject) Parses input from file according to a format
>fseek(int $offset, int $whence = SEEK_SET): int	(SplFileObject) Seek to a position
>fstat(): array	(SplFileObject) Gets information about the file
>ftell(): int|false	(SplFileObject) Return current file position
>ftruncate(int $size): bool	(SplFileObject) Truncates the file to a given length
>fwrite(string $data, int $length = ?): int|false	(SplFileObject) Write to file
>getChildren(): null	(SplFileObject) No purpose
>getCsvControl(): array	(SplFileObject) Get the delimiter, enclosure and escape character for CSV
>getCurrentLine()	(SplFileObject) Alias of SplFileObject::fgets
>getFlags(): int	(SplFileObject) Gets flags for the SplFileObject
>getMaxLineLen(): int	(SplFileObject) Get maximum line length
>hasChildren(): false	(SplFileObject) SplFileObject does not have children
>key(): int	(SplFileObject) Get line number
>next(): void	(SplFileObject) Read next line
>rewind(): void	(SplFileObject) Rewind the file to the first line
>seek(int $line): void	(SplFileObject) Seek to specified line
>setCsvControl(string $separator = ",", string $enclosure = "\"", string $escape = "\\"): void	(SplFileObject) Set the delimiter, enclosure and escape character for CSV
>setFlags(int $flags): void	(SplFileObject) Sets flags for the SplFileObject
>setMaxLineLen(int $maxLength): void	(SplFileObject) Set maximum line length
>__toString(): string	(SplFileObject) Returns the current line as a string
>valid(): bool	(SplFileObject) Not at EOF
SplFixedArray(int $size = ?)	(new) Constructs a new fixed array
>count(): int	(SplFixedArray) Returns the size of the array
>current(): mixed	(SplFixedArray) Return current array entry
SplFixedArray::fromArray(array $array, bool $preserveKeys = true): SplFixedArray	Import a PHP array in a SplFixedArray instance
>getIterator(): Iterator	(SplFixedArray) Retrieve the iterator to go through the array
>getSize(): int	(SplFixedArray) Gets the size of the array
>jsonSerialize(): array	(SplFixedArray) Returns a representation that can be converted to JSON
>key(): int	(SplFixedArray) Return current array index
>next(): void	(SplFixedArray) Move to next entry
>offsetExists(int $index): bool	(SplFixedArray) Returns whether the requested index exists
>offsetGet(int $index): mixed	(SplFixedArray) Returns the value at the specified index
>offsetSet(int $index, mixed $value): void	(SplFixedArray) Sets a new value at a specified index
>offsetUnset(int $index): void	(SplFixedArray) Unsets the value at the specified $index
>rewind(): void	(SplFixedArray) Rewind iterator back to the start
>__serialize(): array	(SplFixedArray) Serializes the SplFixedArray object
>setSize(int $size): true	(SplFixedArray) Change the size of an array
>toArray(): array	(SplFixedArray) Returns a PHP array from the fixed array
>__unserialize(array $data): void	(SplFixedArray) Deserializes the $data parameter into an SplFixedArray object
>valid(): bool	(SplFixedArray) Check whether the array contains more elements
>__wakeup(): void	(SplFixedArray) Reinitialises the array after being unserialised
>compare(mixed $value1, mixed $value2): int	(SplHeap) Compare elements in order to place them correctly in the heap while sifting up
>count(): int	(SplHeap) Counts the number of elements in the heap
>current(): mixed	(SplHeap) Return current node pointed by the iterator
>extract(): mixed	(SplHeap) Extracts a node from top of the heap and sift up
>insert(mixed $value): true	(SplHeap) Inserts an element in the heap by sifting it up
>isCorrupted(): bool	(SplHeap) Tells if the heap is in a corrupted state
>isEmpty(): bool	(SplHeap) Checks whether the heap is empty
>key(): int	(SplHeap) Return current node index
>next(): void	(SplHeap) Move to the next node
>recoverFromCorruption(): true	(SplHeap) Recover from the corrupted state and allow further actions on the heap
>rewind(): void	(SplHeap) Rewind iterator back to the start (no-op)
>top(): mixed	(SplHeap) Peeks at the node from the top of the heap
>valid(): bool	(SplHeap) Check whether the heap contains more nodes
>compare(mixed $value1, mixed $value2): int	(SplMaxHeap) Compare elements in order to place them correctly in the heap while sifting up
>compare(mixed $value1, mixed $value2): int	(SplMinHeap) Compare elements in order to place them correctly in the heap while sifting up
>addAll(SplObjectStorage $storage): int	(SplObjectStorage) Adds all objects from another storage
>attach(object $object, mixed $info = null): void	(SplObjectStorage) Adds an object in the storage
>contains(object $object): bool	(SplObjectStorage) Checks if the storage contains a specific object
>count(int $mode = COUNT_NORMAL): int	(SplObjectStorage) Returns the number of objects in the storage
>current(): object	(SplObjectStorage) Returns the current storage entry
>detach(object $object): void	(SplObjectStorage) Removes an object from the storage
>getHash(object $object): string	(SplObjectStorage) Calculate a unique identifier for the contained objects
>getInfo(): mixed	(SplObjectStorage) Returns the data associated with the current iterator entry
>key(): int	(SplObjectStorage) Returns the index at which the iterator currently is
>next(): void	(SplObjectStorage) Move to the next entry
>offsetExists(object $object): bool	(SplObjectStorage) Checks whether an object exists in the storage
>offsetGet(object $object): mixed	(SplObjectStorage) Returns the data associated with an object
>offsetSet(object $object, mixed $info = null): void	(SplObjectStorage) Associates data to an object in the storage
>offsetUnset(object $object): void	(SplObjectStorage) Removes an object from the storage
>removeAll(SplObjectStorage $storage): int	(SplObjectStorage) Removes objects contained in another storage from the current storage
>removeAllExcept(SplObjectStorage $storage): int	(SplObjectStorage) Removes all objects except for those contained in another storage from the current storage
>rewind(): void	(SplObjectStorage) Rewind the iterator to the first storage element
>seek(int $offset): void	(SplObjectStorage) Seeks iterator to a position
>serialize(): string	(SplObjectStorage) Serializes the storage
>setInfo(mixed $info): void	(SplObjectStorage) Sets the data associated with the current iterator entry
>unserialize(string $data): void	(SplObjectStorage) Unserializes a storage from its string representation
>valid(): bool	(SplObjectStorage) Returns if the current iterator entry is valid
>update(SplSubject $subject): void	(SplObserver) Receive update from subject
>compare(mixed $priority1, mixed $priority2): int	(SplPriorityQueue) Compare priorities in order to place elements correctly in the heap while sifting up
>count(): int	(SplPriorityQueue) Counts the number of elements in the queue
>current(): mixed	(SplPriorityQueue) Return current node pointed by the iterator
>extract(): mixed	(SplPriorityQueue) Extracts a node from top of the heap and sift up
>getExtractFlags(): int	(SplPriorityQueue) Get the flags of extraction
>insert(mixed $value, mixed $priority): true	(SplPriorityQueue) Inserts an element in the queue by sifting it up
>isCorrupted(): bool	(SplPriorityQueue) Tells if the priority queue is in a corrupted state
>isEmpty(): bool	(SplPriorityQueue) Checks whether the queue is empty
>key(): int	(SplPriorityQueue) Return current node index
>next(): void	(SplPriorityQueue) Move to the next node
>recoverFromCorruption(): true	(SplPriorityQueue) Recover from the corrupted state and allow further actions on the queue
>rewind(): void	(SplPriorityQueue) Rewind iterator back to the start (no-op)
>setExtractFlags(int $flags): int	(SplPriorityQueue) Sets the mode of extraction
>top(): mixed	(SplPriorityQueue) Peeks at the node from the top of the queue
>valid(): bool	(SplPriorityQueue) Check whether the queue contains more nodes
>dequeue(): mixed	(SplQueue) Dequeues a node from the queue
>enqueue(mixed $value): void	(SplQueue) Adds an element to the queue
>attach(SplObserver $observer): void	(SplSubject) Attach an SplObserver
>detach(SplObserver $observer): void	(SplSubject) Detach an observer
>notify(): void	(SplSubject) Notify an observer
SplTempFileObject(int $maxMemory = 2 * 1024 * 1024)	(new) Construct a new temporary file object
BadFunctionCallException()	(new) Exception thrown if a callback refers to an undefined function or if some arguments are missing
BadMethodCallException()	(new) Exception thrown if a callback refers to an undefined method or if some arguments are missing
DomainException()	(new) Exception thrown if a value does not adhere to a defined valid data domain
EmptyIterator()	(new) The EmptyIterator class for an empty iterator
InvalidArgumentException()	(new) Exception thrown if an argument is not of the expected type
LengthException()	(new) Exception thrown if a length is invalid
LogicException()	(new) Exception that represents error in the program logic
OuterIterator()	(new) Classes implementing OuterIterator can be used to iterate over iterators
OutOfBoundsException()	(new) Exception thrown if a value is not a valid key
OutOfRangeException()	(new) Exception thrown when an illegal index was requested
OverflowException()	(new) Exception thrown when adding an element to a full container
RangeException()	(new) Exception thrown to indicate range errors during program execution
RecursiveArrayIterator()	(new) This iterator allows for unsetting and modifying values and keys while iterating over arrays and objects, in the same way as the ArrayIterator
RecursiveIterator()	(new) Classes implementing RecursiveIterator can be used to iterate over iterators recursively
RuntimeException()	(new) Exception thrown if an error which can only be found on runtime occurs
SeekableIterator()	(new) The Seekable iterator
SplDoublyLinkedList()	(new) The SplDoublyLinkedList class provides the main functionalities of a doubly linked list
SplHeap()	(new) The SplHeap class provides the main functionalities of a Heap
SplMaxHeap()	(new) The SplMaxHeap class provides the main functionalities of a heap, keeping the maximum on the top
SplMinHeap()	(new) The SplMinHeap class provides the main functionalities of a heap, keeping the minimum on the top
SplObjectStorage()	(new) The SplObjectStorage class provides a map from objects to data or, by ignoring data, an object set
SplObserver()	(new) The SplObserver interface is used alongside SplSubject to implement the Observer Design Pattern
SplPriorityQueue()	(new) The SplPriorityQueue class provides the main functionalities of a prioritized queue, implemented using a max heap
SplQueue()	(new) The SplQueue class provides the main functionalities of a queue implemented using a doubly linked list by setting the iterator mode to SplDoublyLinkedList::IT_MODE_FIFO
SplStack()	(new) The SplStack class provides the main functionalities of a stack implemented using a doubly linked list by setting the iterator mode to SplDoublyLinkedList::IT_MODE_LIFO
SplSubject()	(new) The SplSubject interface is used alongside SplObserver to implement the Observer Design Pattern
UnderflowException()	(new) Exception thrown when performing an invalid operation on an empty container, such as removing an element
UnexpectedValueException()	(new) Exception thrown if a value does not match with a set of values
stream_bucket_append(resource $brigade, StreamBucket $bucket): void	Append bucket to brigade
stream_bucket_make_writeable(resource $brigade): StreamBucket|null	Returns a bucket object from the brigade to operate on
stream_bucket_new(resource $stream, string $buffer): StreamBucket	Create a new bucket for use on the current stream
stream_bucket_prepend(resource $brigade, StreamBucket $bucket): void	Prepend bucket to brigade
stream_context_create(array|null $options = null, array|null $params = null): resource	Creates a stream context
stream_context_get_default(array|null $options = null): resource	Retrieve the default stream context
stream_context_get_options(resource $stream_or_context): array	Retrieve options for a stream/wrapper/context
stream_context_get_params(resource $context): array	Retrieves parameters from a context
stream_context_set_default(array $options): resource	Set the default stream context
stream_context_set_option(resource $stream_or_context, string $wrapper, string $option, mixed $value): bool	Sets an option for a stream/wrapper/context
stream_context_set_options(resource $context, array $options): true	Sets options on the specified context
stream_context_set_params(resource $context, array $params): true	Set parameters for a stream/wrapper/context
stream_copy_to_stream(resource $from, resource $to, int|null $length = null, int $offset = ?): int|false	Copies data from one stream to another
stream_filter_append(resource $stream, string $filtername, int $read_write = ?, mixed $params = ?): resource	Attach a filter to a stream
stream_filter_prepend(resource $stream, string $filtername, int $read_write = ?, mixed $params = ?): resource	Attach a filter to a stream
stream_filter_register(string $filter_name, string $class): bool	Register a user defined stream filter
stream_filter_remove(resource $stream_filter): bool	Remove a filter from a stream
stream_get_contents(resource $stream, int|null $length = null, int $offset = -1): string|false	Reads remainder of a stream into a string
stream_get_filters(): array	Retrieve list of registered filters
stream_get_line(resource $stream, int $length, string $ending = ""): string|false	Gets line from stream resource up to a given delimiter
stream_get_meta_data(resource $stream): array	Retrieves header/meta data from streams/file pointers
stream_get_transports(): array	Retrieve list of registered socket transports
stream_get_wrappers(): array	Retrieve list of registered streams
stream_is_local(resource|string $stream): bool	Checks if a stream is a local stream
stream_isatty(resource $stream): bool	Check if a stream is a TTY
(int $notification_code, int $severity, string|null $message, int $message_code, int $bytes_transferred, int $bytes_max): void	A callback function for the notification context parameter
stream_register_wrapper()	Alias of stream_wrapper_register
stream_resolve_include_path(string $filename): string|false	Resolve filename against the include path
stream_select(array|null $read, array|null $write, array|null $except, int|null $seconds, int|null $microseconds = null): int|false	Runs the equivalent of the select() system call on the given arrays of streams with a timeout specified by seconds and microseconds
stream_set_blocking(resource $stream, bool $enable): bool	Set blocking/non-blocking mode on a stream
stream_set_chunk_size(resource $stream, int $size): int	Set the stream chunk size
stream_set_read_buffer(resource $stream, int $size): int	Set read file buffering on the given stream
stream_set_timeout(resource $stream, int $seconds, int $microseconds = ?): bool	Set timeout period on a stream
stream_set_write_buffer(resource $stream, int $size): int	Sets write file buffering on the given stream
stream_socket_accept(resource $socket, float|null $timeout = null, string $peer_name = null): resource|false	Accept a connection on a socket created by stream_socket_server
stream_socket_client(string $address, int $error_code = null, string $error_message = null, float|null $timeout = null, int $flags = STREAM_CLIENT_CONNECT, resource|null $context = null): resource|false	Open Internet or Unix domain socket connection
stream_socket_enable_crypto(resource $stream, bool $enable, int|null $crypto_method = null, resource|null $session_stream = null): int|bool	Turns encryption on/off on an already connected socket
stream_socket_get_name(resource $socket, bool $remote): string|false	Retrieve the name of the local or remote sockets
stream_socket_pair(int $domain, int $type, int $protocol): array|false	Creates a pair of connected, indistinguishable socket streams
stream_socket_recvfrom(resource $socket, int $length, int $flags = ?, string|null $address = null): string|false	Receives data from a socket, connected or not
stream_socket_sendto(resource $socket, string $data, int $flags = ?, string $address = ""): int|false	Sends a message to a socket, whether it is connected or not
stream_socket_server(string $address, int $error_code = null, string $error_message = null, int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN, resource|null $context = null): resource|false	Create an Internet or Unix domain server socket
stream_socket_shutdown(resource $stream, int $mode): bool	Shutdown a full-duplex connection
stream_supports_lock(resource $stream): bool	Tells whether the stream supports locking
stream_wrapper_register(string $protocol, string $class, int $flags = ?): bool	Register a URL wrapper implemented as a PHP class
stream_wrapper_restore(string $protocol): bool	Restores a previously unregistered built-in wrapper
stream_wrapper_unregister(string $protocol): bool	Unregister a URL wrapper
>filter(resource $in, resource $out, int $consumed, bool $closing): int	(php_user_filter) Called when applying the filter
>onClose(): void	(php_user_filter) Called when closing the filter
>onCreate(): bool	(php_user_filter) Called when creating the filter
streamWrapper()	(new) Constructs a new stream wrapper
>__destruct()	(streamWrapper) Destructs an existing stream wrapper
>dir_closedir(): bool	(streamWrapper) Close directory handle
>dir_opendir(string $path, int $options): bool	(streamWrapper) Open directory handle
>dir_readdir(): string	(streamWrapper) Read entry from directory handle
>dir_rewinddir(): bool	(streamWrapper) Rewind directory handle
>mkdir(string $path, int $mode, int $options): bool	(streamWrapper) Create a directory
>rename(string $path_from, string $path_to): bool	(streamWrapper) Renames a file or directory
>rmdir(string $path, int $options): bool	(streamWrapper) Removes a directory
>stream_cast(int $cast_as): resource	(streamWrapper) Retrieve the underlaying resource
>stream_close(): void	(streamWrapper) Close a resource
>stream_eof(): bool	(streamWrapper) Tests for end-of-file on a file pointer
>stream_flush(): bool	(streamWrapper) Flushes the output
>stream_lock(int $operation): bool	(streamWrapper) Advisory file locking
>stream_metadata(string $path, int $option, mixed $value): bool	(streamWrapper) Change stream metadata
>stream_open(string $path, string $mode, int $options, string|null $opened_path): bool	(streamWrapper) Opens file or URL
>stream_read(int $count): string|false	(streamWrapper) Read from stream
>stream_seek(int $offset, int $whence): bool	(streamWrapper) Seeks to specific location in a stream
>stream_set_option(int $option, int $arg1, int $arg2): bool	(streamWrapper) Change stream options
>stream_stat(): array|false	(streamWrapper) Retrieve information about a file resource
>stream_tell(): int	(streamWrapper) Retrieve the current position of a stream
>stream_truncate(int $new_size): bool	(streamWrapper) Truncate stream
>stream_write(string $data): int	(streamWrapper) Write to stream
>unlink(string $path): bool	(streamWrapper) Delete a file
>url_stat(string $path, int $flags): array|false	(streamWrapper) Retrieve information about a file
php_user_filter()	(new) Children of this class are passed to stream_filter_register
StreamBucket()	(new) A stream bucket is a chunk of a stream which can be extracted from bucket brigades
addcslashes(string $string, string $characters): string	Quote string with slashes in a C style
addslashes(string $string): string	Quote string with slashes
bin2hex(string $string): string	Convert binary data into hexadecimal representation
chop()	Alias of rtrim
chr(int $codepoint): string	Generate a single-byte string from a number
chunk_split(string $string, int $length = 76, string $separator = "\r\n"): string	Split a string into smaller chunks
convert_cyr_string(string $str, string $from, string $to): string	Convert from one Cyrillic character set to another
convert_uudecode(string $string): string|false	Decode a uuencoded string
convert_uuencode(string $string): string	Uuencode a string
count_chars(string $string, int $mode = ?): array|string	Return information about characters used in a string
crc32(string $string): int	Calculates the crc32 polynomial of a string
crypt(string $string, string $salt): string	One-way string hashing
echo(string ...$expressions): void	Output one or more strings
explode(string $separator, string $string, int $limit = PHP_INT_MAX): array	Split a string by a string
fprintf(resource $stream, string $format, mixed ...$values): int	Write a formatted string to a stream
get_html_translation_table(int $table = HTML_SPECIALCHARS, int $flags = ENT_QUOTES | ENT_SUBSTITUTE | ENT_HTML401, string $encoding = "UTF-8"): array	Returns the translation table used by htmlspecialchars and htmlentities
hebrev(string $string, int $max_chars_per_line = ?): string	Convert logical Hebrew text to visual text
hebrevc(string $hebrew_text, int $max_chars_per_line = ?): string	Convert logical Hebrew text to visual text with newline conversion
hex2bin(string $string): string|false	Decodes a hexadecimally encoded binary string
html_entity_decode(string $string, int $flags = ENT_QUOTES | ENT_SUBSTITUTE | ENT_HTML401, string|null $encoding = null): string	Convert HTML entities to their corresponding characters
htmlentities(string $string, int $flags = ENT_QUOTES | ENT_SUBSTITUTE | ENT_HTML401, string|null $encoding = null, bool $double_encode = true): string	Convert all applicable characters to HTML entities
htmlspecialchars_decode(string $string, int $flags = ENT_QUOTES | ENT_SUBSTITUTE | ENT_HTML401): string	Convert special HTML entities back to characters
htmlspecialchars(string $string, int $flags = ENT_QUOTES | ENT_SUBSTITUTE | ENT_HTML401, string|null $encoding = null, bool $double_encode = true): string	Convert special characters to HTML entities
implode(string $separator, array $array): string	Join array elements with a string
implode(array $array): string	Join array elements with a string
implode(array $array, string $separator): string	Join array elements with a string
join()	Alias of implode
lcfirst(string $string): string	Make a string's first character lowercase
levenshtein(string $string1, string $string2, int $insertion_cost = 1, int $replacement_cost = 1, int $deletion_cost = 1): int	Calculate Levenshtein distance between two strings
localeconv(): array	Get numeric formatting information
ltrim(string $string, string $characters = " \n\r\t\v\x00"): string	Strip whitespace (or other characters) from the beginning of a string
md5_file(string $filename, bool $binary = false): string|false	Calculates the md5 hash of a given file
md5(string $string, bool $binary = false): string	Calculate the md5 hash of a string
metaphone(string $string, int $max_phonemes = ?): string	Calculate the metaphone key of a string
money_format(string $format, float $number): string	Formats a number as a currency string
nl_langinfo(int $item): string|false	Query language and locale information
nl2br(string $string, bool $use_xhtml = true): string	Inserts HTML line breaks before all newlines in a string
number_format(float $num, int $decimals = ?, string|null $decimal_separator = ".", string|null $thousands_separator = ","): string	Format a number with grouped thousands
ord(string $character): int	Convert the first byte of a string to a value between 0 and 255
parse_str(string $string, array $result): void	Parses the string into variables
print(string $expression): int	Output a string
printf(string $format, mixed ...$values): int	Output a formatted string
quoted_printable_decode(string $string): string	Convert a quoted-printable string to an 8 bit string
quoted_printable_encode(string $string): string	Convert a 8 bit string to a quoted-printable string
quotemeta(string $string): string	Quote meta characters
rtrim(string $string, string $characters = " \n\r\t\v\x00"): string	Strip whitespace (or other characters) from the end of a string
setlocale(int $category, string $locales, string ...$rest): string|false	Set locale information
setlocale(int $category, array $locale_array): string|false	Set locale information
sha1_file(string $filename, bool $binary = false): string|false	Calculate the sha1 hash of a file
sha1(string $string, bool $binary = false): string	Calculate the sha1 hash of a string
similar_text(string $string1, string $string2, float $percent = null): int	Calculate the similarity between two strings
soundex(string $string): string	Calculate the soundex key of a string
sprintf(string $format, mixed ...$values): string	Return a formatted string
sscanf(string $string, string $format, mixed ...$vars): array|int|null	Parses input from a string according to a format
str_contains(string $haystack, string $needle): bool	Determine if a string contains a given substring
str_decrement(string $string): string	Decrement an alphanumeric string
str_ends_with(string $haystack, string $needle): bool	Checks if a string ends with a given substring
str_getcsv(string $string, string $separator = ",", string $enclosure = "\"", string $escape = "\\"): array	Parse a CSV string into an array
str_increment(string $string): string	Increment an alphanumeric string
str_ireplace(array|string $search, array|string $replace, string|array $subject, int $count = null): string|array	Case-insensitive version of str_replace
str_pad(string $string, int $length, string $pad_string = " ", int $pad_type = STR_PAD_RIGHT): string	Pad a string to a certain length with another string
str_repeat(string $string, int $times): string	Repeat a string
str_replace(array|string $search, array|string $replace, string|array $subject, int $count = null): string|array	Replace all occurrences of the search string with the replacement string
str_rot13(string $string): string	Perform the rot13 transform on a string
str_shuffle(string $string): string	Randomly shuffles a string
str_split(string $string, int $length = 1): array	Convert a string to an array
str_starts_with(string $haystack, string $needle): bool	Checks if a string starts with a given substring
str_word_count(string $string, int $format = ?, string|null $characters = null): array|int	Return information about words used in a string
strcasecmp(string $string1, string $string2): int	Binary safe case-insensitive string comparison
strchr()	Alias of strstr
strcmp(string $string1, string $string2): int	Binary safe string comparison
strcoll(string $string1, string $string2): int	Locale based string comparison
strcspn(string $string, string $characters, int $offset = ?, int|null $length = null): int	Find length of initial segment not matching mask
strip_tags(string $string, array|string|null $allowed_tags = null): string	Strip HTML and PHP tags from a string
stripcslashes(string $string): string	Un-quote string quoted with addcslashes
stripos(string $haystack, string $needle, int $offset = ?): int|false	Find the position of the first occurrence of a case-insensitive substring in a string
stripslashes(string $string): string	Un-quotes a quoted string
stristr(string $haystack, string $needle, bool $before_needle = false): string|false	Case-insensitive strstr
strlen(string $string): int	Get string length
strnatcasecmp(string $string1, string $string2): int	Case insensitive string comparisons using a "natural order" algorithm
strnatcmp(string $string1, string $string2): int	String comparisons using a "natural order" algorithm
strncasecmp(string $string1, string $string2, int $length): int	Binary safe case-insensitive string comparison of the first n characters
strncmp(string $string1, string $string2, int $length): int	Binary safe string comparison of the first n characters
strpbrk(string $string, string $characters): string|false	Search a string for any of a set of characters
strpos(string $haystack, string $needle, int $offset = ?): int|false	Find the position of the first occurrence of a substring in a string
strrchr(string $haystack, string $needle, bool $before_needle = false): string|false	Find the last occurrence of a character in a string
strrev(string $string): string	Reverse a string
strripos(string $haystack, string $needle, int $offset = ?): int|false	Find the position of the last occurrence of a case-insensitive substring in a string
strrpos(string $haystack, string $needle, int $offset = ?): int|false	Find the position of the last occurrence of a substring in a string
strspn(string $string, string $characters, int $offset = ?, int|null $length = null): int	Finds the length of the initial segment of a string consisting entirely of characters contained within a given mask
strstr(string $haystack, string $needle, bool $before_needle = false): string|false	Find the first occurrence of a string
strtok(string $string, string $token): string|false	Tokenize string
strtok(string $token): string|false	Tokenize string
strtolower(string $string): string	Make a string lowercase
strtoupper(string $string): string	Make a string uppercase
strtr(string $string, string $from, string $to): string	Translate characters or replace substrings
strtr(string $string, array $replace_pairs): string	Translate characters or replace substrings
substr_compare(string $haystack, string $needle, int $offset, int|null $length = null, bool $case_insensitive = false): int	Binary safe comparison of two strings from an offset, up to length characters
substr_count(string $haystack, string $needle, int $offset = ?, int|null $length = null): int	Count the number of substring occurrences
substr_replace(array|string $string, array|string $replace, array|int $offset, array|int|null $length = null): string|array	Replace text within a portion of a string
substr(string $string, int $offset, int|null $length = null): string	Return part of a string
trim(string $string, string $characters = " \n\r\t\v\x00"): string	Strip whitespace (or other characters) from the beginning and end of a string
ucfirst(string $string): string	Make a string's first character uppercase
ucwords(string $string, string $separators = " \t\r\n\f\v"): string	Uppercase the first character of each word in a string
utf8_decode(string $string): string	Converts a string from UTF-8 to ISO-8859-1, replacing invalid or unrepresentable characters
utf8_encode(string $string): string	Converts a string from ISO-8859-1 to UTF-8
vfprintf(resource $stream, string $format, array $values): int	Write a formatted string to a stream
vprintf(string $format, array $values): int	Output a formatted string
vsprintf(string $format, array $values): string	Return a formatted string
wordwrap(string $string, int $width = 75, string $break = "\n", bool $cut_long_words = false): string	Wraps a string to a given number of characters
base64_decode(string $string, bool $strict = false): string|false	Decodes data encoded with MIME base64
base64_encode(string $string): string	Encodes data with MIME base64
get_headers(string $url, bool $associative = false, resource|null $context = null): array|false	Fetches all the headers sent by the server in response to an HTTP request
get_meta_tags(string $filename, bool $use_include_path = false): array|false	Extracts all meta tag content attributes from a file and returns an array
http_build_query(array|object $data, string $numeric_prefix = "", string|null $arg_separator = null, int $encoding_type = PHP_QUERY_RFC1738): string	Generate URL-encoded query string
parse_url(string $url, int $component = -1): int|string|array|null|false	Parse a URL and return its components
rawurldecode(string $string): string	Decode URL-encoded strings
rawurlencode(string $string): string	URL-encode according to RFC 3986
urldecode(string $string): string	Decodes URL-encoded string
urlencode(string $string): string	URL-encodes string
boolval(mixed $value): bool	Get the boolean value of a variable
debug_zval_dump(mixed $value, mixed ...$values): void	Dumps a string representation of an internal zval structure to output
doubleval()	Alias of floatval
empty(mixed $var): bool	Determine whether a variable is empty
floatval(mixed $value): float	Get float value of a variable
get_debug_type(mixed $value): string	Gets the type name of a variable in a way that is suitable for debugging
get_defined_vars(): array	Returns an array of all defined variables
get_resource_id(resource $resource): int	Returns an integer identifier for the given resource
get_resource_type(resource $resource): string	Returns the resource type
gettype(mixed $value): string	Get the type of a variable
intval(mixed $value, int $base = 10): int	Get the integer value of a variable
is_array(mixed $value): bool	Finds whether a variable is an array
is_bool(mixed $value): bool	Finds out whether a variable is a boolean
is_callable(mixed $value, bool $syntax_only = false, string $callable_name = null): bool	Verify that a value can be called as a function from the current scope
is_countable(mixed $value): bool	Verify that the contents of a variable is a countable value
is_double()	Alias of is_float
is_float(mixed $value): bool	Finds whether the type of a variable is float
is_int(mixed $value): bool	Find whether the type of a variable is integer
is_integer()	Alias of is_int
is_iterable(mixed $value): bool	Verify that the contents of a variable is an iterable value
is_long()	Alias of is_int
is_null(mixed $value): bool	Finds whether a variable is null
is_numeric(mixed $value): bool	Finds whether a variable is a number or a numeric string
is_object(mixed $value): bool	Finds whether a variable is an object
is_real()	Alias of is_float
is_resource(mixed $value): bool	Finds whether a variable is a resource
is_scalar(mixed $value): bool	Finds whether a variable is a scalar
is_string(mixed $value): bool	Find whether the type of a variable is string
isset(mixed $var, mixed ...$vars): bool	Determine if a variable is declared and is different than null
print_r(mixed $value, bool $return = false): string|true	Prints human-readable information about a variable
serialize(mixed $value): string	Generates a storable representation of a value
settype(mixed $var, string $type): bool	Set the type of a variable
strval(mixed $value): string	Get string value of a variable
unserialize(string $data, array $options = []): mixed	Creates a PHP value from a stored representation
unset(mixed $var, mixed ...$vars): void	Unset a given variable
var_dump(mixed $value, mixed ...$values): void	Dumps information about a variable
var_export(mixed $value, bool $return = false): string|null	Outputs or returns a parsable string representation of a variable
apache_child_terminate(): void	Terminate apache process after this request
apache_get_modules(): array	Get a list of loaded Apache modules
apache_get_version(): string|false	Fetch Apache version
apache_getenv(string $variable, bool $walk_to_top = false): string|false	Get an Apache subprocess_env variable
apache_lookup_uri(string $filename): object|false	Perform a partial request for the specified URI and return all info about it
apache_note(string $note_name, string|null $note_value = null): string|false	Get and set apache request notes
apache_request_headers(): array	Fetch all HTTP request headers
apache_response_headers(): array	Fetch all HTTP response headers
apache_setenv(string $variable, string $value, bool $walk_to_top = false): bool	Set an Apache subprocess_env variable
getallheaders(): array	Fetch all HTTP request headers
virtual(string $uri): bool	Perform an Apache sub-request
>add(BcMath\Number|string|int $num, int|null $scale = null): BcMath\Number	(BcMath\Number) Adds an arbitrary precision number
>ceil(): BcMath\Number	(BcMath\Number) Rounds up an arbitrary precision number
>compare(BcMath\Number|string|int $num, int|null $scale = null): int	(BcMath\Number) Compares two arbitrary precision numbers
BcMath\Number(string|int $num)	(new) Creates a BcMath\Number object
>div(BcMath\Number|string|int $num, int|null $scale = null): BcMath\Number	(BcMath\Number) Divides by an arbitrary precision number
>divmod(BcMath\Number|string|int $num, int|null $scale = null): array	(BcMath\Number) Gets the quotient and modulus of an arbitrary precision number
>floor(): BcMath\Number	(BcMath\Number) Rounds down an arbitrary precision number
>mod(BcMath\Number|string|int $num, int|null $scale = null): BcMath\Number	(BcMath\Number) Gets the modulus of an arbitrary precision number
>mul(BcMath\Number|string|int $num, int|null $scale = null): BcMath\Number	(BcMath\Number) Multiplies an arbitrary precision number
>pow(BcMath\Number|string|int $exponent, int|null $scale = null): BcMath\Number	(BcMath\Number) Raises an arbitrary precision number
>powmod(BcMath\Number|string|int $exponent, BcMath\Number|string|int $modulus, int|null $scale = null): BcMath\Number	(BcMath\Number) Raises an arbitrary precision number, reduced by a specified modulus
>round(int $precision = ?, RoundingMode $mode = RoundingMode::HalfAwayFromZero): BcMath\Number	(BcMath\Number) Rounds an arbitrary precision number
>__serialize(): array	(BcMath\Number) Serializes a BcMath\Number object
>sqrt(int|null $scale = null): BcMath\Number	(BcMath\Number) Gets the square root of an arbitrary precision number
>sub(BcMath\Number|string|int $num, int|null $scale = null): BcMath\Number	(BcMath\Number) Subtracts an arbitrary precision number
>__toString(): string	(BcMath\Number) Converts BcMath\Number to string
>__unserialize(array $data): void	(BcMath\Number) Deserializes a data parameter into a BcMath\Number object
bcadd(string $num1, string $num2, int|null $scale = null): string	Add two arbitrary precision numbers
bcceil(string $num): string	Round up arbitrary precision number
bccomp(string $num1, string $num2, int|null $scale = null): int	Compare two arbitrary precision numbers
bcdiv(string $num1, string $num2, int|null $scale = null): string	Divide two arbitrary precision numbers
bcdivmod(string $num1, string $num2, int|null $scale = null): array	Get the quotient and modulus of an arbitrary precision number
bcfloor(string $num): string	Round down arbitrary precision number
bcmod(string $num1, string $num2, int|null $scale = null): string	Get modulus of an arbitrary precision number
bcmul(string $num1, string $num2, int|null $scale = null): string	Multiply two arbitrary precision numbers
bcpow(string $num, string $exponent, int|null $scale = null): string	Raise an arbitrary precision number to another
bcpowmod(string $num, string $exponent, string $modulus, int|null $scale = null): string	Raise an arbitrary precision number to another, reduced by a specified modulus
bcround(string $num, int $precision = ?, RoundingMode $mode = RoundingMode::HalfAwayFromZero): string	Round arbitrary precision number
bcscale(int $scale): int	Set or get default scale parameter for all bc math functions
bcscale(null $scale = null): int	Set or get default scale parameter for all bc math functions
bcsqrt(string $num, int|null $scale = null): string	Get the square root of an arbitrary precision number
bcsub(string $num1, string $num2, int|null $scale = null): string	Subtract one arbitrary precision number from another
cal_days_in_month(int $calendar, int $month, int $year): int	Return the number of days in a month for a given year and calendar
cal_from_jd(int $julian_day, int $calendar): array	Converts from Julian Day Count to a supported calendar
cal_info(int $calendar = -1): array	Returns information about a particular calendar
cal_to_jd(int $calendar, int $month, int $day, int $year): int	Converts from a supported calendar to Julian Day Count
easter_date(int|null $year = null, int $mode = CAL_EASTER_DEFAULT): int	Get Unix timestamp for local midnight on Easter of a given year
easter_days(int|null $year = null, int $mode = CAL_EASTER_DEFAULT): int	Get number of days after March 21 on which Easter falls for a given year
frenchtojd(int $month, int $day, int $year): int	Converts a date from the French Republican Calendar to a Julian Day Count
gregoriantojd(int $month, int $day, int $year): int	Converts a Gregorian date to Julian Day Count
jddayofweek(int $julian_day, int $mode = CAL_DOW_DAYNO): int|string	Returns the day of the week
jdmonthname(int $julian_day, int $mode): string	Returns a month name
jdtofrench(int $julian_day): string	Converts a Julian Day Count to the French Republican Calendar
jdtogregorian(int $julian_day): string	Converts Julian Day Count to Gregorian date
jdtojewish(int $julian_day, bool $hebrew = false, int $flags = ?): string	Converts a Julian day count to a Jewish calendar date
jdtojulian(int $julian_day): string	Converts a Julian Day Count to a Julian Calendar Date
jdtounix(int $julian_day): int	Convert Julian Day to Unix timestamp
jewishtojd(int $month, int $day, int $year): int	Converts a date in the Jewish Calendar to Julian Day Count
juliantojd(int $month, int $day, int $year): int	Converts a Julian Calendar date to Julian Day Count
unixtojd(int|null $timestamp = null): int|false	Convert Unix timestamp to Julian Day
com(string $module_name, array|string|null $server_name = null, int $codepage = CP_ACP, string $typelib = "")	(new) com class constructor
COMPersistHelper(variant|null $variant = null)	(new) Construct a COMPersistHelper object
>GetCurFileName(): string|false	(COMPersistHelper) Get current filename
>GetMaxStreamSize(): int	(COMPersistHelper) Get maximum stream size
>InitNew(): bool	(COMPersistHelper) Initialize object to default state
>LoadFromFile(string $filename, int $flags = ?): bool	(COMPersistHelper) Load object from file
>LoadFromStream(resource $stream): bool	(COMPersistHelper) Load object from stream
>SaveToFile(string|null $filename, bool $remember = true): bool	(COMPersistHelper) Save object to file
>SaveToStream(resource $stream): bool	(COMPersistHelper) Save object to stream
dotnet(string $assembly_name, string $datatype_name, int $codepage = CP_ACP)	(new) dotnet class constructor
com_create_guid(): string|false	Generate a globally unique identifier (GUID)
com_event_sink(variant $variant, object $sink_object, array|string|null $sink_interface = null): bool	Connect events from a COM object to a PHP object
com_get_active_object(string $prog_id, int|null $codepage = null): variant	Returns a handle to an already running instance of a COM object
com_load_typelib(string $typelib, bool $case_insensitive = true): bool	Loads a Typelib
com_message_pump(int $timeout_milliseconds = ?): bool	Process COM messages, sleeping for up to timeoutms milliseconds
com_print_typeinfo(variant|string $variant, string|null $dispatch_interface = null, bool $display_sink = false): bool	Print out a PHP class definition for a dispatchable interface
variant_abs(mixed $value): variant	Returns the absolute value of a variant
variant_add(mixed $left, mixed $right): variant	"Adds" two variant values together and returns the result
variant_and(mixed $left, mixed $right): variant	Performs a bitwise AND operation between two variants
variant_cast(variant $variant, int $type): variant	Convert a variant into a new variant object of another type
variant_cat(mixed $left, mixed $right): variant	Concatenates two variant values together and returns the result
variant_cmp(mixed $left, mixed $right, int $locale_id = LOCALE_SYSTEM_DEFAULT, int $flags = ?): int	Compares two variants
variant_date_from_timestamp(int $timestamp): variant	Returns a variant date representation of a Unix timestamp
variant_date_to_timestamp(variant $variant): int|null	Converts a variant date/time value to Unix timestamp
variant_div(mixed $left, mixed $right): variant	Returns the result from dividing two variants
variant_eqv(mixed $left, mixed $right): variant	Performs a bitwise equivalence on two variants
variant_fix(mixed $value): variant	Returns the integer portion of a variant
variant_get_type(variant $variant): int	Returns the type of a variant object
variant_idiv(mixed $left, mixed $right): variant	Converts variants to integers and then returns the result from dividing them
variant_imp(mixed $left, mixed $right): variant	Performs a bitwise implication on two variants
variant_int(mixed $value): variant	Returns the integer portion of a variant
variant_mod(mixed $left, mixed $right): variant	Divides two variants and returns only the remainder
variant_mul(mixed $left, mixed $right): variant	Multiplies the values of the two variants
variant_neg(mixed $value): variant	Performs logical negation on a variant
variant_not(mixed $value): variant	Performs bitwise not negation on a variant
variant_or(mixed $left, mixed $right): variant	Performs a logical disjunction on two variants
variant_pow(mixed $left, mixed $right): variant	Returns the result of performing the power function with two variants
variant_round(mixed $value, int $decimals): variant|null	Rounds a variant to the specified number of decimal places
variant_set_type(variant $variant, int $type): void	Convert a variant into another type "in-place"
variant_set(variant $variant, mixed $value): void	Assigns a new value for a variant object
variant_sub(mixed $left, mixed $right): variant	Subtracts the value of the right variant from the left variant value
variant_xor(mixed $left, mixed $right): variant	Performs a logical exclusion on two variants
variant(mixed $value = null, int $type = VT_EMPTY, int $codepage = CP_ACP)	(new) variant class constructor
com_exception()	(new) 
com_safearray_proxy()	(new) com_safearray_proxy is an internal class used for resolving multi-dimensional array accesses on SafeArray types
ctype_alnum(mixed $text): bool	Check for alphanumeric character(s)
ctype_alpha(mixed $text): bool	Check for alphabetic character(s)
ctype_cntrl(mixed $text): bool	Check for control character(s)
ctype_digit(mixed $text): bool	Check for numeric character(s)
ctype_graph(mixed $text): bool	Check for any printable character(s) except space
ctype_lower(mixed $text): bool	Check for lowercase character(s)
ctype_print(mixed $text): bool	Check for printable character(s)
ctype_punct(mixed $text): bool	Check for any printable character which is not whitespace or an alphanumeric character
ctype_space(mixed $text): bool	Check for whitespace character(s)
ctype_upper(mixed $text): bool	Check for uppercase character(s)
ctype_xdigit(mixed $text): bool	Check for character(s) representing a hexadecimal digit
dba_close(Dba\Connection $dba): void	Close a DBA database
dba_delete(string|array $key, Dba\Connection $dba): bool	Delete DBA entry specified by key
dba_exists(string|array $key, Dba\Connection $dba): bool	Check whether key exists
dba_fetch(string|array $key, Dba\Connection $dba, int $skip = ?): string|false	Fetch data specified by key
dba_fetch(string|array $key, int $skip, resource $dba): string	Fetch data specified by key
dba_firstkey(Dba\Connection $dba): string|false	Fetch first key
dba_handlers(bool $full_info = false): array	List all the handlers available
dba_insert(string|array $key, string $value, Dba\Connection $dba): bool	Insert entry
dba_key_split(string|false|null $key): array|false	Splits a key in string representation into array representation
dba_list(): array	List all open database files
dba_nextkey(Dba\Connection $dba): string|false	Fetch next key
dba_open(string $path, string $mode, string|null $handler = null, int $permission = 0644, int $map_size = ?, int|null $flags = null): Dba\Connection|false	Open database
dba_optimize(Dba\Connection $dba): bool	Optimize database
dba_popen(string $path, string $mode, string|null $handler = null, int $permission = 0644, int $map_size = ?, int|null $flags = null): Dba\Connection|false	Open database persistently
dba_replace(string|array $key, string $value, Dba\Connection $dba): bool	Replace or insert entry
dba_sync(Dba\Connection $dba): bool	Synchronize database
Dba\Connection()	(new) A fully opaque class which replaces a dba resource as of PHP 8
exif_imagetype(string $filename): int|false	Determine the type of an image
exif_read_data(resource|string $file, string|null $required_sections = null, bool $as_arrays = false, bool $read_thumbnail = false): array|false	Reads the EXIF headers from an image file
exif_tagname(int $index): string|false	Get the header name for an index
exif_thumbnail(resource|string $file, int $width = null, int $height = null, int $image_type = null): string|false	Retrieve the embedded thumbnail of an image
read_exif_data()	Alias of exif_read_data
>getAlignment(): int	(FFI\CType) Description
>getArrayElementType(): FFI\CType	(FFI\CType) Description
>getArrayLength(): int	(FFI\CType) Description
>getAttributes(): int	(FFI\CType) Description
>getEnumKind(): int	(FFI\CType) Description
>getFuncABI(): int	(FFI\CType) Description
>getFuncParameterCount(): int	(FFI\CType) Retrieve the count of parameters of a function type
>getFuncParameterType(int $index): FFI\CType	(FFI\CType) Description
>getFuncReturnType(): FFI\CType	(FFI\CType) Description
>getKind(): int	(FFI\CType) Description
>getName(): string	(FFI\CType) Description
>getPointerType(): FFI\CType	(FFI\CType) Description
>getSize(): int	(FFI\CType) Description
>getStructFieldNames(): array	(FFI\CType) Description
>getStructFieldOffset(string $name): int	(FFI\CType) Description
>getStructFieldType(string $name): FFI\CType	(FFI\CType) Description
FFI::addr(FFI\CData $ptr): FFI\CData	Creates an unmanaged pointer to C data
FFI::alignof(FFI\CData|FFI\CType $ptr): int	Gets the alignment
FFI::arrayType(FFI\CType $type, array $dimensions): FFI\CType	Dynamically constructs a new C array type
>cast(FFI\CType|string $type, FFI\CData|int|float|bool|null $ptr): FFI\CData|null	(FFI) Performs a C type cast
FFI::cdef(string $code = "", string|null $lib = null): FFI	Creates a new FFI object
FFI::free(FFI\CData $ptr): void	Releases an unmanaged data structure
FFI::isNull(FFI\CData $ptr): bool	Checks whether a FFI\CData is a null pointer
FFI::load(string $filename): FFI|null	Loads C declarations from a C header file
FFI::memcmp(string|FFI\CData $ptr1, string|FFI\CData $ptr2, int $size): int	Compares memory areas
FFI::memcpy(FFI\CData $to, FFI\CData|string $from, int $size): void	Copies one memory area to another
FFI::memset(FFI\CData $ptr, int $value, int $size): void	Fills a memory area
FFI(FFI\CType|string $type, bool $owned = true, bool $persistent = false): FFI\CData|null	(new) Creates a C data structure
FFI::scope(string $name): FFI	Instantiates an FFI object with C declarations parsed during preloading
FFI::sizeof(FFI\CData|FFI\CType $ptr): int	Gets the size of C data or types
FFI::string(FFI\CData $ptr, int|null $size = null): string	Creates a PHP string from a memory area
>type(string $type): FFI\CType|null	(FFI) Creates an FFI\CType object from a C declaration
FFI::typeof(FFI\CData $ptr): FFI\CType	Gets the FFI\CType of FFI\CData
FFI\CData()	(new) FFI\CData objects can be used in a number of ways as a regular PHP data: C data of scalar types can be read and assigned via the $cdata property, e
FFI\CType()	(new) 
FFI\Exception()	(new) 
FFI\ParserException()	(new) 
FFI()	(new) Objects of this class are created by the factory methods FFI::cdef, FFI::load or FFI::scope
>buffer(string $string, int $flags = FILEINFO_NONE, resource|null $context = null): string|false	(finfo) Alias finfo_buffer()
finfo(int $flags = FILEINFO_NONE, string|null $magic_database = null)	(new) Alias finfo_open
>file(string $filename, int $flags = FILEINFO_NONE, resource|null $context = null): string|false	(finfo) Alias finfo_file()
>set_flags(int $flags): true	(finfo) Alias finfo_set_flags()
finfo_buffer(finfo $finfo, string $string, int $flags = FILEINFO_NONE, resource|null $context = null): string|false	Return information about a string buffer
>buffer(string $string, int $flags = FILEINFO_NONE, resource|null $context = null): string|false	(finfo) Return information about a string buffer
finfo_close(finfo $finfo): bool	Close finfo instance
finfo_file(finfo $finfo, string $filename, int $flags = FILEINFO_NONE, resource|null $context = null): string|false	Return information about a file
>file(string $filename, int $flags = FILEINFO_NONE, resource|null $context = null): string|false	(finfo) Return information about a file
finfo_open(int $flags = FILEINFO_NONE, string|null $magic_database = null): finfo|false	Create a new finfo instance
finfo_set_flags(finfo $finfo, int $flags): true	Set libmagic configuration options
>set_flags(int $flags): true	(finfo) Set libmagic configuration options
mime_content_type(resource|string $filename): string|false	Detect MIME Content-type for a file
filter_has_var(int $input_type, string $var_name): bool	Checks if variable of specified type exists
filter_id(string $name): int|false	Returns the filter ID belonging to a named filter
filter_input_array(int $type, array|int $options = FILTER_DEFAULT, bool $add_empty = true): array|false|null	Gets external variables and optionally filters them
filter_input(int $type, string $var_name, int $filter = FILTER_DEFAULT, array|int $options = ?): mixed	Gets a specific external variable by name and optionally filters it
filter_list(): array	Returns a list of all supported filters
filter_var_array(array $array, array|int $options = FILTER_DEFAULT, bool $add_empty = true): array|false|null	Gets multiple variables and optionally filters them
filter_var(mixed $value, int $filter = FILTER_DEFAULT, array|int $options = ?): mixed	Filters a variable with a specified filter
ftp_alloc(FTP\Connection $ftp, int $size, string $response = null): bool	Allocates space for a file to be uploaded
ftp_append(FTP\Connection $ftp, string $remote_filename, string $local_filename, int $mode = FTP_BINARY): bool	Append the contents of a file to another file on the FTP server
ftp_cdup(FTP\Connection $ftp): bool	Changes to the parent directory
ftp_chdir(FTP\Connection $ftp, string $directory): bool	Changes the current directory on a FTP server
ftp_chmod(FTP\Connection $ftp, int $permissions, string $filename): int|false	Set permissions on a file via FTP
ftp_close(FTP\Connection $ftp): bool	Closes an FTP connection
ftp_connect(string $hostname, int $port = 21, int $timeout = 90): FTP\Connection|false	Opens an FTP connection
ftp_delete(FTP\Connection $ftp, string $filename): bool	Deletes a file on the FTP server
ftp_exec(FTP\Connection $ftp, string $command): bool	Requests execution of a command on the FTP server
ftp_fget(FTP\Connection $ftp, resource $stream, string $remote_filename, int $mode = FTP_BINARY, int $offset = ?): bool	Downloads a file from the FTP server and saves to an open file
ftp_fput(FTP\Connection $ftp, string $remote_filename, resource $stream, int $mode = FTP_BINARY, int $offset = ?): bool	Uploads from an open file to the FTP server
ftp_get_option(FTP\Connection $ftp, int $option): int|bool	Retrieves various runtime behaviours of the current FTP connection
ftp_get(FTP\Connection $ftp, string $local_filename, string $remote_filename, int $mode = FTP_BINARY, int $offset = ?): bool	Downloads a file from the FTP server
ftp_login(FTP\Connection $ftp, string $username, string $password): bool	Logs in to an FTP connection
ftp_mdtm(FTP\Connection $ftp, string $filename): int	Returns the last modified time of the given file
ftp_mkdir(FTP\Connection $ftp, string $directory): string|false	Creates a directory
ftp_mlsd(FTP\Connection $ftp, string $directory): array|false	Returns a list of files in the given directory
ftp_nb_continue(FTP\Connection $ftp): int	Continues retrieving/sending a file (non-blocking)
ftp_nb_fget(FTP\Connection $ftp, resource $stream, string $remote_filename, int $mode = FTP_BINARY, int $offset = ?): int	Retrieves a file from the FTP server and writes it to an open file (non-blocking)
ftp_nb_fput(FTP\Connection $ftp, string $remote_filename, resource $stream, int $mode = FTP_BINARY, int $offset = ?): int	Stores a file from an open file to the FTP server (non-blocking)
ftp_nb_get(FTP\Connection $ftp, string $local_filename, string $remote_filename, int $mode = FTP_BINARY, int $offset = ?): int|false	Retrieves a file from the FTP server and writes it to a local file (non-blocking)
ftp_nb_put(FTP\Connection $ftp, string $remote_filename, string $local_filename, int $mode = FTP_BINARY, int $offset = ?): int|false	Stores a file on the FTP server (non-blocking)
ftp_nlist(FTP\Connection $ftp, string $directory): array|false	Returns a list of files in the given directory
ftp_pasv(FTP\Connection $ftp, bool $enable): bool	Turns passive mode on or off
ftp_put(FTP\Connection $ftp, string $remote_filename, string $local_filename, int $mode = FTP_BINARY, int $offset = ?): bool	Uploads a file to the FTP server
ftp_pwd(FTP\Connection $ftp): string|false	Returns the current directory name
ftp_quit()	Alias of ftp_close
ftp_raw(FTP\Connection $ftp, string $command): array|null	Sends an arbitrary command to an FTP server
ftp_rawlist(FTP\Connection $ftp, string $directory, bool $recursive = false): array|false	Returns a detailed list of files in the given directory
ftp_rename(FTP\Connection $ftp, string $from, string $to): bool	Renames a file or a directory on the FTP server
ftp_rmdir(FTP\Connection $ftp, string $directory): bool	Removes a directory
ftp_set_option(FTP\Connection $ftp, int $option, int|bool $value): bool	Set miscellaneous runtime FTP options
ftp_site(FTP\Connection $ftp, string $command): bool	Sends a SITE command to the server
ftp_size(FTP\Connection $ftp, string $filename): int	Returns the size of the given file
ftp_ssl_connect(string $hostname, int $port = 21, int $timeout = 90): FTP\Connection|false	Opens a Secure SSL-FTP connection
ftp_systype(FTP\Connection $ftp): string|false	Returns the system type identifier of the remote FTP server
FTP\Connection()	(new) A fully opaque class which replaces a ftp resource as of PHP 8
iconv_get_encoding(string $type = "all"): array|string|false	Retrieve internal configuration variables of iconv extension
iconv_mime_decode_headers(string $headers, int $mode = ?, string|null $encoding = null): array|false	Decodes multiple MIME header fields at once
iconv_mime_decode(string $string, int $mode = ?, string|null $encoding = null): string|false	Decodes a MIME header field
iconv_mime_encode(string $field_name, string $field_value, array $options = []): string|false	Composes a MIME header field
iconv_set_encoding(string $type, string $encoding): bool	Set current setting for character encoding conversion
iconv_strlen(string $string, string|null $encoding = null): int|false	Returns the character count of string
iconv_strpos(string $haystack, string $needle, int $offset = ?, string|null $encoding = null): int|false	Finds position of first occurrence of a needle within a haystack
iconv_strrpos(string $haystack, string $needle, string|null $encoding = null): int|false	Finds the last occurrence of a needle within a haystack
iconv_substr(string $string, int $offset, int|null $length = null, string|null $encoding = null): string|false	Cut out part of a string
iconv(string $from_encoding, string $to_encoding, string $string): string|false	Convert a string from one character encoding to another
ob_iconv_handler(string $contents, int $status): string	Convert character encoding as output buffer handler
gd_info(): array	Retrieve information about the currently installed GD library
getimagesize(string $filename, array $image_info = null): array|false	Get the size of an image
getimagesizefromstring(string $string, array $image_info = null): array|false	Get the size of an image from a string
image_type_to_extension(int $image_type, bool $include_dot = true): string|false	Get file extension for image type
image_type_to_mime_type(int $image_type): string	Get Mime-Type for image-type returned by getimagesize, exif_read_data, exif_thumbnail, exif_imagetype
image2wbmp(resource $image, string $filename = ?, int $foreground = ?): bool	gd.image.output
imageaffine(GdImage $image, array $affine, array|null $clip = null): GdImage|false	Return an image containing the affine transformed src image, using an optional clipping area
imageaffinematrixconcat(array $matrix1, array $matrix2): array|false	Concatenate two affine transformation matrices
imageaffinematrixget(int $type, array|float $options): array|false	Get an affine transformation matrix
imagealphablending(GdImage $image, bool $enable): bool	Set the blending mode for an image
imageantialias(GdImage $image, bool $enable): bool	Should antialias functions be used or not
imagearc(GdImage $image, int $center_x, int $center_y, int $width, int $height, int $start_angle, int $end_angle, int $color): bool	Draws an arc
imageavif(GdImage $image, resource|string|null $file = null, int $quality = -1, int $speed = -1): bool	gd.image.output
imagebmp(GdImage $image, resource|string|null $file = null, bool $compressed = true): bool	Output a BMP image to browser or file
imagechar(GdImage $image, GdFont|int $font, int $x, int $y, string $char, int $color): bool	Draw a character horizontally
imagecharup(GdImage $image, GdFont|int $font, int $x, int $y, string $char, int $color): bool	Draw a character vertically
imagecolorallocate(GdImage $image, int $red, int $green, int $blue): int|false	Allocate a color for an image
imagecolorallocatealpha(GdImage $image, int $red, int $green, int $blue, int $alpha): int|false	Allocate a color for an image
imagecolorat(GdImage $image, int $x, int $y): int|false	Get the index of the color of a pixel
imagecolorclosest(GdImage $image, int $red, int $green, int $blue): int	Get the index of the closest color to the specified color
imagecolorclosestalpha(GdImage $image, int $red, int $green, int $blue, int $alpha): int	Get the index of the closest color to the specified color + alpha
imagecolorclosesthwb(GdImage $image, int $red, int $green, int $blue): int	Get the index of the color which has the hue, white and blackness
imagecolordeallocate(GdImage $image, int $color): bool	De-allocate a color for an image
imagecolorexact(GdImage $image, int $red, int $green, int $blue): int	Get the index of the specified color
imagecolorexactalpha(GdImage $image, int $red, int $green, int $blue, int $alpha): int	Get the index of the specified color + alpha
imagecolormatch(GdImage $image1, GdImage $image2): bool	Makes the colors of the palette version of an image more closely match the true color version
imagecolorresolve(GdImage $image, int $red, int $green, int $blue): int	Get the index of the specified color or its closest possible alternative
imagecolorresolvealpha(GdImage $image, int $red, int $green, int $blue, int $alpha): int	Get the index of the specified color + alpha or its closest possible alternative
imagecolorset(GdImage $image, int $color, int $red, int $green, int $blue, int $alpha = ?): false|null	Set the color for the specified palette index
imagecolorsforindex(GdImage $image, int $color): array	Get the colors for an index
imagecolorstotal(GdImage $image): int	Find out the number of colors in an image's palette
imagecolortransparent(GdImage $image, int|null $color = null): int	Define a color as transparent
imageconvolution(GdImage $image, array $matrix, float $divisor, float $offset): bool	Apply a 3x3 convolution matrix, using coefficient and offset
imagecopy(GdImage $dst_image, GdImage $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_width, int $src_height): bool	Copy part of an image
imagecopymerge(GdImage $dst_image, GdImage $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_width, int $src_height, int $pct): bool	Copy and merge part of an image
imagecopymergegray(GdImage $dst_image, GdImage $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_width, int $src_height, int $pct): bool	Copy and merge part of an image with gray scale
imagecopyresampled(GdImage $dst_image, GdImage $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $dst_width, int $dst_height, int $src_width, int $src_height): bool	Copy and resize part of an image with resampling
imagecopyresized(GdImage $dst_image, GdImage $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $dst_width, int $dst_height, int $src_width, int $src_height): bool	Copy and resize part of an image
imagecreate(int $width, int $height): GdImage|false	Create a new palette based image
imagecreatefromavif(string $filename): GdImage|false	gd.image.new
imagecreatefrombmp(string $filename): GdImage|false	gd.image.new
imagecreatefromgd(string $filename): GdImage|false	Create a new image from GD file or URL
imagecreatefromgd2(string $filename): GdImage|false	Create a new image from GD2 file or URL
imagecreatefromgd2part(string $filename, int $x, int $y, int $width, int $height): GdImage|false	Create a new image from a given part of GD2 file or URL
imagecreatefromgif(string $filename): GdImage|false	gd.image.new
imagecreatefromjpeg(string $filename): GdImage|false	gd.image.new
imagecreatefrompng(string $filename): GdImage|false	gd.image.new
imagecreatefromstring(string $data): GdImage|false	Create a new image from the image stream in the string
imagecreatefromtga(string $filename): GdImage|false	gd.image.new
imagecreatefromwbmp(string $filename): GdImage|false	gd.image.new
imagecreatefromwebp(string $filename): GdImage|false	gd.image.new
imagecreatefromxbm(string $filename): GdImage|false	gd.image.new
imagecreatefromxpm(string $filename): GdImage|false	gd.image.new
imagecreatetruecolor(int $width, int $height): GdImage|false	Create a new true color image
imagecrop(GdImage $image, array $rectangle): GdImage|false	Crop an image to the given rectangle
imagecropauto(GdImage $image, int $mode = IMG_CROP_DEFAULT, float $threshold = 0.5, int $color = -1): GdImage|false	Crop an image automatically using one of the available modes
imagedashedline(GdImage $image, int $x1, int $y1, int $x2, int $y2, int $color): bool	Draw a dashed line
imagedestroy(GdImage $image): bool	Destroy an image
imageellipse(GdImage $image, int $center_x, int $center_y, int $width, int $height, int $color): bool	Draw an ellipse
imagefill(GdImage $image, int $x, int $y, int $color): bool	Flood fill
imagefilledarc(GdImage $image, int $center_x, int $center_y, int $width, int $height, int $start_angle, int $end_angle, int $color, int $style): bool	Draw a partial arc and fill it
imagefilledellipse(GdImage $image, int $center_x, int $center_y, int $width, int $height, int $color): bool	Draw a filled ellipse
imagefilledpolygon(GdImage $image, array $points, int $color): bool	Draw a filled polygon
imagefilledpolygon(GdImage $image, array $points, int $num_points, int $color): bool	Draw a filled polygon
imagefilledrectangle(GdImage $image, int $x1, int $y1, int $x2, int $y2, int $color): bool	Draw a filled rectangle
imagefilltoborder(GdImage $image, int $x, int $y, int $border_color, int $color): bool	Flood fill to specific color
imagefilter(GdImage $image, int $filter, array|int|float|bool ...$args): bool	Applies a filter to an image
imageflip(GdImage $image, int $mode): bool	Flips an image using a given mode
imagefontheight(GdFont|int $font): int	Get font height
imagefontwidth(GdFont|int $font): int	Get font width
imageftbbox(float $size, float $angle, string $font_filename, string $string, array $options = []): array|false	Give the bounding box of a text using fonts via freetype2
imagefttext(GdImage $image, float $size, float $angle, int $x, int $y, int $color, string $font_filename, string $text, array $options = []): array|false	Write text to the image using fonts using FreeType 2
imagegammacorrect(GdImage $image, float $input_gamma, float $output_gamma): bool	Apply a gamma correction to a GD image
imagegd(GdImage $image, string|null $file = null): bool	Output GD image to browser or file
imagegd2(GdImage $image, string|null $file = null, int $chunk_size = 128, int $mode = IMG_GD2_RAW): bool	Output GD2 image to browser or file
imagegetclip(GdImage $image): array	Get the clipping rectangle
imagegetinterpolation(GdImage $image): int	Get the interpolation method
imagegif(GdImage $image, resource|string|null $file = null): bool	gd.image.output
imagegrabscreen(): GdImage|false	Captures the whole screen
imagegrabwindow(int $handle, bool $client_area = false): GdImage|false	Captures a window
imageinterlace(GdImage $image, bool|null $enable = null): bool	Enable or disable interlace
imageistruecolor(GdImage $image): bool	Finds whether an image is a truecolor image
imagejpeg(GdImage $image, resource|string|null $file = null, int $quality = -1): bool	gd.image.output
imagelayereffect(GdImage $image, int $effect): bool	Set the alpha blending flag to use layering effects
imageline(GdImage $image, int $x1, int $y1, int $x2, int $y2, int $color): bool	Draw a line
imageloadfont(string $filename): GdFont|false	Load a new font
imageopenpolygon(GdImage $image, array $points, int $color): bool	Draws an open polygon
imageopenpolygon(GdImage $image, array $points, int $num_points, int $color): bool	Draws an open polygon
imagepalettecopy(GdImage $dst, GdImage $src): void	Copy the palette from one image to another
imagepalettetotruecolor(GdImage $image): bool	Converts a palette based image to true color
imagepng(GdImage $image, resource|string|null $file = null, int $quality = -1, int $filters = -1): bool	Output a PNG image to either the browser or a file
imagepolygon(GdImage $image, array $points, int $color): bool	Draws a polygon
imagepolygon(GdImage $image, array $points, int $num_points, int $color): bool	Draws a polygon
imagerectangle(GdImage $image, int $x1, int $y1, int $x2, int $y2, int $color): bool	Draw a rectangle
imageresolution(GdImage $image, int|null $resolution_x = null, int|null $resolution_y = null): array|bool	Get or set the resolution of the image
imagerotate(GdImage $image, float $angle, int $background_color): GdImage|false	Rotate an image with a given angle
imagesavealpha(GdImage $image, bool $enable): bool	Whether to retain full alpha channel information when saving images
imagescale(GdImage $image, int $width, int $height = -1, int $mode = IMG_BILINEAR_FIXED): GdImage|false	Scale an image using the given new width and height
imagesetbrush(GdImage $image, GdImage $brush): bool	Set the brush image for line drawing
imagesetclip(GdImage $image, int $x1, int $y1, int $x2, int $y2): bool	Set the clipping rectangle
imagesetinterpolation(GdImage $image, int $method = IMG_BILINEAR_FIXED): bool	Set the interpolation method
imagesetpixel(GdImage $image, int $x, int $y, int $color): bool	Set a single pixel
imagesetstyle(GdImage $image, array $style): bool	Set the style for line drawing
imagesetthickness(GdImage $image, int $thickness): bool	Set the thickness for line drawing
imagesettile(GdImage $image, GdImage $tile): bool	Set the tile image for filling
imagestring(GdImage $image, GdFont|int $font, int $x, int $y, string $string, int $color): bool	Draw a string horizontally
imagestringup(GdImage $image, GdFont|int $font, int $x, int $y, string $string, int $color): bool	Draw a string vertically
imagesx(GdImage $image): int	Get image width
imagesy(GdImage $image): int	Get image height
imagetruecolortopalette(GdImage $image, bool $dither, int $num_colors): bool	Convert a true color image to a palette image
imagettfbbox(float $size, float $angle, string $font_filename, string $string, array $options = []): array|false	Give the bounding box of a text using TrueType fonts
imagettftext(GdImage $image, float $size, float $angle, int $x, int $y, int $color, string $font_filename, string $text, array $options = []): array|false	Write text to the image using TrueType fonts
imagetypes(): int	Return the image types supported by this PHP build
imagewbmp(GdImage $image, resource|string|null $file = null, int|null $foreground_color = null): bool	gd.image.output
imagewebp(GdImage $image, resource|string|null $file = null, int $quality = -1): bool	Output a WebP image to browser or file
imagexbm(GdImage $image, string|null $filename, int|null $foreground_color = null): bool	Output an XBM image to browser or file
iptcembed(string $iptc_data, string $filename, int $spool = ?): string|bool	Embeds binary IPTC data into a JPEG image
iptcparse(string $iptc_block): array|false	Parse a binary IPTC block into single tags
jpeg2wbmp(string $jpegname, string $wbmpname, int $dest_height, int $dest_width, int $threshold): bool	Convert JPEG image file to WBMP image file
png2wbmp(string $pngname, string $wbmpname, int $dest_height, int $dest_width, int $threshold): bool	Convert PNG image file to WBMP image file
GdFont()	(new) A fully opaque class which replaces gd font resources as of PHP 8
GdImage()	(new) A fully opaque class which replaces gd resources as of PHP 8
>asort(array $array, int $flags = Collator::SORT_REGULAR): bool	(Collator) Sort array maintaining index association
collator_asort(Collator $object, array $array, int $flags = Collator::SORT_REGULAR): bool	Sort array maintaining index association
>compare(string $string1, string $string2): int|false	(Collator) Compare two Unicode strings
collator_compare(Collator $object, string $string1, string $string2): int|false	Compare two Unicode strings
Collator(string $locale)	(new) Create a collator
Collator::create(string $locale): Collator|null	Create a collator
collator_create(string $locale): Collator|null	Create a collator
>getAttribute(int $attribute): int|false	(Collator) Get collation attribute value
collator_get_attribute(Collator $object, int $attribute): int|false	Get collation attribute value
>getErrorCode(): int|false	(Collator) Get collator's last error code
collator_get_error_code(Collator $object): int|false	Get collator's last error code
>getErrorMessage(): string|false	(Collator) Get text for collator's last error code
collator_get_error_message(Collator $object): string|false	Get text for collator's last error code
>getLocale(int $type): string|false	(Collator) Get the locale name of the collator
collator_get_locale(Collator $object, int $type): string|false	Get the locale name of the collator
>getSortKey(string $string): string|false	(Collator) Get sorting key for a string
collator_get_sort_key(Collator $object, string $string): string|false	Get sorting key for a string
>getStrength(): int	(Collator) Get current collation strength
collator_get_strength(Collator $object): int	Get current collation strength
>setAttribute(int $attribute, int $value): bool	(Collator) Set collation attribute
collator_set_attribute(Collator $object, int $attribute, int $value): bool	Set collation attribute
>setStrength(int $strength): true	(Collator) Set collation strength
collator_set_strength(Collator $object, int $strength): true	Set collation strength
>sortWithSortKeys(array $array): bool	(Collator) Sort array using specified collator and sort keys
collator_sort_with_sort_keys(Collator $object, array $array): bool	Sort array using specified collator and sort keys
>sort(array $array, int $flags = Collator::SORT_REGULAR): bool	(Collator) Sort array using specified collator
collator_sort(Collator $object, array $array, int $flags = Collator::SORT_REGULAR): bool	Sort array using specified collator
IntlDateFormatter::create(string|null $locale, int $dateType = IntlDateFormatter::FULL, int $timeType = IntlDateFormatter::FULL, IntlTimeZone|DateTimeZone|string|null $timezone = null, IntlCalendar|int|null $calendar = null, string|null $pattern = null): IntlDateFormatter|null	Create a date formatter
datefmt_create(string|null $locale, int $dateType = IntlDateFormatter::FULL, int $timeType = IntlDateFormatter::FULL, IntlTimeZone|DateTimeZone|string|null $timezone = null, IntlCalendar|int|null $calendar = null, string|null $pattern = null): IntlDateFormatter|null	Create a date formatter
>format(IntlCalendar|DateTimeInterface|array|string|int|float $datetime): string|false	(IntlDateFormatter) Format the date/time value as a string
datefmt_format(IntlDateFormatter $formatter, IntlCalendar|DateTimeInterface|array|string|int|float $datetime): string|false	Format the date/time value as a string
IntlDateFormatter::formatObject(IntlCalendar|DateTimeInterface $datetime, array|int|string|null $format = null, string|null $locale = null): string|false	Formats an object
datefmt_format_object(IntlCalendar|DateTimeInterface $datetime, array|int|string|null $format = null, string|null $locale = null): string|false	Formats an object
>getCalendar(): int|false	(IntlDateFormatter) Get the calendar type used for the IntlDateFormatter
datefmt_get_calendar(IntlDateFormatter $formatter): int|false	Get the calendar type used for the IntlDateFormatter
>getDateType(): int|false	(IntlDateFormatter) Get the datetype used for the IntlDateFormatter
datefmt_get_datetype(IntlDateFormatter $formatter): int|false	Get the datetype used for the IntlDateFormatter
>getErrorCode(): int	(IntlDateFormatter) Get the error code from last operation
datefmt_get_error_code(IntlDateFormatter $formatter): int	Get the error code from last operation
>getErrorMessage(): string	(IntlDateFormatter) Get the error text from the last operation
datefmt_get_error_message(IntlDateFormatter $formatter): string	Get the error text from the last operation
>getLocale(int $type = ULOC_ACTUAL_LOCALE): string|false	(IntlDateFormatter) Get the locale used by formatter
datefmt_get_locale(IntlDateFormatter $formatter, int $type = ULOC_ACTUAL_LOCALE): string|false	Get the locale used by formatter
>getPattern(): string|false	(IntlDateFormatter) Get the pattern used for the IntlDateFormatter
datefmt_get_pattern(IntlDateFormatter $formatter): string|false	Get the pattern used for the IntlDateFormatter
>getTimeType(): int|false	(IntlDateFormatter) Get the timetype used for the IntlDateFormatter
datefmt_get_timetype(IntlDateFormatter $formatter): int|false	Get the timetype used for the IntlDateFormatter
>getTimeZoneId(): string|false	(IntlDateFormatter) Get the timezone-id used for the IntlDateFormatter
datefmt_get_timezone_id(IntlDateFormatter $formatter): string|false	Get the timezone-id used for the IntlDateFormatter
>getCalendarObject(): IntlCalendar|false|null	(IntlDateFormatter) Get copy of formatterʼs calendar object
datefmt_get_calendar_object(IntlDateFormatter $formatter): IntlCalendar|false|null	Get copy of formatterʼs calendar object
>getTimeZone(): IntlTimeZone|false	(IntlDateFormatter) Get formatterʼs timezone
datefmt_get_timezone(IntlDateFormatter $formatter): IntlTimeZone|false	Get formatterʼs timezone
>isLenient(): bool	(IntlDateFormatter) Get the lenient used for the IntlDateFormatter
datefmt_is_lenient(IntlDateFormatter $formatter): bool	Get the lenient used for the IntlDateFormatter
>localtime(string $string, int $offset = null): array|false	(IntlDateFormatter) Parse string to a field-based time value
datefmt_localtime(IntlDateFormatter $formatter, string $string, int $offset = null): array|false	Parse string to a field-based time value
>parse(string $string, int $offset = null): int|float|false	(IntlDateFormatter) Parse string to a timestamp value
datefmt_parse(IntlDateFormatter $formatter, string $string, int $offset = null): int|float|false	Parse string to a timestamp value
>setCalendar(IntlCalendar|int|null $calendar): bool	(IntlDateFormatter) Sets the calendar type used by the formatter
datefmt_set_calendar(IntlDateFormatter $formatter, IntlCalendar|int|null $calendar): bool	Sets the calendar type used by the formatter
>setLenient(bool $lenient): void	(IntlDateFormatter) Set the leniency of the parser
datefmt_set_lenient(IntlDateFormatter $formatter, bool $lenient): void	Set the leniency of the parser
>setPattern(string $pattern): bool	(IntlDateFormatter) Set the pattern used for the IntlDateFormatter
datefmt_set_pattern(IntlDateFormatter $formatter, string $pattern): bool	Set the pattern used for the IntlDateFormatter
>setTimeZone(IntlTimeZone|DateTimeZone|string|null $timezone): bool	(IntlDateFormatter) Sets formatterʼs timezone
datefmt_set_timezone(IntlDateFormatter $formatter, IntlTimeZone|DateTimeZone|string|null $timezone): bool	Sets formatterʼs timezone
intl_error_name(int $errorCode): string	Get symbolic name for a given error code
intl_get_error_code(): int	Get the last error code
intl_get_error_message(): string	Get description of the last error
intl_is_failure(int $errorCode): bool	Check whether the given error code indicates failure
grapheme_extract(string $haystack, int $size, int $type = GRAPHEME_EXTR_COUNT, int $offset = ?, int $next = null): string|false	Function to extract a sequence of default grapheme clusters from a text buffer, which must be encoded in UTF-8
grapheme_str_split(string $string, int $length = 1): array|false	Split a string into an array
grapheme_stripos(string $haystack, string $needle, int $offset = ?): int|false	Find position (in grapheme units) of first occurrence of a case-insensitive string
grapheme_stristr(string $haystack, string $needle, bool $beforeNeedle = false): string|false	Returns part of haystack string from the first occurrence of case-insensitive needle to the end of haystack
grapheme_strlen(string $string): int|false|null	Get string length in grapheme units
grapheme_strpos(string $haystack, string $needle, int $offset = ?): int|false	Find position (in grapheme units) of first occurrence of a string
grapheme_strripos(string $haystack, string $needle, int $offset = ?): int|false	Find position (in grapheme units) of last occurrence of a case-insensitive string
grapheme_strrpos(string $haystack, string $needle, int $offset = ?): int|false	Find position (in grapheme units) of last occurrence of a string
grapheme_strstr(string $haystack, string $needle, bool $beforeNeedle = false): string|false	Returns part of haystack string from the first occurrence of needle to the end of haystack
grapheme_substr(string $string, int $offset, int|null $length = null): string|false	Return part of a string
idn_to_ascii(string $domain, int $flags = IDNA_DEFAULT, int $variant = INTL_IDNA_VARIANT_UTS46, array $idna_info = null): string|false	Convert domain name to IDNA ASCII form
idn_to_utf8(string $domain, int $flags = IDNA_DEFAULT, int $variant = INTL_IDNA_VARIANT_UTS46, array $idna_info = null): string|false	Convert domain name from IDNA ASCII to Unicode
IntlBreakIterator()	(new) Private constructor for disallowing instantiation
IntlBreakIterator::createCharacterInstance(string|null $locale = null): IntlBreakIterator|null	Create break iterator for boundaries of combining character sequences
IntlBreakIterator::createCodePointInstance(): IntlCodePointBreakIterator	Create break iterator for boundaries of code points
IntlBreakIterator::createLineInstance(string|null $locale = null): IntlBreakIterator|null	Create break iterator for logically possible line breaks
IntlBreakIterator::createSentenceInstance(string|null $locale = null): IntlBreakIterator|null	Create break iterator for sentence breaks
IntlBreakIterator::createTitleInstance(string|null $locale = null): IntlBreakIterator|null	Create break iterator for title-casing breaks
IntlBreakIterator::createWordInstance(string|null $locale = null): IntlBreakIterator|null	Create break iterator for word breaks
>current(): int	(IntlBreakIterator) Get index of current position
>first(): int	(IntlBreakIterator) Set position to the first character in the text
>following(int $offset): int	(IntlBreakIterator) Advance the iterator to the first boundary following specified offset
>getErrorCode(): int	(IntlBreakIterator) Get last error code on the object
intl_get_error_code(): int	Get last error code on the object
>getErrorMessage(): string	(IntlBreakIterator) Get last error message on the object
intl_get_error_message(): string	Get last error message on the object
>getLocale(int $type): string|false	(IntlBreakIterator) Get the locale associated with the object
>getPartsIterator(string $type = IntlPartsIterator::KEY_SEQUENTIAL): IntlPartsIterator	(IntlBreakIterator) Create iterator for navigating fragments between boundaries
>getText(): string|null	(IntlBreakIterator) Get the text being scanned
>isBoundary(int $offset): bool	(IntlBreakIterator) Tell whether an offset is a boundaryʼs offset
>last(): int	(IntlBreakIterator) Set the iterator position to index beyond the last character
>next(int|null $offset = null): int	(IntlBreakIterator) Advance the iterator the next boundary
>preceding(int $offset): int	(IntlBreakIterator) Set the iterator position to the first boundary before an offset
>previous(): int	(IntlBreakIterator) Set the iterator position to the boundary immediately before the current
>setText(string $text): bool	(IntlBreakIterator) Set the text being scanned
>add(int $field, int $value): bool	(IntlCalendar) Add a (signed) amount of time to a field
intlcal_add(IntlCalendar $calendar, int $field, int $value): bool	Add a (signed) amount of time to a field
>after(IntlCalendar $other): bool	(IntlCalendar) Whether this objectʼs time is after that of the passed object
intlcal_after(IntlCalendar $calendar, IntlCalendar $other): bool	Whether this objectʼs time is after that of the passed object
>before(IntlCalendar $other): bool	(IntlCalendar) Whether this objectʼs time is before that of the passed object
intlcal_before(IntlCalendar $calendar, IntlCalendar $other): bool	Whether this objectʼs time is before that of the passed object
>clear(int|null $field = null): true	(IntlCalendar) Clear a field or all fields
intlcal_clear(IntlCalendar $calendar, int|null $field = null): true	Clear a field or all fields
IntlCalendar()	(new) Private constructor for disallowing instantiation
IntlCalendar::createInstance(IntlTimeZone|DateTimeZone|string|null $timezone = null, string|null $locale = null): IntlCalendar|null	Create a new IntlCalendar
intlcal_create_instance(IntlTimeZone|DateTimeZone|string|null $timezone = null, string|null $locale = null): IntlCalendar|null	Create a new IntlCalendar
>equals(IntlCalendar $other): bool	(IntlCalendar) Compare time of two IntlCalendar objects for equality
intlcal_equals(IntlCalendar $calendar, IntlCalendar $other): bool	Compare time of two IntlCalendar objects for equality
>fieldDifference(float $timestamp, int $field): int|false	(IntlCalendar) Calculate difference between given time and this objectʼs time
intlcal_field_difference(IntlCalendar $calendar, float $timestamp, int $field): int|false	Calculate difference between given time and this objectʼs time
IntlCalendar::fromDateTime(DateTime|string $datetime, string|null $locale = null): IntlCalendar|null	Create an IntlCalendar from a DateTime object or string
intlcal_from_date_time(DateTime|string $datetime, string|null $locale = null): IntlCalendar|null	Create an IntlCalendar from a DateTime object or string
>get(int $field): int|false	(IntlCalendar) Get the value for a field
intlcal_get(IntlCalendar $calendar, int $field): int|false	Get the value for a field
>getActualMaximum(int $field): int|false	(IntlCalendar) The maximum value for a field, considering the objectʼs current time
intlcal_get_actual_maximum(IntlCalendar $calendar, int $field): int|false	The maximum value for a field, considering the objectʼs current time
>getActualMinimum(int $field): int|false	(IntlCalendar) The minimum value for a field, considering the objectʼs current time
intlcal_get_actual_minimum(IntlCalendar $calendar, int $field): int|false	The minimum value for a field, considering the objectʼs current time
IntlCalendar::getAvailableLocales(): array	Get array of locales for which there is data
intlcal_get_available_locales(): array	Get array of locales for which there is data
>getDayOfWeekType(int $dayOfWeek): int|false	(IntlCalendar) Tell whether a day is a weekday, weekend or a day that has a transition between the two
intlcal_get_day_of_week_type(IntlCalendar $calendar, int $dayOfWeek): int|false	Tell whether a day is a weekday, weekend or a day that has a transition between the two
>getErrorCode(): int|false	(IntlCalendar) Get last error code on the object
intlcal_get_error_code(IntlCalendar $calendar): int|false	Get last error code on the object
>getErrorMessage(): string|false	(IntlCalendar) Get last error message on the object
intlcal_get_error_message(IntlCalendar $calendar): string|false	Get last error message on the object
>getFirstDayOfWeek(): int|false	(IntlCalendar) Get the first day of the week for the calendarʼs locale
intlcal_get_first_day_of_week(IntlCalendar $calendar): int|false	Get the first day of the week for the calendarʼs locale
>getGreatestMinimum(int $field): int|false	(IntlCalendar) Get the largest local minimum value for a field
intlcal_get_greatest_minimum(IntlCalendar $calendar, int $field): int|false	Get the largest local minimum value for a field
IntlCalendar::getKeywordValuesForLocale(string $keyword, string $locale, bool $onlyCommon): IntlIterator|false	Get set of locale keyword values
intlcal_get_keyword_values_for_locale(string $keyword, string $locale, bool $onlyCommon): IntlIterator|false	Get set of locale keyword values
>getLeastMaximum(int $field): int|false	(IntlCalendar) Get the smallest local maximum for a field
intlcal_get_least_maximum(IntlCalendar $calendar, int $field): int|false	Get the smallest local maximum for a field
>getLocale(int $type): string|false	(IntlCalendar) Get the locale associated with the object
intlcal_get_locale(IntlCalendar $calendar, int $type): string|false	Get the locale associated with the object
>getMaximum(int $field): int|false	(IntlCalendar) Get the global maximum value for a field
intlcal_get_maximum(IntlCalendar $calendar, int $field): int|false	Get the global maximum value for a field
>getMinimalDaysInFirstWeek(): int|false	(IntlCalendar) Get minimal number of days the first week in a year or month can have
intlcal_get_minimal_days_in_first_week(IntlCalendar $calendar): int|false	Get minimal number of days the first week in a year or month can have
>getMinimum(int $field): int|false	(IntlCalendar) Get the global minimum value for a field
intlcal_get_minimum(IntlCalendar $calendar, int $field): int|false	Get the global minimum value for a field
IntlCalendar::getNow(): float	Get number representing the current time
intlcal_get_now(): float	Get number representing the current time
>getRepeatedWallTimeOption(): int	(IntlCalendar) Get behavior for handling repeating wall time
intlcal_get_repeated_wall_time_option(IntlCalendar $calendar): int	Get behavior for handling repeating wall time
>getSkippedWallTimeOption(): int	(IntlCalendar) Get behavior for handling skipped wall time
intlcal_get_skipped_wall_time_option(IntlCalendar $calendar): int	Get behavior for handling skipped wall time
>getTime(): float|false	(IntlCalendar) Get time currently represented by the object
intlcal_get_time(IntlCalendar $calendar): float|false	Get time currently represented by the object
>getTimeZone(): IntlTimeZone|false	(IntlCalendar) Get the objectʼs timezone
intlcal_get_time_zone(IntlCalendar $calendar): IntlTimeZone|false	Get the objectʼs timezone
>getType(): string	(IntlCalendar) Get the calendar type
intlcal_get_type(IntlCalendar $calendar): string	Get the calendar type
>getWeekendTransition(int $dayOfWeek): int|false	(IntlCalendar) Get time of the day at which weekend begins or ends
intlcal_get_weekend_transition(IntlCalendar $calendar, int $dayOfWeek): int|false	Get time of the day at which weekend begins or ends
>inDaylightTime(): bool	(IntlCalendar) Whether the objectʼs time is in Daylight Savings Time
intlcal_in_daylight_time(IntlCalendar $calendar): bool	Whether the objectʼs time is in Daylight Savings Time
>isEquivalentTo(IntlCalendar $other): bool	(IntlCalendar) Whether another calendar is equal but for a different time
intlcal_is_equivalent_to(IntlCalendar $calendar, IntlCalendar $other): bool	Whether another calendar is equal but for a different time
>isLenient(): bool	(IntlCalendar) Whether date/time interpretation is in lenient mode
intlcal_is_lenient(IntlCalendar $calendar): bool	Whether date/time interpretation is in lenient mode
>isSet(int $field): bool	(IntlCalendar) Whether a field is set
intlcal_is_set(IntlCalendar $calendar, int $field): bool	Whether a field is set
>isWeekend(float|null $timestamp = null): bool	(IntlCalendar) Whether a certain date/time is in the weekend
intlcal_is_weekend(IntlCalendar $calendar, float|null $timestamp = null): bool	Whether a certain date/time is in the weekend
>roll(int $field, int|bool $value): bool	(IntlCalendar) Add value to field without carrying into more significant fields
intlcal_roll(IntlCalendar $calendar, int $field, int|bool $value): bool	Add value to field without carrying into more significant fields
>set(int $field, int $value): true	(IntlCalendar) Set a time field or several common fields at once
>set(int $year, int $month, int $dayOfMonth = NULL, int $hour = NULL, int $minute = NULL, int $second = NULL): true	(IntlCalendar) Set a time field or several common fields at once
intlcal_set(IntlCalendar $cal, int $field, int $value): true	Set a time field or several common fields at once
intlcal_set(IntlCalendar $cal, int $year, int $month, int $dayOfMonth = NULL, int $hour = NULL, int $minute = NULL, int $second = NULL): bool	Set a time field or several common fields at once
>setDate(int $year, int $month, int $dayOfMonth): void	(IntlCalendar) Set a date fields
>setDateTime(int $year, int $month, int $dayOfMonth, int $hour, int $minute, int|null $second = null): void	(IntlCalendar) Set a date and time fields
>setFirstDayOfWeek(int $dayOfWeek): true	(IntlCalendar) Set the day on which the week is deemed to start
intlcal_set_first_day_of_week(IntlCalendar $calendar, int $dayOfWeek): true	Set the day on which the week is deemed to start
>setLenient(bool $lenient): true	(IntlCalendar) Set whether date/time interpretation is to be lenient
intlcal_set_lenient(IntlCalendar $calendar, bool $lenient): true	Set whether date/time interpretation is to be lenient
>setMinimalDaysInFirstWeek(int $days): true	(IntlCalendar) Set minimal number of days the first week in a year or month can have
intlcal_set_minimal_days_in_first_week(IntlCalendar $calendar, int $days): true	Set minimal number of days the first week in a year or month can have
>setRepeatedWallTimeOption(int $option): true	(IntlCalendar) Set behavior for handling repeating wall times at negative timezone offset transitions
intlcal_set_repeated_wall_time_option(IntlCalendar $calendar, int $option): true	Set behavior for handling repeating wall times at negative timezone offset transitions
>setSkippedWallTimeOption(int $option): true	(IntlCalendar) Set behavior for handling skipped wall times at positive timezone offset transitions
intlcal_set_skipped_wall_time_option(IntlCalendar $calendar, int $option): true	Set behavior for handling skipped wall times at positive timezone offset transitions
>setTime(float $timestamp): bool	(IntlCalendar) Set the calendar time in milliseconds since the epoch
intlcal_set_time(IntlCalendar $calendar, float $timestamp): bool	Set the calendar time in milliseconds since the epoch
>setTimeZone(IntlTimeZone|DateTimeZone|string|null $timezone): bool	(IntlCalendar) Set the timezone used by this calendar
intlcal_set_time_zone(IntlCalendar $calendar, IntlTimeZone|DateTimeZone|string|null $timezone): bool	Set the timezone used by this calendar
>toDateTime(): DateTime|false	(IntlCalendar) Convert an IntlCalendar into a DateTime object
intlcal_to_date_time(IntlCalendar $calendar): DateTime|false	Convert an IntlCalendar into a DateTime object
IntlChar::charAge(int|string $codepoint): array|null	Get the "age" of the code point
IntlChar::charDigitValue(int|string $codepoint): int|null	Get the decimal digit value of a decimal digit character
IntlChar::charDirection(int|string $codepoint): int|null	Get bidirectional category value for a code point
IntlChar::charFromName(string $name, int $type = IntlChar::UNICODE_CHAR_NAME): int|null	Find Unicode character by name and return its code point value
IntlChar::charMirror(int|string $codepoint): int|string|null	Get the "mirror-image" character for a code point
IntlChar::charName(int|string $codepoint, int $type = IntlChar::UNICODE_CHAR_NAME): string|null	Retrieve the name of a Unicode character
IntlChar::charType(int|string $codepoint): int|null	Get the general category value for a code point
IntlChar::chr(int|string $codepoint): string|null	Return Unicode character by code point value
IntlChar::digit(int|string $codepoint, int $base = 10): int|false|null	Get the decimal digit value of a code point for a given radix
IntlChar::enumCharNames(int|string $start, int|string $end, callable $callback, int $type = IntlChar::UNICODE_CHAR_NAME): bool	Enumerate all assigned Unicode characters within a range
IntlChar::enumCharTypes(callable $callback): void	Enumerate all code points with their Unicode general categories
IntlChar::foldCase(int|string $codepoint, int $options = IntlChar::FOLD_CASE_DEFAULT): int|string|null	Perform case folding on a code point
IntlChar::forDigit(int $digit, int $base = 10): int	Get character representation for a given digit and radix
IntlChar::getBidiPairedBracket(int|string $codepoint): int|string|null	Get the paired bracket character for a code point
IntlChar::getBlockCode(int|string $codepoint): int|null	Get the Unicode allocation block containing a code point
IntlChar::getCombiningClass(int|string $codepoint): int|null	Get the combining class of a code point
IntlChar::getFC_NFKC_Closure(int|string $codepoint): string|false|null	Get the FC_NFKC_Closure property for a code point
IntlChar::getIntPropertyMaxValue(int $property): int	Get the max value for a Unicode property
IntlChar::getIntPropertyMinValue(int $property): int	Get the min value for a Unicode property
IntlChar::getIntPropertyValue(int|string $codepoint, int $property): int|null	Get the value for a Unicode property for a code point
IntlChar::getNumericValue(int|string $codepoint): float|null	Get the numeric value for a Unicode code point
IntlChar::getPropertyEnum(string $alias): int	Get the property constant value for a given property name
IntlChar::getPropertyName(int $property, int $type = IntlChar::LONG_PROPERTY_NAME): string|false	Get the Unicode name for a property
IntlChar::getPropertyValueEnum(int $property, string $name): int	Get the property value for a given value name
IntlChar::getPropertyValueName(int $property, int $value, int $type = IntlChar::LONG_PROPERTY_NAME): string|false	Get the Unicode name for a property value
IntlChar::getUnicodeVersion(): array	Get the Unicode version
IntlChar::hasBinaryProperty(int|string $codepoint, int $property): bool|null	Check a binary Unicode property for a code point
IntlChar::isalnum(int|string $codepoint): bool|null	Check if code point is an alphanumeric character
IntlChar::isalpha(int|string $codepoint): bool|null	Check if code point is a letter character
IntlChar::isbase(int|string $codepoint): bool|null	Check if code point is a base character
IntlChar::isblank(int|string $codepoint): bool|null	Check if code point is a "blank" or "horizontal space" character
IntlChar::iscntrl(int|string $codepoint): bool|null	Check if code point is a control character
IntlChar::isdefined(int|string $codepoint): bool|null	Check whether the code point is defined
IntlChar::isdigit(int|string $codepoint): bool|null	Check if code point is a digit character
IntlChar::isgraph(int|string $codepoint): bool|null	Check if code point is a graphic character
IntlChar::isIDIgnorable(int|string $codepoint): bool|null	Check if code point is an ignorable character
IntlChar::isIDPart(int|string $codepoint): bool|null	Check if code point is permissible in an identifier
IntlChar::isIDStart(int|string $codepoint): bool|null	Check if code point is permissible as the first character in an identifier
IntlChar::isISOControl(int|string $codepoint): bool|null	Check if code point is an ISO control code
IntlChar::isJavaIDPart(int|string $codepoint): bool|null	Check if code point is permissible in a Java identifier
IntlChar::isJavaIDStart(int|string $codepoint): bool|null	Check if code point is permissible as the first character in a Java identifier
IntlChar::isJavaSpaceChar(int|string $codepoint): bool|null	Check if code point is a space character according to Java
IntlChar::islower(int|string $codepoint): bool|null	Check if code point is a lowercase letter
IntlChar::isMirrored(int|string $codepoint): bool|null	Check if code point has the Bidi_Mirrored property
IntlChar::isprint(int|string $codepoint): bool|null	Check if code point is a printable character
IntlChar::ispunct(int|string $codepoint): bool|null	Check if code point is punctuation character
IntlChar::isspace(int|string $codepoint): bool|null	Check if code point is a space character
IntlChar::istitle(int|string $codepoint): bool|null	Check if code point is a titlecase letter
IntlChar::isUAlphabetic(int|string $codepoint): bool|null	Check if code point has the Alphabetic Unicode property
IntlChar::isULowercase(int|string $codepoint): bool|null	Check if code point has the Lowercase Unicode property
IntlChar::isupper(int|string $codepoint): bool|null	Check if code point has the general category "Lu" (uppercase letter)
IntlChar::isUUppercase(int|string $codepoint): bool|null	Check if code point has the Uppercase Unicode property
IntlChar::isUWhiteSpace(int|string $codepoint): bool|null	Check if code point has the White_Space Unicode property
IntlChar::isWhitespace(int|string $codepoint): bool|null	Check if code point is a whitespace character according to ICU
IntlChar::isxdigit(int|string $codepoint): bool|null	Check if code point is a hexadecimal digit
IntlChar::ord(int|string $character): int|null	Return Unicode code point value of character
IntlChar::tolower(int|string $codepoint): int|string|null	Make Unicode character lowercase
IntlChar::totitle(int|string $codepoint): int|string|null	Make Unicode character titlecase
IntlChar::toupper(int|string $codepoint): int|string|null	Make Unicode character uppercase
>getLastCodePoint(): int	(IntlCodePointBreakIterator) Get last code point passed over after advancing or receding the iterator
IntlDatePatternGenerator::create(string|null $locale = null): IntlDatePatternGenerator|null	Creates a new IntlDatePatternGenerator instance
>getBestPattern(string $skeleton): string|false	(IntlDatePatternGenerator) Determines the most suitable date/time format
IntlGregorianCalendar(IntlTimeZone $tz = ?, string $locale = ?)	(new) Create the Gregorian Calendar class
IntlGregorianCalendar(int $timeZoneOrYear, int $localeOrMonth, int $dayOfMonth)	(new) Create the Gregorian Calendar class
IntlGregorianCalendar(int $timeZoneOrYear, int $localeOrMonth, int $dayOfMonth, int $hour, int $minute, int $second = ?)	(new) Create the Gregorian Calendar class
IntlGregorianCalendar::createFromDate(int $year, int $month, int $dayOfMonth): static	Create a new IntlGregorianCalendar instance from date
IntlGregorianCalendar::createFromDateTime(int $year, int $month, int $dayOfMonth, int $hour, int $minute, int|null $second = null): static	Create a new IntlGregorianCalendar instance from date and time
>getGregorianChange(): float	(IntlGregorianCalendar) Get the Gregorian Calendar change date
>isLeapYear(int $year): bool	(IntlGregorianCalendar) Determine if the given year is a leap year
>setGregorianChange(float $timestamp): bool	(IntlGregorianCalendar) Set the Gregorian Calendar the change date
>current(): mixed	(IntlIterator) Get the current element
>key(): mixed	(IntlIterator) Get the current key
>next(): void	(IntlIterator) Move forward to the next element
>rewind(): void	(IntlIterator) Rewind the iterator to the first element
>valid(): bool	(IntlIterator) Check if current position is valid
>getBreakIterator(): IntlBreakIterator	(IntlPartsIterator) Get IntlBreakIterator backing this parts iterator
IntlRuleBasedBreakIterator(string $rules, bool $compiled = false)	(new) Create iterator from ruleset
>getBinaryRules(): string|false	(IntlRuleBasedBreakIterator) Get the binary form of compiled rules
>getRules(): string|false	(IntlRuleBasedBreakIterator) Get the rule set used to create this object
>getRuleStatus(): int	(IntlRuleBasedBreakIterator) Get the largest status value from the break rules that determined the current break position
>getRuleStatusVec(): array|false	(IntlRuleBasedBreakIterator) Get the status values from the break rules that determined the current break position
IntlTimeZone()	(new) Private constructor to disallow direct instantiation
IntlTimeZone::countEquivalentIDs(string $timezoneId): int|false	Get the number of IDs in the equivalency group that includes the given ID
intltz_count_equivalent_ids(string $timezoneId): int|false	Get the number of IDs in the equivalency group that includes the given ID
IntlTimeZone::createDefault(): IntlTimeZone	Create a new copy of the default timezone for this host
intltz_create_default(): IntlTimeZone	Create a new copy of the default timezone for this host
IntlTimeZone::createEnumeration(IntlTimeZone|string|int|float|null $countryOrRawOffset = null): IntlIterator|false	Get an enumeration over time zone IDs associated with the given country or offset
intltz_create_enumeration(IntlTimeZone|string|int|float|null $countryOrRawOffset = null): IntlIterator|false	Get an enumeration over time zone IDs associated with the given country or offset
IntlTimeZone::createTimeZone(string $timezoneId): IntlTimeZone|null	Create a timezone object for the given ID
intltz_create_time_zone(string $timezoneId): IntlTimeZone|null	Create a timezone object for the given ID
IntlTimeZone::createTimeZoneIDEnumeration(int $type, string|null $region = null, int|null $rawOffset = null): IntlIterator|false	Get an enumeration over system time zone IDs with the given filter conditions
intltz_create_time_zone_id_enumeration(int $type, string|null $region = null, int|null $rawOffset = null): IntlIterator|false	Get an enumeration over system time zone IDs with the given filter conditions
IntlTimeZone::fromDateTimeZone(DateTimeZone $timezone): IntlTimeZone|null	Create a timezone object from DateTimeZone
intltz_from_date_time_zone(DateTimeZone $timezone): IntlTimeZone|null	Create a timezone object from DateTimeZone
IntlTimeZone::getCanonicalID(string $timezoneId, bool $isSystemId = null): string|false	Get the canonical system timezone ID or the normalized custom time zone ID for the given time zone ID
intltz_get_canonical_id(string $timezoneId, bool $isSystemId = null): string|false	Get the canonical system timezone ID or the normalized custom time zone ID for the given time zone ID
>getDisplayName(bool $dst = false, int $style = IntlTimeZone::DISPLAY_LONG, string|null $locale = null): string|false	(IntlTimeZone) Get a name of this time zone suitable for presentation to the user
intltz_get_display_name(IntlTimeZone $timezone, bool $dst = false, int $style = IntlTimeZone::DISPLAY_LONG, string|null $locale = null): string|false	Get a name of this time zone suitable for presentation to the user
>getDSTSavings(): int	(IntlTimeZone) Get the amount of time to be added to local standard time to get local wall clock time
intltz_get_dst_savings(IntlTimeZone $timezone): int	Get the amount of time to be added to local standard time to get local wall clock time
IntlTimeZone::getEquivalentID(string $timezoneId, int $offset): string|false	Get an ID in the equivalency group that includes the given ID
intltz_get_equivalent_id(string $timezoneId, int $offset): string|false	Get an ID in the equivalency group that includes the given ID
>getErrorCode(): int|false	(IntlTimeZone) Get last error code on the object
intltz_get_error_code(IntlTimeZone $timezone): int|false	Get last error code on the object
>getErrorMessage(): string|false	(IntlTimeZone) Get last error message on the object
intltz_get_error_message(IntlTimeZone $timezone): string|false	Get last error message on the object
IntlTimeZone::getGMT(): IntlTimeZone	Create GMT (UTC) timezone
intltz_get_gmt(): IntlTimeZone	Create GMT (UTC) timezone
>getID(): string|false	(IntlTimeZone) Get timezone ID
intltz_get_id(IntlTimeZone $timezone): string|false	Get timezone ID
IntlTimeZone::getIDForWindowsID(string $timezoneId, string|null $region = null): string|false	Translate a Windows timezone into a system timezone
intltz_get_id_for_windows_id(string $timezoneId, string|null $region = null): string|false	Translate a Windows timezone into a system timezone
>getOffset(float $timestamp, bool $local, int $rawOffset, int $dstOffset): bool	(IntlTimeZone) Get the time zone raw and GMT offset for the given moment in time
intltz_get_offset(IntlTimeZone $timezone, float $timestamp, bool $local, int $rawOffset, int $dstOffset): bool	Get the time zone raw and GMT offset for the given moment in time
>getRawOffset(): int	(IntlTimeZone) Get the raw GMT offset (before taking daylight savings time into account
intltz_get_raw_offset(IntlTimeZone $timezone): int	Get the raw GMT offset (before taking daylight savings time into account
IntlTimeZone::getRegion(string $timezoneId): string|false	Get the region code associated with the given system time zone ID
intltz_get_region(string $timezoneId): string|false	Get the region code associated with the given system time zone ID
IntlTimeZone::getTZDataVersion(): string|false	Get the timezone data version currently used by ICU
intltz_get_tz_data_version(): string|false	Get the timezone data version currently used by ICU
IntlTimeZone::getUnknown(): IntlTimeZone	Get the "unknown" time zone
intltz_get_unknown(): IntlTimeZone	Get the "unknown" time zone
IntlTimeZone::getWindowsID(string $timezoneId): string|false	Translate a system timezone into a Windows timezone
intltz_get_windows_id(string $timezoneId): string|false	Translate a system timezone into a Windows timezone
>hasSameRules(IntlTimeZone $other): bool	(IntlTimeZone) Check if this zone has the same rules and offset as another zone
intltz_has_same_rules(IntlTimeZone $timezone, IntlTimeZone $other): bool	Check if this zone has the same rules and offset as another zone
>toDateTimeZone(): DateTimeZone|false	(IntlTimeZone) Convert to DateTimeZone object
intltz_to_date_time_zone(IntlTimeZone $timezone): DateTimeZone|false	Convert to DateTimeZone object
>useDaylightTime(): bool	(IntlTimeZone) Check if this time zone uses daylight savings time
intltz_use_daylight_time(IntlTimeZone $timezone): bool	Check if this time zone uses daylight savings time
Locale::acceptFromHttp(string $header): string|false	Tries to find out best available locale based on HTTP "Accept-Language" header
locale_accept_from_http(string $header): string|false	Tries to find out best available locale based on HTTP "Accept-Language" header
Locale::canonicalize(string $locale): string|null	Canonicalize the locale string
Locale::composeLocale(array $subtags): string|false	Returns a correctly ordered and delimited locale ID
locale_compose(array $subtags): string|false	Returns a correctly ordered and delimited locale ID
Locale::filterMatches(string $languageTag, string $locale, bool $canonicalize = false): bool|null	Checks if a language tag filter matches with locale
locale_filter_matches(string $languageTag, string $locale, bool $canonicalize = false): bool|null	Checks if a language tag filter matches with locale
Locale::getAllVariants(string $locale): array|null	Gets the variants for the input locale
locale_get_all_variants(string $locale): array|null	Gets the variants for the input locale
Locale::getDefault(): string	Gets the default locale value from the INTL global 'default_locale'
locale_get_default(): string	Gets the default locale value from the INTL global 'default_locale'
Locale::getDisplayLanguage(string $locale, string|null $displayLocale = null): string|false	Returns an appropriately localized display name for language of the inputlocale
locale_get_display_language(string $locale, string|null $displayLocale = null): string|false	Returns an appropriately localized display name for language of the inputlocale
Locale::getDisplayName(string $locale, string|null $displayLocale = null): string|false	Returns an appropriately localized display name for the input locale
locale_get_display_name(string $locale, string|null $displayLocale = null): string|false	Returns an appropriately localized display name for the input locale
Locale::getDisplayRegion(string $locale, string|null $displayLocale = null): string|false	Returns an appropriately localized display name for region of the input locale
locale_get_display_region(string $locale, string|null $displayLocale = null): string|false	Returns an appropriately localized display name for region of the input locale
Locale::getDisplayScript(string $locale, string|null $displayLocale = null): string|false	Returns an appropriately localized display name for script of the input locale
locale_get_display_script(string $locale, string|null $displayLocale = null): string|false	Returns an appropriately localized display name for script of the input locale
Locale::getDisplayVariant(string $locale, string|null $displayLocale = null): string|false	Returns an appropriately localized display name for variants of the input locale
locale_get_display_variant(string $locale, string|null $displayLocale = null): string|false	Returns an appropriately localized display name for variants of the input locale
Locale::getKeywords(string $locale): array|false|null	Gets the keywords for the input locale
locale_get_keywords(string $locale): array|false|null	Gets the keywords for the input locale
Locale::getPrimaryLanguage(string $locale): string|null	Gets the primary language for the input locale
locale_get_primary_language(string $locale): string|null	Gets the primary language for the input locale
Locale::getRegion(string $locale): string|null	Gets the region for the input locale
locale_get_region(string $locale): string|null	Gets the region for the input locale
Locale::getScript(string $locale): string|null	Gets the script for the input locale
locale_get_script(string $locale): string|null	Gets the script for the input locale
Locale::lookup(array $languageTag, string $locale, bool $canonicalize = false, string|null $defaultLocale = null): string|null	Searches the language tag list for the best match to the language
locale_lookup(array $languageTag, string $locale, bool $canonicalize = false, string|null $defaultLocale = null): string|null	Searches the language tag list for the best match to the language
Locale::parseLocale(string $locale): array|null	Returns a key-value array of locale ID subtag elements
locale_parse(string $locale): array|null	Returns a key-value array of locale ID subtag elements
Locale::setDefault(string $locale): true	Sets the default runtime locale
locale_set_default(string $locale): true	Sets the default runtime locale
MessageFormatter::create(string $locale, string $pattern): MessageFormatter|null	Constructs a new Message Formatter
msgfmt_create(string $locale, string $pattern): MessageFormatter|null	Constructs a new Message Formatter
MessageFormatter::formatMessage(string $locale, string $pattern, array $values): string|false	Quick format message
msgfmt_format_message(string $locale, string $pattern, array $values): string|false	Quick format message
>format(array $values): string|false	(MessageFormatter) Format the message
msgfmt_format(MessageFormatter $formatter, array $values): string|false	Format the message
>getErrorCode(): int	(MessageFormatter) Get the error code from last operation
msgfmt_get_error_code(MessageFormatter $formatter): int	Get the error code from last operation
>getErrorMessage(): string	(MessageFormatter) Get the error text from the last operation
msgfmt_get_error_message(MessageFormatter $formatter): string	Get the error text from the last operation
>getLocale(): string	(MessageFormatter) Get the locale for which the formatter was created
msgfmt_get_locale(MessageFormatter $formatter): string	Get the locale for which the formatter was created
>getPattern(): string|false	(MessageFormatter) Get the pattern used by the formatter
msgfmt_get_pattern(MessageFormatter $formatter): string|false	Get the pattern used by the formatter
MessageFormatter::parseMessage(string $locale, string $pattern, string $message): array|false	Quick parse input string
msgfmt_parse_message(string $locale, string $pattern, string $message): array|false	Quick parse input string
>parse(string $string): array|false	(MessageFormatter) Parse input string according to pattern
msgfmt_parse(MessageFormatter $formatter, string $string): array|false	Parse input string according to pattern
>setPattern(string $pattern): bool	(MessageFormatter) Set the pattern used by the formatter
msgfmt_set_pattern(MessageFormatter $formatter, string $pattern): bool	Set the pattern used by the formatter
Normalizer::getRawDecomposition(string $string, int $form = Normalizer::FORM_C): string|null	Gets the Decomposition_Mapping property for the given UTF-8 encoded code point
normalizer_get_raw_decomposition(string $string, int $form = Normalizer::FORM_C): string|null	Gets the Decomposition_Mapping property for the given UTF-8 encoded code point
Normalizer::isNormalized(string $string, int $form = Normalizer::FORM_C): bool	Checks if the provided string is already in the specified normalization form
normalizer_is_normalized(string $string, int $form = Normalizer::FORM_C): bool	Checks if the provided string is already in the specified normalization form
Normalizer::normalize(string $string, int $form = Normalizer::FORM_C): string|false	Normalizes the input provided and returns the normalized string
normalizer_normalize(string $string, int $form = Normalizer::FORM_C): string|false	Normalizes the input provided and returns the normalized string
NumberFormatter::create(string $locale, int $style, string|null $pattern = null): NumberFormatter|null	Create a number formatter
numfmt_create(string $locale, int $style, string|null $pattern = null): NumberFormatter|null	Create a number formatter
>formatCurrency(float $amount, string $currency): string|false	(NumberFormatter) Format a currency value
numfmt_format_currency(NumberFormatter $formatter, float $amount, string $currency): string|false	Format a currency value
>format(int|float $num, int $type = NumberFormatter::TYPE_DEFAULT): string|false	(NumberFormatter) Format a number
numfmt_format(NumberFormatter $formatter, int|float $num, int $type = NumberFormatter::TYPE_DEFAULT): string|false	Format a number
>getAttribute(int $attribute): int|float|false	(NumberFormatter) Get an attribute
numfmt_get_attribute(NumberFormatter $formatter, int $attribute): int|float|false	Get an attribute
>getErrorCode(): int	(NumberFormatter) Get formatter's last error code
numfmt_get_error_code(NumberFormatter $formatter): int	Get formatter's last error code
>getErrorMessage(): string	(NumberFormatter) Get formatter's last error message
numfmt_get_error_message(NumberFormatter $formatter): string	Get formatter's last error message
>getLocale(int $type = ULOC_ACTUAL_LOCALE): string|false	(NumberFormatter) Get formatter locale
numfmt_get_locale(NumberFormatter $formatter, int $type = ULOC_ACTUAL_LOCALE): string|false	Get formatter locale
>getPattern(): string|false	(NumberFormatter) Get formatter pattern
numfmt_get_pattern(NumberFormatter $formatter): string|false	Get formatter pattern
>getSymbol(int $symbol): string|false	(NumberFormatter) Get a symbol value
numfmt_get_symbol(NumberFormatter $formatter, int $symbol): string|false	Get a symbol value
>getTextAttribute(int $attribute): string|false	(NumberFormatter) Get a text attribute
numfmt_get_text_attribute(NumberFormatter $formatter, int $attribute): string|false	Get a text attribute
>parseCurrency(string $string, string $currency, int $offset = null): float|false	(NumberFormatter) Parse a currency number
numfmt_parse_currency(NumberFormatter $formatter, string $string, string $currency, int $offset = null): float|false	Parse a currency number
>parse(string $string, int $type = NumberFormatter::TYPE_DOUBLE, int $offset = null): int|float|false	(NumberFormatter) Parse a number
numfmt_parse(NumberFormatter $formatter, string $string, int $type = NumberFormatter::TYPE_DOUBLE, int $offset = null): int|float|false	Parse a number
>setAttribute(int $attribute, int|float $value): bool	(NumberFormatter) Set an attribute
numfmt_set_attribute(NumberFormatter $formatter, int $attribute, int|float $value): bool	Set an attribute
>setPattern(string $pattern): bool	(NumberFormatter) Set formatter pattern
numfmt_set_pattern(NumberFormatter $formatter, string $pattern): bool	Set formatter pattern
>setSymbol(int $symbol, string $value): bool	(NumberFormatter) Set a symbol value
numfmt_set_symbol(NumberFormatter $formatter, int $symbol, string $value): bool	Set a symbol value
>setTextAttribute(int $attribute, string $value): bool	(NumberFormatter) Set a text attribute
numfmt_set_text_attribute(NumberFormatter $formatter, int $attribute, string $value): bool	Set a text attribute
>count(): int	(ResourceBundle) Get number of elements in the bundle
resourcebundle_count(ResourceBundle $bundle): int	Get number of elements in the bundle
ResourceBundle::create(string|null $locale, string|null $bundle, bool $fallback = true): ResourceBundle|null	Create a resource bundle
resourcebundle_create(string|null $locale, string|null $bundle, bool $fallback = true): ResourceBundle|null	Create a resource bundle
>getErrorCode(): int	(ResourceBundle) Get bundle's last error code
resourcebundle_get_error_code(ResourceBundle $bundle): int	Get bundle's last error code
>getErrorMessage(): string	(ResourceBundle) Get bundle's last error message
resourcebundle_get_error_message(ResourceBundle $bundle): string	Get bundle's last error message
>get(string|int $index, bool $fallback = true): mixed	(ResourceBundle) Get data from the bundle
resourcebundle_get(ResourceBundle $bundle, string|int $index, bool $fallback = true): mixed	Get data from the bundle
ResourceBundle::getLocales(string $bundle): array|false	Get supported locales
resourcebundle_locales(string $bundle): array|false	Get supported locales
>areConfusable(string $string1, string $string2, int $errorCode = null): bool	(Spoofchecker) Checks if given strings can be confused
Spoofchecker()	(new) Constructor
>isSuspicious(string $string, int $errorCode = null): bool	(Spoofchecker) Checks if a given text contains any suspicious characters
>setAllowedLocales(string $locales): void	(Spoofchecker) Locales to use when running checks
>setChecks(int $checks): void	(Spoofchecker) Set the checks to run
>setRestrictionLevel(int $level): void	(Spoofchecker) Set the restriction level
Transliterator()	(new) Private constructor to deny instantiation
Transliterator::create(string $id, int $direction = Transliterator::FORWARD): Transliterator|null	Create a transliterator
transliterator_create(string $id, int $direction = Transliterator::FORWARD): Transliterator|null	Create a transliterator
Transliterator::createFromRules(string $rules, int $direction = Transliterator::FORWARD): Transliterator|null	Create transliterator from rules
transliterator_create_from_rules(string $rules, int $direction = Transliterator::FORWARD): Transliterator|null	Create transliterator from rules
>createInverse(): Transliterator|null	(Transliterator) Create an inverse transliterator
transliterator_create_inverse(Transliterator $transliterator): Transliterator|null	Create an inverse transliterator
>getErrorCode(): int|false	(Transliterator) Get last error code
transliterator_get_error_code(Transliterator $transliterator): int|false	Get last error code
>getErrorMessage(): string|false	(Transliterator) Get last error message
transliterator_get_error_message(Transliterator $transliterator): string|false	Get last error message
Transliterator::listIDs(): array|false	Get transliterator IDs
transliterator_list_ids(): array|false	Get transliterator IDs
>transliterate(string $string, int $start = ?, int $end = -1): string|false	(Transliterator) Transliterate a string
transliterator_transliterate(Transliterator|string $transliterator, string $string, int $start = ?, int $end = -1): string|false	Transliterate a string
UConverter(string|null $destination_encoding = null, string|null $source_encoding = null)	(new) Create UConverter object
>convert(string $str, bool $reverse = false): string|false	(UConverter) Convert string from one charset to another
>fromUCallback(int $reason, array $source, int $codePoint, int $error): string|int|array|null	(UConverter) Default "from" callback function
UConverter::getAliases(string $name): array|false|null	Get the aliases of the given name
UConverter::getAvailable(): array	Get the available canonical converter names
>getDestinationEncoding(): string|false|null	(UConverter) Get the destination encoding
>getDestinationType(): int|false|null	(UConverter) Get the destination converter type
>getErrorCode(): int	(UConverter) Get last error code on the object
>getErrorMessage(): string|null	(UConverter) Get last error message on the object
>getSourceEncoding(): string|false|null	(UConverter) Get the source encoding
>getSourceType(): int|false|null	(UConverter) Get the source converter type
UConverter::getStandards(): array|null	Get standards associated to converter names
>getSubstChars(): string|false|null	(UConverter) Get substitution chars
UConverter::reasonText(int $reason): string	Get string representation of the callback reason
>setDestinationEncoding(string $encoding): bool	(UConverter) Set the destination encoding
>setSourceEncoding(string $encoding): bool	(UConverter) Set the source encoding
>setSubstChars(string $chars): bool	(UConverter) Set the substitution chars
>toUCallback(int $reason, string $source, string $codeUnits, int $error): string|int|array|null	(UConverter) Default "to" callback function
UConverter::transcode(string $str, string $toEncoding, string $fromEncoding, array|null $options = null): string|false	Convert a string from one character encoding to another
IntlDateFormatter()	(new) Date Formatter is a concrete class that enables locale-dependent formatting/parsing of dates using pattern strings and/or canned patterns
IntlChar()	(new) IntlChar provides access to a number of utility methods that can be used to access information about Unicode characters
IntlCodePointBreakIterator()	(new) This break iterator identifies the boundaries between UTF-8 code points
IntlDatePatternGenerator()	(new) Generates localized date and/or time format pattern strings suitable for use in IntlDateFormatter
IntlException()	(new) This class is used for generating exceptions when errors occur inside intl functions
IntlIterator()	(new) This class represents iterator objects throughout the intl extension whenever the iterator cannot be identified with any other object provided by the extension
IntlPartsIterator()	(new) Objects of this class can be obtained from IntlBreakIterator objects
Locale()	(new) Examples of identifiers include: en-US (English, United States) zh-Hant-TW (Chinese, Traditional Script, Taiwan) fr-CA, fr-FR (French for Canada and France respectively)
MessageFormatter()	(new) MessageFormatter is a concrete class that enables users to produce concatenated, language-neutral messages
Normalizer()	(new) The Unicode Consortium has defined a number of normalization forms reflecting the various needs of applications: Normalization Form D (NFD) - Canonical Decomposition Normalization Form C (NFC) - Canonical Decomposition followed by Canonical Composition Normalization Form KD (NFKD) - Compatibility Decomposition Normalization Form KC (NFKC) - Compatibility Decomposition followed by Canonical Composition The different forms are defined in terms of a set of transformations on the text, transformations that are expressed by both an algorithm and a set of data files
NumberFormatter()	(new) For currencies you can use currency format type to create a formatter that returns a string with the formatted number and the appropriate currency sign
ResourceBundle()	(new) Localized software products often require sets of data that are to be customized depending on current locale, e
mb_check_encoding(array|string|null $value = null, string|null $encoding = null): bool	Check if strings are valid for the specified encoding
mb_chr(int $codepoint, string|null $encoding = null): string|false	Return character by Unicode code point value
mb_convert_case(string $string, int $mode, string|null $encoding = null): string	Perform case folding on a string
mb_convert_encoding(array|string $string, string $to_encoding, array|string|null $from_encoding = null): array|string|false	Convert a string from one character encoding to another
mb_convert_kana(string $string, string $mode = "KV", string|null $encoding = null): string	Convert "kana" one from another ("zen-kaku", "han-kaku" and more)
mb_convert_variables(string $to_encoding, array|string $from_encoding, mixed $var, mixed ...$vars): string|false	Convert character code in variable(s)
mb_decode_mimeheader(string $string): string	Decode string in MIME header field
mb_decode_numericentity(string $string, array $map, string|null $encoding = null): string	Decode HTML numeric string reference to character
mb_detect_encoding(string $string, array|string|null $encodings = null, bool $strict = false): string|false	Detect character encoding
mb_detect_order(array|string|null $encoding = null): array|bool	Set/Get character encoding detection order
mb_encode_mimeheader(string $string, string|null $charset = null, string|null $transfer_encoding = null, string $newline = "\r\n", int $indent = ?): string	Encode string for MIME header
mb_encode_numericentity(string $string, array $map, string|null $encoding = null, bool $hex = false): string	Encode character to HTML numeric string reference
mb_encoding_aliases(string $encoding): array	Get aliases of a known encoding type
mb_ereg_match(string $pattern, string $string, string|null $options = null): bool	Regular expression match for multibyte string
mb_ereg_replace_callback(string $pattern, callable $callback, string $string, string|null $options = null): string|false|null	Perform a regular expression search and replace with multibyte support using a callback
mb_ereg_replace(string $pattern, string $replacement, string $string, string|null $options = null): string|false|null	Replace regular expression with multibyte support
mb_ereg_search_getpos(): int	Returns start point for next regular expression match
mb_ereg_search_getregs(): array|false	Retrieve the result from the last multibyte regular expression match
mb_ereg_search_init(string $string, string|null $pattern = null, string|null $options = null): bool	Setup string and regular expression for a multibyte regular expression match
mb_ereg_search_pos(string|null $pattern = null, string|null $options = null): array|false	Returns position and length of a matched part of the multibyte regular expression for a predefined multibyte string
mb_ereg_search_regs(string|null $pattern = null, string|null $options = null): array|false	Returns the matched part of a multibyte regular expression
mb_ereg_search_setpos(int $offset): bool	Set start point of next regular expression match
mb_ereg_search(string|null $pattern = null, string|null $options = null): bool	Multibyte regular expression match for predefined multibyte string
mb_ereg(string $pattern, string $string, array $matches = null): bool	Regular expression match with multibyte support
mb_eregi_replace(string $pattern, string $replacement, string $string, string|null $options = null): string|false|null	Replace regular expression with multibyte support ignoring case
mb_eregi(string $pattern, string $string, array $matches = null): bool	Regular expression match ignoring case with multibyte support
mb_get_info(string $type = "all"): array|string|int|false|null	Get internal settings of mbstring
mb_http_input(string|null $type = null): array|string|false	Detect HTTP input character encoding
mb_http_output(string|null $encoding = null): string|bool	Set/Get HTTP output character encoding
mb_internal_encoding(string|null $encoding = null): string|bool	Set/Get internal character encoding
mb_language(string|null $language = null): string|bool	Set/Get current language
mb_lcfirst(string $string, string|null $encoding = null): string	Make a string's first character lowercase
mb_list_encodings(): array	Returns an array of all supported encodings
mb_ltrim(string $string, string|null $characters = null, string|null $encoding = null): string	Strip whitespace (or other characters) from the beginning of a string
mb_ord(string $string, string|null $encoding = null): int|false	Get Unicode code point of character
mb_output_handler(string $string, int $status): string	Callback function converts character encoding in output buffer
mb_parse_str(string $string, array $result): bool	Parse GET/POST/COOKIE data and set global variable
mb_preferred_mime_name(string $encoding): string|false	Get MIME charset string
mb_regex_encoding(string|null $encoding = null): string|bool	Set/Get character encoding for multibyte regex
mb_regex_set_options(string|null $options = null): string	Set/Get the default options for mbregex functions
mb_rtrim(string $string, string|null $characters = null, string|null $encoding = null): string	Strip whitespace (or other characters) from the end of a string
mb_scrub(string $string, string|null $encoding = null): string	Replace ill-formed byte sequences with the substitute character
mb_send_mail(string $to, string $subject, string $message, array|string $additional_headers = [], string|null $additional_params = null): bool	Send encoded mail
mb_split(string $pattern, string $string, int $limit = -1): array|false	Split multibyte string using regular expression
mb_str_pad(string $string, int $length, string $pad_string = " ", int $pad_type = STR_PAD_RIGHT, string|null $encoding = null): string	Pad a multibyte string to a certain length with another multibyte string
mb_str_split(string $string, int $length = 1, string|null $encoding = null): array	Given a multibyte string, return an array of its characters
mb_strcut(string $string, int $start, int|null $length = null, string|null $encoding = null): string	Get part of string
mb_strimwidth(string $string, int $start, int $width, string $trim_marker = "", string|null $encoding = null): string	Get truncated string with specified width
mb_stripos(string $haystack, string $needle, int $offset = ?, string|null $encoding = null): int|false	Finds position of first occurrence of a string within another, case insensitive
mb_stristr(string $haystack, string $needle, bool $before_needle = false, string|null $encoding = null): string|false	Finds first occurrence of a string within another, case insensitive
mb_strlen(string $string, string|null $encoding = null): int	Get string length
mb_strpos(string $haystack, string $needle, int $offset = ?, string|null $encoding = null): int|false	Find position of first occurrence of string in a string
mb_strrchr(string $haystack, string $needle, bool $before_needle = false, string|null $encoding = null): string|false	Finds the last occurrence of a character in a string within another
mb_strrichr(string $haystack, string $needle, bool $before_needle = false, string|null $encoding = null): string|false	Finds the last occurrence of a character in a string within another, case insensitive
mb_strripos(string $haystack, string $needle, int $offset = ?, string|null $encoding = null): int|false	Finds position of last occurrence of a string within another, case insensitive
mb_strrpos(string $haystack, string $needle, int $offset = ?, string|null $encoding = null): int|false	Find position of last occurrence of a string in a string
mb_strstr(string $haystack, string $needle, bool $before_needle = false, string|null $encoding = null): string|false	Finds first occurrence of a string within another
mb_strtolower(string $string, string|null $encoding = null): string	Make a string lowercase
mb_strtoupper(string $string, string|null $encoding = null): string	Make a string uppercase
mb_strwidth(string $string, string|null $encoding = null): int	Return width of string
mb_substitute_character(string|int|null $substitute_character = null): string|int|bool	Set/Get substitution character
mb_substr_count(string $haystack, string $needle, string|null $encoding = null): int	Count the number of substring occurrences
mb_substr(string $string, int $start, int|null $length = null, string|null $encoding = null): string	Get part of string
mb_trim(string $string, string|null $characters = null, string|null $encoding = null): string	Strip whitespace (or other characters) from the beginning and end of a string
mb_ucfirst(string $string, string|null $encoding = null): string	Make a string's first character uppercase
mhash_count(): int	Gets the highest available hash ID
mhash_get_block_size(int $algo): int|false	Gets the block size of the specified hash
mhash_get_hash_name(int $algo): string|false	Gets the name of the specified hash
mhash_keygen_s2k(int $algo, string $password, string $salt, int $length): string|false	Generates a key
mhash(int $algo, string $data, string|null $key = null): string|false	Computes hash
pcntl_alarm(int $seconds): int	Set an alarm clock for delivery of a signal
pcntl_async_signals(bool|null $enable = null): bool	Enable/disable asynchronous signal handling or return the old setting
pcntl_errno()	Alias of pcntl_get_last_error
pcntl_exec(string $path, array $args = [], array $env_vars = []): bool	Executes specified program in current process space
pcntl_fork(): int	Forks the currently running process
pcntl_get_last_error(): int	Retrieve the error number set by the last pcntl function which failed
pcntl_getcpuaffinity(int|null $pid = null): bool|array	Get the cpu affinity of a process
pcntl_getpriority(int|null $process_id = null, int $mode = PRIO_PROCESS): int|false	Get the priority of any process
pcntl_rfork(int $flags, int $signal = ?): int	Manipulates process resources
pcntl_setcpuaffinity(int|null $pid = null, array $hmask = ?): bool	Set the cpu affinity of a process
pcntl_setpriority(int $priority, int|null $process_id = null, int $mode = PRIO_PROCESS): bool	Change the priority of any process
pcntl_signal_dispatch(): bool	Calls signal handlers for pending signals
pcntl_signal_get_handler(int $signal): callable|int	Get the current handler for specified signal
pcntl_signal(int $signal, callable|int $handler, bool $restart_syscalls = true): bool	Installs a signal handler
pcntl_sigprocmask(int $mode, array $signals, array $old_signals = null): bool	Sets and retrieves blocked signals
pcntl_sigtimedwait(array $signals, array $info = [], int $seconds = ?, int $nanoseconds = ?): int|false	Waits for signals, with a timeout
pcntl_sigwaitinfo(array $signals, array $info = []): int|false	Waits for signals
pcntl_strerror(int $error_code): string	Retrieve the system error message associated with the given errno
pcntl_unshare(int $flags): bool	Dissociates parts of the process execution context
pcntl_wait(int $status, int $flags = ?, array $resource_usage = []): int	Waits on or returns the status of a forked child
pcntl_waitid(int $idtype = P_ALL, int|null $id = null, array $info = [], int $flags = WEXITED): bool	Waits for a child process to change state
pcntl_waitpid(int $process_id, int $status, int $flags = ?, array $resource_usage = []): int	Waits on or returns the status of a forked child
pcntl_wexitstatus(int $status): int|false	Returns the return code of a terminated child
pcntl_wifexited(int $status): bool	Checks if status code represents a normal exit
pcntl_wifsignaled(int $status): bool	Checks whether the status code represents a termination due to a signal
pcntl_wifstopped(int $status): bool	Checks whether the child process is currently stopped
pcntl_wstopsig(int $status): int|false	Returns the signal which caused the child to stop
pcntl_wtermsig(int $status): int|false	Returns the signal which caused the child to terminate
>beginTransaction(): bool	(PDO) Initiates a transaction
>commit(): bool	(PDO) Commits a transaction
PDO::connect(string $dsn, string|null $username = null, string|null $password = null, array|null $options = null): static	Connect to a database and return a PDO subclass for drivers that support it
PDO(string $dsn, string|null $username = null, string|null $password = null, array|null $options = null)	(new) Creates a PDO instance representing a connection to a database
>errorCode(): string|null	(PDO) Fetch the SQLSTATE associated with the last operation on the database handle
>errorInfo(): array	(PDO) Fetch extended error information associated with the last operation on the database handle
>exec(string $statement): int|false	(PDO) Execute an SQL statement and return the number of affected rows
>getAttribute(int $attribute): mixed	(PDO) Retrieve a database connection attribute
PDO::getAvailableDrivers(): array	Return an array of available PDO drivers
pdo_drivers(): array	Return an array of available PDO drivers
>inTransaction(): bool	(PDO) Checks if inside a transaction
>lastInsertId(string|null $name = null): string|false	(PDO) Returns the ID of the last inserted row or sequence value
>prepare(string $query, array $options = []): PDOStatement|false	(PDO) Prepares a statement for execution and returns a statement object
>query(string $query, int|null $fetchMode = null): PDOStatement|false	(PDO) Prepares and executes an SQL statement without placeholders
>query(string $query, int|null $fetchMode = PDO::FETCH_COLUMN, int $colno): PDOStatement|false	(PDO) Prepares and executes an SQL statement without placeholders
>query(string $query, int|null $fetchMode = PDO::FETCH_CLASS, string $classname, array $constructorArgs): PDOStatement|false	(PDO) Prepares and executes an SQL statement without placeholders
>query(string $query, int|null $fetchMode = PDO::FETCH_INTO, object $object): PDOStatement|false	(PDO) Prepares and executes an SQL statement without placeholders
>quote(string $string, int $type = PDO::PARAM_STR): string|false	(PDO) Quotes a string for use in a query
>rollBack(): bool	(PDO) Rolls back a transaction
>setAttribute(int $attribute, mixed $value): bool	(PDO) Set an attribute
>bindColumn(string|int $column, mixed $var, int $type = PDO::PARAM_STR, int $maxLength = ?, mixed $driverOptions = null): bool	(PDOStatement) Bind a column to a PHP variable
>bindParam(string|int $param, mixed $var, int $type = PDO::PARAM_STR, int $maxLength = ?, mixed $driverOptions = null): bool	(PDOStatement) Binds a parameter to the specified variable name
>bindValue(string|int $param, mixed $value, int $type = PDO::PARAM_STR): bool	(PDOStatement) Binds a value to a parameter
>closeCursor(): bool	(PDOStatement) Closes the cursor, enabling the statement to be executed again
>columnCount(): int	(PDOStatement) Returns the number of columns in the result set
>debugDumpParams(): bool|null	(PDOStatement) Dump an SQL prepared command
>errorCode(): string|null	(PDOStatement) Fetch the SQLSTATE associated with the last operation on the statement handle
>errorInfo(): array	(PDOStatement) Fetch extended error information associated with the last operation on the statement handle
>execute(array|null $params = null): bool	(PDOStatement) Executes a prepared statement
>fetch(int $mode = PDO::FETCH_DEFAULT, int $cursorOrientation = PDO::FETCH_ORI_NEXT, int $cursorOffset = ?): mixed	(PDOStatement) Fetches the next row from a result set
>fetchAll(int $mode = PDO::FETCH_DEFAULT): array	(PDOStatement) Fetches the remaining rows from a result set
>fetchAll(int $mode = PDO::FETCH_COLUMN, int $column): array	(PDOStatement) Fetches the remaining rows from a result set
>fetchAll(int $mode = PDO::FETCH_CLASS, string $class, array|null $constructorArgs): array	(PDOStatement) Fetches the remaining rows from a result set
>fetchAll(int $mode = PDO::FETCH_FUNC, callable $callback): array	(PDOStatement) Fetches the remaining rows from a result set
>fetchColumn(int $column = ?): mixed	(PDOStatement) Returns a single column from the next row of a result set
>fetchObject(string|null $class = "stdClass", array $constructorArgs = []): object|false	(PDOStatement) Fetches the next row and returns it as an object
>getAttribute(int $name): mixed	(PDOStatement) Retrieve a statement attribute
>getColumnMeta(int $column): array|false	(PDOStatement) Returns metadata for a column in a result set
>getIterator(): Iterator	(PDOStatement) Gets result set iterator
>nextRowset(): bool	(PDOStatement) Advances to the next rowset in a multi-rowset statement handle
>rowCount(): int	(PDOStatement) Returns the number of rows affected by the last SQL statement
>setAttribute(int $attribute, mixed $value): bool	(PDOStatement) Set a statement attribute
>setFetchMode(int $mode): bool	(PDOStatement) Set the default fetch mode for this statement
>setFetchMode(int $mode = PDO::FETCH_COLUMN, int $colno): bool	(PDOStatement) Set the default fetch mode for this statement
>setFetchMode(int $mode = PDO::FETCH_CLASS, string $class, array|null $constructorArgs = null): bool	(PDOStatement) Set the default fetch mode for this statement
>setFetchMode(int $mode = PDO::FETCH_INTO, object $object): bool	(PDOStatement) Set the default fetch mode for this statement
PDOException()	(new) Represents an error raised by PDO
PDORow()	(new) Represents a row from a result set returned by PDOStatement::fetch called with PDO_FETCH_LAZY fetch mode
PDOStatement()	(new) Represents a prepared statement and, after the statement is executed, an associated result set
>addEmptyDir(string $directory): void	(Phar) Add an empty directory to the phar archive
>addFile(string $filename, string|null $localName = null): void	(Phar) Add a file from the filesystem to the phar archive
>addFromString(string $localName, string $contents): void	(Phar) Add a file from a string to the phar archive
Phar::apiVersion(): string	Returns the api version
>buildFromDirectory(string $directory, string $pattern = ""): array	(Phar) Construct a phar archive from the files within a directory
>buildFromIterator(Traversable $iterator, string|null $baseDirectory = null): array	(Phar) Construct a phar archive from an iterator
Phar::canCompress(int $compression = ?): bool	Returns whether phar extension supports compression using either zlib or bzip2
Phar::canWrite(): bool	Returns whether phar extension supports writing and creating phars
>compress(int $compression, string|null $extension = null): Phar|null	(Phar) Compresses the entire Phar archive using Gzip or Bzip2 compression
>compressFiles(int $compression): void	(Phar) Compresses all files in the current Phar archive
Phar(string $filename, int $flags = FilesystemIterator::SKIP_DOTS | FilesystemIterator::UNIX_PATHS, string|null $alias = null)	(new) Construct a Phar archive object
>convertToData(int|null $format = null, int|null $compression = null, string|null $extension = null): PharData|null	(Phar) Convert a phar archive to a non-executable tar or zip file
>convertToExecutable(int|null $format = null, int|null $compression = null, string|null $extension = null): Phar|null	(Phar) Convert a phar archive to another executable phar archive file format
>copy(string $from, string $to): true	(Phar) Copy a file internal to the phar archive to another new file within the phar
>count(int $mode = COUNT_NORMAL): int	(Phar) Returns the number of entries (files) in the Phar archive
Phar::createDefaultStub(string|null $index = null, string|null $webIndex = null): string	Create a phar-file format specific stub
>decompress(string|null $extension = null): Phar|null	(Phar) Decompresses the entire Phar archive
>decompressFiles(): true	(Phar) Decompresses all files in the current Phar archive
>delMetadata(): true	(Phar) Deletes the global metadata of the phar
>delete(string $localName): true	(Phar) Delete a file within a phar archive
>__destruct()	(Phar) Destructs a Phar archive object
>extractTo(string $directory, array|string|null $files = null, bool $overwrite = false): bool	(Phar) Extract the contents of a phar archive to a directory
>getAlias(): string|null	(Phar) Get the alias for Phar
>getMetadata(array $unserializeOptions = []): mixed	(Phar) Returns phar archive meta-data
>getModified(): bool	(Phar) Return whether phar was modified
>getPath(): string	(Phar) Get the real path to the Phar archive on disk
>getSignature(): array|false	(Phar) Return MD5/SHA1/SHA256/SHA512/OpenSSL signature of a Phar archive
>getStub(): string	(Phar) Return the PHP loader or bootstrap stub of a Phar archive
Phar::getSupportedCompression(): array	Return array of supported compression algorithms
Phar::getSupportedSignatures(): array	Return array of supported signature types
>getVersion(): string	(Phar) Return version info of Phar archive
>hasMetadata(): bool	(Phar) Returns whether phar has global meta-data
Phar::interceptFileFuncs(): void	Instructs phar to intercept fopen, file_get_contents, opendir, and all of the stat-related functions
>isBuffering(): bool	(Phar) Used to determine whether Phar write operations are being buffered, or are flushing directly to disk
>isCompressed(): int|false	(Phar) Returns Phar::GZ or PHAR::BZ2 if the entire phar archive is compressed (.tar.gz/tar.bz and so on)
>isFileFormat(int $format): bool	(Phar) Returns true if the phar archive is based on the tar/phar/zip file format depending on the parameter
Phar::isValidPharFilename(string $filename, bool $executable = true): bool	Returns whether the given filename is a valid phar filename
>isWritable(): bool	(Phar) Returns true if the phar archive can be modified
Phar::loadPhar(string $filename, string|null $alias = null): bool	Loads any phar archive with an alias
Phar::mapPhar(string|null $alias = null, int $offset = ?): bool	Reads the currently executed file (a phar) and registers its manifest
Phar::mount(string $pharPath, string $externalPath): void	Mount an external path or file to a virtual location within the phar archive
Phar::mungServer(array $variables): void	Defines a list of up to 4 $_SERVER variables that should be modified for execution
>offsetExists(string $localName): bool	(Phar) Determines whether a file exists in the phar
>offsetGet(string $localName): SplFileInfo	(Phar) Gets a PharFileInfo object for a specific file
>offsetSet(string $localName, resource|string $value): void	(Phar) Set the contents of an internal file to those of an external file
>offsetUnset(string $localName): void	(Phar) Remove a file from a phar
Phar::running(bool $returnPhar = true): string	Returns the full path on disk or full phar URL to the currently executing Phar archive
>setAlias(string $alias): true	(Phar) Set the alias for the Phar archive
>setDefaultStub(string|null $index = null, string|null $webIndex = null): true	(Phar) Used to set the PHP loader or bootstrap stub of a Phar archive to the default loader
>setMetadata(mixed $metadata): void	(Phar) Sets phar archive meta-data
>setSignatureAlgorithm(int $algo, string|null $privateKey = null): void	(Phar) Set the signature algorithm for a phar and apply it
>setStub(resource|string $stub, int $length = -1): bool	(Phar) Used to set the PHP loader or bootstrap stub of a Phar archive
>startBuffering(): void	(Phar) Start buffering Phar write operations, do not modify the Phar object on disk
>stopBuffering(): void	(Phar) Stop buffering write requests to the Phar archive, and save changes to disk
Phar::unlinkArchive(string $filename): true	Completely remove a phar archive from disk and from memory
Phar::webPhar(string|null $alias = null, string|null $index = null, string|null $fileNotFoundScript = null, array $mimeTypes = [], callable|null $rewrite = null): void	Routes a request from a web browser to an internal file within the phar archive
>addEmptyDir(string $directory): void	(PharData) Add an empty directory to the tar/zip archive
>addFile(string $filename, string|null $localName = null): void	(PharData) Add a file from the filesystem to the tar/zip archive
>addFromString(string $localName, string $contents): void	(PharData) Add a file from a string to the tar/zip archive
>buildFromDirectory(string $directory, string $pattern = ""): array	(PharData) Construct a tar/zip archive from the files within a directory
>buildFromIterator(Traversable $iterator, string|null $baseDirectory = null): array	(PharData) Construct a tar or zip archive from an iterator
>compress(int $compression, string|null $extension = null): PharData|null	(PharData) Compresses the entire tar/zip archive using Gzip or Bzip2 compression
>compressFiles(int $compression): void	(PharData) Compresses all files in the current tar/zip archive
PharData(string $filename, int $flags = FilesystemIterator::SKIP_DOTS | FilesystemIterator::UNIX_PATHS, string|null $alias = null, int $format = ?)	(new) Construct a non-executable tar or zip archive object
>convertToData(int|null $format = null, int|null $compression = null, string|null $extension = null): PharData|null	(PharData) Convert a phar archive to a non-executable tar or zip file
>convertToExecutable(int|null $format = null, int|null $compression = null, string|null $extension = null): Phar|null	(PharData) Convert a non-executable tar/zip archive to an executable phar archive
>copy(string $from, string $to): true	(PharData) Copy a file internal to the tar/zip archive to another new file within the same archive
>decompress(string|null $extension = null): PharData|null	(PharData) Decompresses the entire Phar archive
>decompressFiles(): true	(PharData) Decompresses all files in the current zip archive
>delMetadata(): true	(PharData) Deletes the global metadata of a zip archive
>delete(string $localName): true	(PharData) Delete a file within a tar/zip archive
>__destruct()	(PharData) Destructs a non-executable tar or zip archive object
>extractTo(string $directory, array|string|null $files = null, bool $overwrite = false): bool	(PharData) Extract the contents of a tar/zip archive to a directory
>isWritable(): bool	(PharData) Returns true if the tar/zip archive can be modified
>offsetSet(string $localName, resource|string $value): void	(PharData) Set the contents of a file within the tar/zip to those of an external file or string
>offsetUnset(string $localName): void	(PharData) Remove a file from a tar/zip archive
>setAlias(string $alias): bool	(PharData) Dummy function (Phar::setAlias is not valid for PharData)
>setDefaultStub(string|null $index = null, string|null $webIndex = null): bool	(PharData) Dummy function (Phar::setDefaultStub is not valid for PharData)
>setMetadata(mixed $metadata): void	(PharData) Sets phar archive meta-data
>setSignatureAlgorithm(int $algo, string|null $privateKey = null): void	(PharData) Set the signature algorithm for a phar and apply it
>setStub(string $stub, int $len = -1): bool	(PharData) Dummy function (Phar::setStub is not valid for PharData)
>chmod(int $perms): void	(PharFileInfo) Sets file-specific permission bits
>compress(int $compression): true	(PharFileInfo) Compresses the current Phar entry with either zlib or bzip2 compression
PharFileInfo(string $filename)	(new) Construct a Phar entry object
>decompress(): true	(PharFileInfo) Decompresses the current Phar entry within the phar
>delMetadata(): true	(PharFileInfo) Deletes the metadata of the entry
>__destruct()	(PharFileInfo) Destructs a Phar entry object
>getCRC32(): int	(PharFileInfo) Returns CRC32 code or throws an exception if CRC has not been verified
>getCompressedSize(): int	(PharFileInfo) Returns the actual size of the file (with compression) inside the Phar archive
>getContent(): string	(PharFileInfo) Get the complete file contents of the entry
>getMetadata(array $unserializeOptions = []): mixed	(PharFileInfo) Returns file-specific meta-data saved with a file
>getPharFlags(): int	(PharFileInfo) Returns the Phar file entry flags
>hasMetadata(): bool	(PharFileInfo) Returns the metadata of the entry
>isCRCChecked(): bool	(PharFileInfo) Returns whether file entry has had its CRC verified
>isCompressed(int|null $compression = null): bool	(PharFileInfo) Returns whether the entry is compressed
>setMetadata(mixed $metadata): void	(PharFileInfo) Sets file-specific meta-data saved with a file
PharException()	(new) The PharException class provides a phar-specific exception class for try/catch blocks
phpdbg_break_file(string $file, int $line): void	Inserts a breakpoint at a line in a file
phpdbg_break_function(string $function): void	Inserts a breakpoint at entry to a function
phpdbg_break_method(string $class, string $method): void	Inserts a breakpoint at entry to a method
phpdbg_break_next(): void	Inserts a breakpoint at the next opcode
phpdbg_clear(): void	Clears all breakpoints
phpdbg_color(int $element, string $color): void	Sets the color of certain elements
phpdbg_end_oplog(array $options = []): array|null	
phpdbg_exec(string $context): string|bool	Attempts to set the execution context
phpdbg_get_executable(array $options = []): array	
phpdbg_prompt(string $string): void	Sets the command prompt
phpdbg_start_oplog(): void	
posix_access(string $filename, int $flags = ?): bool	Determine accessibility of a file
posix_ctermid(): string|false	Get path name of controlling terminal
posix_eaccess(string $filename, int $flags = ?): bool	Determine accessibility of a file
posix_errno()	Alias of posix_get_last_error
posix_fpathconf(resource|int $file_descriptor, int $name): int|false	Returns the value of a configurable limit
posix_get_last_error(): int	Retrieve the error number set by the last posix function that failed
posix_getcwd(): string|false	Pathname of current directory
posix_getegid(): int	Return the effective group ID of the current process
posix_geteuid(): int	Return the effective user ID of the current process
posix_getgid(): int	Return the real group ID of the current process
posix_getgrgid(int $group_id): array|false	Return info about a group by group id
posix_getgrnam(string $name): array|false	Return info about a group by name
posix_getgroups(): array|false	Return the group set of the current process
posix_getlogin(): string|false	Return login name
posix_getpgid(int $process_id): int|false	Get process group id for job control
posix_getpgrp(): int	Return the current process group identifier
posix_getpid(): int	Return the current process identifier
posix_getppid(): int	Return the parent process identifier
posix_getpwnam(string $username): array|false	Return info about a user by username
posix_getpwuid(int $user_id): array|false	Return info about a user by user id
posix_getrlimit(int|null $resource = null): array|false	Return info about system resource limits
posix_getsid(int $process_id): int|false	Get the current sid of the process
posix_getuid(): int	Return the real user ID of the current process
posix_initgroups(string $username, int $group_id): bool	Calculate the group access list
posix_isatty(resource|int $file_descriptor): bool	Determine if a file descriptor is an interactive terminal
posix_kill(int $process_id, int $signal): bool	Send a signal to a process
posix_mkfifo(string $filename, int $permissions): bool	Create a fifo special file (a named pipe)
posix_mknod(string $filename, int $flags, int $major = ?, int $minor = ?): bool	Create a special or ordinary file (POSIX.1)
posix_pathconf(string $path, int $name): int|false	Returns the value of a configurable limit
posix_setegid(int $group_id): bool	Set the effective GID of the current process
posix_seteuid(int $user_id): bool	Set the effective UID of the current process
posix_setgid(int $group_id): bool	Set the GID of the current process
posix_setpgid(int $process_id, int $process_group_id): bool	Set process group id for job control
posix_setrlimit(int $resource, int $soft_limit, int $hard_limit): bool	Set system resource limits
posix_setsid(): int	Make the current process a session leader
posix_setuid(int $user_id): bool	Set the UID of the current process
posix_strerror(int $error_code): string	Retrieve the system error message associated with the given errno
posix_sysconf(int $conf_id): int	Returns system runtime information
posix_times(): array|false	Get process times
posix_ttyname(resource|int $file_descriptor): string|false	Determine terminal device name
posix_uname(): array|false	Get system name
ftok(string $filename, string $project_id): int	Convert a pathname and a project identifier to a System V IPC key
msg_get_queue(int $key, int $permissions = 0666): SysvMessageQueue|false	Create or attach to a message queue
msg_queue_exists(int $key): bool	Check whether a message queue exists
msg_receive(SysvMessageQueue $queue, int $desired_message_type, int $received_message_type, int $max_message_size, mixed $message, bool $unserialize = true, int $flags = ?, int $error_code = null): bool	Receive a message from a message queue
msg_remove_queue(SysvMessageQueue $queue): bool	Destroy a message queue
msg_send(SysvMessageQueue $queue, int $message_type, string|int|float|bool $message, bool $serialize = true, bool $blocking = true, int $error_code = null): bool	Send a message to a message queue
msg_set_queue(SysvMessageQueue $queue, array $data): bool	Set information in the message queue data structure
msg_stat_queue(SysvMessageQueue $queue): array|false	Returns information from the message queue data structure
sem_acquire(SysvSemaphore $semaphore, bool $non_blocking = false): bool	Acquire a semaphore
sem_get(int $key, int $max_acquire = 1, int $permissions = 0666, bool $auto_release = true): SysvSemaphore|false	Get a semaphore id
sem_release(SysvSemaphore $semaphore): bool	Release a semaphore
sem_remove(SysvSemaphore $semaphore): bool	Remove a semaphore
shm_attach(int $key, int|null $size = null, int $permissions = 0666): SysvSharedMemory|false	Creates or open a shared memory segment
shm_detach(SysvSharedMemory $shm): bool	Disconnects from shared memory segment
shm_get_var(SysvSharedMemory $shm, int $key): mixed	Returns a variable from shared memory
shm_has_var(SysvSharedMemory $shm, int $key): bool	Check whether a specific entry exists
shm_put_var(SysvSharedMemory $shm, int $key, mixed $value): bool	Inserts or updates a variable in shared memory
shm_remove_var(SysvSharedMemory $shm, int $key): bool	Removes a variable from shared memory
shm_remove(SysvSharedMemory $shm): bool	Removes shared memory from Unix systems
SysvMessageQueue()	(new) A fully opaque class which replaces a sysvmsg queue resource as of PHP 8
SysvSemaphore()	(new) A fully opaque class which replaces a sysvsem resource as of PHP 8
SysvSharedMemory()	(new) A fully opaque class which replaces a sysvshm resource as of PHP 8
session_abort(): bool	Discard session array changes and finish session
session_cache_expire(int|null $value = null): int|false	Get and/or set current cache expire
session_cache_limiter(string|null $value = null): string|false	Get and/or set the current cache limiter
session_commit()	Alias of session_write_close
session_create_id(string $prefix = ""): string|false	Create new session id
session_decode(string $data): bool	Decodes session data from a session encoded string
session_destroy(): bool	Destroys all data registered to a session
session_encode(): string|false	Encodes the current session data as a session encoded string
session_gc(): int|false	Perform session data garbage collection
session_get_cookie_params(): array	Get the session cookie parameters
session_id(string|null $id = null): string|false	Get and/or set the current session id
session_module_name(string|null $module = null): string|false	Get and/or set the current session module
session_name(string|null $name = null): string|false	Get and/or set the current session name
session_regenerate_id(bool $delete_old_session = false): bool	Update the current session id with a newly generated one
session_register_shutdown(): void	Session shutdown function
session_reset(): bool	Re-initialize session array with original values
session_save_path(string|null $path = null): string|false	Get and/or set the current session save path
session_set_cookie_params(int $lifetime_or_options, string|null $path = null, string|null $domain = null, bool|null $secure = null, bool|null $httponly = null): bool	Set the session cookie parameters
session_set_cookie_params(array $lifetime_or_options): bool	Set the session cookie parameters
session_set_save_handler(callable $open, callable $close, callable $read, callable $write, callable $destroy, callable $gc, callable $create_sid = ?, callable $validate_sid = ?, callable $update_timestamp = ?): bool	Sets user-level session storage functions
session_set_save_handler(object $sessionhandler, bool $register_shutdown = true): bool	Sets user-level session storage functions
session_start(array $options = []): bool	Start new or resume existing session
session_status(): int	Returns the current session status
session_unset(): bool	Free all session variables
session_write_close(): bool	Write session data and end session
>close(): bool	(SessionHandler) Close the session
>create_sid(): string	(SessionHandler) Return a new session ID
>destroy(string $id): bool	(SessionHandler) Destroy a session
>gc(int $max_lifetime): int|false	(SessionHandler) Cleanup old sessions
>open(string $path, string $name): bool	(SessionHandler) Initialize session
>read(string $id): string|false	(SessionHandler) Read session data
>write(string $id, string $data): bool	(SessionHandler) Write session data
>close(): bool	(SessionHandlerInterface) Close the session
>destroy(string $id): bool	(SessionHandlerInterface) Destroy a session
>gc(int $max_lifetime): int|false	(SessionHandlerInterface) Cleanup old sessions
>open(string $path, string $name): bool	(SessionHandlerInterface) Initialize session
>read(string $id): string|false	(SessionHandlerInterface) Read session data
>write(string $id, string $data): bool	(SessionHandlerInterface) Write session data
>create_sid(): string	(SessionIdInterface) Create session ID
>updateTimestamp(string $id, string $data): bool	(SessionUpdateTimestampHandlerInterface) Update timestamp
>validateId(string $id): bool	(SessionUpdateTimestampHandlerInterface) Validate ID
SessionHandler()	(new) SessionHandler is a special class that can be used to expose the current internal PHP session save handler by inheritance
SessionHandlerInterface()	(new) SessionHandlerInterface is an interface which defines the minimal prototype for creating a custom session handler
SessionIdInterface()	(new) SessionIdInterface is an interface which defines optional methods for creating a custom session handler
SessionUpdateTimestampHandlerInterface()	(new) SessionUpdateTimestampHandlerInterface is an interface which defines optional methods for creating a custom session handler
shmop_close(Shmop $shmop): void	Close shared memory block
shmop_delete(Shmop $shmop): bool	Delete shared memory block
shmop_open(int $key, string $mode, int $permissions, int $size): Shmop|false	Create or open shared memory block
shmop_read(Shmop $shmop, int $offset, int $size): string	Read data from shared memory block
shmop_size(Shmop $shmop): int	Get size of shared memory block
shmop_write(Shmop $shmop, string $data, int $offset): int	Write data into shared memory block
Shmop()	(new) A fully opaque class which replaces shmop resources as of PHP 8
socket_accept(Socket $socket): Socket|false	Accepts a connection on a socket
socket_addrinfo_bind(AddressInfo $address): Socket|false	Create and bind to a socket from a given addrinfo
socket_addrinfo_connect(AddressInfo $address): Socket|false	Create and connect to a socket from a given addrinfo
socket_addrinfo_explain(AddressInfo $address): array	Get information about addrinfo
socket_addrinfo_lookup(string $host, string|null $service = null, array $hints = []): array|false	Get array with contents of getaddrinfo about the given hostname
socket_atmark(Socket $socket): bool	Determines whether socket is at out-of-band mark
socket_bind(Socket $socket, string $address, int $port = ?): bool	Binds a name to a socket
socket_clear_error(Socket|null $socket = null): void	Clears the error on the socket or the last error code
socket_close(Socket $socket): void	Closes a Socket instance
socket_cmsg_space(int $level, int $type, int $num = ?): int|null	Calculate message buffer size
socket_connect(Socket $socket, string $address, int|null $port = null): bool	Initiates a connection on a socket
socket_create_listen(int $port, int $backlog = SOMAXCONN): Socket|false	Opens a socket on port to accept connections
socket_create_pair(int $domain, int $type, int $protocol, array $pair): bool	Creates a pair of indistinguishable sockets and stores them in an array
socket_create(int $domain, int $type, int $protocol): Socket|false	Create a socket (endpoint for communication)
socket_export_stream(Socket $socket): resource|false	Export a socket into a stream that encapsulates a socket
socket_get_option(Socket $socket, int $level, int $option): array|int|false	Gets socket options for the socket
socket_getopt()	Alias of socket_get_option
socket_getpeername(Socket $socket, string $address, int $port = null): bool	Queries the remote side of the given socket
socket_getsockname(Socket $socket, string $address, int $port = null): bool	Queries the local side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type
socket_import_stream(resource $stream): Socket|false	Import a stream
socket_last_error(Socket|null $socket = null): int	Returns the last error on the socket
socket_listen(Socket $socket, int $backlog = ?): bool	Listens for a connection on a socket
socket_read(Socket $socket, int $length, int $mode = PHP_BINARY_READ): string|false	Reads a maximum of length bytes from a socket
socket_recv(Socket $socket, string|null $data, int $length, int $flags): int|false	Receives data from a connected socket
socket_recvfrom(Socket $socket, string $data, int $length, int $flags, string $address, int $port = null): int|false	Receives data from a socket whether or not it is connection-oriented
socket_recvmsg(Socket $socket, array $message, int $flags = ?): int|false	Read a message
socket_select(array|null $read, array|null $write, array|null $except, int|null $seconds, int $microseconds = ?): int|false	Runs the select() system call on the given arrays of sockets with a specified timeout
socket_send(Socket $socket, string $data, int $length, int $flags): int|false	Sends data to a connected socket
socket_sendmsg(Socket $socket, array $message, int $flags = ?): int|false	Send a message
socket_sendto(Socket $socket, string $data, int $length, int $flags, string $address, int|null $port = null): int|false	Sends a message to a socket, whether it is connected or not
socket_set_block(Socket $socket): bool	Sets blocking mode on a socket
socket_set_nonblock(Socket $socket): bool	Sets nonblocking mode for file descriptor fd
socket_set_option(Socket $socket, int $level, int $option, array|string|int $value): bool	Sets socket options for the socket
socket_setopt()	Alias of socket_set_option
socket_shutdown(Socket $socket, int $mode = 2): bool	Shuts down a socket for receiving, sending, or both
socket_strerror(int $error_code): string	Return a string describing a socket error
socket_write(Socket $socket, string $data, int|null $length = null): int|false	Write to a socket
socket_wsaprotocol_info_export(Socket $socket, int $process_id): string|false	Exports the WSAPROTOCOL_INFO Structure
socket_wsaprotocol_info_import(string $info_id): Socket|false	Imports a Socket from another Process
socket_wsaprotocol_info_release(string $info_id): bool	Releases an exported WSAPROTOCOL_INFO Structure
AddressInfo()	(new) A fully opaque class which replaces AddressInfo resources as of PHP 8
Socket()	(new) A fully opaque class which replaces Socket resources as of PHP 8
>backup(SQLite3 $destination, string $sourceDatabase = "main", string $destinationDatabase = "main"): bool	(SQLite3) Backup one database to another database
>busyTimeout(int $milliseconds): bool	(SQLite3) Sets the busy connection handler
>changes(): int	(SQLite3) Returns the number of database rows that were changed (or inserted or deleted) by the most recent SQL statement
>close(): bool	(SQLite3) Closes the database connection
SQLite3(string $filename, int $flags = SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE, string $encryptionKey = "")	(new) Instantiates an SQLite3 object and opens an SQLite 3 database
>createAggregate(string $name, callable $stepCallback, callable $finalCallback, int $argCount = -1): bool	(SQLite3) Registers a PHP function for use as an SQL aggregate function
>createCollation(string $name, callable $callback): bool	(SQLite3) Registers a PHP function for use as an SQL collating function
>createFunction(string $name, callable $callback, int $argCount = -1, int $flags = ?): bool	(SQLite3) Registers a PHP function for use as an SQL scalar function
>enableExceptions(bool $enable = false): bool	(SQLite3) Enable throwing exceptions
SQLite3::escapeString(string $string): string	Returns a string that has been properly escaped
>exec(string $query): bool	(SQLite3) Executes a result-less query against a given database
>lastErrorCode(): int	(SQLite3) Returns the numeric result code of the most recent failed SQLite request
>lastErrorMsg(): string	(SQLite3) Returns English text describing the most recent failed SQLite request
>lastInsertRowID(): int	(SQLite3) Returns the row ID of the most recent INSERT into the database
>loadExtension(string $name): bool	(SQLite3) Attempts to load an SQLite extension library
>open(string $filename, int $flags = SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE, string $encryptionKey = ""): void	(SQLite3) Opens an SQLite database
>openBlob(string $table, string $column, int $rowid, string $database = "main", int $flags = SQLITE3_OPEN_READONLY): resource|false	(SQLite3) Opens a stream resource to read a BLOB
>prepare(string $query): SQLite3Stmt|false	(SQLite3) Prepares an SQL statement for execution
>query(string $query): SQLite3Result|false	(SQLite3) Executes an SQL query
>querySingle(string $query, bool $entireRow = false): mixed	(SQLite3) Executes a query and returns a single result
>setAuthorizer(callable|null $callback): bool	(SQLite3) Configures a callback to be used as an authorizer to limit what a statement can do
SQLite3::version(): array	Returns the SQLite3 library version as a string constant and as a number
>columnName(int $column): string|false	(SQLite3Result) Returns the name of the nth column
>columnType(int $column): int|false	(SQLite3Result) Returns the type of the nth column
SQLite3Result()	(new) Constructs an SQLite3Result
>fetchArray(int $mode = SQLITE3_BOTH): array|false	(SQLite3Result) Fetches a result row as an associative or numerically indexed array or both
>finalize(): true	(SQLite3Result) Closes the result set
>numColumns(): int	(SQLite3Result) Returns the number of columns in the result set
>reset(): bool	(SQLite3Result) Resets the result set back to the first row
>bindParam(string|int $param, mixed $var, int $type = SQLITE3_TEXT): bool	(SQLite3Stmt) Binds a parameter to a statement variable
>bindValue(string|int $param, mixed $value, int $type = SQLITE3_TEXT): bool	(SQLite3Stmt) Binds the value of a parameter to a statement variable
>clear(): bool	(SQLite3Stmt) Clears all current bound parameters
>close(): true	(SQLite3Stmt) Closes the prepared statement
SQLite3Stmt(SQLite3 $sqlite3, string $query)	(new) Constructs an SQLite3Stmt object
>execute(): SQLite3Result|false	(SQLite3Stmt) Executes a prepared statement and returns a result set object
>getSQL(bool $expand = false): string|false	(SQLite3Stmt) Get the SQL of the statement
>paramCount(): int	(SQLite3Stmt) Returns the number of parameters within the prepared statement
>readOnly(): bool	(SQLite3Stmt) Returns whether a statement is definitely read only
>reset(): bool	(SQLite3Stmt) Resets the prepared statement
SQLite3Exception()	(new) Represents a SQLite3 specific exception
token_get_all(string $code, int $flags = ?): array	Split given source into PHP tokens
token_name(int $id): string	Get the symbolic name of a given PHP token
PhpToken(int $id, string $text, int $line = -1, int $pos = -1)	(new) Returns a new PhpToken object
>getTokenName(): string|null	(PhpToken) Returns the name of the token.
>is(int|string|array $kind): bool	(PhpToken) Tells whether the token is of given kind.
>isIgnorable(): bool	(PhpToken) Tells whether the token would be ignored by the PHP parser.
>__toString(): string	(PhpToken) Returns the textual content of the token.
PhpToken::tokenize(string $code, int $flags = ?): array	Splits given source into PHP tokens, represented by PhpToken objects.
deflate_add(DeflateContext $context, string $data, int $flush_mode = ZLIB_SYNC_FLUSH): string|false	Incrementally deflate data
deflate_init(int $encoding, array $options = []): DeflateContext|false	Initialize an incremental deflate context
gzclose(resource $stream): bool	Close an open gz-file pointer
gzcompress(string $data, int $level = -1, int $encoding = ZLIB_ENCODING_DEFLATE): string|false	Compress a string
gzdecode(string $data, int $max_length = ?): string|false	Decodes a gzip compressed string
gzdeflate(string $data, int $level = -1, int $encoding = ZLIB_ENCODING_RAW): string|false	Deflate a string
gzencode(string $data, int $level = -1, int $encoding = ZLIB_ENCODING_GZIP): string|false	Create a gzip compressed string
gzeof(resource $stream): bool	Test for EOF on a gz-file pointer
gzfile(string $filename, int $use_include_path = ?): array|false	Read entire gz-file into an array
gzgetc(resource $stream): string|false	Get character from gz-file pointer
gzgets(resource $stream, int|null $length = null): string|false	Get line from file pointer
gzgetss(resource $zp, int $length, string $allowable_tags = ?): string	Get line from gz-file pointer and strip HTML tags
gzinflate(string $data, int $max_length = ?): string|false	Inflate a deflated string
gzopen(string $filename, string $mode, int $use_include_path = ?): resource|false	Open gz-file
gzpassthru(resource $stream): int	Output all remaining data on a gz-file pointer
gzputs()	Alias of gzwrite
gzread(resource $stream, int $length): string|false	Binary-safe gz-file read
gzrewind(resource $stream): bool	Rewind the position of a gz-file pointer
gzseek(resource $stream, int $offset, int $whence = SEEK_SET): int	Seek on a gz-file pointer
gztell(resource $stream): int|false	Tell gz-file pointer read/write position
gzuncompress(string $data, int $max_length = ?): string|false	Uncompress a compressed string
gzwrite(resource $stream, string $data, int|null $length = null): int|false	Binary-safe gz-file write
inflate_get_read_len(InflateContext $context): int	Get number of bytes read so far
inflate_get_status(InflateContext $context): int	Get decompression status
inflate_add(InflateContext $context, string $data, int $flush_mode = ZLIB_SYNC_FLUSH): string|false	Incrementally inflate encoded data
inflate_init(int $encoding, array $options = []): InflateContext|false	Initialize an incremental inflate context
ob_gzhandler(string $data, int $flags): string|false	ob_start callback function to gzip output buffer
readgzfile(string $filename, int $use_include_path = ?): int|false	Output a gz-file
zlib_decode(string $data, int $max_length = ?): string|false	Uncompress any raw/gzip/zlib encoded data
zlib_encode(string $data, int $encoding, int $level = -1): string|false	Compress data with the specified encoding
zlib_get_coding_type(): string|false	Returns the coding type used for output compression
DeflateContext()	(new) A fully opaque class which replaces zlib
InflateContext()	(new) A fully opaque class which replaces zlib
bzclose(resource $bz): bool	Close a bzip2 file
bzcompress(string $data, int $block_size = 4, int $work_factor = ?): string|int	Compress a string into bzip2 encoded data
bzdecompress(string $data, bool $use_less_memory = false): string|int|false	Decompresses bzip2 encoded data
bzerrno(resource $bz): int	Returns a bzip2 error number
bzerror(resource $bz): array	Returns the bzip2 error number and error string in an array
bzerrstr(resource $bz): string	Returns a bzip2 error string
bzflush(resource $bz): bool	Do nothing
bzopen(string|resource $file, string $mode): resource|false	Opens a bzip2 compressed file
bzread(resource $bz, int $length = 1024): string|false	Binary safe bzip2 file read
bzwrite(resource $bz, string $data, int|null $length = null): int|false	Binary safe bzip2 file write
curl_file_create(string $filename, string|null $mime_type = null, string|null $posted_filename = null): CURLFile	Create a CURLFile object
>getFilename(): string	(CURLFile) Get file name
>getMimeType(): string	(CURLFile) Get MIME type
>getPostFilename(): string	(CURLFile) Get file name for POST
>setMimeType(string $mime_type): void	(CURLFile) Set MIME type
>setPostFilename(string $posted_filename): void	(CURLFile) Set file name for POST
CURLStringFile(string $data, string $postname, string $mime = "application/octet-stream")	(new) Create a CURLStringFile object
curl_close(CurlHandle $handle): void	Close a cURL session
curl_copy_handle(CurlHandle $handle): CurlHandle|false	Copy a cURL handle along with all of its preferences
curl_errno(CurlHandle $handle): int	Return the last error number
curl_error(CurlHandle $handle): string	Return a string containing the last error for the current session
curl_escape(CurlHandle $handle, string $string): string|false	URL encodes the given string
curl_exec(CurlHandle $handle): string|bool	Perform a cURL session
curl_getinfo(CurlHandle $handle, int|null $option = null): mixed	Get information regarding a specific transfer
curl_init(string|null $url = null): CurlHandle|false	Initialize a cURL session
curl_multi_add_handle(CurlMultiHandle $multi_handle, CurlHandle $handle): int	Add a normal cURL handle to a cURL multi handle
curl_multi_close(CurlMultiHandle $multi_handle): void	Remove all cURL handles from a multi handle
curl_multi_errno(CurlMultiHandle $multi_handle): int	Return the last multi curl error number
curl_multi_exec(CurlMultiHandle $multi_handle, int $still_running): int	Run the sub-connections of the current cURL handle
curl_multi_getcontent(CurlHandle $handle): string|null	Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set
curl_multi_info_read(CurlMultiHandle $multi_handle, int $queued_messages = null): array|false	Get information about the current transfers
curl_multi_init(): CurlMultiHandle	Returns a new cURL multi handle
curl_multi_remove_handle(CurlMultiHandle $multi_handle, CurlHandle $handle): int	Remove a handle from a set of cURL handles
curl_multi_select(CurlMultiHandle $multi_handle, float $timeout = 1.0): int	Wait until reading or writing is possible for any cURL multi handle connection
curl_multi_setopt(CurlMultiHandle $multi_handle, int $option, mixed $value): bool	Set a cURL multi option
curl_multi_strerror(int $error_code): string|null	Return string describing error code
curl_pause(CurlHandle $handle, int $flags): int	Pause and unpause a connection
curl_reset(CurlHandle $handle): void	Reset all options of a libcurl session handle
curl_setopt_array(CurlHandle $handle, array $options): bool	Set multiple options for a cURL transfer
curl_setopt(CurlHandle $handle, int $option, mixed $value): bool	Set an option for a cURL transfer
curl_share_close(CurlShareHandle $share_handle): void	Close a cURL share handle
curl_share_errno(CurlShareHandle $share_handle): int	Return the last share curl error number
curl_share_init_persistent(array $share_options): CurlSharePersistentHandle	Initialize a persistent cURL share handle
curl_share_init(): CurlShareHandle	Initialize a cURL share handle
curl_share_setopt(CurlShareHandle $share_handle, int $option, mixed $value): bool	Set an option for a cURL share handle
curl_share_strerror(int $error_code): string|null	Return string describing the given error code
curl_strerror(int $error_code): string|null	Return string describing the given error code
curl_unescape(CurlHandle $handle, string $string): string|false	Decodes the given URL encoded string
curl_upkeep(CurlHandle $handle): bool	Performs any connection upkeep checks
curl_version(): array|false	Gets cURL version information
CURLFile()	(new) This class or CURLStringFile should be used to upload a file with CURLOPT_POSTFIELDS
CurlHandle()	(new) A fully opaque class which replaces curl resources as of PHP 8
CurlMultiHandle()	(new) A fully opaque class which replaces curl_multi resources as of PHP 8
CurlShareHandle()	(new) A fully opaque class which replaces curl_share resources as of PHP 8
CurlSharePersistentHandle()	(new) Represents a persistent cURL "share" handle
>isId(): bool	(Dom\Attr) 
>rename(string|null $namespaceURI, string $qualifiedName): void	(Dom\Attr) Changes the qualified name or namespace of an attribute
>after(Dom\Node|string ...$nodes): void	(Dom\CharacterData) 
>appendData(string $data): void	(Dom\CharacterData) 
>before(Dom\Node|string ...$nodes): void	(Dom\CharacterData) 
>deleteData(int $offset, int $count): void	(Dom\CharacterData) 
>insertData(int $offset, string $data): void	(Dom\CharacterData) 
>remove(): void	(Dom\CharacterData) 
>replaceData(int $offset, int $count, string $data): void	(Dom\CharacterData) 
>replaceWith(Dom\Node|string ...$nodes): void	(Dom\CharacterData) 
>substringData(int $offset, int $count): string	(Dom\CharacterData) 
>after(Dom\Node|string ...$nodes): void	(Dom\ChildNode) 
>before(Dom\Node|string ...$nodes): void	(Dom\ChildNode) 
>remove(): void	(Dom\ChildNode) 
>replaceWith(Dom\Node|string ...$nodes): void	(Dom\ChildNode) 
Dom\HTMLDocument::createEmpty(string $encoding = "UTF-8"): Dom\HTMLDocument	Creates an empty HTML document
Dom\HTMLDocument::createFromFile(string $path, int $options = ?, string|null $overrideEncoding = null): Dom\HTMLDocument	Parses an HTML document from a file
Dom\HTMLDocument::createFromString(string $source, int $options = ?, string|null $overrideEncoding = null): Dom\HTMLDocument	Parses an HTML document from a string
>saveHtml(Dom\Node|null $node = null): string	(Dom\HTMLDocument) Serializes the document as an HTML string
>saveHtmlFile(string $filename): int|false	(Dom\HTMLDocument) Serializes the document as an HTML file
>saveXml(Dom\Node|null $node = null, int $options = ?): string|false	(Dom\HTMLDocument) Serializes the document as an XML string
>saveXmlFile(string $filename, int $options = ?): int|false	(Dom\HTMLDocument) Serializes the document as an XML file
>append(Dom\Node|string ...$nodes): void	(Dom\ParentNode) 
>prepend(Dom\Node|string ...$nodes): void	(Dom\ParentNode) 
>querySelector(string $selectors): Dom\Element|null	(Dom\ParentNode) Returns the first element that matches the CSS selectors
>querySelectorAll(string $selectors): Dom\NodeList	(Dom\ParentNode) Returns a collection of elements that match the CSS selectors
>replaceChildren(Dom\Node|string ...$nodes): void	(Dom\ParentNode) 
>splitText(int $offset): Dom\Text	(Dom\Text) 
>add(string ...$tokens): void	(Dom\TokenList) Adds the given tokens to the list
>contains(string $token): bool	(Dom\TokenList) Returns whether the list contains a given token
>count(): int	(Dom\TokenList) Returns the number of tokens in the list
>getIterator(): Iterator	(Dom\TokenList) Returns an iterator over the token list
>item(int $index): string|null	(Dom\TokenList) Returns a token from the list
>remove(string ...$tokens): void	(Dom\TokenList) Removes the given tokens from the list
>replace(string $token, string $newToken): bool	(Dom\TokenList) Replaces a token in the list with another one
>supports(string $token): bool	(Dom\TokenList) Returns whether the given token is supported
>toggle(string $token, bool|null $force = null): bool	(Dom\TokenList) Toggles the presence of a token in the list
DOMAttr(string $name, string $value = "")	(new) Creates a new DOMAttr object
>isId(): bool	(DOMAttr) Checks if attribute is a defined ID
DOMCdataSection(string $data)	(new) Constructs a new DOMCdataSection object
>after(DOMNode|string ...$nodes): void	(DOMCharacterData) Adds nodes after the character data
>appendData(string $data): true	(DOMCharacterData) Append the string to the end of the character data of the node
>before(DOMNode|string ...$nodes): void	(DOMCharacterData) Adds nodes before the character data
>deleteData(int $offset, int $count): bool	(DOMCharacterData) Remove a range of characters from the character data
>insertData(int $offset, string $data): bool	(DOMCharacterData) Insert a string at the specified UTF-8 codepoint offset
>remove(): void	(DOMCharacterData) Removes the character data node
>replaceData(int $offset, int $count, string $data): bool	(DOMCharacterData) Replace a substring within the character data
>replaceWith(DOMNode|string ...$nodes): void	(DOMCharacterData) Replaces the character data with new nodes
>substringData(int $offset, int $count): string|false	(DOMCharacterData) Extracts a range of data from the character data
>after(DOMNode|string ...$nodes): void	(DOMChildNode) Adds nodes after the node
>before(DOMNode|string ...$nodes): void	(DOMChildNode) Adds nodes before the node
>remove(): void	(DOMChildNode) Removes the node
>replaceWith(DOMNode|string ...$nodes): void	(DOMChildNode) Replaces the node with new nodes
DOMComment(string $data = "")	(new) Creates a new DOMComment object
>adoptNode(DOMNode $node): DOMNode|false	(DOMDocument) Transfer a node from another document
>append(DOMNode|string ...$nodes): void	(DOMDocument) Appends nodes after the last child node
DOMDocument(string $version = "1.0", string $encoding = "")	(new) Creates a new DOMDocument object
>createAttribute(string $localName): DOMAttr|false	(DOMDocument) Create new attribute
>createAttributeNS(string|null $namespace, string $qualifiedName): DOMAttr|false	(DOMDocument) Create new attribute node with an associated namespace
>createCDATASection(string $data): DOMCdataSection|false	(DOMDocument) Create new cdata node
>createComment(string $data): DOMComment	(DOMDocument) Create new comment node
>createDocumentFragment(): DOMDocumentFragment	(DOMDocument) Create new document fragment
>createElement(string $localName, string $value = ""): DOMElement|false	(DOMDocument) Create new element node
>createElementNS(string|null $namespace, string $qualifiedName, string $value = ""): DOMElement|false	(DOMDocument) Create new element node with an associated namespace
>createEntityReference(string $name): DOMEntityReference|false	(DOMDocument) Create new entity reference node
>createProcessingInstruction(string $target, string $data = ""): DOMProcessingInstruction|false	(DOMDocument) Creates new PI node
>createTextNode(string $data): DOMText	(DOMDocument) Create new text node
>getElementById(string $elementId): DOMElement|null	(DOMDocument) Searches for an element with a certain id
>getElementsByTagName(string $qualifiedName): DOMNodeList	(DOMDocument) Searches for all elements with given local tag name
>getElementsByTagNameNS(string|null $namespace, string $localName): DOMNodeList	(DOMDocument) Searches for all elements with given tag name in specified namespace
>importNode(DOMNode $node, bool $deep = false): DOMNode|false	(DOMDocument) Import node into current document
>load(string $filename, int $options = ?): bool	(DOMDocument) Load XML from a file
>loadHTML(string $source, int $options = ?): bool	(DOMDocument) Load HTML from a string
>loadHTMLFile(string $filename, int $options = ?): bool	(DOMDocument) Load HTML from a file
>loadXML(string $source, int $options = ?): bool	(DOMDocument) Load XML from a string
>normalizeDocument(): void	(DOMDocument) Normalizes the document
>prepend(DOMNode|string ...$nodes): void	(DOMDocument) Prepends nodes before the first child node
>registerNodeClass(string $baseClass, string|null $extendedClass): true	(DOMDocument) Register extended class used to create base node type
>relaxNGValidate(string $filename): bool	(DOMDocument) Performs relaxNG validation on the document
>relaxNGValidateSource(string $source): bool	(DOMDocument) Performs relaxNG validation on the document
>replaceChildren(DOMNode|string ...$nodes): void	(DOMDocument) Replace children in document
>save(string $filename, int $options = ?): int|false	(DOMDocument) Dumps the internal XML tree back into a file
>saveHTML(DOMNode|null $node = null): string|false	(DOMDocument) Dumps the internal document into a string using HTML formatting
>saveHTMLFile(string $filename): int|false	(DOMDocument) Dumps the internal document into a file using HTML formatting
>saveXML(DOMNode|null $node = null, int $options = ?): string|false	(DOMDocument) Dumps the internal XML tree back into a string
>schemaValidate(string $filename, int $flags = ?): bool	(DOMDocument) Validates a document based on a schema. Only XML Schema 1.0 is supported.
>schemaValidateSource(string $source, int $flags = ?): bool	(DOMDocument) Validates a document based on a schema
>validate(): bool	(DOMDocument) Validates the document based on its DTD
>xinclude(int $options = ?): int|false	(DOMDocument) Substitutes XIncludes in a DOMDocument Object
>append(DOMNode|string ...$nodes): void	(DOMDocumentFragment) Appends nodes after the last child node
>appendXML(string $data): bool	(DOMDocumentFragment) Append raw XML data
DOMDocumentFragment()	(new) Constructs a DOMDocumentFragment object
>prepend(DOMNode|string ...$nodes): void	(DOMDocumentFragment) Prepends nodes before the first child node
>replaceChildren(DOMNode|string ...$nodes): void	(DOMDocumentFragment) Replace children in fragment
>after(DOMNode|string ...$nodes): void	(DOMElement) Adds nodes after the element
>append(DOMNode|string ...$nodes): void	(DOMElement) Appends nodes after the last child node
>before(DOMNode|string ...$nodes): void	(DOMElement) Adds nodes before the element
DOMElement(string $qualifiedName, string|null $value = null, string $namespace = "")	(new) Creates a new DOMElement object
>getAttribute(string $qualifiedName): string	(DOMElement) Returns value of attribute
>getAttributeNames(): array	(DOMElement) Get attribute names
>getAttributeNode(string $qualifiedName): DOMAttr|DOMNameSpaceNode|false	(DOMElement) Returns attribute node
>getAttributeNodeNS(string|null $namespace, string $localName): DOMAttr|DOMNameSpaceNode|null	(DOMElement) Returns attribute node
>getAttributeNS(string|null $namespace, string $localName): string	(DOMElement) Returns value of attribute
>getElementsByTagName(string $qualifiedName): DOMNodeList	(DOMElement) Gets elements by tagname
>getElementsByTagNameNS(string|null $namespace, string $localName): DOMNodeList	(DOMElement) Get elements by namespaceURI and localName
>hasAttribute(string $qualifiedName): bool	(DOMElement) Checks to see if attribute exists
>hasAttributeNS(string|null $namespace, string $localName): bool	(DOMElement) Checks to see if attribute exists
>insertAdjacentElement(string $where, DOMElement $element): DOMElement|null	(DOMElement) Insert adjacent element
>insertAdjacentText(string $where, string $data): void	(DOMElement) Insert adjacent text
>prepend(DOMNode|string ...$nodes): void	(DOMElement) Prepends nodes before the first child node
>remove(): void	(DOMElement) Removes the element
>removeAttribute(string $qualifiedName): bool	(DOMElement) Removes attribute
>removeAttributeNode(DOMAttr $attr): DOMAttr|false	(DOMElement) Removes attribute
>removeAttributeNS(string|null $namespace, string $localName): void	(DOMElement) Removes attribute
>replaceChildren(DOMNode|string ...$nodes): void	(DOMElement) Replace children in element
>replaceWith(DOMNode|string ...$nodes): void	(DOMElement) Replaces the element with new nodes
>setAttribute(string $qualifiedName, string $value): DOMAttr|bool	(DOMElement) Adds new or modifies existing attribute
>setAttributeNode(DOMAttr $attr): DOMAttr|null|false	(DOMElement) Adds new attribute node to element
>setAttributeNodeNS(DOMAttr $attr): DOMAttr|null|false	(DOMElement) Adds new attribute node to element
>setAttributeNS(string|null $namespace, string $qualifiedName, string $value): void	(DOMElement) Adds new attribute
>setIdAttribute(string $qualifiedName, bool $isId): void	(DOMElement) Declares the attribute specified by name to be of type ID
>setIdAttributeNode(DOMAttr $attr, bool $isId): void	(DOMElement) Declares the attribute specified by node to be of type ID
>setIdAttributeNS(string $namespace, string $qualifiedName, bool $isId): void	(DOMElement) Declares the attribute specified by local name and namespace URI to be of type ID
>toggleAttribute(string $qualifiedName, bool|null $force = null): bool	(DOMElement) Toggle attribute
DOMEntityReference(string $name)	(new) Creates a new DOMEntityReference object
DOMImplementation()	(new) Creates a new DOMImplementation object
>createDocument(string|null $namespace = null, string $qualifiedName = "", DOMDocumentType|null $doctype = null): DOMDocument	(DOMImplementation) Creates a DOMDocument object of the specified type with its document element
>createDocumentType(string $qualifiedName, string $publicId = "", string $systemId = ""): DOMDocumentType|false	(DOMImplementation) Creates an empty DOMDocumentType object
>hasFeature(string $feature, string $version): bool	(DOMImplementation) Test if the DOM implementation implements a specific feature
>count(): int	(DOMNamedNodeMap) Get number of nodes in the map
>getIterator(): Iterator	(DOMNamedNodeMap) Retrieve an external iterator
>getNamedItem(string $qualifiedName): DOMNode|null	(DOMNamedNodeMap) Retrieves a node specified by name
>getNamedItemNS(string|null $namespace, string $localName): DOMNode|null	(DOMNamedNodeMap) Retrieves a node specified by local name and namespace URI
>item(int $index): DOMNode|null	(DOMNamedNodeMap) Retrieves a node specified by index
>__sleep(): array	(DOMNameSpaceNode) Forbids serialization unless serialization methods are implemented in a subclass
>__wakeup(): void	(DOMNameSpaceNode) Forbids unserialization unless unserialization methods are implemented in a subclass
>appendChild(DOMNode $node): DOMNode|false	(DOMNode) Adds new child at the end of the children
>C14N(bool $exclusive = false, bool $withComments = false, array|null $xpath = null, array|null $nsPrefixes = null): string|false	(DOMNode) Canonicalize nodes to a string
>C14NFile(string $uri, bool $exclusive = false, bool $withComments = false, array|null $xpath = null, array|null $nsPrefixes = null): int|false	(DOMNode) Canonicalize nodes to a file
>cloneNode(bool $deep = false): DOMNode|false	(DOMNode) Clones a node
>compareDocumentPosition(DOMNode $other): int	(DOMNode) Compares the position of two nodes
>contains(DOMNode|DOMNameSpaceNode|null $other): bool	(DOMNode) Checks if node contains other node
>getLineNo(): int	(DOMNode) Get line number for a node
>getNodePath(): string|null	(DOMNode) Get an XPath for a node
>getRootNode(array|null $options = null): DOMNode	(DOMNode) Get root node
>hasAttributes(): bool	(DOMNode) Checks if node has attributes
>hasChildNodes(): bool	(DOMNode) Checks if node has children
>insertBefore(DOMNode $node, DOMNode|null $child = null): DOMNode|false	(DOMNode) Adds a new child before a reference node
>isDefaultNamespace(string $namespace): bool	(DOMNode) Checks if the specified namespaceURI is the default namespace or not
>isEqualNode(DOMNode|null $otherNode): bool	(DOMNode) Checks that both nodes are equal
>isSameNode(DOMNode $otherNode): bool	(DOMNode) Indicates if two nodes are the same node
>isSupported(string $feature, string $version): bool	(DOMNode) Checks if feature is supported for specified version
>lookupNamespaceURI(string|null $prefix): string|null	(DOMNode) Gets the namespace URI of the node based on the prefix
>lookupPrefix(string $namespace): string|null	(DOMNode) Gets the namespace prefix of the node based on the namespace URI
>normalize(): void	(DOMNode) Normalizes the node
>removeChild(DOMNode $child): DOMNode|false	(DOMNode) Removes child from list of children
>replaceChild(DOMNode $node, DOMNode $child): DOMNode|false	(DOMNode) Replaces a child
>__sleep(): array	(DOMNode) Forbids serialization unless serialization methods are implemented in a subclass
>__wakeup(): void	(DOMNode) Forbids unserialization unless unserialization methods are implemented in a subclass
>count(): int	(DOMNodeList) Get number of nodes in the list
>getIterator(): Iterator	(DOMNodeList) Retrieve an external iterator
>item(int $index): DOMElement|DOMNode|DOMNameSpaceNode|null	(DOMNodeList) Retrieves a node specified by index
>append(DOMNode|string ...$nodes): void	(DOMParentNode) Appends nodes after the last child node
>prepend(DOMNode|string ...$nodes): void	(DOMParentNode) Prepends nodes before the first child node
>replaceChildren(DOMNode|string ...$nodes): void	(DOMParentNode) Replace children in node
DOMProcessingInstruction(string $name, string $value = "")	(new) Creates a new DOMProcessingInstruction object
DOMText(string $data = "")	(new) Creates a new DOMText object
>isElementContentWhitespace(): bool	(DOMText) Returns whether this text node contains whitespace in element content
>isWhitespaceInElementContent(): bool	(DOMText) Indicates whether this text node contains whitespace
>splitText(int $offset): DOMText|false	(DOMText) Breaks this node into two nodes at the specified offset
DOMXPath(DOMDocument $document, bool $registerNodeNS = true)	(new) Creates a new DOMXPath object
>evaluate(string $expression, DOMNode|null $contextNode = null, bool $registerNodeNS = true): mixed	(DOMXPath) Evaluates the given XPath expression and returns a typed result if possible
>query(string $expression, DOMNode|null $contextNode = null, bool $registerNodeNS = true): mixed	(DOMXPath) Evaluates the given XPath expression
DOMXPath::quote(string $str): string	Quotes a string for use in an XPath expression
>registerNamespace(string $prefix, string $namespace): bool	(DOMXPath) Registers the namespace with the DOMXPath object
>registerPhpFunctionNS(string $namespaceURI, string $name, callable $callable): void	(DOMXPath) Register a PHP functions as namespaced XPath function
>registerPhpFunctions(string|array|null $restrict = null): void	(DOMXPath) Register PHP functions as XPath functions
dom_import_simplexml(object $node): DOMAttr|DOMElement	Gets a DOMAttr or DOMElement object from a SimpleXMLElement object
Dom\import_simplexml(object $node): Dom\Attr|Dom\Element	Gets a Dom\Attr or Dom\Element object from a SimpleXMLElement object
DOMCharacterData()	(new) Represents nodes with character data
DOMChildNode()	(new) 
DOMDocumentType()	(new) Each DOMDocument has a doctype attribute whose value is either null or a DOMDocumentType object
DOMEntity()	(new) This interface represents a known entity, either parsed or unparsed, in an XML document
DOMException()	(new) See also 
DOMNamedNodeMap()	(new) 
DOMNameSpaceNode()	(new) 
DOMNode()	(new) 
DOMNodeList()	(new) Represents a live list of nodes
DOMNotation()	(new) 
DOMParentNode()	(new) 
Dom\Attr()	(new) Dom\Attr represents an attribute in the Dom\Element object
Dom\CDATASection()	(new) The Dom\CDATASection class inherits from Dom\Text for textual representation of CData constructs
Dom\CharacterData()	(new) This is the modern, spec-compliant equivalent of DOMCharacterData
Dom\ChildNode()	(new) This is the modern, spec-compliant equivalent of DOMChildNode
Dom\Comment()	(new) This is the modern, spec-compliant equivalent of DOMComment
Dom\Document()	(new) This is the modern, spec-compliant equivalent of DOMDocument
Dom\DocumentFragment()	(new) This represents a document fragment, which can be used as a container for other nodes
Dom\DocumentType()	(new) Each Dom\Document has a doctype attribute whose value is either null or a Dom\DocumentType object
Dom\DtdNamedNodeMap()	(new) Represents a named node map for entities and notation nodes of the DTD
Dom\Element()	(new) Represents an element
Dom\Entity()	(new) This is the modern, spec-compliant equivalent of DOMEntity
Dom\EntityReference()	(new) This is the modern, spec-compliant equivalent of DOMEntityReference
Dom\HTMLCollection()	(new) Represents a static set of elements
Dom\HTMLDocument()	(new) Represents an HTML document
Dom\HTMLElement()	(new) Represents an element in the HTML namespace
Dom\Implementation()	(new) 
Dom\NamedNodeMap()	(new) Represents the set of attributes on an element
Dom\NamespaceInfo()	(new) This represents immutable information about namespaces of an element
Dom\Node()	(new) This is the modern, spec-compliant equivalent of DOMNode
Dom\NodeList()	(new) This is the modern, spec-compliant equivalent of DOMNodeList
Dom\Notation()	(new) 
Dom\ParentNode()	(new) This is the modern, spec-compliant equivalent of DOMParentNode
Dom\ProcessingInstruction()	(new) This is the modern, spec-compliant equivalent of DOMProcessingInstruction
Dom\Text()	(new) The Dom\Text class inherits from Dom\CharacterData and represents a text node
Dom\TokenList()	(new) Represents a set of tokens in an attribute (e
Dom\XMLDocument()	(new) Represents an XML document
Dom\XPath()	(new) This is the modern, spec-compliant equivalent of DOMXPath
enchant_broker_describe(EnchantBroker $broker): array	Enumerates the Enchant providers
enchant_broker_dict_exists(EnchantBroker $broker, string $tag): bool	Whether a dictionary exists or not. Using non-empty tag
enchant_broker_free_dict(EnchantDictionary $dictionary): bool	Free a dictionary resource
enchant_broker_free(EnchantBroker $broker): bool	Free the broker resource and its dictionaries
enchant_broker_get_dict_path(EnchantBroker $broker, int $type): string|false	Get the directory path for a given backend
enchant_broker_get_error(EnchantBroker $broker): string|false	Returns the last error of the broker
enchant_broker_init(): EnchantBroker|false	Create a new broker object capable of requesting
enchant_broker_list_dicts(EnchantBroker $broker): array	Returns a list of available dictionaries
enchant_broker_request_dict(EnchantBroker $broker, string $tag): EnchantDictionary|false	Create a new dictionary using a tag
enchant_broker_request_pwl_dict(EnchantBroker $broker, string $filename): EnchantDictionary|false	Creates a dictionary using a PWL file
enchant_broker_set_dict_path(EnchantBroker $broker, int $type, string $path): bool	Set the directory path for a given backend
enchant_broker_set_ordering(EnchantBroker $broker, string $tag, string $ordering): bool	Declares a preference of dictionaries to use for the language
enchant_dict_add_to_personal()	Alias of enchant_dict_add
enchant_dict_add_to_session(EnchantDictionary $dictionary, string $word): void	Add 'word' to this spell-checking session
enchant_dict_add(EnchantDictionary $dictionary, string $word): void	Add a word to personal word list
enchant_dict_check(EnchantDictionary $dictionary, string $word): bool	Check whether a word is correctly spelled or not
enchant_dict_describe(EnchantDictionary $dictionary): array	Describes an individual dictionary
enchant_dict_get_error(EnchantDictionary $dictionary): string|false	Returns the last error of the current spelling-session
enchant_dict_is_added(EnchantDictionary $dictionary, string $word): bool	Whether or not 'word' exists in this spelling-session
enchant_dict_is_in_session()	Alias of enchant_dict_is_added
enchant_dict_quick_check(EnchantDictionary $dictionary, string $word, array $suggestions = null): bool	Check the word is correctly spelled and provide suggestions
enchant_dict_store_replacement(EnchantDictionary $dictionary, string $misspelled, string $correct): void	Add a correction for a word
enchant_dict_suggest(EnchantDictionary $dictionary, string $word): array	Will return a list of values if any of those pre-conditions are not met
EnchantBroker()	(new) A fully opaque class which replaces enchant_broker resources as of PHP 8
EnchantDictionary()	(new) A fully opaque class which replaces enchant_dict resources as of PHP 8
_()	Alias of gettext
bind_textdomain_codeset(string $domain, string|null $codeset = null): string|false	Specify or get the character encoding in which the messages from the DOMAIN message catalog will be returned
bindtextdomain(string $domain, string|null $directory = null): string|false	Sets or gets the path for a domain
dcgettext(string $domain, string $message, int $category): string	Overrides the domain for a single lookup
dcngettext(string $domain, string $singular, string $plural, int $count, int $category): string	Plural version of dcgettext
dgettext(string $domain, string $message): string	Override the current domain
dngettext(string $domain, string $singular, string $plural, int $count): string	Plural version of dgettext
gettext(string $message): string	Lookup a message in the current domain
ngettext(string $singular, string $plural, int $count): string	Plural version of gettext
textdomain(string|null $domain = null): string	Sets the default domain
gmp_abs(GMP|int|string $num): GMP	Absolute value
gmp_add(GMP|int|string $num1, GMP|int|string $num2): GMP	Add numbers
gmp_and(GMP|int|string $num1, GMP|int|string $num2): GMP	Bitwise AND
gmp_binomial(GMP|int|string $n, int $k): GMP	Calculates binomial coefficient
gmp_clrbit(GMP $num, int $index): void	Clear bit
gmp_cmp(GMP|int|string $num1, GMP|int|string $num2): int	Compare numbers
gmp_com(GMP|int|string $num): GMP	Calculates one's complement
gmp_div_q(GMP|int|string $num1, GMP|int|string $num2, int $rounding_mode = GMP_ROUND_ZERO): GMP	Divide numbers
gmp_div_qr(GMP|int|string $num1, GMP|int|string $num2, int $rounding_mode = GMP_ROUND_ZERO): array	Divide numbers and get quotient and remainder
gmp_div_r(GMP|int|string $num1, GMP|int|string $num2, int $rounding_mode = GMP_ROUND_ZERO): GMP	Remainder of the division of numbers
gmp_div()	Alias of gmp_div_q
gmp_divexact(GMP|int|string $num1, GMP|int|string $num2): GMP	Exact division of numbers
gmp_export(GMP|int|string $num, int $word_size = 1, int $flags = GMP_MSW_FIRST | GMP_NATIVE_ENDIAN): string	Export to a binary string
gmp_fact(GMP|int|string $num): GMP	Factorial
gmp_gcd(GMP|int|string $num1, GMP|int|string $num2): GMP	Calculate GCD
gmp_gcdext(GMP|int|string $num1, GMP|int|string $num2): array	Calculate GCD and multipliers
gmp_hamdist(GMP|int|string $num1, GMP|int|string $num2): int	Hamming distance
gmp_import(string $data, int $word_size = 1, int $flags = GMP_MSW_FIRST | GMP_NATIVE_ENDIAN): GMP	Import from a binary string
gmp_init(int|string $num, int $base = ?): GMP	Create GMP number
gmp_intval(GMP|int|string $num): int	Convert GMP number to integer
gmp_invert(GMP|int|string $num1, GMP|int|string $num2): GMP|false	Inverse by modulo
gmp_jacobi(GMP|int|string $num1, GMP|int|string $num2): int	Jacobi symbol
gmp_kronecker(GMP|int|string $num1, GMP|int|string $num2): int	Kronecker symbol
gmp_lcm(GMP|int|string $num1, GMP|int|string $num2): GMP	Calculate LCM
gmp_legendre(GMP|int|string $num1, GMP|int|string $num2): int	Legendre symbol
gmp_mod(GMP|int|string $num1, GMP|int|string $num2): GMP	Modulo operation
gmp_mul(GMP|int|string $num1, GMP|int|string $num2): GMP	Multiply numbers
gmp_neg(GMP|int|string $num): GMP	Negate number
gmp_nextprime(GMP|int|string $num): GMP	Find next prime number
gmp_or(GMP|int|string $num1, GMP|int|string $num2): GMP	Bitwise OR
gmp_perfect_power(GMP|int|string $num): bool	Perfect power check
gmp_perfect_square(GMP|int|string $num): bool	Perfect square check
gmp_popcount(GMP|int|string $num): int	Population count
gmp_pow(GMP|int|string $num, int $exponent): GMP	Raise number into power
gmp_powm(GMP|int|string $num, GMP|int|string $exponent, GMP|int|string $modulus): GMP	Raise number into power with modulo
gmp_prob_prime(GMP|int|string $num, int $repetitions = 10): int	Check if number is "probably prime"
gmp_random_bits(int $bits): GMP	Random number
gmp_random_range(GMP|int|string $min, GMP|int|string $max): GMP	Get a uniformly selected integer
gmp_random_seed(GMP|int|string $seed): void	Sets the RNG seed
gmp_random(int $limiter = 20): GMP	Random number
gmp_root(GMP|int|string $num, int $nth): GMP	Take the integer part of nth root
gmp_rootrem(GMP|int|string $num, int $nth): array	Take the integer part and remainder of nth root
gmp_scan0(GMP|int|string $num1, int $start): int	Scan for 0
gmp_scan1(GMP|int|string $num1, int $start): int	Scan for 1
gmp_setbit(GMP $num, int $index, bool $value = true): void	Set bit
gmp_sign(GMP|int|string $num): int	Sign of number
gmp_sqrt(GMP|int|string $num): GMP	Calculate square root
gmp_sqrtrem(GMP|int|string $num): array	Square root with remainder
gmp_strval(GMP|int|string $num, int $base = 10): string	Convert GMP number to string
gmp_sub(GMP|int|string $num1, GMP|int|string $num2): GMP	Subtract numbers
gmp_testbit(GMP|int|string $num, int $index): bool	Tests if a bit is set
gmp_xor(GMP|int|string $num1, GMP|int|string $num2): GMP	Bitwise XOR
GMP(int|string $num = ?, int $base = ?)	(new) Create GMP number
>__serialize(): array	(GMP) Serializes the GMP object
>__unserialize(array $data): void	(GMP) Deserializes the $data parameter into a GMP object
ldap_8859_to_t61(string $value): string|false	Translate 8859 characters to t61 characters
ldap_add_ext(LDAP\Connection $ldap, string $dn, array $entry, array|null $controls = null): LDAP\Result|false	Add entries to LDAP directory
ldap_add(LDAP\Connection $ldap, string $dn, array $entry, array|null $controls = null): bool	Add entries to LDAP directory
ldap_bind_ext(LDAP\Connection $ldap, string|null $dn = null, string|null $password = null, array|null $controls = null): LDAP\Result|false	Bind to LDAP directory
ldap_bind(LDAP\Connection $ldap, string|null $dn = null, string|null $password = null): bool	Bind to LDAP directory
ldap_close()	Alias of ldap_unbind
ldap_compare(LDAP\Connection $ldap, string $dn, string $attribute, string $value, array|null $controls = null): bool|int	Compare value of attribute found in entry specified with DN
ldap_connect_wallet(string|null $uri = null, string $wallet, string $password, int $auth_mode = GSLC_SSL_NO_AUTH): LDAP\Connection|false	Connect to an LDAP server
ldap_connect(string|null $uri = null): LDAP\Connection|false	Connect to an LDAP server
ldap_connect(string|null $host = null, int $port = 389): LDAP\Connection|false	Connect to an LDAP server
ldap_control_paged_result_response(resource $link, resource $result, string $cookie = ?, int $estimated = ?): bool	Retrieve the LDAP pagination cookie
ldap_control_paged_result(resource $link, int $pagesize, bool $iscritical = false, string $cookie = ""): bool	Send LDAP pagination control
ldap_count_entries(LDAP\Connection $ldap, LDAP\Result $result): int	Count the number of entries in a search
ldap_count_references(LDAP\Connection $ldap, LDAP\Result $result): int	Counts the number of references in a search result
ldap_delete_ext(LDAP\Connection $ldap, string $dn, array|null $controls = null): LDAP\Result|false	Delete an entry from a directory
ldap_delete(LDAP\Connection $ldap, string $dn, array|null $controls = null): bool	Delete an entry from a directory
ldap_dn2ufn(string $dn): string|false	Convert DN to User Friendly Naming format
ldap_err2str(int $errno): string	Convert LDAP error number into string error message
ldap_errno(LDAP\Connection $ldap): int	Return the LDAP error number of the last LDAP command
ldap_error(LDAP\Connection $ldap): string	Return the LDAP error message of the last LDAP command
ldap_escape(string $value, string $ignore = "", int $flags = ?): string	Escape a string for use in an LDAP filter or DN
ldap_exop_passwd(LDAP\Connection $ldap, string $user = "", string $old_password = "", string $new_password = "", array $controls = null): string|bool	PASSWD extended operation helper
ldap_exop_refresh(LDAP\Connection $ldap, string $dn, int $ttl): int|false	Refresh extended operation helper
ldap_exop_sync(LDAP\Connection $ldap, string $request_oid, string|null $request_data = null, array|null $controls = null, string $response_data = null, string $response_oid = null): LDAP\Result|bool	Performs an extended operation
ldap_exop_whoami(LDAP\Connection $ldap): string|false	WHOAMI extended operation helper
ldap_exop(LDAP\Connection $ldap, string $request_oid, string $request_data = null, array $controls = null, string $response_data = ?, string $response_oid = ?): mixed	Performs an extended operation
ldap_explode_dn(string $dn, int $with_attrib): array|false	Splits DN into its component parts
ldap_first_attribute(LDAP\Connection $ldap, LDAP\ResultEntry $entry): string|false	Return first attribute
ldap_first_entry(LDAP\Connection $ldap, LDAP\Result $result): LDAP\ResultEntry|false	Return first result id
ldap_first_reference(LDAP\Connection $ldap, LDAP\Result $result): LDAP\ResultEntry|false	Return first reference
ldap_free_result(LDAP\Result $result): bool	Free result memory
ldap_get_attributes(LDAP\Connection $ldap, LDAP\ResultEntry $entry): array	Get attributes from a search result entry
ldap_get_dn(LDAP\Connection $ldap, LDAP\ResultEntry $entry): string|false	Get the DN of a result entry
ldap_get_entries(LDAP\Connection $ldap, LDAP\Result $result): array|false	Get all result entries
ldap_get_option(LDAP\Connection $ldap, int $option, array|string|int $value = null): bool	Get the current value for given option
ldap_get_values_len(LDAP\Connection $ldap, LDAP\ResultEntry $entry, string $attribute): array|false	Get all binary values from a result entry
ldap_get_values(LDAP\Connection $ldap, LDAP\ResultEntry $entry, string $attribute): array|false	Get all values from a result entry
ldap_list(LDAP\Connection|array $ldap, array|string $base, array|string $filter, array $attributes = [], int $attributes_only = ?, int $sizelimit = -1, int $timelimit = -1, int $deref = LDAP_DEREF_NEVER, array|null $controls = null): LDAP\Result|array|false	Single-level search
ldap_mod_add_ext(LDAP\Connection $ldap, string $dn, array $entry, array|null $controls = null): LDAP\Result|false	Add attribute values to current attributes
ldap_mod_add(LDAP\Connection $ldap, string $dn, array $entry, array|null $controls = null): bool	Add attribute values to current attributes
ldap_mod_del_ext(LDAP\Connection $ldap, string $dn, array $entry, array|null $controls = null): LDAP\Result|false	Delete attribute values from current attributes
ldap_mod_del(LDAP\Connection $ldap, string $dn, array $entry, array|null $controls = null): bool	Delete attribute values from current attributes
ldap_mod_replace_ext(LDAP\Connection $ldap, string $dn, array $entry, array|null $controls = null): LDAP\Result|false	Replace attribute values with new ones
ldap_mod_replace(LDAP\Connection $ldap, string $dn, array $entry, array|null $controls = null): bool	Replace attribute values with new ones
ldap_modify_batch(LDAP\Connection $ldap, string $dn, array $modifications_info, array|null $controls = null): bool	Batch and execute modifications on an LDAP entry
ldap_modify()	Alias of ldap_mod_replace
ldap_next_attribute(LDAP\Connection $ldap, LDAP\ResultEntry $entry): string|false	Get the next attribute in result
ldap_next_entry(LDAP\Connection $ldap, LDAP\ResultEntry $entry): LDAP\ResultEntry|false	Get next result entry
ldap_next_reference(LDAP\Connection $ldap, LDAP\ResultEntry $entry): LDAP\ResultEntry|false	Get next reference
ldap_parse_exop(LDAP\Connection $ldap, LDAP\Result $result, string $response_data = null, string $response_oid = null): bool	Parse result object from an LDAP extended operation
ldap_parse_reference(LDAP\Connection $ldap, LDAP\ResultEntry $entry, array $referrals): bool	Extract information from reference entry
ldap_parse_result(LDAP\Connection $ldap, LDAP\Result $result, int $error_code, string $matched_dn = null, string $error_message = null, array $referrals = null, array $controls = null): bool	Extract information from result
ldap_read(LDAP\Connection|array $ldap, array|string $base, array|string $filter, array $attributes = [], int $attributes_only = ?, int $sizelimit = -1, int $timelimit = -1, int $deref = LDAP_DEREF_NEVER, array|null $controls = null): LDAP\Result|array|false	Read an entry
ldap_rename_ext(LDAP\Connection $ldap, string $dn, string $new_rdn, string $new_parent, bool $delete_old_rdn, array|null $controls = null): LDAP\Result|false	Modify the name of an entry
ldap_rename(LDAP\Connection $ldap, string $dn, string $new_rdn, string $new_parent, bool $delete_old_rdn, array|null $controls = null): bool	Modify the name of an entry
ldap_sasl_bind(LDAP\Connection $ldap, string|null $dn = null, string|null $password = null, string|null $mech = null, string|null $realm = null, string|null $authc_id = null, string|null $authz_id = null, string|null $props = null): bool	Bind to LDAP directory using SASL
ldap_search(LDAP\Connection|array $ldap, array|string $base, array|string $filter, array $attributes = [], int $attributes_only = ?, int $sizelimit = -1, int $timelimit = -1, int $deref = LDAP_DEREF_NEVER, array|null $controls = null): LDAP\Result|array|false	Search LDAP tree
ldap_set_option(LDAP\Connection|null $ldap, int $option, array|string|int|bool $value): bool	Set the value of the given option
ldap_set_rebind_proc(LDAP\Connection $ldap, callable|null $callback): bool	Set a callback function to do re-binds on referral chasing
ldap_sort(resource $link, resource $result, string $sortfilter): bool	Sort LDAP result entries on the client side
ldap_start_tls(LDAP\Connection $ldap): bool	Start TLS
ldap_t61_to_8859(string $value): string|false	Translate t61 characters to 8859 characters
ldap_unbind(LDAP\Connection $ldap): bool	Unbind from LDAP directory
LDAP\Connection()	(new) A fully opaque class which replaces a ldap resource as of PHP 8
LDAP\Result()	(new) A fully opaque class which replaces a ldap result resource as of PHP 8
LDAP\ResultEntry()	(new) A fully opaque class which replaces a ldap result entry resource as of PHP 8
libxml_clear_errors(): void	Clear libxml error buffer
libxml_disable_entity_loader(bool $disable = true): bool	Disable the ability to load external entities
libxml_get_errors(): array	Retrieve array of errors
libxml_get_external_entity_loader(): callable|null	Get the current external entity loader
libxml_get_last_error(): LibXMLError|false	Retrieve last error from libxml
libxml_set_external_entity_loader(callable|null $resolver_function): bool	Changes the default external entity loader
libxml_set_streams_context(resource $context): void	Set the streams context for the next libxml document load or write
libxml_use_internal_errors(bool|null $use_errors = null): bool	Disable libxml errors and allow user to fetch error information as needed
LibXMLError()	(new) Contains various information about errors thrown by libxml
mysqli_connect()	Alias of mysqli::__construct
>escape_string()	(mysqli) Alias of mysqli_real_escape_string
mysqli_execute()	Alias of mysqli_stmt_execute
mysqli_get_client_stats(): array	Returns client per-process statistics
mysqli_get_links_stats(): array	Return information about open and cached links
mysqli_report()	Alias of mysqli_driver->report_mode
>set_opt()	(mysqli) Alias of mysqli_options
mysqli_affected_rows(mysqli $mysql): int|string	Gets the number of affected rows in a previous MySQL operation
>autocommit(bool $enable): bool	(mysqli) Turns on or off auto-committing database modifications
mysqli_autocommit(mysqli $mysql, bool $enable): bool	Turns on or off auto-committing database modifications
>begin_transaction(int $flags = ?, string|null $name = null): bool	(mysqli) Starts a transaction
mysqli_begin_transaction(mysqli $mysql, int $flags = ?, string|null $name = null): bool	Starts a transaction
>change_user(string $username, string $password, string|null $database): bool	(mysqli) Changes the user of the database connection
mysqli_change_user(mysqli $mysql, string $username, string $password, string|null $database): bool	Changes the user of the database connection
>character_set_name(): string	(mysqli) Returns the current character set of the database connection
mysqli_character_set_name(mysqli $mysql): string	Returns the current character set of the database connection
>close(): true	(mysqli) Closes a previously opened database connection
mysqli_close(mysqli $mysql): true	Closes a previously opened database connection
>commit(int $flags = ?, string|null $name = null): bool	(mysqli) Commits the current transaction
mysqli_commit(mysqli $mysql, int $flags = ?, string|null $name = null): bool	Commits the current transaction
mysqli_connect_errno(): int	Returns the error code from last connect call
mysqli_connect_error(): string|null	Returns a description of the last connection error
>connect(string|null $hostname = null, string|null $username = null, string|null $password = null, string|null $database = null, int|null $port = null, string|null $socket = null): bool	(mysqli) Open a new connection to the MySQL server
mysqli_connect(string|null $hostname = null, string|null $username = null, string|null $password = null, string|null $database = null, int|null $port = null, string|null $socket = null): mysqli|false	Open a new connection to the MySQL server
>debug(string $options): true	(mysqli) Performs debugging operations
mysqli_debug(string $options): true	Performs debugging operations
>dump_debug_info(): bool	(mysqli) Dump debugging information into the log
mysqli_dump_debug_info(mysqli $mysql): bool	Dump debugging information into the log
mysqli_errno(mysqli $mysql): int	Returns the error code for the most recent function call
mysqli_error_list(mysqli $mysql): array	Returns a list of errors from the last command executed
mysqli_error(mysqli $mysql): string	Returns a string description of the last error
>execute_query(string $query, array|null $params = null): mysqli_result|bool	(mysqli) Prepares, binds parameters, and executes SQL statement
mysqli_execute_query(mysqli $mysql, string $query, array|null $params = null): mysqli_result|bool	Prepares, binds parameters, and executes SQL statement
mysqli_field_count(mysqli $mysql): int	Returns the number of columns for the most recent query
>get_charset(): object|null	(mysqli) Returns a character set object
mysqli_get_charset(mysqli $mysql): object|null	Returns a character set object
>get_client_info(): string	(mysqli) Get MySQL client info
mysqli_get_client_info(mysqli|null $mysql = null): string	Get MySQL client info
mysqli_get_client_version(): int	Returns the MySQL client version as an integer
>get_connection_stats(): array	(mysqli) Returns statistics about the client connection
mysqli_get_connection_stats(mysqli $mysql): array	Returns statistics about the client connection
mysqli_get_host_info(mysqli $mysql): string	Returns a string representing the type of connection used
mysqli_get_proto_info(mysqli $mysql): int	Returns the version of the MySQL protocol used
>get_server_info(): string	(mysqli) Returns the version of the MySQL server
mysqli_get_server_info(mysqli $mysql): string	Returns the version of the MySQL server
mysqli_get_server_version(mysqli $mysql): int	Returns the version of the MySQL server as an integer
>get_warnings(): mysqli_warning|false	(mysqli) Get result of SHOW WARNINGS
mysqli_get_warnings(mysqli $mysql): mysqli_warning|false	Get result of SHOW WARNINGS
mysqli_info(mysqli $mysql): string|null	Retrieves information about the most recently executed query
>init(): bool|null	(mysqli) Initializes MySQLi and returns an object for use with mysqli_real_connect()
mysqli_init(): mysqli|false	Initializes MySQLi and returns an object for use with mysqli_real_connect()
mysqli_insert_id(mysqli $mysql): int|string	Returns the value generated for an AUTO_INCREMENT column by the last query
>kill(int $process_id): bool	(mysqli) Asks the server to kill a MySQL thread
mysqli_kill(mysqli $mysql, int $process_id): bool	Asks the server to kill a MySQL thread
>more_results(): bool	(mysqli) Check if there are any more query results from a multi query
mysqli_more_results(mysqli $mysql): bool	Check if there are any more query results from a multi query
>multi_query(string $query): bool	(mysqli) Performs one or more queries on the database
mysqli_multi_query(mysqli $mysql, string $query): bool	Performs one or more queries on the database
>next_result(): bool	(mysqli) Prepare next result from multi_query
mysqli_next_result(mysqli $mysql): bool	Prepare next result from multi_query
>options(int $option, string|int $value): bool	(mysqli) Set options
mysqli_options(mysqli $mysql, int $option, string|int $value): bool	Set options
>ping(): bool	(mysqli) Pings a server connection, or tries to reconnect if the connection has gone down
mysqli_ping(mysqli $mysql): bool	Pings a server connection, or tries to reconnect if the connection has gone down
mysqli::poll(array|null $read, array|null $error, array $reject, int $seconds, int $microseconds = ?): int|false	Poll connections
mysqli_poll(array|null $read, array|null $error, array $reject, int $seconds, int $microseconds = ?): int|false	Poll connections
>prepare(string $query): mysqli_stmt|false	(mysqli) Prepares an SQL statement for execution
mysqli_prepare(mysqli $mysql, string $query): mysqli_stmt|false	Prepares an SQL statement for execution
>query(string $query, int $result_mode = MYSQLI_STORE_RESULT): mysqli_result|bool	(mysqli) Performs a query on the database
mysqli_query(mysqli $mysql, string $query, int $result_mode = MYSQLI_STORE_RESULT): mysqli_result|bool	Performs a query on the database
>real_connect(string|null $hostname = null, string|null $username = null, string|null $password = null, string|null $database = null, int|null $port = null, string|null $socket = null, int $flags = ?): bool	(mysqli) Opens a connection to a mysql server
mysqli_real_connect(mysqli $mysql, string|null $hostname = null, string|null $username = null, string|null $password = null, string|null $database = null, int|null $port = null, string|null $socket = null, int $flags = ?): bool	Opens a connection to a mysql server
>real_escape_string(string $string): string	(mysqli) Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection
mysqli_real_escape_string(mysqli $mysql, string $string): string	Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection
>real_query(string $query): bool	(mysqli) Execute an SQL query
mysqli_real_query(mysqli $mysql, string $query): bool	Execute an SQL query
>reap_async_query(): mysqli_result|bool	(mysqli) Get result from async query
mysqli_reap_async_query(mysqli $mysql): mysqli_result|bool	Get result from async query
>refresh(int $flags): bool	(mysqli) Refreshes
mysqli_refresh(mysqli $mysql, int $flags): bool	Refreshes
>release_savepoint(string $name): bool	(mysqli) Removes the named savepoint from the set of savepoints of the current transaction
mysqli_release_savepoint(mysqli $mysql, string $name): bool	Removes the named savepoint from the set of savepoints of the current transaction
>rollback(int $flags = ?, string|null $name = null): bool	(mysqli) Rolls back current transaction
mysqli_rollback(mysqli $mysql, int $flags = ?, string|null $name = null): bool	Rolls back current transaction
>savepoint(string $name): bool	(mysqli) Set a named transaction savepoint
mysqli_savepoint(mysqli $mysql, string $name): bool	Set a named transaction savepoint
>select_db(string $database): bool	(mysqli) Selects the default database for database queries
mysqli_select_db(mysqli $mysql, string $database): bool	Selects the default database for database queries
>set_charset(string $charset): bool	(mysqli) Sets the client character set
mysqli_set_charset(mysqli $mysql, string $charset): bool	Sets the client character set
mysqli_sqlstate(mysqli $mysql): string	Returns the SQLSTATE error from previous MySQL operation
>ssl_set(string|null $key, string|null $certificate, string|null $ca_certificate, string|null $ca_path, string|null $cipher_algos): true	(mysqli) Used for establishing secure connections using SSL
mysqli_ssl_set(mysqli $mysql, string|null $key, string|null $certificate, string|null $ca_certificate, string|null $ca_path, string|null $cipher_algos): true	Used for establishing secure connections using SSL
>stat(): string|false	(mysqli) Gets the current system status
mysqli_stat(mysqli $mysql): string|false	Gets the current system status
>stmt_init(): mysqli_stmt|false	(mysqli) Initializes a statement and returns an object for use with mysqli_stmt_prepare
mysqli_stmt_init(mysqli $mysql): mysqli_stmt|false	Initializes a statement and returns an object for use with mysqli_stmt_prepare
>store_result(int $mode = ?): mysqli_result|false	(mysqli) Transfers a result set from the last query
mysqli_store_result(mysqli $mysql, int $mode = ?): mysqli_result|false	Transfers a result set from the last query
mysqli_thread_id(mysqli $mysql): int	Returns the thread ID for the current connection
>thread_safe(): bool	(mysqli) Returns whether thread safety is given or not
mysqli_thread_safe(): bool	Returns whether thread safety is given or not
>use_result(): mysqli_result|false	(mysqli) Initiate a result set retrieval
mysqli_use_result(mysqli $mysql): mysqli_result|false	Initiate a result set retrieval
mysqli_warning_count(mysqli $mysql): int	Returns the number of warnings generated by the most recently executed query
>embedded_server_end(): void	(mysqli_driver) Stop embedded server
mysqli_embedded_server_end(): void	Stop embedded server
>embedded_server_start(int $start, array $arguments, array $groups): bool	(mysqli_driver) Initialize and start embedded server
mysqli_embedded_server_start(int $start, array $arguments, array $groups): bool	Initialize and start embedded server
mysqli_report(int $flags): true	Sets mysqli error reporting mode
mysqli_result(mysqli $mysql, int $result_mode = MYSQLI_STORE_RESULT)	(new) Constructs a mysqli_result object
mysqli_field_tell(mysqli_result $result): int	Get current field offset of a result pointer
>data_seek(int $offset): bool	(mysqli_result) Adjusts the result pointer to an arbitrary row in the result
mysqli_data_seek(mysqli_result $result, int $offset): bool	Adjusts the result pointer to an arbitrary row in the result
>fetch_all(int $mode = MYSQLI_NUM): array	(mysqli_result) Fetch all result rows as an associative array, a numeric array, or both
mysqli_fetch_all(mysqli_result $result, int $mode = MYSQLI_NUM): array	Fetch all result rows as an associative array, a numeric array, or both
>fetch_array(int $mode = MYSQLI_BOTH): array|null|false	(mysqli_result) Fetch the next row of a result set as an associative, a numeric array, or both
mysqli_fetch_array(mysqli_result $result, int $mode = MYSQLI_BOTH): array|null|false	Fetch the next row of a result set as an associative, a numeric array, or both
>fetch_assoc(): array|null|false	(mysqli_result) Fetch the next row of a result set as an associative array
mysqli_fetch_assoc(mysqli_result $result): array|null|false	Fetch the next row of a result set as an associative array
>fetch_column(int $column = ?): null|int|float|string|false	(mysqli_result) Fetch a single column from the next row of a result set
mysqli_fetch_column(mysqli_result $result, int $column = ?): null|int|float|string|false	Fetch a single column from the next row of a result set
>fetch_field_direct(int $index): object|false	(mysqli_result) Fetch meta-data for a single field
mysqli_fetch_field_direct(mysqli_result $result, int $index): object|false	Fetch meta-data for a single field
>fetch_field(): object|false	(mysqli_result) Returns the next field in the result set
mysqli_fetch_field(mysqli_result $result): object|false	Returns the next field in the result set
>fetch_fields(): array	(mysqli_result) Returns an array of objects representing the fields in a result set
mysqli_fetch_fields(mysqli_result $result): array	Returns an array of objects representing the fields in a result set
>fetch_object(string $class = "stdClass", array $constructor_args = []): object|null|false	(mysqli_result) Fetch the next row of a result set as an object
mysqli_fetch_object(mysqli_result $result, string $class = "stdClass", array $constructor_args = []): object|null|false	Fetch the next row of a result set as an object
>fetch_row(): array|null|false	(mysqli_result) Fetch the next row of a result set as an enumerated array
mysqli_fetch_row(mysqli_result $result): array|null|false	Fetch the next row of a result set as an enumerated array
mysqli_num_fields(mysqli_result $result): int	Gets the number of fields in the result set
>field_seek(int $index): true	(mysqli_result) Set result pointer to a specified field offset
mysqli_field_seek(mysqli_result $result, int $index): true	Set result pointer to a specified field offset
>free(): void	(mysqli_result) Frees the memory associated with a result
>close(): void	(mysqli_result) Frees the memory associated with a result
>free_result(): void	(mysqli_result) Frees the memory associated with a result
mysqli_free_result(mysqli_result $result): void	Frees the memory associated with a result
>getIterator(): Iterator	(mysqli_result) Retrieve an external iterator
mysqli_fetch_lengths(mysqli_result $result): array|false	Returns the lengths of the columns of the current row in the result set
mysqli_num_rows(mysqli_result $result): int|string	Gets the number of rows in the result set
>getSqlState(): string	(mysqli_sql_exception) Returns the SQLSTATE error code
mysqli_stmt_affected_rows(mysqli_stmt $statement): int|string	Returns the total number of rows changed, deleted, inserted, or matched by the last statement executed
>attr_get(int $attribute): int	(mysqli_stmt) Used to get the current value of a statement attribute
mysqli_stmt_attr_get(mysqli_stmt $statement, int $attribute): int	Used to get the current value of a statement attribute
>attr_set(int $attribute, int $value): bool	(mysqli_stmt) Used to modify the behavior of a prepared statement
mysqli_stmt_attr_set(mysqli_stmt $statement, int $attribute, int $value): bool	Used to modify the behavior of a prepared statement
>bind_param(string $types, mixed $var, mixed ...$vars): bool	(mysqli_stmt) Binds variables to a prepared statement as parameters
mysqli_stmt_bind_param(mysqli_stmt $statement, string $types, mixed $var, mixed ...$vars): bool	Binds variables to a prepared statement as parameters
>bind_result(mixed $var, mixed ...$vars): bool	(mysqli_stmt) Binds variables to a prepared statement for result storage
mysqli_stmt_bind_result(mysqli_stmt $statement, mixed $var, mixed ...$vars): bool	Binds variables to a prepared statement for result storage
>close(): true	(mysqli_stmt) Closes a prepared statement
mysqli_stmt_close(mysqli_stmt $statement): true	Closes a prepared statement
mysqli_stmt(mysqli $mysql, string|null $query = null)	(new) Constructs a new mysqli_stmt object
>data_seek(int $offset): void	(mysqli_stmt) Adjusts the result pointer to an arbitrary row in the buffered result
mysqli_stmt_data_seek(mysqli_stmt $statement, int $offset): void	Adjusts the result pointer to an arbitrary row in the buffered result
mysqli_stmt_errno(mysqli_stmt $statement): int	Returns the error code for the most recent statement call
mysqli_stmt_error_list(mysqli_stmt $statement): array	Returns a list of errors from the last statement executed
mysqli_stmt_error(mysqli_stmt $statement): string	Returns a string description for last statement error
>execute(array|null $params = null): bool	(mysqli_stmt) Executes a prepared statement
mysqli_stmt_execute(mysqli_stmt $statement, array|null $params = null): bool	Executes a prepared statement
>fetch(): bool|null	(mysqli_stmt) Fetch results from a prepared statement into the bound variables
mysqli_stmt_fetch(mysqli_stmt $statement): bool|null	Fetch results from a prepared statement into the bound variables
mysqli_stmt_field_count(mysqli_stmt $statement): int	Returns the number of columns in the given statement
>free_result(): void	(mysqli_stmt) Frees stored result memory for the given statement handle
mysqli_stmt_free_result(mysqli_stmt $statement): void	Frees stored result memory for the given statement handle
>get_result(): mysqli_result|false	(mysqli_stmt) Gets a result set from a prepared statement as a mysqli_result object
mysqli_stmt_get_result(mysqli_stmt $statement): mysqli_result|false	Gets a result set from a prepared statement as a mysqli_result object
>get_warnings(): mysqli_warning|false	(mysqli_stmt) Get result of SHOW WARNINGS
mysqli_stmt_get_warnings(mysqli_stmt $statement): mysqli_warning|false	Get result of SHOW WARNINGS
mysqli_stmt_insert_id(mysqli_stmt $statement): int|string	Get the ID generated from the previous INSERT operation
>more_results(): bool	(mysqli_stmt) Check if there are more query results from a multiple query
mysqli_stmt_more_results(mysqli_stmt $statement): bool	Check if there are more query results from a multiple query
>next_result(): bool	(mysqli_stmt) Reads the next result from a multiple query
mysqli_stmt_next_result(mysqli_stmt $statement): bool	Reads the next result from a multiple query
>num_rows(): int|string	(mysqli_stmt) Returns the number of rows fetched from the server
mysqli_stmt_num_rows(mysqli_stmt $statement): int|string	Returns the number of rows fetched from the server
mysqli_stmt_param_count(mysqli_stmt $statement): int	Returns the number of parameters for the given statement
>prepare(string $query): bool	(mysqli_stmt) Prepares an SQL statement for execution
mysqli_stmt_prepare(mysqli_stmt $statement, string $query): bool	Prepares an SQL statement for execution
>reset(): bool	(mysqli_stmt) Resets a prepared statement
mysqli_stmt_reset(mysqli_stmt $statement): bool	Resets a prepared statement
>result_metadata(): mysqli_result|false	(mysqli_stmt) Returns result set metadata from a prepared statement
mysqli_stmt_result_metadata(mysqli_stmt $statement): mysqli_result|false	Returns result set metadata from a prepared statement
>send_long_data(int $param_num, string $data): bool	(mysqli_stmt) Send data in blocks
mysqli_stmt_send_long_data(mysqli_stmt $statement, int $param_num, string $data): bool	Send data in blocks
mysqli_stmt_sqlstate(mysqli_stmt $statement): string	Returns SQLSTATE error from previous statement operation
>store_result(): bool	(mysqli_stmt) Stores a result set in an internal buffer
mysqli_stmt_store_result(mysqli_stmt $statement): bool	Stores a result set in an internal buffer
mysqli_warning()	(new) Private constructor to disallow direct instantiation
>next(): bool	(mysqli_warning) Fetch next warning
mysqli()	(new) Represents a connection between PHP and a MySQL database
mysqli_driver()	(new) The mysqli_driver class is an instance of the monostate pattern, i
mysqli_sql_exception()	(new) The mysqli exception handling class
openssl_cipher_iv_length(string $cipher_algo): int|false	Gets the cipher iv length
openssl_cipher_key_length(string $cipher_algo): int|false	Gets the cipher key length
openssl_cms_decrypt(string $input_filename, string $output_filename, OpenSSLCertificate|string $certificate, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string|null $private_key = null, int $encoding = OPENSSL_ENCODING_SMIME): bool	Decrypt a CMS message
openssl_cms_encrypt(string $input_filename, string $output_filename, OpenSSLCertificate|array|string $certificate, array|null $headers, int $flags = ?, int $encoding = OPENSSL_ENCODING_SMIME, int $cipher_algo = OPENSSL_CIPHER_AES_128_CBC): bool	Encrypt a CMS message
openssl_cms_read(string $input_filename, array $certificates): bool	Export the CMS file to an array of PEM certificates
openssl_cms_sign(string $input_filename, string $output_filename, OpenSSLCertificate|string $certificate, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key, array|null $headers, int $flags = ?, int $encoding = OPENSSL_ENCODING_SMIME, string|null $untrusted_certificates_filename = null): bool	Sign a file
openssl_cms_verify(string $input_filename, int $flags = ?, string|null $certificates = null, array $ca_info = [], string|null $untrusted_certificates_filename = null, string|null $content = null, string|null $pk7 = null, string|null $sigfile = null, int $encoding = OPENSSL_ENCODING_SMIME): bool	Verify a CMS signature
openssl_csr_export_to_file(OpenSSLCertificateSigningRequest|string $csr, string $output_filename, bool $no_text = true): bool	Exports a CSR to a file
openssl_csr_export(OpenSSLCertificateSigningRequest|string $csr, string $output, bool $no_text = true): bool	Exports a CSR as a string
openssl_csr_get_public_key(OpenSSLCertificateSigningRequest|string $csr, bool $short_names = true): OpenSSLAsymmetricKey|false	Returns the public key of a CSR
openssl_csr_get_subject(OpenSSLCertificateSigningRequest|string $csr, bool $short_names = true): array|false	Returns the subject of a CSR
openssl_csr_new(array $distinguished_names, OpenSSLAsymmetricKey|null $private_key, array|null $options = null, array|null $extra_attributes = null): OpenSSLCertificateSigningRequest|bool	Generates a CSR
openssl_csr_sign(OpenSSLCertificateSigningRequest|string $csr, OpenSSLCertificate|string|null $ca_certificate, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key, int $days, array|null $options = null, int $serial = ?, string|null $serial_hex = null): OpenSSLCertificate|false	Sign a CSR with another certificate (or itself) and generate a certificate
openssl_decrypt(string $data, string $cipher_algo, string $passphrase, int $options = ?, string $iv = "", string|null $tag = null, string $aad = ""): string|false	Decrypts data
openssl_dh_compute_key(string $public_key, OpenSSLAsymmetricKey $private_key): string|false	Computes shared secret for public value of remote DH public key and local DH key
openssl_digest(string $data, string $digest_algo, bool $binary = false): string|false	Computes a digest
openssl_encrypt(string $data, string $cipher_algo, string $passphrase, int $options = ?, string $iv = "", string $tag = null, string $aad = "", int $tag_length = 16): string|false	Encrypts data
openssl_error_string(): string|false	Return openSSL error message
openssl_free_key(OpenSSLAsymmetricKey $key): void	Free key resource
openssl_get_cert_locations(): array	Retrieve the available certificate locations
openssl_get_cipher_methods(bool $aliases = false): array	Gets available cipher methods
openssl_get_curve_names(): array|false	Gets list of available curve names for ECC
openssl_get_md_methods(bool $aliases = false): array	Gets available digest methods
openssl_get_privatekey()	Alias of openssl_pkey_get_private
openssl_get_publickey()	Alias of openssl_pkey_get_public
openssl_open(string $data, string $output, string $encrypted_key, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key, string $cipher_algo, string|null $iv = null): bool	Open sealed data
openssl_pbkdf2(string $password, string $salt, int $key_length, int $iterations, string $digest_algo = "sha1"): string|false	Generates a PKCS5 v2 PBKDF2 string
openssl_pkcs12_export_to_file(OpenSSLCertificate|string $certificate, string $output_filename, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key, string $passphrase, array $options = []): bool	Exports a PKCS#12 Compatible Certificate Store File
openssl_pkcs12_export(OpenSSLCertificate|string $certificate, string $output, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key, string $passphrase, array $options = []): bool	Exports a PKCS#12 Compatible Certificate Store File to variable
openssl_pkcs12_read(string $pkcs12, array $certificates, string $passphrase): bool	Parse a PKCS#12 Certificate Store into an array
openssl_pkcs7_decrypt(string $input_filename, string $output_filename, OpenSSLCertificate|string $certificate, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string|null $private_key = null): bool	Decrypts an S/MIME encrypted message
openssl_pkcs7_encrypt(string $input_filename, string $output_filename, OpenSSLCertificate|array|string $certificate, array|null $headers, int $flags = ?, int $cipher_algo = OPENSSL_CIPHER_AES_128_CBC): bool	Encrypt an S/MIME message
openssl_pkcs7_read(string $data, array $certificates): bool	Export the PKCS7 file to an array of PEM certificates
openssl_pkcs7_sign(string $input_filename, string $output_filename, OpenSSLCertificate|string $certificate, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key, array|null $headers, int $flags = PKCS7_DETACHED, string|null $untrusted_certificates_filename = null): bool	Sign an S/MIME message
openssl_pkcs7_verify(string $input_filename, int $flags, string|null $signers_certificates_filename = null, array $ca_info = [], string|null $untrusted_certificates_filename = null, string|null $content = null, string|null $output_filename = null): bool|int	Verifies the signature of an S/MIME signed message
openssl_pkey_derive(OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $public_key, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key, int $key_length = ?): string|false	Computes shared secret for public value of remote and local DH or ECDH key
openssl_pkey_export_to_file(OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $key, string $output_filename, string|null $passphrase = null, array|null $options = null): bool	Gets an exportable representation of a key into a file
openssl_pkey_export(OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $key, string $output, string|null $passphrase = null, array|null $options = null): bool	Gets an exportable representation of a key into a string
openssl_pkey_free(OpenSSLAsymmetricKey $key): void	Frees a private key
openssl_pkey_get_details(OpenSSLAsymmetricKey $key): array|false	Returns an array with the key details
openssl_pkey_get_private(OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key, string|null $passphrase = null): OpenSSLAsymmetricKey|false	Get a private key
openssl_pkey_get_public(OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $public_key): OpenSSLAsymmetricKey|false	Extract public key from certificate and prepare it for use
openssl_pkey_new(array|null $options = null): OpenSSLAsymmetricKey|false	Generates a new private key
openssl_private_decrypt(string $data, string $decrypted_data, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key, int $padding = OPENSSL_PKCS1_PADDING): bool	Decrypts data with private key
openssl_private_encrypt(string $data, string $encrypted_data, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key, int $padding = OPENSSL_PKCS1_PADDING): bool	Encrypts data with private key
openssl_public_decrypt(string $data, string $decrypted_data, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $public_key, int $padding = OPENSSL_PKCS1_PADDING): bool	Decrypts data with public key
openssl_public_encrypt(string $data, string $encrypted_data, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $public_key, int $padding = OPENSSL_PKCS1_PADDING): bool	Encrypts data with public key
openssl_random_pseudo_bytes(int $length, bool $strong_result = null): string	Generate a pseudo-random string of bytes
openssl_seal(string $data, string $sealed_data, array $encrypted_keys, array $public_key, string $cipher_algo, string $iv = null): int|false	Seal (encrypt) data
openssl_sign(string $data, string $signature, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key, string|int $algorithm = OPENSSL_ALGO_SHA1): bool	Generate signature
openssl_spki_export_challenge(string $spki): string|false	Exports the challenge associated with a signed public key and challenge
openssl_spki_export(string $spki): string|false	Exports a valid PEM formatted public key signed public key and challenge
openssl_spki_new(OpenSSLAsymmetricKey $private_key, string $challenge, int $digest_algo = OPENSSL_ALGO_MD5): string|false	Generate a new signed public key and challenge
openssl_spki_verify(string $spki): bool	Verifies a signed public key and challenge
openssl_verify(string $data, string $signature, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $public_key, string|int $algorithm = OPENSSL_ALGO_SHA1): int|false	Verify signature
openssl_x509_check_private_key(OpenSSLCertificate|string $certificate, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $private_key): bool	Checks if a private key corresponds to a certificate
openssl_x509_checkpurpose(OpenSSLCertificate|string $certificate, int $purpose, array $ca_info = [], string|null $untrusted_certificates_file = null): bool|int	Verifies if a certificate can be used for a particular purpose
openssl_x509_export_to_file(OpenSSLCertificate|string $certificate, string $output_filename, bool $no_text = true): bool	Exports a certificate to file
openssl_x509_export(OpenSSLCertificate|string $certificate, string $output, bool $no_text = true): bool	Exports a certificate as a string
openssl_x509_fingerprint(OpenSSLCertificate|string $certificate, string $digest_algo = "sha1", bool $binary = false): string|false	Calculates the fingerprint, or digest, of a given X.509 certificate
openssl_x509_free(OpenSSLCertificate $certificate): void	Free certificate resource
openssl_x509_parse(OpenSSLCertificate|string $certificate, bool $short_names = true): array|false	Parse an X509 certificate and return the information as an array
openssl_x509_read(OpenSSLCertificate|string $certificate): OpenSSLCertificate|false	Parse an X.509 certificate and return an object for it
openssl_x509_verify(OpenSSLCertificate|string $certificate, OpenSSLAsymmetricKey|OpenSSLCertificate|array|string $public_key): int	Verifies digital signature of x509 certificate against a public key
OpenSSLAsymmetricKey()	(new) A fully opaque class which replaces OpenSSL key resources as of PHP 8
OpenSSLCertificate()	(new) A fully opaque class which replaces OpenSSL X
OpenSSLCertificateSigningRequest()	(new) A fully opaque class which replaces OpenSSL X
Pdo\Dblib()	(new) A PDO subclass representing a connection using the DBLib PDO driver
Pdo\Firebird::getApiVersion(): int	Get the API version
Pdo\Firebird()	(new) A PDO subclass representing a connection using the Firebird PDO driver
>getWarningCount(): int	(Pdo\Mysql) Returns the number of warnings from the last executed query
Pdo\Mysql()	(new) This driver supports a dedicated SQL query parser for the MySQL dialect
Pdo\Odbc()	(new) A PDO subclass representing a connection using the ODBC PDO driver
>copyFromArray(string $tableName, array $rows, string $separator = "\t", string $nullAs = "\\\\N", string|null $fields = null): bool	(Pdo\Pgsql) Copy data from a PHP array into a table
>copyFromFile(string $tableName, string $filename, string $separator = "\t", string $nullAs = "\\\\N", string|null $fields = null): bool	(Pdo\Pgsql) Copy data from file into table
>copyToArray(string $tableName, string $separator = "\t", string $nullAs = "\\\\N", string|null $fields = null): array|false	(Pdo\Pgsql) Copy data from database table into PHP array
>copyToFile(string $tableName, string $filename, string $separator = "\t", string $nullAs = "\\\\N", string|null $fields = null): bool	(Pdo\Pgsql) Copy data from table into file
>escapeIdentifier(string $input): string	(Pdo\Pgsql) Escapes a string for use as an SQL identifier
>getNotify(int $fetchMode = PDO::FETCH_DEFAULT, int $timeoutMilliseconds = ?): array|false	(Pdo\Pgsql) Get asynchronous notification
>getPid(): int	(Pdo\Pgsql) Get the PID of the backend process handling this connection
>lobCreate(): string|false	(Pdo\Pgsql) Creates a new large object
>lobOpen(string $oid, string $mode = "rb"): resource|false	(Pdo\Pgsql) Opens an existing large object stream
>lobUnlink(string $oid): bool	(Pdo\Pgsql) Deletes the large object
>setNoticeCallback(callable|null $callback): void	(Pdo\Pgsql) Set a callback to handle notice and warning messages generated by the backend
>pgsqlCopyFromArray(string $tableName, array $rows, string $separator = "\t", string $nullAs = "\\\\N", string|null $fields = null): bool	(PDO) Alias Pdo\Pgsql::copyFromArray
>pgsqlCopyFromFile(string $tableName, string $filename, string $separator = "\t", string $nullAs = "\\\\N", string|null $fields = null): bool	(PDO) Alias Pdo\Pgsql::copyFromFile
>pgsqlCopyToArray(string $tableName, string $separator = "\t", string $nullAs = "\\\\N", string|null $fields = null): array|false	(PDO) Alias Pdo\Pgsql::copyToArray
>pgsqlCopyToFile(string $tableName, string $filename, string $separator = "\t", string $nullAs = "\\\\N", string|null $fields = null): bool	(PDO) Alias Pdo\Pgsql::copyToFile
>pgsqlGetNotify(int $fetchMode = PDO::FETCH_DEFAULT, int $timeoutMilliseconds = ?): array|false	(PDO) Alias Pdo\Pgsql::getNotify
>pgsqlGetPid(): int	(PDO) Alias Pdo\Pgsql::getPid
>pgsqlLOBCreate(): string	(PDO) Alias Pdo\Pgsql::lobCreate
>pgsqlLOBOpen(string $oid, string $mode = "rb"): resource|false	(PDO) Alias Pdo\Pgsql::lobOpen
>pgsqlLOBUnlink(string $oid): bool	(PDO) Alias Pdo\Pgsql::lobUnlink
Pdo\Pgsql()	(new) This driver supports a dedicated SQL query parser for the PostgreSQL dialect
>createAggregate(string $name, callable $step, callable $finalize, int $numArgs = -1): bool	(Pdo\Sqlite) Registers an aggregating user-defined function for use in SQL statements
>createCollation(string $name, callable $callback): bool	(Pdo\Sqlite) Registers a user-defined function for use as a collating function in SQL statements
>createFunction(string $function_name, callable $callback, int $num_args = -1, int $flags = ?): bool	(Pdo\Sqlite) Registers a user-defined function for use in SQL statements
>loadExtension(string $name): void	(Pdo\Sqlite) Description
>openBlob(string $table, string $column, int $rowid, string|null $dbname = "main", int $flags = Pdo\Sqlite::OPEN_READONLY): resource|false	(Pdo\Sqlite) Description
>sqliteCreateAggregate(string $name, callable $step, callable $finalize, int $numArgs = -1): bool	(PDO) Alias Pdo\Sqlite::createAggregate
>sqliteCreateCollation(string $name, callable $callback): bool	(PDO) Alias Pdo\Sqlite::createCollation
>sqliteCreateFunction(string $function_name, callable $callback, int $num_args = -1, int $flags = ?): bool	(PDO) Alias Pdo\Sqlite::createFunction
Pdo\Sqlite()	(new) This driver supports a dedicated SQL query parser for the SQLite dialect
pg_affected_rows(PgSql\Result $result): int	Returns number of affected records (tuples)
pg_cancel_query(PgSql\Connection $connection): bool	Cancel an asynchronous query
pg_client_encoding(PgSql\Connection|null $connection = null): string	Gets the client encoding
pg_close(PgSql\Connection|null $connection = null): true	Closes a PostgreSQL connection
pg_connect_poll(PgSql\Connection $connection): int	Poll the status of an in-progress asynchronous PostgreSQL connection attempt
pg_connect(string $connection_string, int $flags = ?): PgSql\Connection|false	Open a PostgreSQL connection
pg_connection_busy(PgSql\Connection $connection): bool	Get connection is busy or not
pg_connection_reset(PgSql\Connection $connection): bool	Reset connection (reconnect)
pg_connection_status(PgSql\Connection $connection): int	Get connection status
pg_consume_input(PgSql\Connection $connection): bool	Reads input on the connection
pg_convert(PgSql\Connection $connection, string $table_name, array $values, int $flags = ?): array|false	Convert associative array values into forms suitable for SQL statements
pg_copy_from(PgSql\Connection $connection, string $table_name, array $rows, string $separator = "\t", string $null_as = "\\\\N"): bool	Insert records into a table from an array
pg_copy_to(PgSql\Connection $connection, string $table_name, string $separator = "\t", string $null_as = "\\\\N"): array|false	Copy a table to an array
pg_dbname(PgSql\Connection|null $connection = null): string	Get the database name
pg_delete(PgSql\Connection $connection, string $table_name, array $conditions, int $flags = PGSQL_DML_EXEC): string|bool	Deletes records
pg_end_copy(PgSql\Connection|null $connection = null): bool	Sync with PostgreSQL backend
pg_escape_bytea(PgSql\Connection $connection = ?, string $data): string	Escape a string for insertion into a bytea field
pg_escape_identifier(PgSql\Connection $connection = ?, string $data): string	Escape a identifier for insertion into a text field
pg_escape_literal(PgSql\Connection $connection = ?, string $data): string	Escape a literal for insertion into a text field
pg_escape_string(PgSql\Connection $connection = ?, string $data): string	Escape a string for query
pg_execute(PgSql\Connection $connection = ?, string $stmtname, array $params): PgSql\Result|false	Sends a request to execute a prepared statement with given parameters, and waits for the result
pg_fetch_all_columns(PgSql\Result $result, int $field = ?): array	Fetches all rows in a particular result column as an array
pg_fetch_all(PgSql\Result $result, int $mode = PGSQL_ASSOC): array	Fetches all rows from a result as an array
pg_fetch_array(PgSql\Result $result, int|null $row = null, int $mode = PGSQL_BOTH): array|false	Fetch a row as an array
pg_fetch_assoc(PgSql\Result $result, int|null $row = null): array|false	Fetch a row as an associative array
pg_fetch_object(PgSql\Result $result, int|null $row = null, string $class = "stdClass", array $constructor_args = []): object|false	Fetch a row as an object
pg_fetch_result(PgSql\Result $result, string|false|null $row, mixed $field): string|false|null	Returns values from a result instance
pg_fetch_result(PgSql\Result $result, mixed $field): string|false|null	Returns values from a result instance
pg_fetch_row(PgSql\Result $result, int|null $row = null, int $mode = PGSQL_NUM): array|false	Get a row as an enumerated array
pg_field_is_null(PgSql\Result $result, string|false|null $row, mixed $field): int	Test if a field is SQL NULL
pg_field_is_null(PgSql\Result $result, mixed $field): int	Test if a field is SQL NULL
pg_field_name(PgSql\Result $result, int $field): string	Returns the name of a field
pg_field_num(PgSql\Result $result, string $field): int	Returns the field number of the named field
pg_field_prtlen(PgSql\Result $result, string|false|null $row, mixed $field_name_or_number): int	Returns the printed length
pg_field_prtlen(PgSql\Result $result, mixed $field_name_or_number): int	Returns the printed length
pg_field_size(PgSql\Result $result, int $field): int	Returns the internal storage size of the named field
pg_field_table(PgSql\Result $result, int $field, bool $oid_only = false): string|int|false	Returns the name or oid of the tables field
pg_field_type_oid(PgSql\Result $result, int $field): string|int	Returns the type ID (OID) for the corresponding field number
pg_field_type(PgSql\Result $result, int $field): string	Returns the type name for the corresponding field number
pg_flush(PgSql\Connection $connection): int|bool	Flush outbound query data on the connection
pg_free_result(PgSql\Result $result): bool	Free result memory
pg_get_notify(PgSql\Connection $connection, int $mode = PGSQL_ASSOC): array|false	Gets SQL NOTIFY message
pg_get_pid(PgSql\Connection $connection): int	Gets the backend's process ID
pg_get_result(PgSql\Connection $connection): PgSql\Result|false	Get asynchronous query result
pg_host(PgSql\Connection|null $connection = null): string	Returns the host name associated with the connection
pg_insert(PgSql\Connection $connection, string $table_name, array $values, int $flags = PGSQL_DML_EXEC): PgSql\Result|string|bool	Insert array into table
pg_last_error(PgSql\Connection|null $connection = null): string	Get the last error message string of a connection
pg_last_notice(PgSql\Connection $connection, int $mode = PGSQL_NOTICE_LAST): array|string|bool	Returns the last notice message from PostgreSQL server
pg_last_oid(PgSql\Result $result): string|int|false	Returns the last row's OID
pg_lo_close(PgSql\Lob $lob): bool	Close a large object
pg_lo_create(PgSql\Connection $connection = ?, mixed $object_id = ?): int	Create a large object
pg_lo_create(mixed $object_id): int	Create a large object
pg_lo_export(PgSql\Connection $connection = ?, int $oid, string $pathname): bool	Export a large object to file
pg_lo_import(PgSql\Connection $connection = ?, string $pathname, mixed $object_id = ?): int	Import a large object from file
pg_lo_open(PgSql\Connection $connection, int $oid, string $mode): PgSql\Lob|false	Open a large object
pg_lo_read_all(PgSql\Lob $lob): int	Reads an entire large object and send straight to browser
pg_lo_read(PgSql\Lob $lob, int $length = 8192): string|false	Read a large object
pg_lo_seek(PgSql\Lob $lob, int $offset, int $whence = SEEK_CUR): bool	Seeks position within a large object
pg_lo_tell(PgSql\Lob $lob): int	Returns current seek position a of large object
pg_lo_truncate(PgSql\Lob $lob, int $size): bool	Truncates a large object
pg_lo_unlink(PgSql\Connection $connection, int $oid): bool	Delete a large object
pg_lo_write(PgSql\Lob $lob, string $data, int|null $length = null): int|false	Write to a large object
pg_meta_data(PgSql\Connection $connection, string $table_name, bool $extended = false): array|false	Get meta data for table
pg_num_fields(PgSql\Result $result): int	Returns the number of fields in a result
pg_num_rows(PgSql\Result $result): int	Returns the number of rows in a result
pg_options(PgSql\Connection|null $connection = null): string	Get the options associated with the connection
pg_parameter_status(PgSql\Connection $connection = ?, string $param_name): string	Looks up a current parameter setting of the server
pg_pconnect(string $connection_string, int $flags = ?): PgSql\Connection|false	Open a persistent PostgreSQL connection
pg_ping(PgSql\Connection|null $connection = null): bool	Ping database connection
pg_port(PgSql\Connection|null $connection = null): string	Return the port number associated with the connection
pg_prepare(PgSql\Connection $connection = ?, string $stmtname, string $query): PgSql\Result|false	Submits a request to the server to create a prepared statement with the given parameters, and waits for completion
pg_put_line(PgSql\Connection $connection = ?, string $data): bool	Send a NULL-terminated string to PostgreSQL backend
pg_query_params(PgSql\Connection $connection = ?, string $query, array $params): PgSql\Result|false	Submits a command to the server and waits for the result, with the ability to pass parameters separately from the SQL command text
pg_query(PgSql\Connection $connection = ?, string $query): PgSql\Result|false	Execute a query
pg_result_error_field(PgSql\Result $result, int $field_code): string|false|null	Returns an individual field of an error report
pg_result_error(PgSql\Result $result): string|false	Get error message associated with result
pg_result_memory_size(PgSql\Result $result): int	Returns the amount of memory allocated for a query result
pg_result_seek(PgSql\Result $result, int $row): bool	Set internal row offset in result instance
pg_result_status(PgSql\Result $result, int $mode = PGSQL_STATUS_LONG): string|int	Get status of query result
pg_select(PgSql\Connection $connection, string $table_name, array $conditions = [], int $flags = PGSQL_DML_EXEC, int $mode = PGSQL_ASSOC): array|string|false	Select records
pg_send_execute(PgSql\Connection $connection, string $statement_name, array $params): int|bool	Sends a request to execute a prepared statement with given parameters, without waiting for the result(s)
pg_send_prepare(PgSql\Connection $connection, string $statement_name, string $query): int|bool	Sends a request to create a prepared statement with the given parameters, without waiting for completion
pg_send_query_params(PgSql\Connection $connection, string $query, array $params): int|bool	Submits a command and separate parameters to the server without waiting for the result(s)
pg_send_query(PgSql\Connection $connection, string $query): int|bool	Sends asynchronous query
pg_set_chunked_rows_size(PgSql\Connection $connection, int $size): bool	Set the query results to be retrieved in chunk mode
pg_set_client_encoding(PgSql\Connection $connection = ?, string $encoding): int	Set the client encoding
pg_set_error_context_visibility(PgSql\Connection $connection, int $visibility): int	Determines the visibility of the context's error messages returned by pg_last_error and pg_result_error
pg_set_error_verbosity(PgSql\Connection $connection = ?, int $verbosity): int	Determines the verbosity of messages returned by pg_last_error and pg_result_error
pg_socket(PgSql\Connection $connection): resource|false	Get a read only handle to the socket underlying a PostgreSQL connection
pg_trace(string $filename, string $mode = "w", PgSql\Connection|null $connection = null, int $trace_mode = ?): bool	Enable tracing a PostgreSQL connection
pg_transaction_status(PgSql\Connection $connection): int	Returns the current in-transaction status of the server
pg_tty(PgSql\Connection|null $connection = null): string	Return the TTY name associated with the connection
pg_unescape_bytea(string $string): string	Unescape binary for bytea type
pg_untrace(PgSql\Connection|null $connection = null): true	Disable tracing of a PostgreSQL connection
pg_update(PgSql\Connection $connection, string $table_name, array $values, array $conditions, int $flags = PGSQL_DML_EXEC): string|bool	Update table
pg_version(PgSql\Connection|null $connection = null): array	Returns an array with client, protocol and server version (when available)
PgSql\Connection()	(new) A fully opaque class which replaces a pgsql link resource as of PHP 8
PgSql\Lob()	(new) A fully opaque class which replaces a pgsql large object resource as of PHP 8
PgSql\Result()	(new) A fully opaque class which replaces a pgsql result resource as of PHP 8
readline_add_history(string $prompt): true	Adds a line to the history
readline_callback_handler_install(string $prompt, callable $callback): true	Initializes the readline callback interface and terminal, prints the prompt and returns immediately
readline_callback_handler_remove(): bool	Removes a previously installed callback handler and restores terminal settings
readline_callback_read_char(): void	Reads a character and informs the readline callback interface when a line is received
readline_clear_history(): true	Clears the history
readline_completion_function(callable $callback): bool	Registers a completion function
readline_info(string|null $var_name = null, int|string|bool|null $value = null): mixed	Gets/sets various internal readline variables
readline_list_history(): array	Lists the history
readline_on_new_line(): void	Inform readline that the cursor has moved to a new line
readline_read_history(string|null $filename = null): bool	Reads the history
readline_redisplay(): void	Redraws the display
readline_write_history(string|null $filename = null): bool	Writes the history
readline(string|null $prompt = null): string|false	Reads a line
simplexml_import_dom(object $node, string|null $class_name = SimpleXMLElement::class): SimpleXMLElement|null	Get a SimpleXMLElement object from an XML or HTML node
simplexml_load_file(string $filename, string|null $class_name = SimpleXMLElement::class, int $options = ?, string $namespace_or_prefix = "", bool $is_prefix = false): SimpleXMLElement|false	Interprets an XML file into an object
simplexml_load_string(string $data, string|null $class_name = SimpleXMLElement::class, int $options = ?, string $namespace_or_prefix = "", bool $is_prefix = false): SimpleXMLElement|false	Interprets a string of XML into an object
>addAttribute(string $qualifiedName, string $value, string|null $namespace = null): void	(SimpleXMLElement) Adds an attribute to the SimpleXML element
>addChild(string $qualifiedName, string|null $value = null, string|null $namespace = null): SimpleXMLElement|null	(SimpleXMLElement) Adds a child element to the XML node
>asXML(string|null $filename = null): string|bool	(SimpleXMLElement) Return a well-formed XML string based on SimpleXML element
>attributes(string|null $namespaceOrPrefix = null, bool $isPrefix = false): SimpleXMLElement|null	(SimpleXMLElement) Identifies an element's attributes
>children(string|null $namespaceOrPrefix = null, bool $isPrefix = false): SimpleXMLElement|null	(SimpleXMLElement) Finds children of given node
SimpleXMLElement(string $data, int $options = ?, bool $dataIsURL = false, string $namespaceOrPrefix = "", bool $isPrefix = false)	(new) Creates a new SimpleXMLElement object
>count(): int	(SimpleXMLElement) Counts the children of an element
>current(): SimpleXMLElement	(SimpleXMLElement) Returns the current element
>getDocNamespaces(bool $recursive = false, bool $fromRoot = true): array|false	(SimpleXMLElement) Returns namespaces declared in document
>getName(): string	(SimpleXMLElement) Gets the name of the XML element
>getNamespaces(bool $recursive = false): array	(SimpleXMLElement) Returns namespaces used in document
>getChildren(): SimpleXMLElement|null	(SimpleXMLElement) Returns the sub-elements of the current element
>hasChildren(): bool	(SimpleXMLElement) Checks whether the current element has sub elements
>key(): string	(SimpleXMLElement) Return current key
>next(): void	(SimpleXMLElement) Move to next element
>registerXPathNamespace(string $prefix, string $namespace): bool	(SimpleXMLElement) Creates a prefix/ns context for the next XPath query
>rewind(): void	(SimpleXMLElement) Rewind to the first element
>saveXML()	(SimpleXMLElement) Alias of SimpleXMLElement::asXML
>__toString(): string	(SimpleXMLElement) Returns the string content
>valid(): bool	(SimpleXMLElement) Check whether the current element is valid
>xpath(string $expression): array|null|false	(SimpleXMLElement) Runs XPath query on XML data
SimpleXMLIterator()	(new) The SimpleXMLIterator provides recursive iteration over all nodes of a SimpleXMLElement object
snmp_get_quick_print(): bool	Fetches the current value of the NET-SNMP library's quick_print setting
snmp_get_valueretrieval(): int	Return the method how the SNMP values will be returned
snmp_read_mib(string $filename): bool	Reads and parses a MIB file into the active MIB tree
snmp_set_enum_print(bool $enable): true	Return all values that are enums with their enum value instead of the raw integer
snmp_set_oid_numeric_print()	Alias of snmp_set_oid_output_format
snmp_set_oid_output_format(int $format): true	Set the OID output format
snmp_set_quick_print(bool $enable): true	Set the value of $enable within the NET-SNMP library
snmp_set_valueretrieval(int $method): true	Specify the method how the SNMP values will be returned
snmp2_get(string $hostname, string $community, array|string $object_id, int $timeout = -1, int $retries = -1): mixed	Fetch an SNMP object
snmp2_getnext(string $hostname, string $community, array|string $object_id, int $timeout = -1, int $retries = -1): mixed	Fetch the SNMP object which follows the given object id
snmp2_real_walk(string $hostname, string $community, array|string $object_id, int $timeout = -1, int $retries = -1): array|false	Return all objects including their respective object ID within the specified one
snmp2_set(string $hostname, string $community, array|string $object_id, array|string $type, array|string $value, int $timeout = -1, int $retries = -1): bool	Set the value of an SNMP object
snmp2_walk(string $hostname, string $community, array|string $object_id, int $timeout = -1, int $retries = -1): array|false	Fetch all the SNMP objects from an agent
snmp3_get(string $hostname, string $security_name, string $security_level, string $auth_protocol, string $auth_passphrase, string $privacy_protocol, string $privacy_passphrase, array|string $object_id, int $timeout = -1, int $retries = -1): mixed	Fetch an SNMP object
snmp3_getnext(string $hostname, string $security_name, string $security_level, string $auth_protocol, string $auth_passphrase, string $privacy_protocol, string $privacy_passphrase, array|string $object_id, int $timeout = -1, int $retries = -1): mixed	Fetch the SNMP object which follows the given object id
snmp3_real_walk(string $hostname, string $security_name, string $security_level, string $auth_protocol, string $auth_passphrase, string $privacy_protocol, string $privacy_passphrase, array|string $object_id, int $timeout = -1, int $retries = -1): array|false	Return all objects including their respective object ID within the specified one
snmp3_set(string $hostname, string $security_name, string $security_level, string $auth_protocol, string $auth_passphrase, string $privacy_protocol, string $privacy_passphrase, array|string $object_id, array|string $type, array|string $value, int $timeout = -1, int $retries = -1): bool	Set the value of an SNMP object
snmp3_walk(string $hostname, string $security_name, string $security_level, string $auth_protocol, string $auth_passphrase, string $privacy_protocol, string $privacy_passphrase, array|string $object_id, int $timeout = -1, int $retries = -1): array|false	Fetch all the SNMP objects from an agent
snmpget(string $hostname, string $community, array|string $object_id, int $timeout = -1, int $retries = -1): mixed	Fetch an SNMP object
snmpgetnext(string $hostname, string $community, array|string $object_id, int $timeout = -1, int $retries = -1): mixed	Fetch the SNMP object which follows the given object id
snmprealwalk(string $hostname, string $community, array|string $object_id, int $timeout = -1, int $retries = -1): array|false	Return all objects including their respective object ID within the specified one
snmpset(string $hostname, string $community, array|string $object_id, array|string $type, array|string $value, int $timeout = -1, int $retries = -1): bool	Set the value of an SNMP object
snmpwalk(string $hostname, string $community, array|string $object_id, int $timeout = -1, int $retries = -1): array|false	Fetch all the SNMP objects from an agent
snmpwalkoid(string $hostname, string $community, array|string $object_id, int $timeout = -1, int $retries = -1): array|false	Query for a tree of information about a network entity
>close(): bool	(SNMP) Close SNMP session
SNMP(int $version, string $hostname, string $community, int $timeout = -1, int $retries = -1)	(new) Creates SNMP instance representing session to remote SNMP agent
>get(array|string $objectId, bool $preserveKeys = false): mixed	(SNMP) Fetch an SNMP object
>getErrno(): int	(SNMP) Get last error code
>getError(): string	(SNMP) Get last error message
>getnext(array|string $objectId): mixed	(SNMP) Fetch an SNMP object which follows the given object id
>set(array|string $objectId, array|string $type, array|string $value): bool	(SNMP) Set the value of an SNMP object
>setSecurity(string $securityLevel, string $authProtocol = "", string $authPassphrase = "", string $privacyProtocol = "", string $privacyPassphrase = "", string $contextName = "", string $contextEngineId = ""): bool	(SNMP) Configures security-related SNMPv3 session parameters
>walk(array|string $objectId, bool $suffixAsKey = false, int $maxRepetitions = -1, int $nonRepeaters = -1): array|false	(SNMP) Fetch SNMP object subtree
SNMPException()	(new) Represents an error raised by SNMP
is_soap_fault(mixed $object): bool	Checks if a SOAP call has failed
use_soap_error_handler(bool $enable = true): bool	Set whether to use the SOAP error handler
>__call(string $name, array $args): mixed	(SoapClient) Calls a SOAP function (deprecated)
SoapClient(string|null $wsdl, array $options = [])	(new) SoapClient constructor
>__doRequest(string $request, string $location, string $action, int $version, bool $oneWay = false): string|null	(SoapClient) Performs a SOAP request
>__getCookies(): array	(SoapClient) Get list of cookies
>__getFunctions(): array|null	(SoapClient) Returns list of available SOAP functions
>__getLastRequest(): string|null	(SoapClient) Returns last SOAP request
>__getLastRequestHeaders(): string|null	(SoapClient) Returns the SOAP headers from the last request
>__getLastResponse(): string|null	(SoapClient) Returns last SOAP response
>__getLastResponseHeaders(): string|null	(SoapClient) Returns the SOAP headers from the last response
>__getTypes(): array|null	(SoapClient) Returns a list of SOAP types
>__setCookie(string $name, string|null $value = null): void	(SoapClient) Defines a cookie for SOAP requests
>__setLocation(string|null $location = null): string|null	(SoapClient) Sets the location of the Web service to use
>__setSoapHeaders(SoapHeader|array|null $headers = null): bool	(SoapClient) Sets SOAP headers for subsequent calls
>__soapCall(string $name, array $args, array|null $options = null, SoapHeader|array|null $inputHeaders = null, array $outputHeaders = null): mixed	(SoapClient) Calls a SOAP function
SoapFault(array|string|null $code, string $string, string|null $actor = null, mixed $details = null, string|null $name = null, mixed $headerFault = null)	(new) SoapFault constructor
>__toString(): string	(SoapFault) Obtain a string representation of a SoapFault
SoapHeader(string $namespace, string $name, mixed $data = ?, bool $mustunderstand = ?, string $actor = ?)	(new) SoapHeader constructor
SoapParam(mixed $data, string $name)	(new) SoapParam constructor
>addFunction(array|string|int $functions): void	(SoapServer) Adds one or more functions to handle SOAP requests
>addSoapHeader(SoapHeader $header): void	(SoapServer) Add a SOAP header to the response
SoapServer(string|null $wsdl, array $options = [])	(new) SoapServer constructor
>fault(string $code, string $string, string $actor = "", mixed $details = null, string $name = ""): void	(SoapServer) Issue SoapServer fault indicating an error
>getFunctions(): array	(SoapServer) Returns list of defined functions
>__getLastResponse(): string|null	(SoapServer) Returns last SOAP response
>handle(string|null $request = null): void	(SoapServer) Handles a SOAP request
>setClass(string $class, mixed ...$args): void	(SoapServer) Sets the class which handles SOAP requests
>setObject(object $object): void	(SoapServer) Sets the object which will be used to handle SOAP requests
>setPersistence(int $mode): void	(SoapServer) Sets SoapServer persistence mode
SoapVar(mixed $data, int|null $encoding, string|null $typeName = null, string|null $typeNamespace = null, string|null $nodeName = null, string|null $nodeNamespace = null)	(new) SoapVar constructor
sodium_add(string $string1, string $string2): void	Add large numbers
sodium_base642bin(string $string, int $id, string $ignore = ""): string	Decodes a base64-encoded string into raw binary.
sodium_bin2base64(string $string, int $id): string	Encodes a raw binary string with base64.
sodium_bin2hex(string $string): string	Encode to hexadecimal
sodium_compare(string $string1, string $string2): int	Compare large numbers
sodium_crypto_aead_aegis128l_decrypt(string $ciphertext, string $additional_data, string $nonce, string $key): string|false	Verify then decrypt a message with AEGIS-128L
sodium_crypto_aead_aegis128l_encrypt(string $message, string $additional_data, string $nonce, string $key): string	Encrypt then authenticate a message with AEGIS-128L
sodium_crypto_aead_aegis128l_keygen(): string	Generate a random AEGIS-128L key
sodium_crypto_aead_aegis256_decrypt(string $ciphertext, string $additional_data, string $nonce, string $key): string|false	Verify then decrypt a message with AEGIS-256
sodium_crypto_aead_aegis256_encrypt(string $message, string $additional_data, string $nonce, string $key): string	Encrypt then authenticate a message with AEGIS-256
sodium_crypto_aead_aegis256_keygen(): string	Generate a random AEGIS-256 key
sodium_crypto_aead_aes256gcm_decrypt(string $ciphertext, string $additional_data, string $nonce, string $key): string|false	Verify then decrypt a message with AES-256-GCM
sodium_crypto_aead_aes256gcm_encrypt(string $message, string $additional_data, string $nonce, string $key): string	Encrypt then authenticate with AES-256-GCM
sodium_crypto_aead_aes256gcm_is_available(): bool	Check if hardware supports AES256-GCM
sodium_crypto_aead_aes256gcm_keygen(): string	Generate a random AES-256-GCM key
sodium_crypto_aead_chacha20poly1305_decrypt(string $ciphertext, string $additional_data, string $nonce, string $key): string|false	Verify then decrypt with ChaCha20-Poly1305
sodium_crypto_aead_chacha20poly1305_encrypt(string $message, string $additional_data, string $nonce, string $key): string	Encrypt then authenticate with ChaCha20-Poly1305
sodium_crypto_aead_chacha20poly1305_ietf_decrypt(string $ciphertext, string $additional_data, string $nonce, string $key): string|false	Verify that the ciphertext includes a valid tag
sodium_crypto_aead_chacha20poly1305_ietf_encrypt(string $message, string $additional_data, string $nonce, string $key): string	Encrypt a message
sodium_crypto_aead_chacha20poly1305_ietf_keygen(): string	Generate a random ChaCha20-Poly1305 (IETF) key.
sodium_crypto_aead_chacha20poly1305_keygen(): string	Generate a random ChaCha20-Poly1305 key.
sodium_crypto_aead_xchacha20poly1305_ietf_decrypt(string $ciphertext, string $additional_data, string $nonce, string $key): string|false	(Preferred) Verify then decrypt with XChaCha20-Poly1305
sodium_crypto_aead_xchacha20poly1305_ietf_encrypt(string $message, string $additional_data, string $nonce, string $key): string	(Preferred) Encrypt then authenticate with XChaCha20-Poly1305
sodium_crypto_aead_xchacha20poly1305_ietf_keygen(): string	Generate a random XChaCha20-Poly1305 key.
sodium_crypto_auth_keygen(): string	Generate a random key for sodium_crypto_auth
sodium_crypto_auth_verify(string $mac, string $message, string $key): bool	Verifies that the tag is valid for the message
sodium_crypto_auth(string $message, string $key): string	Compute a tag for the message
sodium_crypto_box_keypair_from_secretkey_and_publickey(string $secret_key, string $public_key): string	Create a unified keypair string from a secret key and public key
sodium_crypto_box_keypair(): string	Randomly generate a secret key and a corresponding public key
sodium_crypto_box_open(string $ciphertext, string $nonce, string $key_pair): string|false	Authenticated public-key decryption
sodium_crypto_box_publickey_from_secretkey(string $secret_key): string	Calculate the public key from a secret key
sodium_crypto_box_publickey(string $key_pair): string	Extract the public key from a crypto_box keypair
sodium_crypto_box_seal_open(string $ciphertext, string $key_pair): string|false	Anonymous public-key decryption
sodium_crypto_box_seal(string $message, string $public_key): string	Anonymous public-key encryption
sodium_crypto_box_secretkey(string $key_pair): string	Extracts the secret key from a crypto_box keypair
sodium_crypto_box_seed_keypair(string $seed): string	Deterministically derive the key pair from a single key
sodium_crypto_box(string $message, string $nonce, string $key_pair): string	Authenticated public-key encryption
sodium_crypto_core_ristretto255_add(string $p, string $q): string	Adds an element
sodium_crypto_core_ristretto255_from_hash(string $s): string	Maps a vector
sodium_crypto_core_ristretto255_is_valid_point(string $s): bool	Determines if a point on the ristretto255 curve
sodium_crypto_core_ristretto255_random(): string	Generates a random key
sodium_crypto_core_ristretto255_scalar_add(string $x, string $y): string	Adds a scalar value
sodium_crypto_core_ristretto255_scalar_complement(string $s): string	The sodium_crypto_core_ristretto255_scalar_complement purpose
sodium_crypto_core_ristretto255_scalar_invert(string $s): string	Inverts a scalar value
sodium_crypto_core_ristretto255_scalar_mul(string $x, string $y): string	Multiplies a scalar value
sodium_crypto_core_ristretto255_scalar_negate(string $s): string	Negates a scalar value
sodium_crypto_core_ristretto255_scalar_random(): string	Generates a random key
sodium_crypto_core_ristretto255_scalar_reduce(string $s): string	Reduces a scalar value
sodium_crypto_core_ristretto255_scalar_sub(string $x, string $y): string	Subtracts a scalar value
sodium_crypto_core_ristretto255_sub(string $p, string $q): string	Subtracts an element
sodium_crypto_generichash_final(string $state, int $length = SODIUM_CRYPTO_GENERICHASH_BYTES): string	Complete the hash
sodium_crypto_generichash_init(string $key = "", int $length = SODIUM_CRYPTO_GENERICHASH_BYTES): string	Initialize a hash for streaming
sodium_crypto_generichash_keygen(): string	Generate a random generichash key
sodium_crypto_generichash_update(string $state, string $message): true	Add message to a hash
sodium_crypto_generichash(string $message, string $key = "", int $length = SODIUM_CRYPTO_GENERICHASH_BYTES): string	Get a hash of the message
sodium_crypto_kdf_derive_from_key(int $subkey_length, int $subkey_id, string $context, string $key): string	Derive a subkey
sodium_crypto_kdf_keygen(): string	Generate a random root key for the KDF interface
sodium_crypto_kx_client_session_keys(string $client_key_pair, string $server_key): array	Calculate the client-side session keys.
sodium_crypto_kx_keypair(): string	Creates a new sodium keypair
sodium_crypto_kx_publickey(string $key_pair): string	Extract the public key from a crypto_kx keypair
sodium_crypto_kx_secretkey(string $key_pair): string	Extract the secret key from a crypto_kx keypair.
sodium_crypto_kx_seed_keypair(string $seed): string	Description
sodium_crypto_kx_server_session_keys(string $server_key_pair, string $client_key): array	Calculate the server-side session keys.
sodium_crypto_pwhash_scryptsalsa208sha256_str_verify(string $hash, string $password): bool	Verify that the password is a valid password verification string
sodium_crypto_pwhash_scryptsalsa208sha256_str(string $password, int $opslimit, int $memlimit): string	Get an ASCII encoded hash
sodium_crypto_pwhash_scryptsalsa208sha256(int $length, string $password, string $salt, int $opslimit, int $memlimit): string	Derives a key from a password, using scrypt
sodium_crypto_pwhash_str_needs_rehash(string $password, int $opslimit, int $memlimit): bool	Determine whether or not to rehash a password
sodium_crypto_pwhash_str_verify(string $hash, string $password): bool	Verifies that a password matches a hash
sodium_crypto_pwhash_str(string $password, int $opslimit, int $memlimit): string	Get an ASCII-encoded hash
sodium_crypto_pwhash(int $length, string $password, string $salt, int $opslimit, int $memlimit, int $algo = SODIUM_CRYPTO_PWHASH_ALG_DEFAULT): string	Derive a key from a password, using Argon2
sodium_crypto_scalarmult_base()	Alias of sodium_crypto_box_publickey_from_secretkey
sodium_crypto_scalarmult_ristretto255_base(string $n): string	Calculates the public key from a secret key
sodium_crypto_scalarmult_ristretto255(string $n, string $p): string	Computes a shared secret
sodium_crypto_scalarmult(string $n, string $p): string	Compute a shared secret given a user's secret key and another user's public key
sodium_crypto_secretbox_keygen(): string	Generate random key for sodium_crypto_secretbox
sodium_crypto_secretbox_open(string $ciphertext, string $nonce, string $key): string|false	Authenticated shared-key decryption
sodium_crypto_secretbox(string $message, string $nonce, string $key): string	Authenticated shared-key encryption
sodium_crypto_secretstream_xchacha20poly1305_init_pull(string $header, string $key): string	Initialize a secretstream context for decryption
sodium_crypto_secretstream_xchacha20poly1305_init_push(string $key): array	Initialize a secretstream context for encryption
sodium_crypto_secretstream_xchacha20poly1305_keygen(): string	Generate a random secretstream key.
sodium_crypto_secretstream_xchacha20poly1305_pull(string $state, string $ciphertext, string $additional_data = ""): array|false	Decrypt a chunk of data from an encrypted stream
sodium_crypto_secretstream_xchacha20poly1305_push(string $state, string $message, string $additional_data = "", int $tag = SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_TAG_MESSAGE): string	Encrypt a chunk of data so that it can safely be decrypted in a streaming API
sodium_crypto_secretstream_xchacha20poly1305_rekey(string $state): void	Explicitly rotate the key in the secretstream state
sodium_crypto_shorthash_keygen(): string	Get random bytes for key
sodium_crypto_shorthash(string $message, string $key): string	Compute a short hash of a message and key
sodium_crypto_sign_detached(string $message, string $secret_key): string	Sign the message
sodium_crypto_sign_ed25519_pk_to_curve25519(string $public_key): string	Convert an Ed25519 public key to a Curve25519 public key
sodium_crypto_sign_ed25519_sk_to_curve25519(string $secret_key): string	Convert an Ed25519 secret key to a Curve25519 secret key
sodium_crypto_sign_keypair_from_secretkey_and_publickey(string $secret_key, string $public_key): string	Join a secret key and public key together
sodium_crypto_sign_keypair(): string	Randomly generate a secret key and a corresponding public key
sodium_crypto_sign_open(string $signed_message, string $public_key): string|false	Check that the signed message has a valid signature
sodium_crypto_sign_publickey_from_secretkey(string $secret_key): string	Extract the Ed25519 public key from the secret key
sodium_crypto_sign_publickey(string $key_pair): string	Extract the Ed25519 public key from a keypair
sodium_crypto_sign_secretkey(string $key_pair): string	Extract the Ed25519 secret key from a keypair
sodium_crypto_sign_seed_keypair(string $seed): string	Deterministically derive the key pair from a single key
sodium_crypto_sign_verify_detached(string $signature, string $message, string $public_key): bool	Verify signature for the message
sodium_crypto_sign(string $message, string $secret_key): string	Sign a message
sodium_crypto_stream_keygen(): string	Generate a random sodium_crypto_stream key.
sodium_crypto_stream_xchacha20_keygen(): string	Returns a secure random key
sodium_crypto_stream_xchacha20_xor_ic(string $message, string $nonce, int $counter, string $key): string	Encrypts a message using a nonce and a secret key (no authentication)
sodium_crypto_stream_xchacha20_xor(string $message, string $nonce, string $key): string	Encrypts a message using a nonce and a secret key (no authentication)
sodium_crypto_stream_xchacha20(int $length, string $nonce, string $key): string	Expands the key and nonce into a keystream of pseudorandom bytes
sodium_crypto_stream_xor(string $message, string $nonce, string $key): string	Encrypt a message without authentication
sodium_crypto_stream(int $length, string $nonce, string $key): string	Generate a deterministic sequence of bytes from a seed
sodium_hex2bin(string $string, string $ignore = ""): string	Decodes a hexadecimally encoded binary string
sodium_increment(string $string): void	Increment large number
sodium_memcmp(string $string1, string $string2): int	Test for equality in constant-time
sodium_memzero(string $string): void	Overwrite a string with NUL characters
sodium_pad(string $string, int $block_size): string	Add padding data
sodium_unpad(string $string, int $block_size): string	Remove padding data
SodiumException()	(new) Exceptions thrown by the sodium functions
ob_tidyhandler(string $input, int $mode = ?): string	ob_start callback function to repair the buffer
tidy_access_count(tidy $tidy): int	Returns the Number of Tidy accessibility warnings encountered for specified document
tidy_config_count(tidy $tidy): int	Returns the Number of Tidy configuration errors encountered for specified document
tidy_error_count(tidy $tidy): int	Returns the Number of Tidy errors encountered for specified document
tidy_get_output(tidy $tidy): string	Return a string representing the parsed tidy markup
tidy_warning_count(tidy $tidy): int	Returns the Number of Tidy warnings encountered for specified document
>body(): tidyNode|null	(tidy) Returns a tidyNode object starting from the ltbodygt tag of the tidy parse tree
tidy_get_body(tidy $tidy): tidyNode|null	Returns a tidyNode object starting from the ltbodygt tag of the tidy parse tree
>cleanRepair(): bool	(tidy) Execute configured cleanup and repair operations on parsed markup
tidy_clean_repair(tidy $tidy): bool	Execute configured cleanup and repair operations on parsed markup
tidy(string|null $filename = null, array|string|null $config = null, string|null $encoding = null, bool $useIncludePath = false)	(new) Constructs a new tidy object
>diagnose(): bool	(tidy) Run configured diagnostics on parsed and repaired markup
tidy_diagnose(tidy $tidy): bool	Run configured diagnostics on parsed and repaired markup
tidy_get_error_buffer(tidy $tidy): string|false	Return warnings and errors which occurred parsing the specified document
>getConfig(): array	(tidy) Get current Tidy configuration
tidy_get_config(tidy $tidy): array	Get current Tidy configuration
>getHtmlVer(): int	(tidy) Get the Detected HTML version for the specified document
tidy_get_html_ver(tidy $tidy): int	Get the Detected HTML version for the specified document
>getOpt(string $option): string|int|bool	(tidy) Returns the value of the specified configuration option for the tidy document
tidy_getopt(tidy $tidy, string $option): string|int|bool	Returns the value of the specified configuration option for the tidy document
>getOptDoc(string $option): string|false	(tidy) Returns the documentation for the given option name
tidy_get_opt_doc(tidy $tidy, string $option): string|false	Returns the documentation for the given option name
>getRelease(): string	(tidy) Get release date (version) for Tidy library
tidy_get_release(): string	Get release date (version) for Tidy library
>getStatus(): int	(tidy) Get status of specified document
tidy_get_status(tidy $tidy): int	Get status of specified document
>head(): tidyNode|null	(tidy) Returns a tidyNode object starting from the ltheadgt tag of the tidy parse tree
tidy_get_head(tidy $tidy): tidyNode|null	Returns a tidyNode object starting from the ltheadgt tag of the tidy parse tree
>html(): tidyNode|null	(tidy) Returns a tidyNode object starting from the lthtmlgt tag of the tidy parse tree
tidy_get_html(tidy $tidy): tidyNode|null	Returns a tidyNode object starting from the lthtmlgt tag of the tidy parse tree
>isXhtml(): bool	(tidy) Indicates if the document is a XHTML document
tidy_is_xhtml(tidy $tidy): bool	Indicates if the document is a XHTML document
>isXml(): bool	(tidy) Indicates if the document is a generic (non HTML/XHTML) XML document
tidy_is_xml(tidy $tidy): bool	Indicates if the document is a generic (non HTML/XHTML) XML document
>parseFile(string $filename, array|string|null $config = null, string|null $encoding = null, bool $useIncludePath = false): bool	(tidy) Parse markup in file or URI
tidy_parse_file(string $filename, array|string|null $config = null, string|null $encoding = null, bool $useIncludePath = false): tidy|false	Parse markup in file or URI
>parseString(string $string, array|string|null $config = null, string|null $encoding = null): bool	(tidy) Parse a document stored in a string
tidy_parse_string(string $string, array|string|null $config = null, string|null $encoding = null): tidy|false	Parse a document stored in a string
tidy::repairFile(string $filename, array|string|null $config = null, string|null $encoding = null, bool $useIncludePath = false): string|false	Repair a file and return it as a string
tidy_repair_file(string $filename, array|string|null $config = null, string|null $encoding = null, bool $useIncludePath = false): string|false	Repair a file and return it as a string
tidy::repairString(string $string, array|string|null $config = null, string|null $encoding = null): string|false	Repair a string using an optionally provided configuration file
tidy_repair_string(string $string, array|string|null $config = null, string|null $encoding = null): string|false	Repair a string using an optionally provided configuration file
>root(): tidyNode|null	(tidy) Returns a tidyNode object representing the root of the tidy parse tree
tidy_get_root(tidy $tidy): tidyNode|null	Returns a tidyNode object representing the root of the tidy parse tree
tidyNode()	(new) Private constructor to disallow direct instantiation
>getNextSibling(): tidyNode|null	(tidyNode) Returns the next sibling node of the current node
>getParent(): tidyNode|null	(tidyNode) Returns the parent node of the current node
>getPreviousSibling(): tidyNode|null	(tidyNode) Returns the previous sibling node of the current node
>hasChildren(): bool	(tidyNode) Checks if a node has children
>hasSiblings(): bool	(tidyNode) Checks if a node has siblings
>isAsp(): bool	(tidyNode) Checks if this node is ASP
>isComment(): bool	(tidyNode) Checks if a node represents a comment
>isHtml(): bool	(tidyNode) Checks if a node is an element node
>isJste(): bool	(tidyNode) Checks if this node is JSTE
>isPhp(): bool	(tidyNode) Checks if a node is PHP
>isText(): bool	(tidyNode) Checks if a node represents text (no markup)
odbc_autocommit(Odbc\Connection $odbc, bool|null $enable = null): int|bool	Toggle autocommit behaviour
odbc_binmode(Odbc\Result $statement, int $mode): true	Handling of binary column data
odbc_close_all(): void	Close all ODBC connections
odbc_close(Odbc\Connection $odbc): void	Close an ODBC connection
odbc_columnprivileges(Odbc\Connection $odbc, string|null $catalog, string $schema, string $table, string $column): Odbc\Result|false	Lists columns and associated privileges for the given table
odbc_columns(Odbc\Connection $odbc, string|null $catalog = null, string|null $schema = null, string|null $table = null, string|null $column = null): Odbc\Result|false	Lists the column names in specified tables
odbc_commit(Odbc\Connection $odbc): bool	Commit an ODBC transaction
odbc_connect(string $dsn, string|null $user = null, string|null $password = null, int $cursor_option = SQL_CUR_USE_DRIVER): Odbc\Connection|false	Connect to a datasource
odbc_connection_string_is_quoted(string $str): bool	Determines if an ODBC connection string value is quoted
odbc_connection_string_quote(string $str): string	Quotes an ODBC connection string value
odbc_connection_string_should_quote(string $str): bool	Determines if an ODBC connection string value should be quoted
odbc_cursor(Odbc\Result $statement): string|false	Get cursorname
odbc_data_source(Odbc\Connection $odbc, int $fetch_type): array|null|false	Returns information about available DSNs
odbc_do()	Alias of odbc_exec
odbc_error(Odbc\Connection|null $odbc = null): string	Get the last error code
odbc_errormsg(Odbc\Connection|null $odbc = null): string	Get the last error message
odbc_exec(Odbc\Connection $odbc, string $query): Odbc\Result|false	Directly execute an SQL statement
odbc_execute(Odbc\Result $statement, array $params = []): bool	Execute a prepared statement
odbc_fetch_array(Odbc\Result $statement, int|null $row = null): array|false	Fetch a result row as an associative array
odbc_fetch_into(Odbc\Result $statement, array $array, int|null $row = null): int|false	Fetch one result row into array
odbc_fetch_object(Odbc\Result $statement, int|null $row = null): stdClass|false	Fetch a result row as an object
odbc_fetch_row(Odbc\Result $statement, int|null $row = null): bool	Fetch a row
odbc_field_len(Odbc\Result $statement, int $field): int|false	Get the length (precision) of a field
odbc_field_name(Odbc\Result $statement, int $field): string|false	Get the columnname
odbc_field_num(Odbc\Result $statement, string $field): int|false	Return column number
odbc_field_precision()	Alias of odbc_field_len
odbc_field_scale(Odbc\Result $statement, int $field): int|false	Get the scale of a field
odbc_field_type(Odbc\Result $statement, int $field): string|false	Datatype of a field
odbc_foreignkeys(Odbc\Connection $odbc, string|null $pk_catalog, string $pk_schema, string $pk_table, string $fk_catalog, string $fk_schema, string $fk_table): Odbc\Result|false	Retrieves a list of foreign keys
odbc_free_result(Odbc\Result $statement): true	Free objects associated with a result
odbc_gettypeinfo(Odbc\Connection $odbc, int $data_type = ?): Odbc\Result|false	Retrieves information about data types supported by the data source
odbc_longreadlen(Odbc\Result $statement, int $length): true	Handling of LONG columns
odbc_next_result(Odbc\Result $statement): bool	Checks if multiple results are available
odbc_num_fields(Odbc\Result $statement): int	Number of columns in a result
odbc_num_rows(Odbc\Result $statement): int	Number of rows in a result
odbc_pconnect(string $dsn, string|null $user = null, string|null $password = null, int $cursor_option = SQL_CUR_USE_DRIVER): Odbc\Connection|false	Open a persistent database connection
odbc_prepare(Odbc\Connection $odbc, string $query): Odbc\Result|false	Prepares a statement for execution
odbc_primarykeys(Odbc\Connection $odbc, string|null $catalog, string $schema, string $table): Odbc\Result|false	Gets the primary keys for a table
odbc_procedurecolumns(Odbc\Connection $odbc, string|null $catalog = null, string|null $schema = null, string|null $procedure = null, string|null $column = null): Odbc\Result|false	Retrieve information about parameters to procedures
odbc_procedures(Odbc\Connection $odbc, string|null $catalog = null, string|null $schema = null, string|null $procedure = null): Odbc\Result|false	Get the list of procedures stored in a specific data source
odbc_result_all(Odbc\Result $statement, string $format = ""): int|false	Print result as HTML table
odbc_result(Odbc\Result $statement, string|int $field): string|bool|null	Get result data
odbc_rollback(Odbc\Connection $odbc): bool	Rollback a transaction
odbc_setoption(Odbc\Connection|Odbc\Result $odbc, int $which, int $option, int $value): bool	Adjust ODBC settings
odbc_specialcolumns(Odbc\Connection $odbc, int $type, string|null $catalog, string $schema, string $table, int $scope, int $nullable): Odbc\Result|false	Retrieves special columns
odbc_statistics(Odbc\Connection $odbc, string|null $catalog, string $schema, string $table, int $unique, int $accuracy): Odbc\Result|false	Retrieve statistics about a table
odbc_tableprivileges(Odbc\Connection $odbc, string|null $catalog, string $schema, string $table): Odbc\Result|false	Lists tables and the privileges associated with each table
odbc_tables(Odbc\Connection $odbc, string|null $catalog = null, string|null $schema = null, string|null $table = null, string|null $types = null): Odbc\Result|false	Get the list of table names stored in a specific data source
xml_error_string(int $error_code): string|null	Get XML parser error string
xml_get_current_byte_index(XMLParser $parser): int	Get current byte index for an XML parser
xml_get_current_column_number(XMLParser $parser): int	Get current column number for an XML parser
xml_get_current_line_number(XMLParser $parser): int	Get current line number for an XML parser
xml_get_error_code(XMLParser $parser): int	Get XML parser error code
xml_parse_into_struct(XMLParser $parser, string $data, array $values, array $index = null): int|false	Parse XML data into an array structure
xml_parse(XMLParser $parser, string $data, bool $is_final = false): int	Start parsing an XML document
xml_parser_create_ns(string|null $encoding = null, string $separator = ":"): XMLParser	Create an XML parser with namespace support
xml_parser_create(string|null $encoding = null): XMLParser	Create an XML parser
xml_parser_free(XMLParser $parser): bool	Free an XML parser
xml_parser_get_option(XMLParser $parser, int $option): string|int|bool	Get options from an XML parser
xml_parser_set_option(XMLParser $parser, int $option, string|int|bool $value): bool	Set options in an XML parser
xml_set_character_data_handler(XMLParser $parser, callable|string|null $handler): true	Set up character data handler
xml_set_default_handler(XMLParser $parser, callable|string|null $handler): true	Set up default handler
xml_set_element_handler(XMLParser $parser, callable|string|null $start_handler, callable|string|null $end_handler): true	Set up start and end element handlers
xml_set_end_namespace_decl_handler(XMLParser $parser, callable|string|null $handler): true	Set up end namespace declaration handler
xml_set_external_entity_ref_handler(XMLParser $parser, callable|string|null $handler): true	Set up external entity reference handler
xml_set_notation_decl_handler(XMLParser $parser, callable|string|null $handler): true	Set up notation declaration handler
xml_set_object(XMLParser $parser, object $object): true	Use XML Parser within an object
xml_set_processing_instruction_handler(XMLParser $parser, callable|string|null $handler): true	Set up processing instruction (PI) handler
xml_set_start_namespace_decl_handler(XMLParser $parser, callable|string|null $handler): true	Set up start namespace declaration handler
xml_set_unparsed_entity_decl_handler(XMLParser $parser, callable|string|null $handler): true	Set up unparsed entity declaration handler
XMLParser()	(new) A fully opaque class which replaces xml resources as of PHP 8
>close(): true	(XMLReader) Close the XMLReader input
>expand(DOMNode|null $baseNode = null): DOMNode|false	(XMLReader) Returns a copy of the current node as a DOM object
XMLReader::fromStream(resource $stream, string|null $encoding = null, int $flags = ?, string|null $documentUri = null): static	Creates an XMLReader from a stream to read from
XMLReader::fromString(string $source, string|null $encoding = null, int $flags = ?): static	Creates an XMLReader from an XML string
XMLReader::fromUri(string $uri, string|null $encoding = null, int $flags = ?): static	Creates an XMLReader from a URI to read from
>getAttribute(string $name): string|null	(XMLReader) Get the value of a named attribute
>getAttributeNo(int $index): string|null	(XMLReader) Get the value of an attribute by index
>getAttributeNs(string $name, string $namespace): string|null	(XMLReader) Get the value of an attribute by localname and URI
>getParserProperty(int $property): bool	(XMLReader) Indicates if specified property has been set
>isValid(): bool	(XMLReader) Indicates if the parsed document is valid
>lookupNamespace(string $prefix): string|null	(XMLReader) Lookup namespace for a prefix
>moveToAttribute(string $name): bool	(XMLReader) Move cursor to a named attribute
>moveToAttributeNo(int $index): bool	(XMLReader) Move cursor to an attribute by index
>moveToAttributeNs(string $name, string $namespace): bool	(XMLReader) Move cursor to a named attribute
>moveToElement(): bool	(XMLReader) Position cursor on the parent Element of current Attribute
>moveToFirstAttribute(): bool	(XMLReader) Position cursor on the first Attribute
>moveToNextAttribute(): bool	(XMLReader) Position cursor on the next Attribute
>next(string|null $name = null): bool	(XMLReader) Move cursor to next node skipping all subtrees
XMLReader::open(string $uri, string|null $encoding = null, int $flags = ?): XMLReader	Set the URI containing the XML to parse
>open(string $uri, string|null $encoding = null, int $flags = ?): bool	(XMLReader) Set the URI containing the XML to parse
>read(): bool	(XMLReader) Move to next node in document
>readInnerXml(): string	(XMLReader) Retrieve XML from current node
>readOuterXml(): string	(XMLReader) Retrieve XML from current node, including itself
>readString(): string	(XMLReader) Reads the contents of the current node as a string
>setParserProperty(int $property, bool $value): bool	(XMLReader) Set parser options
>setRelaxNGSchema(string|null $filename): bool	(XMLReader) Set the filename or URI for a RelaxNG Schema
>setRelaxNGSchemaSource(string|null $source): bool	(XMLReader) Set the data containing a RelaxNG Schema
>setSchema(string|null $filename): bool	(XMLReader) Validate document against XSD
XMLReader::XML(string $source, string|null $encoding = null, int $flags = ?): XMLReader	Set the data containing the XML to parse
>XML(string $source, string|null $encoding = null, int $flags = ?): bool	(XMLReader) Set the data containing the XML to parse
XMLReader()	(new) The XMLReader extension is an XML Pull parser
>endAttribute(): bool	(XMLWriter) End attribute
xmlwriter_end_attribute(XMLWriter $writer): bool	End attribute
>endCdata(): bool	(XMLWriter) End current CDATA
xmlwriter_end_cdata(XMLWriter $writer): bool	End current CDATA
>endComment(): bool	(XMLWriter) Create end comment
xmlwriter_end_comment(XMLWriter $writer): bool	Create end comment
>endDocument(): bool	(XMLWriter) End current document
xmlwriter_end_document(XMLWriter $writer): bool	End current document
>endDtd(): bool	(XMLWriter) End current DTD
xmlwriter_end_dtd(XMLWriter $writer): bool	End current DTD
>endDtdAttlist(): bool	(XMLWriter) End current DTD AttList
xmlwriter_end_dtd_attlist(XMLWriter $writer): bool	End current DTD AttList
>endDtdElement(): bool	(XMLWriter) End current DTD element
xmlwriter_end_dtd_element(XMLWriter $writer): bool	End current DTD element
>endDtdEntity(): bool	(XMLWriter) End current DTD Entity
xmlwriter_end_dtd_entity(XMLWriter $writer): bool	End current DTD Entity
>endElement(): bool	(XMLWriter) End current element
xmlwriter_end_element(XMLWriter $writer): bool	End current element
>endPi(): bool	(XMLWriter) End current PI
xmlwriter_end_pi(XMLWriter $writer): bool	End current PI
>flush(bool $empty = true): string|int	(XMLWriter) Flush current buffer
xmlwriter_flush(XMLWriter $writer, bool $empty = true): string|int	Flush current buffer
>fullEndElement(): bool	(XMLWriter) End current element
xmlwriter_full_end_element(XMLWriter $writer): bool	End current element
>openMemory(): bool	(XMLWriter) Create new xmlwriter using memory for string output
xmlwriter_open_memory(): XMLWriter|false	Create new xmlwriter using memory for string output
>openUri(string $uri): bool	(XMLWriter) Create new xmlwriter using source uri for output
xmlwriter_open_uri(string $uri): XMLWriter|false	Create new xmlwriter using source uri for output
>outputMemory(bool $flush = true): string	(XMLWriter) Returns current buffer
xmlwriter_output_memory(XMLWriter $writer, bool $flush = true): string	Returns current buffer
>setIndent(bool $enable): bool	(XMLWriter) Toggle indentation on/off
xmlwriter_set_indent(XMLWriter $writer, bool $enable): bool	Toggle indentation on/off
>setIndentString(string $indentation): bool	(XMLWriter) Set string used for indenting
xmlwriter_set_indent_string(XMLWriter $writer, string $indentation): bool	Set string used for indenting
>startAttribute(string $name): bool	(XMLWriter) Create start attribute
xmlwriter_start_attribute(XMLWriter $writer, string $name): bool	Create start attribute
>startAttributeNs(string|null $prefix, string $name, string|null $namespace): bool	(XMLWriter) Create start namespaced attribute
xmlwriter_start_attribute_ns(XMLWriter $writer, string|null $prefix, string $name, string|null $namespace): bool	Create start namespaced attribute
>startCdata(): bool	(XMLWriter) Create start CDATA tag
xmlwriter_start_cdata(XMLWriter $writer): bool	Create start CDATA tag
>startComment(): bool	(XMLWriter) Create start comment
xmlwriter_start_comment(XMLWriter $writer): bool	Create start comment
>startDocument(string|null $version = "1.0", string|null $encoding = null, string|null $standalone = null): bool	(XMLWriter) Create document tag
xmlwriter_start_document(XMLWriter $writer, string|null $version = "1.0", string|null $encoding = null, string|null $standalone = null): bool	Create document tag
>startDtd(string $qualifiedName, string|null $publicId = null, string|null $systemId = null): bool	(XMLWriter) Create start DTD tag
xmlwriter_start_dtd(XMLWriter $writer, string $qualifiedName, string|null $publicId = null, string|null $systemId = null): bool	Create start DTD tag
>startDtdAttlist(string $name): bool	(XMLWriter) Create start DTD AttList
xmlwriter_start_dtd_attlist(XMLWriter $writer, string $name): bool	Create start DTD AttList
>startDtdElement(string $qualifiedName): bool	(XMLWriter) Create start DTD element
xmlwriter_start_dtd_element(XMLWriter $writer, string $qualifiedName): bool	Create start DTD element
>startDtdEntity(string $name, bool $isParam): bool	(XMLWriter) Create start DTD Entity
xmlwriter_start_dtd_entity(XMLWriter $writer, string $name, bool $isParam): bool	Create start DTD Entity
>startElement(string $name): bool	(XMLWriter) Create start element tag
xmlwriter_start_element(XMLWriter $writer, string $name): bool	Create start element tag
>startElementNs(string|null $prefix, string $name, string|null $namespace): bool	(XMLWriter) Create start namespaced element tag
xmlwriter_start_element_ns(XMLWriter $writer, string|null $prefix, string $name, string|null $namespace): bool	Create start namespaced element tag
>startPi(string $target): bool	(XMLWriter) Create start PI tag
xmlwriter_start_pi(XMLWriter $writer, string $target): bool	Create start PI tag
>text(string $content): bool	(XMLWriter) Write text
xmlwriter_text(XMLWriter $writer, string $content): bool	Write text
XMLWriter::toMemory(): static	Create new XMLWriter using memory for string output
XMLWriter::toStream(resource $stream): static	Create new XMLWriter using a stream for output
XMLWriter::toUri(string $uri): static	Create new XMLWriter using a URI for output
>writeAttribute(string $name, string $value): bool	(XMLWriter) Write full attribute
xmlwriter_write_attribute(XMLWriter $writer, string $name, string $value): bool	Write full attribute
>writeAttributeNs(string|null $prefix, string $name, string|null $namespace, string $value): bool	(XMLWriter) Write full namespaced attribute
xmlwriter_write_attribute_ns(XMLWriter $writer, string|null $prefix, string $name, string|null $namespace, string $value): bool	Write full namespaced attribute
>writeCdata(string $content): bool	(XMLWriter) Write full CDATA tag
xmlwriter_write_cdata(XMLWriter $writer, string $content): bool	Write full CDATA tag
>writeComment(string $content): bool	(XMLWriter) Write full comment tag
xmlwriter_write_comment(XMLWriter $writer, string $content): bool	Write full comment tag
>writeDtd(string $name, string|null $publicId = null, string|null $systemId = null, string|null $content = null): bool	(XMLWriter) Write full DTD tag
xmlwriter_write_dtd(XMLWriter $writer, string $name, string|null $publicId = null, string|null $systemId = null, string|null $content = null): bool	Write full DTD tag
>writeDtdAttlist(string $name, string $content): bool	(XMLWriter) Write full DTD AttList tag
xmlwriter_write_dtd_attlist(XMLWriter $writer, string $name, string $content): bool	Write full DTD AttList tag
>writeDtdElement(string $name, string $content): bool	(XMLWriter) Write full DTD element tag
xmlwriter_write_dtd_element(XMLWriter $writer, string $name, string $content): bool	Write full DTD element tag
>writeDtdEntity(string $name, string $content, bool $isParam = false, string|null $publicId = null, string|null $systemId = null, string|null $notationData = null): bool	(XMLWriter) Write full DTD Entity tag
xmlwriter_write_dtd_entity(XMLWriter $writer, string $name, string $content, bool $isParam = false, string|null $publicId = null, string|null $systemId = null, string|null $notationData = null): bool	Write full DTD Entity tag
>writeElement(string $name, string|null $content = null): bool	(XMLWriter) Write full element tag
xmlwriter_write_element(XMLWriter $writer, string $name, string|null $content = null): bool	Write full element tag
>writeElementNs(string|null $prefix, string $name, string|null $namespace, string|null $content = null): bool	(XMLWriter) Write full namespaced element tag
xmlwriter_write_element_ns(XMLWriter $writer, string|null $prefix, string $name, string|null $namespace, string|null $content = null): bool	Write full namespaced element tag
>writePi(string $target, string $content): bool	(XMLWriter) Writes a PI
xmlwriter_write_pi(XMLWriter $writer, string $target, string $content): bool	Writes a PI
>writeRaw(string $content): bool	(XMLWriter) Write a raw XML text
xmlwriter_write_raw(XMLWriter $writer, string $content): bool	Write a raw XML text
XMLWriter()	(new) 
XSLTProcessor()	(new) Creates a new XSLTProcessor object
>getParameter(string $namespace, string $name): string|false	(XSLTProcessor) Get value of a parameter
>getSecurityPrefs(): int	(XSLTProcessor) Get security preferences
>hasExsltSupport(): bool	(XSLTProcessor) Determine if PHP has EXSLT support
>importStylesheet(object $stylesheet): bool	(XSLTProcessor) Import stylesheet
>registerPHPFunctionNS(string $namespaceURI, string $name, callable $callable): void	(XSLTProcessor) Register a PHP function as namespaced XSLT function
>registerPHPFunctions(array|string|null $functions = null): void	(XSLTProcessor) Enables the ability to use PHP functions as XSLT functions
>removeParameter(string $namespace, string $name): bool	(XSLTProcessor) Remove parameter
>setParameter(string $namespace, string $name, string $value): bool	(XSLTProcessor) Set value for a parameter
>setParameter(string $namespace, array $options): bool	(XSLTProcessor) Set value for a parameter
>setProfiling(string|null $filename): true	(XSLTProcessor) Sets profiling output file
>setSecurityPrefs(int $preferences): int	(XSLTProcessor) Set security preferences
>transformToDoc(object $document, string|null $returnClass = null): object|false	(XSLTProcessor) Transform to a document
>transformToUri(object $document, string $uri): int	(XSLTProcessor) Transform to URI
>transformToXml(object $document): string|null|false	(XSLTProcessor) Transform to XML
zip_close(resource $zip): void	Close a ZIP file archive
zip_entry_close(resource $zip_entry): bool	Close a directory entry
zip_entry_compressedsize(resource $zip_entry): int|false	Retrieve the compressed size of a directory entry
zip_entry_compressionmethod(resource $zip_entry): string|false	Retrieve the compression method of a directory entry
zip_entry_filesize(resource $zip_entry): int|false	Retrieve the actual file size of a directory entry
zip_entry_name(resource $zip_entry): string|false	Retrieve the name of a directory entry
zip_entry_open(resource $zip_dp, resource $zip_entry, string $mode = "rb"): bool	Open a directory entry for reading
zip_entry_read(resource $zip_entry, int $len = 1024): string|false	Read from an open directory entry
zip_open(string $filename): resource|int|false	Open a ZIP file archive
zip_read(resource $zip): resource|false	Read next entry in a ZIP file archive
>addEmptyDir(string $dirname, int $flags = ?): bool	(ZipArchive) Add a new directory
>addFile(string $filepath, string $entryname = "", int $start = ?, int $length = ZipArchive::LENGTH_TO_END, int $flags = ZipArchive::FL_OVERWRITE): bool	(ZipArchive) Adds a file to a ZIP archive from the given path
>addFromString(string $name, string $content, int $flags = ZipArchive::FL_OVERWRITE): bool	(ZipArchive) Add a file to a ZIP archive using its contents
>addGlob(string $pattern, int $flags = ?, array $options = []): array|false	(ZipArchive) Add files from a directory by glob pattern
>addPattern(string $pattern, string $path = ".", array $options = []): array|false	(ZipArchive) Add files from a directory by PCRE pattern
>clearError(): void	(ZipArchive) Clear the status error message, system and/or zip messages
>close(): bool	(ZipArchive) Close the active archive (opened or newly created)
>count(): int	(ZipArchive) Counts the number of files in the archive
>deleteIndex(int $index): bool	(ZipArchive) Delete an entry in the archive using its index
>deleteName(string $name): bool	(ZipArchive) Delete an entry in the archive using its name
>extractTo(string $pathto, array|string|null $files = null): bool	(ZipArchive) Extract the archive contents
>getArchiveComment(int $flags = ?): string|false	(ZipArchive) Returns the Zip archive comment
>getArchiveFlag(int $flag, int $flags = ?): int	(ZipArchive) Returns the value of a Zip archive global flag
>getCommentIndex(int $index, int $flags = ?): string|false	(ZipArchive) Returns the comment of an entry using the entry index
>getCommentName(string $name, int $flags = ?): string|false	(ZipArchive) Returns the comment of an entry using the entry name
>getExternalAttributesIndex(int $index, int $opsys, int $attr, int $flags = ?): bool	(ZipArchive) Retrieve the external attributes of an entry defined by its index
>getExternalAttributesName(string $name, int $opsys, int $attr, int $flags = ?): bool	(ZipArchive) Retrieve the external attributes of an entry defined by its name
>getFromIndex(int $index, int $len = ?, int $flags = ?): string|false	(ZipArchive) Returns the entry contents using its index
>getFromName(string $name, int $len = ?, int $flags = ?): string|false	(ZipArchive) Returns the entry contents using its name
>getNameIndex(int $index, int $flags = ?): string|false	(ZipArchive) Returns the name of an entry using its index
>getStatusString(): string	(ZipArchive) Returns the status error message, system and/or zip messages
>getStream(string $name): resource|false	(ZipArchive) Get a file handler to the entry defined by its name (read only)
>getStreamIndex(int $index, int $flags = ?): resource|false	(ZipArchive) Get a file handler to the entry defined by its index (read only)
>getStreamName(string $name, int $flags = ?): resource|false	(ZipArchive) Get a file handler to the entry defined by its name (read only)
ZipArchive::isCompressionMethodSupported(int $method, bool $enc = true): bool	Check if a compression method is supported by libzip
ZipArchive::isEncryptionMethodSupported(int $method, bool $enc = true): bool	Check if a encryption method is supported by libzip
>locateName(string $name, int $flags = ?): int|false	(ZipArchive) Returns the index of the entry in the archive
>open(string $filename, int $flags = ?): bool|int	(ZipArchive) Open a ZIP file archive
>registerCancelCallback(callable $callback): bool	(ZipArchive) Register a callback to allow cancellation during archive close.
>registerProgressCallback(float $rate, callable $callback): bool	(ZipArchive) Register a callback to provide updates during archive close.
>renameIndex(int $index, string $new_name): bool	(ZipArchive) Renames an entry defined by its index
>renameName(string $name, string $new_name): bool	(ZipArchive) Renames an entry defined by its name
>replaceFile(string $filepath, int $index, int $start = ?, int $length = ZipArchive::LENGTH_TO_END, int $flags = ?): bool	(ZipArchive) Replace file in ZIP archive with a given path
>setArchiveComment(string $comment): bool	(ZipArchive) Set the comment of a ZIP archive
>setArchiveFlag(int $flag, int $value): bool	(ZipArchive) Set a global flag of a ZIP archive
>setCommentIndex(int $index, string $comment): bool	(ZipArchive) Set the comment of an entry defined by its index
>setCommentName(string $name, string $comment): bool	(ZipArchive) Set the comment of an entry defined by its name
>setCompressionIndex(int $index, int $method, int $compflags = ?): bool	(ZipArchive) Set the compression method of an entry defined by its index
>setCompressionName(string $name, int $method, int $compflags = ?): bool	(ZipArchive) Set the compression method of an entry defined by its name
>setEncryptionIndex(int $index, int $method, string|null $password = null): bool	(ZipArchive) Set the encryption method of an entry defined by its index
>setEncryptionName(string $name, int $method, string|null $password = null): bool	(ZipArchive) Set the encryption method of an entry defined by its name
>setExternalAttributesIndex(int $index, int $opsys, int $attr, int $flags = ?): bool	(ZipArchive) Set the external attributes of an entry defined by its index
>setExternalAttributesName(string $name, int $opsys, int $attr, int $flags = ?): bool	(ZipArchive) Set the external attributes of an entry defined by its name
>setMtimeIndex(int $index, int $timestamp, int $flags = ?): bool	(ZipArchive) Set the modification time of an entry defined by its index
>setMtimeName(string $name, int $timestamp, int $flags = ?): bool	(ZipArchive) Set the modification time of an entry defined by its name
>setPassword(string $password): bool	(ZipArchive) Set the password for the active archive
>statIndex(int $index, int $flags = ?): array|false	(ZipArchive) Get the details of an entry defined by its index
>statName(string $name, int $flags = ?): array|false	(ZipArchive) Get the details of an entry defined by its name
>unchangeAll(): bool	(ZipArchive) Undo all changes done in the archive
>unchangeArchive(): bool	(ZipArchive) Revert all global changes done in the archive
>unchangeIndex(int $index): bool	(ZipArchive) Revert all changes done to an entry at the given index
>unchangeName(string $name): bool	(ZipArchive) Revert all changes done to an entry with the given name
ZipArchive()	(new) A file archive, compressed with Zip
CASE_LOWER
CASE_UPPER
SORT_ASC
SORT_DESC
SORT_REGULAR
SORT_NUMERIC
SORT_STRING
SORT_LOCALE_STRING
SORT_NATURAL
SORT_FLAG_CASE
ARRAY_FILTER_USE_KEY
ARRAY_FILTER_USE_BOTH
COUNT_NORMAL
COUNT_RECURSIVE
EXTR_OVERWRITE
EXTR_SKIP
EXTR_PREFIX_SAME
EXTR_PREFIX_ALL
EXTR_PREFIX_INVALID
EXTR_PREFIX_IF_EXISTS
EXTR_IF_EXISTS
EXTR_REFS
SUNFUNCS_RET_TIMESTAMP
SUNFUNCS_RET_STRING
SUNFUNCS_RET_DOUBLE
DATE_ATOM
DATE_COOKIE
DATE_ISO8601
DATE_ISO8601_EXPANDED
DATE_RFC822
DATE_RFC850
DATE_RFC1036
DATE_RFC1123
DATE_RFC7231
DATE_RFC2822
DATE_RFC3339
DATE_RFC3339_EXTENDED
DATE_RSS
DATE_W3C
DIRECTORY_SEPARATOR
PATH_SEPARATOR
SCANDIR_SORT_ASCENDING
SCANDIR_SORT_DESCENDING
SCANDIR_SORT_NONE
E_ERROR
E_WARNING
E_PARSE
E_NOTICE
E_CORE_ERROR
E_CORE_WARNING
E_COMPILE_ERROR
E_COMPILE_WARNING
E_DEPRECATED
E_USER_ERROR
E_USER_WARNING
E_USER_NOTICE
E_USER_DEPRECATED
E_STRICT
E_RECOVERABLE_ERROR
E_ALL
SEEK_SET
SEEK_CUR
SEEK_END
LOCK_SH
LOCK_EX
LOCK_UN
LOCK_NB
FILE_USE_INCLUDE_PATH
FILE_NO_DEFAULT_CONTEXT
FILE_APPEND
FILE_IGNORE_NEW_LINES
FILE_SKIP_EMPTY_LINES
FILE_BINARY
FILE_TEXT
GLOB_AVAILABLE_FLAGS
GLOB_BRACE
GLOB_ERR
GLOB_MARK
GLOB_NOCHECK
GLOB_NOESCAPE
GLOB_NOSORT
GLOB_ONLYDIR
PATHINFO_ALL
PATHINFO_DIRNAME
PATHINFO_BASENAME
PATHINFO_EXTENSION
PATHINFO_FILENAME
INI_SCANNER_NORMAL
INI_SCANNER_RAW
INI_SCANNER_TYPED
FNM_NOESCAPE
FNM_PATHNAME
FNM_PERIOD
FNM_CASEFOLD
UPLOAD_ERR_CANT_WRITE
UPLOAD_ERR_EXTENSION
UPLOAD_ERR_FORM_SIZE
UPLOAD_ERR_INI_SIZE
UPLOAD_ERR_NO_FILE
UPLOAD_ERR_NO_TMP_DIR
UPLOAD_ERR_OK
UPLOAD_ERR_PARTIAL
HASH_HMAC
CREDITS_GROUP
CREDITS_GENERAL
CREDITS_SAPI
CREDITS_MODULES
CREDITS_DOCS
CREDITS_FULLPAGE
CREDITS_QA
CREDITS_ALL
INFO_GENERAL
INFO_CREDITS
INFO_CONFIGURATION
INFO_MODULES
INFO_ENVIRONMENT
INFO_VARIABLES
INFO_LICENSE
INFO_ALL
INI_USER
INI_PERDIR
INI_SYSTEM
INI_ALL
ASSERT_ACTIVE
ASSERT_CALLBACK
ASSERT_BAIL
ASSERT_EXCEPTION
ASSERT_WARNING
ASSERT_QUIET_EVAL
PHP_WINDOWS_VERSION_MAJOR
PHP_WINDOWS_VERSION_MINOR
PHP_WINDOWS_VERSION_BUILD
PHP_WINDOWS_VERSION_PLATFORM
PHP_WINDOWS_VERSION_SP_MAJOR
PHP_WINDOWS_VERSION_SP_MINOR
PHP_WINDOWS_VERSION_SUITEMASK
PHP_WINDOWS_VERSION_PRODUCTTYPE
PHP_WINDOWS_NT_DOMAIN_CONTROLLER
PHP_WINDOWS_NT_SERVER
PHP_WINDOWS_NT_WORKSTATION
JSON_ERROR_NONE
JSON_ERROR_DEPTH
JSON_ERROR_STATE_MISMATCH
JSON_ERROR_CTRL_CHAR
JSON_ERROR_SYNTAX
JSON_ERROR_UTF8
JSON_ERROR_RECURSION
JSON_ERROR_INF_OR_NAN
JSON_ERROR_UNSUPPORTED_TYPE
JSON_ERROR_INVALID_PROPERTY_NAME
JSON_ERROR_UTF16
JSON_ERROR_NON_BACKED_ENUM
JSON_BIGINT_AS_STRING
JSON_OBJECT_AS_ARRAY
JSON_HEX_TAG
JSON_HEX_AMP
JSON_HEX_APOS
JSON_HEX_QUOT
JSON_FORCE_OBJECT
JSON_NUMERIC_CHECK
JSON_PRETTY_PRINT
JSON_UNESCAPED_SLASHES
JSON_UNESCAPED_UNICODE
JSON_PARTIAL_OUTPUT_ON_ERROR
JSON_PRESERVE_ZERO_FRACTION
JSON_UNESCAPED_LINE_TERMINATORS
JSON_INVALID_UTF8_IGNORE
JSON_INVALID_UTF8_SUBSTITUTE
JSON_THROW_ON_ERROR
M_PI
M_E
M_LOG2E
M_LOG10E
M_LN2
M_LN10
M_PI_2
M_PI_4
M_1_PI
M_2_PI
M_SQRTPI
M_2_SQRTPI
M_SQRT2
M_SQRT3
M_SQRT1_2
M_LNPI
M_EULER
NAN
INF
PHP_ROUND_HALF_UP
PHP_ROUND_HALF_DOWN
PHP_ROUND_HALF_EVEN
PHP_ROUND_HALF_ODD
CONNECTION_ABORTED
CONNECTION_NORMAL
CONNECTION_TIMEOUT
__COMPILER_HALT_OFFSET__
LOG_CONS
LOG_NDELAY
LOG_ODELAY
LOG_NOWAIT
LOG_PERROR
LOG_PID
LOG_AUTH
LOG_AUTHPRIV
LOG_CRON
LOG_DAEMON
LOG_KERN
LOG_LOCAL0
LOG_LOCAL1
LOG_LOCAL2
LOG_LOCAL3
LOG_LOCAL4
LOG_LOCAL5
LOG_LOCAL6
LOG_LOCAL7
LOG_LPR
LOG_MAIL
LOG_NEWS
LOG_SYSLOG
LOG_USER
LOG_UUCP
LOG_EMERG
LOG_ALERT
LOG_CRIT
LOG_ERR
LOG_WARNING
LOG_NOTICE
LOG_INFO
LOG_DEBUG
DNS_ANY
DNS_ALL
DNS_A
DNS_AAAA
DNS_A6
DNS_CAA
DNS_CNAME
DNS_HINFO
DNS_MX
DNS_NAPTR
DNS_NS
DNS_PTR
DNS_SOA
DNS_SRV
DNS_TXT
PHP_OUTPUT_HANDLER_START
PHP_OUTPUT_HANDLER_WRITE
PHP_OUTPUT_HANDLER_FLUSH
PHP_OUTPUT_HANDLER_CLEAN
PHP_OUTPUT_HANDLER_FINAL
PHP_OUTPUT_HANDLER_CONT
PHP_OUTPUT_HANDLER_END
PHP_OUTPUT_HANDLER_CLEANABLE
PHP_OUTPUT_HANDLER_FLUSHABLE
PHP_OUTPUT_HANDLER_REMOVABLE
PHP_OUTPUT_HANDLER_STDFLAGS
PHP_OUTPUT_HANDLER_STARTED
PHP_OUTPUT_HANDLER_DISABLED
PHP_OUTPUT_HANDLER_PROCESSED
PASSWORD_BCRYPT
PASSWORD_BCRYPT_DEFAULT_COST
PASSWORD_ARGON2I
PASSWORD_ARGON2ID
PASSWORD_ARGON2_DEFAULT_MEMORY_COST
PASSWORD_ARGON2_DEFAULT_TIME_COST
PASSWORD_ARGON2_DEFAULT_THREADS
PASSWORD_ARGON2_PROVIDER
PASSWORD_DEFAULT
PREG_PATTERN_ORDER
PREG_SET_ORDER
PREG_OFFSET_CAPTURE
PREG_SPLIT_NO_EMPTY
PREG_SPLIT_DELIM_CAPTURE
PREG_SPLIT_OFFSET_CAPTURE
PREG_UNMATCHED_AS_NULL
PREG_NO_ERROR
PREG_INTERNAL_ERROR
PREG_BACKTRACK_LIMIT_ERROR
PREG_RECURSION_LIMIT_ERROR
PREG_BAD_UTF8_ERROR
PREG_BAD_UTF8_OFFSET_ERROR
PREG_JIT_STACKLIMIT_ERROR
PCRE_VERSION
PCRE_VERSION_MAJOR
PCRE_VERSION_MINOR
PCRE_JIT_SUPPORT
PREG_GREP_INVERT
MT_RAND_MT19937
MT_RAND_PHP
STREAM_CLIENT_ASYNC_CONNECT
STREAM_CLIENT_CONNECT
STREAM_CLIENT_PERSISTENT
STREAM_SERVER_BIND
STREAM_SERVER_LISTEN
STREAM_SHUT_RD
STREAM_SHUT_WR
STREAM_SHUT_RDWR
STREAM_OOB
STREAM_PEEK
STREAM_FILTER_READ
STREAM_FILTER_WRITE
STREAM_FILTER_ALL
STREAM_CRYPTO_METHOD_ANY_CLIENT
STREAM_CRYPTO_METHOD_SSLv2_CLIENT
STREAM_CRYPTO_METHOD_SSLv3_CLIENT
STREAM_CRYPTO_METHOD_SSLv23_CLIENT
STREAM_CRYPTO_METHOD_TLS_CLIENT
STREAM_CRYPTO_METHOD_TLSv1_0_CLIENT
STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT
STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT
STREAM_CRYPTO_METHOD_TLSv1_3_CLIENT
STREAM_CRYPTO_METHOD_ANY_SERVER
STREAM_CRYPTO_METHOD_SSLv2_SERVER
STREAM_CRYPTO_METHOD_SSLv3_SERVER
STREAM_CRYPTO_METHOD_SSLv23_SERVER
STREAM_CRYPTO_METHOD_TLS_SERVER
STREAM_CRYPTO_METHOD_TLSv1_0_SERVER
STREAM_CRYPTO_METHOD_TLSv1_1_SERVER
STREAM_CRYPTO_METHOD_TLSv1_2_SERVER
STREAM_CRYPTO_METHOD_TLSv1_3_SERVER
STREAM_CRYPTO_PROTO_SSLv3
STREAM_CRYPTO_PROTO_TLSv1_0
STREAM_CRYPTO_PROTO_TLSv1_1
STREAM_CRYPTO_PROTO_TLSv1_2
STREAM_CRYPTO_PROTO_TLSv1_3
STREAM_MUST_SEEK
STREAM_IGNORE_URL
STREAM_PF_INET
STREAM_PF_INET6
STREAM_PF_UNIX
STREAM_SOCK_DGRAM
STREAM_SOCK_RAW
STREAM_SOCK_RDM
STREAM_SOCK_SEQPACKET
STREAM_SOCK_STREAM
STREAM_IPPROTO_ICMP
STREAM_IPPROTO_IP
STREAM_IPPROTO_RAW
STREAM_IPPROTO_TCP
STREAM_IPPROTO_UDP
STREAM_NOTIFY_RESOLVE
STREAM_NOTIFY_CONNECT
STREAM_NOTIFY_AUTH_REQUIRED
STREAM_NOTIFY_MIME_TYPE_IS
STREAM_NOTIFY_FILE_SIZE_IS
STREAM_NOTIFY_REDIRECTED
STREAM_NOTIFY_PROGRESS
STREAM_NOTIFY_COMPLETED
STREAM_NOTIFY_FAILURE
STREAM_NOTIFY_AUTH_RESULT
STREAM_NOTIFY_SEVERITY_INFO
STREAM_NOTIFY_SEVERITY_WARN
STREAM_NOTIFY_SEVERITY_ERR
STREAM_IS_URL
STREAM_CAST_FOR_SELECT
STREAM_CAST_AS_STREAM
STREAM_META_TOUCH
STREAM_META_OWNER
STREAM_META_OWNER_NAME
STREAM_META_GROUP
STREAM_META_GROUP_NAME
STREAM_META_ACCESS
STREAM_MKDIR_RECURSIVE
STREAM_USE_PATH
STREAM_REPORT_ERRORS
STREAM_OPTION_BLOCKING
STREAM_OPTION_READ_BUFFER
STREAM_BUFFER_NONE
STREAM_BUFFER_LINE
STREAM_BUFFER_FULL
STREAM_OPTION_READ_TIMEOUT
STREAM_OPTION_WRITE_BUFFER
STREAM_URL_STAT_LINK
STREAM_URL_STAT_QUIET
PSFS_PASS_ON
PSFS_FEED_ME
PSFS_ERR_FATAL
PSFS_FLAG_NORMAL
PSFS_FLAG_FLUSH_INC
PSFS_FLAG_FLUSH_CLOSE
CRYPT_SALT_LENGTH
CRYPT_STD_DES
CRYPT_EXT_DES
CRYPT_MD5
CRYPT_BLOWFISH
CRYPT_SHA256
CRYPT_SHA512
HTML_SPECIALCHARS
HTML_ENTITIES
ENT_COMPAT
ENT_QUOTES
ENT_NOQUOTES
ENT_IGNORE
ENT_SUBSTITUTE
ENT_DISALLOWED
ENT_HTML401
ENT_XML1
ENT_XHTML
ENT_HTML5
CHAR_MAX
LC_CTYPE
LC_NUMERIC
LC_TIME
LC_COLLATE
LC_MONETARY
LC_ALL
LC_MESSAGES
STR_PAD_LEFT
STR_PAD_RIGHT
STR_PAD_BOTH
ABDAY_1
ABDAY_2
ABDAY_3
ABDAY_4
ABDAY_5
ABDAY_6
ABDAY_7
DAY_1
DAY_2
DAY_3
DAY_4
DAY_5
DAY_6
DAY_7
ABMON_1
ABMON_2
ABMON_3
ABMON_4
ABMON_5
ABMON_6
ABMON_7
ABMON_8
ABMON_9
ABMON_10
ABMON_11
ABMON_12
MON_1
MON_2
MON_3
MON_4
MON_5
MON_6
MON_7
MON_8
MON_9
MON_10
MON_11
MON_12
AM_STR
PM_STR
D_T_FMT
D_FMT
T_FMT
T_FMT_AMPM
ERA
ERA_YEAR
ERA_D_T_FMT
ERA_D_FMT
ERA_T_FMT
ALT_DIGITS
INT_CURR_SYMBOL
CURRENCY_SYMBOL
CRNCYSTR
MON_DECIMAL_POINT
MON_THOUSANDS_SEP
MON_GROUPING
POSITIVE_SIGN
NEGATIVE_SIGN
INT_FRAC_DIGITS
FRAC_DIGITS
P_CS_PRECEDES
P_SEP_BY_SPACE
N_CS_PRECEDES
N_SEP_BY_SPACE
P_SIGN_POSN
N_SIGN_POSN
DECIMAL_POINT
RADIXCHAR
THOUSANDS_SEP
THOUSEP
GROUPING
YESEXPR
NOEXPR
YESSTR
NOSTR
CODESET
PHP_URL_SCHEME
PHP_URL_HOST
PHP_URL_PORT
PHP_URL_USER
PHP_URL_PASS
PHP_URL_PATH
PHP_URL_QUERY
PHP_URL_FRAGMENT
PHP_QUERY_RFC1738
PHP_QUERY_RFC3986
CAL_EASTER_DEFAULT
CAL_EASTER_ROMAN
CAL_EASTER_ALWAYS_GREGORIAN
CAL_EASTER_ALWAYS_JULIAN
CAL_GREGORIAN
CAL_JULIAN
CAL_JEWISH
CAL_FRENCH
CAL_NUM_CALS
CAL_JEWISH_ADD_ALAFIM_GERESH
CAL_JEWISH_ADD_ALAFIM
CAL_JEWISH_ADD_GERESHAYIM
CAL_DOW_DAYNO
CAL_DOW_SHORT
CAL_DOW_LONG
CAL_MONTH_GREGORIAN_SHORT
CAL_MONTH_GREGORIAN_LONG
CAL_MONTH_JULIAN_SHORT
CAL_MONTH_JULIAN_LONG
CAL_MONTH_JEWISH
CAL_MONTH_FRENCH
CLSCTX_INPROC_SERVER
CLSCTX_INPROC_HANDLER
CLSCTX_LOCAL_SERVER
CLSCTX_REMOTE_SERVER
CLSCTX_SERVER
CLSCTX_ALL
VT_NULL
VT_EMPTY
VT_INT
VT_I1
VT_I2
VT_I4
VT_I8
VT_UINT
VT_UI1
VT_UI2
VT_UI4
VT_UI8
VT_R4
VT_R8
VT_BOOL
VT_ERROR
VT_CY
VT_DATE
VT_BSTR
VT_DECIMAL
VT_UNKNOWN
VT_DISPATCH
VT_VARIANT
VT_ARRAY
VT_BYREF
CP_ACP
CP_MACCP
CP_OEMCP
CP_UTF7
CP_UTF8
CP_SYMBOL
CP_THREAD_ACP
VARCMP_LT
VARCMP_EQ
VARCMP_GT
VARCMP_NULL
NORM_IGNORECASE
NORM_IGNORENONSPACE
NORM_IGNORESYMBOLS
NORM_IGNOREWIDTH
NORM_IGNOREKANATYPE
NORM_IGNOREKASHIDA
DISP_E_DIVBYZERO
DISP_E_OVERFLOW
DISP_E_BADINDEX
DISP_E_PARAMNOTFOUND
MK_E_UNAVAILABLE
LOCALE_NEUTRAL
LOCALE_SYSTEM_DEFAULT
DBA_LMDB_USE_SUB_DIR
DBA_LMDB_NO_SUB_DIR
EXIF_USE_MBSTRING
FILEINFO_NONE
FILEINFO_SYMLINK
FILEINFO_MIME_TYPE
FILEINFO_MIME_ENCODING
FILEINFO_MIME
FILEINFO_COMPRESS
FILEINFO_DEVICES
FILEINFO_CONTINUE
FILEINFO_PRESERVE_ATIME
FILEINFO_RAW
FILEINFO_EXTENSION
FILEINFO_APPLE
INPUT_POST
INPUT_GET
INPUT_COOKIE
INPUT_ENV
INPUT_SERVER
INPUT_SESSION
INPUT_REQUEST
FILTER_FLAG_NONE
FILTER_REQUIRE_SCALAR
FILTER_REQUIRE_ARRAY
FILTER_FORCE_ARRAY
FILTER_NULL_ON_FAILURE
FILTER_FLAG_STRIP_LOW
FILTER_FLAG_STRIP_HIGH
FILTER_FLAG_STRIP_BACKTICK
FILTER_FLAG_ENCODE_LOW
FILTER_FLAG_ENCODE_HIGH
FILTER_FLAG_ENCODE_AMP
FILTER_FLAG_NO_ENCODE_QUOTES
FILTER_FLAG_EMPTY_STRING_NULL
FILTER_VALIDATE_BOOL
FILTER_VALIDATE_BOOLEAN
FILTER_VALIDATE_INT
FILTER_FLAG_ALLOW_OCTAL
FILTER_FLAG_ALLOW_HEX
FILTER_VALIDATE_FLOAT
FILTER_FLAG_ALLOW_THOUSAND
FILTER_VALIDATE_REGEXP
FILTER_VALIDATE_URL
FILTER_FLAG_SCHEME_REQUIRED
FILTER_FLAG_HOST_REQUIRED
FILTER_FLAG_PATH_REQUIRED
FILTER_FLAG_QUERY_REQUIRED
FILTER_VALIDATE_DOMAIN
FILTER_FLAG_HOSTNAME
FILTER_VALIDATE_EMAIL
FILTER_FLAG_EMAIL_UNICODE
FILTER_VALIDATE_IP
FILTER_FLAG_IPV4
FILTER_FLAG_IPV6
FILTER_FLAG_NO_RES_RANGE
FILTER_FLAG_NO_PRIV_RANGE
FILTER_FLAG_GLOBAL_RANGE
FILTER_VALIDATE_MAC
FILTER_UNSAFE_RAW
FILTER_DEFAULT
FILTER_SANITIZE_STRING
FILTER_SANITIZE_STRIPPED
FILTER_SANITIZE_ENCODED
FILTER_SANITIZE_SPECIAL_CHARS
FILTER_SANITIZE_FULL_SPECIAL_CHARS
FILTER_SANITIZE_EMAIL
FILTER_SANITIZE_URL
FILTER_SANITIZE_NUMBER_INT
FILTER_SANITIZE_NUMBER_FLOAT
FILTER_FLAG_ALLOW_FRACTION
FILTER_FLAG_ALLOW_THOUSAND
FILTER_FLAG_ALLOW_SCIENTIFIC
FILTER_SANITIZE_ADD_SLASHES
FILTER_SANITIZE_MAGIC_QUOTES
FILTER_CALLBACK
FTP_ASCII
FTP_AUTOSEEK
FTP_AUTORESUME
FTP_FAILED
FTP_FINISHED
FTP_MOREDATA
FTP_TEXT
FTP_BINARY
FTP_IMAGE
FTP_TIMEOUT_SEC
FTP_USEPASVADDRESS
ICONV_IMPL
ICONV_VERSION
ICONV_MIME_DECODE_STRICT
ICONV_MIME_DECODE_CONTINUE_ON_ERROR
GD_VERSION
GD_MAJOR_VERSION
GD_MINOR_VERSION
GD_RELEASE_VERSION
GD_EXTRA_VERSION
GD_BUNDLED
IMG_AVIF
IMG_BMP
IMG_GIF
IMG_JPG
IMG_JPEG
IMG_PNG
IMG_TGA
IMG_WBMP
IMG_XPM
IMG_WEBP
IMG_WEBP_LOSSLESS
IMG_COLOR_TILED
IMG_COLOR_STYLED
IMG_COLOR_BRUSHED
IMG_COLOR_STYLEDBRUSHED
IMG_COLOR_TRANSPARENT
IMG_AFFINE_TRANSLATE
IMG_AFFINE_SCALE
IMG_AFFINE_ROTATE
IMG_AFFINE_SHEAR_HORIZONTAL
IMG_AFFINE_SHEAR_VERTICAL
IMG_ARC_ROUNDED
IMG_ARC_PIE
IMG_ARC_CHORD
IMG_ARC_NOFILL
IMG_ARC_EDGED
IMG_GD2_RAW
IMG_GD2_COMPRESSED
IMG_EFFECT_REPLACE
IMG_EFFECT_ALPHABLEND
IMG_EFFECT_NORMAL
IMG_EFFECT_OVERLAY
IMG_EFFECT_MULTIPLY
IMG_FILTER_NEGATE
IMG_FILTER_GRAYSCALE
IMG_FILTER_BRIGHTNESS
IMG_FILTER_CONTRAST
IMG_FILTER_COLORIZE
IMG_FILTER_EDGEDETECT
IMG_FILTER_GAUSSIAN_BLUR
IMG_FILTER_SELECTIVE_BLUR
IMG_FILTER_EMBOSS
IMG_FILTER_MEAN_REMOVAL
IMG_FILTER_SMOOTH
IMG_FILTER_PIXELATE
IMG_FILTER_SCATTER
IMAGETYPE_GIF
IMAGETYPE_JPEG
IMAGETYPE_JPEG2000
IMAGETYPE_PNG
IMAGETYPE_SWF
IMAGETYPE_PSD
IMAGETYPE_BMP
IMAGETYPE_WBMP
IMAGETYPE_XBM
IMAGETYPE_TIFF_II
IMAGETYPE_TIFF_MM
IMAGETYPE_IFF
IMAGETYPE_JB2
IMAGETYPE_JPC
IMAGETYPE_JP2
IMAGETYPE_JPX
IMAGETYPE_SWC
IMAGETYPE_ICO
IMAGETYPE_WEBP
IMAGETYPE_AVIF
IMAGETYPE_UNKNOWN
IMAGETYPE_COUNT
PNG_NO_FILTER
PNG_FILTER_NONE
PNG_FILTER_SUB
PNG_FILTER_UP
PNG_FILTER_AVG
PNG_FILTER_PAETH
PNG_ALL_FILTERS
IMG_FLIP_VERTICAL
IMG_FLIP_HORIZONTAL
IMG_FLIP_BOTH
IMG_BELL
IMG_BESSEL
IMG_BILINEAR_FIXED
IMG_BICUBIC
IMG_BICUBIC_FIXED
IMG_BLACKMAN
IMG_BOX
IMG_BSPLINE
IMG_CATMULLROM
IMG_GAUSSIAN
IMG_GENERALIZED_CUBIC
IMG_HERMITE
IMG_HAMMING
IMG_HANNING
IMG_MITCHELL
IMG_POWER
IMG_QUADRATIC
IMG_SINC
IMG_NEAREST_NEIGHBOUR
IMG_WEIGHTED4
IMG_TRIANGLE
IMG_CROP_BLACK
IMG_CROP_DEFAULT
IMG_CROP_SIDES
IMG_CROP_THRESHOLD
IMG_CROP_TRANSPARENT
IMG_CROP_WHITE
INTL_ICU_DATA_VERSION
INTL_ICU_VERSION
INTL_MAX_LOCALE_LEN
IDNA_DEFAULT
IDNA_ALLOW_UNASSIGNED
IDNA_USE_STD3_RULES
IDNA_CHECK_BIDI
IDNA_CHECK_CONTEXTJ
IDNA_NONTRANSITIONAL_TO_ASCII
IDNA_NONTRANSITIONAL_TO_UNICODE
INTL_IDNA_VARIANT_2003
INTL_IDNA_VARIANT_UTS46
GRAPHEME_EXTR_COUNT
GRAPHEME_EXTR_MAXBYTES
GRAPHEME_EXTR_MAXCHARS
IDNA_ERROR_EMPTY_LABEL
IDNA_ERROR_LABEL_TOO_LONG
IDNA_ERROR_DOMAIN_NAME_TOO_LONG
IDNA_ERROR_LEADING_HYPHEN
IDNA_ERROR_TRAILING_HYPHEN
IDNA_ERROR_HYPHEN_3_4
IDNA_ERROR_LEADING_COMBINING_MARK
IDNA_ERROR_DISALLOWED
IDNA_ERROR_PUNYCODE
IDNA_ERROR_LABEL_HAS_DOT
IDNA_ERROR_INVALID_ACE_LABEL
IDNA_ERROR_BIDI
IDNA_ERROR_CONTEXTJ
ULOC_ACTUAL_LOCALE
ULOC_VALID_LOCALE
U_AMBIGUOUS_ALIAS_WARNING
U_BAD_VARIABLE_DEFINITION
U_BRK_ASSIGN_ERROR
U_BRK_ERROR_LIMIT
U_BRK_ERROR_START
U_BRK_HEX_DIGITS_EXPECTED
U_BRK_INIT_ERROR
U_BRK_INTERNAL_ERROR
U_BRK_MALFORMED_RULE_TAG
U_BRK_MISMATCHED_PAREN
U_BRK_NEW_LINE_IN_QUOTED_STRING
U_BRK_RULE_EMPTY_SET
U_BRK_RULE_SYNTAX
U_BRK_SEMICOLON_EXPECTED
U_BRK_UNCLOSED_SET
U_BRK_UNDEFINED_VARIABLE
U_BRK_UNRECOGNIZED_OPTION
U_BRK_VARIABLE_REDFINITION
U_BUFFER_OVERFLOW_ERROR
U_CE_NOT_FOUND_ERROR
U_COLLATOR_VERSION_MISMATCH
U_DIFFERENT_UCA_VERSION
U_ENUM_OUT_OF_SYNC_ERROR
U_ERROR_LIMIT
U_ERROR_WARNING_LIMIT
U_ERROR_WARNING_START
U_FILE_ACCESS_ERROR
U_FMT_PARSE_ERROR_LIMIT
U_FMT_PARSE_ERROR_START
U_IDNA_ACE_PREFIX_ERROR
U_IDNA_CHECK_BIDI_ERROR
U_IDNA_DOMAIN_NAME_TOO_LONG_ERROR
U_IDNA_ERROR_LIMIT
U_IDNA_ERROR_START
U_IDNA_LABEL_TOO_LONG_ERROR
U_IDNA_PROHIBITED_ERROR
U_IDNA_STD3_ASCII_RULES_ERROR
U_IDNA_UNASSIGNED_ERROR
U_IDNA_VERIFICATION_ERROR
U_IDNA_ZERO_LENGTH_LABEL_ERROR
U_ILLEGAL_ARGUMENT_ERROR
U_ILLEGAL_CHAR_FOUND
U_ILLEGAL_CHAR_IN_SEGMENT
U_ILLEGAL_CHARACTER
U_ILLEGAL_ESCAPE_SEQUENCE
U_ILLEGAL_PAD_POSITION
U_INDEX_OUTOFBOUNDS_ERROR
U_INTERNAL_PROGRAM_ERROR
U_INTERNAL_TRANSLITERATOR_ERROR
U_INVALID_CHAR_FOUND
U_INVALID_FORMAT_ERROR
U_INVALID_FUNCTION
U_INVALID_ID
U_INVALID_PROPERTY_PATTERN
U_INVALID_RBT_SYNTAX
U_INVALID_STATE_ERROR
U_INVALID_TABLE_FILE
U_INVALID_TABLE_FORMAT
U_INVARIANT_CONVERSION_ERROR
U_MALFORMED_EXPONENTIAL_PATTERN
U_MALFORMED_PRAGMA
U_MALFORMED_RULE
U_MALFORMED_SET
U_MALFORMED_SYMBOL_REFERENCE
U_MALFORMED_UNICODE_ESCAPE
U_MALFORMED_VARIABLE_DEFINITION
U_MALFORMED_VARIABLE_REFERENCE
U_MEMORY_ALLOCATION_ERROR
U_MESSAGE_PARSE_ERROR
U_MISMATCHED_SEGMENT_DELIMITERS
U_MISPLACED_ANCHOR_START
U_MISPLACED_COMPOUND_FILTER
U_MISPLACED_CURSOR_OFFSET
U_MISPLACED_QUANTIFIER
U_MISSING_OPERATOR
U_MISSING_RESOURCE_ERROR
U_MISSING_SEGMENT_CLOSE
U_MULTIPLE_ANTE_CONTEXTS
U_MULTIPLE_COMPOUND_FILTERS
U_MULTIPLE_CURSORS
U_MULTIPLE_DECIMAL_SEPARATORS
U_MULTIPLE_DECIMAL_SEPERATORS
U_MULTIPLE_EXPONENTIAL_SYMBOLS
U_MULTIPLE_PAD_SPECIFIERS
U_MULTIPLE_PERCENT_SYMBOLS
U_MULTIPLE_PERMILL_SYMBOLS
U_MULTIPLE_POST_CONTEXTS
U_NO_SPACE_AVAILABLE
U_NO_WRITE_PERMISSION
U_PARSE_ERROR
U_PARSE_ERROR_LIMIT
U_PARSE_ERROR_START
U_PATTERN_SYNTAX_ERROR
U_PRIMARY_TOO_LONG_ERROR
U_REGEX_BAD_ESCAPE_SEQUENCE
U_REGEX_BAD_INTERVAL
U_REGEX_ERROR_LIMIT
U_REGEX_ERROR_START
U_REGEX_INTERNAL_ERROR
U_REGEX_INVALID_BACK_REF
U_REGEX_INVALID_FLAG
U_REGEX_INVALID_STATE
U_REGEX_LOOK_BEHIND_LIMIT
U_REGEX_MAX_LT_MIN
U_REGEX_MISMATCHED_PAREN
U_REGEX_NUMBER_TOO_BIG
U_REGEX_PROPERTY_SYNTAX
U_REGEX_RULE_SYNTAX
U_REGEX_SET_CONTAINS_STRING
U_REGEX_UNIMPLEMENTED
U_RESOURCE_TYPE_MISMATCH
U_RULE_MASK_ERROR
U_SAFECLONE_ALLOCATED_WARNING
U_SORT_KEY_TOO_SHORT_WARNING
U_STANDARD_ERROR_LIMIT
U_STATE_OLD_WARNING
U_STATE_TOO_OLD_ERROR
U_STRING_NOT_TERMINATED_WARNING
U_STRINGPREP_CHECK_BIDI_ERROR
U_STRINGPREP_PROHIBITED_ERROR
U_STRINGPREP_UNASSIGNED_ERROR
U_TOO_MANY_ALIASES_ERROR
U_TRAILING_BACKSLASH
U_TRUNCATED_CHAR_FOUND
U_UNCLOSED_SEGMENT
U_UNDEFINED_SEGMENT_REFERENCE
U_UNDEFINED_VARIABLE
U_UNEXPECTED_TOKEN
U_UNMATCHED_BRACES
U_UNQUOTED_SPECIAL
U_UNSUPPORTED_ATTRIBUTE
U_UNSUPPORTED_ERROR
U_UNSUPPORTED_ESCAPE_SEQUENCE
U_UNSUPPORTED_PROPERTY
U_UNTERMINATED_QUOTE
U_USELESS_COLLATOR_ERROR
U_USING_DEFAULT_WARNING
U_USING_FALLBACK_WARNING
U_VARIABLE_RANGE_EXHAUSTED
U_VARIABLE_RANGE_OVERLAP
U_ZERO_ERROR
MB_OVERLOAD_MAIL
MB_OVERLOAD_STRING
MB_OVERLOAD_REGEX
MB_CASE_UPPER
MB_CASE_LOWER
MB_CASE_TITLE
MB_CASE_FOLD
MB_CASE_LOWER_SIMPLE
MB_CASE_UPPER_SIMPLE
MB_CASE_TITLE_SIMPLE
MB_CASE_FOLD_SIMPLE
MB_ONIGURUMA_VERSION
MHASH_ADLER32
MHASH_CRC32
MHASH_CRC32B
MHASH_CRC32C
MHASH_FNV132
MHASH_FNV1A32
MHASH_FNV164
MHASH_FNV1A64
MHASH_GOST
MHASH_HAVAL128
MHASH_HAVAL160
MHASH_HAVAL192
MHASH_HAVAL224
MHASH_HAVAL256
MHASH_JOAAT
MHASH_MD2
MHASH_MD4
MHASH_MD5
MHASH_MURMUR3A
MHASH_MURMUR3C
MHASH_MURMUR3F
MHASH_RIPEMD128
MHASH_RIPEMD160
MHASH_RIPEMD256
MHASH_RIPEMD320
MHASH_SHA1
MHASH_SHA224
MHASH_SHA256
MHASH_SHA384
MHASH_SHA512
MHASH_SNEFRU256
MHASH_TIGER
MHASH_TIGER128
MHASH_TIGER160
MHASH_WHIRLPOOL
MHASH_XXH32
MHASH_XXH64
MHASH_XXH3
MHASH_XXH128
WNOHANG
WUNTRACED
WCONTINUED
WEXITED
WSTOPPED
WNOWAIT
SIG_IGN
SIG_DFL
SIG_ERR
SIGHUP
SIGINFO
SIGINT
SIGQUIT
SIGILL
SIGTRAP
SIGABRT
SIGIOT
SIGBUS
SIGFPE
SIGKILL
SIGUSR1
SIGSEGV
SIGUSR2
SIGPIPE
SIGALRM
SIGTERM
SIGSTKFLT
SIGCLD
SIGCHLD
SIGCONT
SIGSTOP
SIGTSTP
SIGTTIN
SIGTTOU
SIGURG
SIGXCPU
SIGXFSZ
SIGVTALRM
SIGPROF
SIGWINCH
SIGPOLL
SIGIO
SIGPWR
SIGSYS
SIGBABY
SIGRTMIN
SIGRTMAX
SIG_BLOCK
SIG_UNBLOCK
SIG_SETMASK
SIGCKPT
SIGCKPTEXIT
SI_USER
SI_NOINFO
SI_KERNEL
SI_QUEUE
SI_TIMER
SI_MSGGQ
SI_ASYNCIO
SI_SIGIO
SI_TKILL
SI_MESGQ
CLD_EXITED
CLD_KILLED
CLD_DUMPED
CLD_TRAPPED
CLD_STOPPED
CLD_CONTINUED
TRAP_BRKPT
TRAP_TRACE
POLL_IN
POLL_OUT
POLL_MSG
POLL_ERR
POLL_PRI
POLL_HUP
ILL_ILLOPC
ILL_ILLOPN
ILL_ILLADR
ILL_ILLTRP
ILL_PRVOPC
ILL_PRVREG
ILL_COPROC
ILL_BADSTK
FPE_INTDIV
FPE_INTOVF
FPE_FLTDIV
FPE_FLTOVF
FPE_FLTUND
FPE_FLTRES
FPE_FLTINV
FPE_FLTSUB
SEGV_MAPERR
SEGV_ACCERR
BUS_ADRALN
BUS_ADRERR
BUS_OBJERR
CLONE_NEWNS
CLONE_NEWIPC
CLONE_NEWUTS
CLONE_NEWNET
CLONE_NEWPID
CLONE_NEWUSER
CLONE_NEWCGROUP
PRIO_PGRP
PRIO_USER
PRIO_PROCESS
PRIO_DARWIN_BG
PRIO_DARWIN_THREAD
PCNTL_E2BIG
PCNTL_EACCES
PCNTL_EAGAIN
PCNTL_ECAPMODE
PCNTL_ECHILD
PCNTL_EFAULT
PCNTL_EINTR
PCNTL_EINVAL
PCNTL_EIO
PCNTL_EISDIR
PCNTL_ELIBBAD
PCNTL_ELOOP
PCNTL_EMFILE
PCNTL_ENAMETOOLONG
PCNTL_ENFILE
PCNTL_ENOENT
PCNTL_ENOEXEC
PCNTL_ENOMEM
PCNTL_ENOSPC
PCNTL_ENOTDIR
PCNTL_EPERM
PCNTL_ESRCH
PCNTL_ETXTBSY
PCNTL_EUSERS
FORK_NOSIGCHLD
FORK_WAITPID
RFCFDG
RFFDG
RFLINUXTHPN
RFNOWAIT
RFPROC
RFTHREAD
RFTSIGZMB
P_ALL
P_PID
P_PGID
P_PIDFD
P_UID
P_GID
P_SID
P_JAILID
PDO::PARAM_BOOL
PDO::PARAM_NULL
PDO::PARAM_INT
PDO::PARAM_STR
PDO::PARAM_STR_NATL
PDO::PARAM_STR_CHAR
PDO::PARAM_LOB
PDO::PARAM_STMT
PDO::PARAM_INPUT_OUTPUT
PDO::FETCH_DEFAULT
PDO::FETCH_LAZY
PDO::FETCH_ASSOC
PDO::FETCH_NAMED
PDO::FETCH_NUM
PDO::FETCH_BOTH
PDO::FETCH_OBJ
PDO::FETCH_BOUND
PDO::FETCH_COLUMN
PDO::FETCH_CLASS
PDO::FETCH_INTO
PDO::FETCH_FUNC
PDO::FETCH_GROUP
PDO::FETCH_UNIQUE
PDO::FETCH_KEY_PAIR
PDO::FETCH_CLASSTYPE
PDO::FETCH_SERIALIZE
PDO::FETCH_PROPS_LATE
PDO::ATTR_AUTOCOMMIT
PDO::ATTR_PREFETCH
PDO::ATTR_TIMEOUT
PDO::ATTR_ERRMODE
PDO::ATTR_SERVER_VERSION
PDO::ATTR_CLIENT_VERSION
PDO::ATTR_SERVER_INFO
PDO::ATTR_CONNECTION_STATUS
PDO::ATTR_CASE
PDO::ATTR_CURSOR_NAME
PDO::ATTR_CURSOR
PDO::ATTR_DRIVER_NAME
PDO::ATTR_ORACLE_NULLS
PDO::ATTR_PERSISTENT
PDO::ATTR_STATEMENT_CLASS
PDO::ATTR_FETCH_CATALOG_NAMES
PDO::ATTR_FETCH_TABLE_NAMES
PDO::ATTR_STRINGIFY_FETCHES
PDO::ATTR_MAX_COLUMN_LEN
PDO::ATTR_DEFAULT_FETCH_MODE
PDO::ATTR_EMULATE_PREPARES
PDO::ATTR_DEFAULT_STR_PARAM
PDO::ERRMODE_SILENT
PDO::ERRMODE_WARNING
PDO::ERRMODE_EXCEPTION
PDO::CASE_NATURAL
PDO::CASE_LOWER
PDO::CASE_UPPER
PDO::NULL_NATURAL
PDO::NULL_EMPTY_STRING
PDO::NULL_TO_STRING
PDO::FETCH_ORI_NEXT
PDO::FETCH_ORI_PRIOR
PDO::FETCH_ORI_FIRST
PDO::FETCH_ORI_LAST
PDO::FETCH_ORI_ABS
PDO::FETCH_ORI_REL
PDO::CURSOR_FWDONLY
PDO::CURSOR_SCROLL
PDO::ERR_NONE
PDO::PARAM_EVT_ALLOC
PDO::PARAM_EVT_FREE
PDO::PARAM_EVT_EXEC_PRE
PDO::PARAM_EVT_EXEC_POST
PDO::PARAM_EVT_FETCH_PRE
PDO::PARAM_EVT_FETCH_POST
PDO::PARAM_EVT_NORMALIZE
PDO::SQLITE_DETERMINISTIC
Phar::NONE
Phar::COMPRESSED
Phar::GZ
Phar::BZ2
Phar::PHAR
Phar::TAR
Phar::ZIP
Phar::MD5
Phar::SHA1
Phar::SHA256
Phar::SHA512
Phar::OPENSSL
Phar::OPENSSL_SHA256
Phar::OPENSSL_SHA512
Phar::PHP
Phar::PHPS
PHPDBG_VERSION
PHPDBG_FILE
PHPDBG_METHOD
PHPDBG_LINENO
PHPDBG_FUNC
PHPDBG_COLOR_PROMPT
PHPDBG_COLOR_NOTICE
PHPDBG_COLOR_ERROR
POSIX_F_OK
POSIX_R_OK
POSIX_W_OK
POSIX_X_OK
POSIX_S_IFBLK
POSIX_S_IFCHR
POSIX_S_IFIFO
POSIX_S_IFREG
POSIX_S_IFSOCK
POSIX_RLIMIT_AS
POSIX_RLIMIT_CORE
POSIX_RLIMIT_CPU
POSIX_RLIMIT_DATA
POSIX_RLIMIT_FSIZE
POSIX_RLIMIT_LOCKS
POSIX_RLIMIT_MEMLOCK
POSIX_RLIMIT_MSGQUEUE
POSIX_RLIMIT_NICE
POSIX_RLIMIT_NOFILE
POSIX_RLIMIT_NPROC
POSIX_RLIMIT_RSS
POSIX_RLIMIT_RTPRIO
POSIX_RLIMIT_RTTIME
POSIX_RLIMIT_SIGPENDING
POSIX_RLIMIT_STACK
POSIX_RLIMIT_INFINITY
POSIX_RLIMIT_KQUEUES
POSIX_RLIMIT_NPTS
POSIX_PC_LINK_MAX
POSIX_PC_MAX_CANON
POSIX_PC_MAX_INPUT
POSIX_PC_NAME_MAX
POSIX_PC_PATH_MAX
POSIX_PC_PIPE_BUF
POSIX_PC_CHOWN_RESTRICTED
POSIX_PC_NO_TRUNC
POSIX_PC_ALLOC_SIZE_MIN
POSIX_PC_ALLOC_SYMLINK_MAX
POSIX_PC_SYMLINK_MAX
POSIX_SC_ARG_MAX
POSIX_SC_PAGESIZE
POSIX_SC_NPROCESSORS_CONF
POSIX_SC_NPROCESSORS_ONLN
POSIX_SC_CHILD_MAX
POSIX_SC_CLK_TCK
MSG_IPC_NOWAIT
MSG_EAGAIN
MSG_ENOMSG
MSG_NOERROR
MSG_EXCEPT
SID
PHP_SESSION_DISABLED
PHP_SESSION_NONE
PHP_SESSION_ACTIVE
AF_UNIX
AF_INET
AF_INET6
AF_DIVERT
SOCK_STREAM
SOCK_DGRAM
SOCK_RAW
SOCK_SEQPACKET
SOCK_RDM
SOCK_CONN_DGRAM
SOCK_DCCP
SOCK_NONBLOCK
SOCK_CLOEXEC
MSG_OOB
MSG_WAITALL
MSG_PEEK
MSG_DONTROUTE
MSG_EOR
MSG_EOF
MSG_ZEROCOPY
SO_DEBUG
SO_REUSEADDR
SO_REUSEPORT
SO_KEEPALIVE
SO_DONTROUTE
SO_LINGER
SO_BROADCAST
SO_OOBINLINE
SO_SNDBUF
SO_RCVBUF
SO_SNDLOWAT
SO_RCVLOWAT
SO_SNDTIMEO
SO_RCVTIMEO
SO_TYPE
SO_ERROR
SO_ZEROCOPY
TCP_NODELAY
TCP_KEEPCNT
TCP_KEEPIDLE
TCP_KEEPINTVL
TCP_KEEPALIVE
TCP_NOTSENT_LOWAT
SO_MARK
SO_USER_COOKIE
SO_RTABLE
SO_ACCEPTFILTER
SO_DONTTRUNC
SO_WANTMORE
SO_INCOMING_CPU
SO_MEMINFO
SO_BPF_EXTENSIONS
SO_SETFIB
SO_ATTACH_REUSEPORT_CBPF
SO_DETACH_BPF
SO_DETACH_FILTER
SO_RERROR
SO_ZEROIZE
SO_SPLICE
SO_REUSEPORT_LB
SOL_FILTER
SOL_UDPLITE
UDPLITE_RECV_CSCOV
UDPLITE_SEND_CSCOV
TCP_DEFER_ACCEPT
TCP_CONGESTION
TCP_QUICKACK
TCP_REPAIR
TCP_SYNCNT
IP_DONTFRAG
IP_MTU_DISCOVER
IP_PMTUDISC_DO
IP_PMTUDISC_DONT
IP_PMTUDISC_WANT
IP_PMTUDISC_PROBE
IP_PMTUDISC_INTERFACE
IP_PMTUDISC_OMIT
IP_BIND_ADDRESS_NO_PORT
SOL_SOCKET
PHP_NORMAL_READ
PHP_BINARY_READ
SOL_TCP
SOL_UDP
SOCKET_EINTR
SOCKET_EBADF
SOCKET_EACCES
SOCKET_EFAULT
SOCKET_EINVAL
SOCKET_EMFILE
SOCKET_ENAMETOOLONG
SOCKET_ENOTEMPTY
SOCKET_ELOOP
SOCKET_EWOULDBLOCK
SOCKET_EREMOTE
SOCKET_EUSERS
SOCKET_ENOTSOCK
SOCKET_EDESTADDRREQ
SOCKET_EMSGSIZE
SOCKET_EPROTOTYPE
SOCKET_EPROTONOSUPPORT
SOCKET_ESOCKTNOSUPPORT
SOCKET_EOPNOTSUPP
SOCKET_EPFNOSUPPORT
SOCKET_EAFNOSUPPORT
SOCKET_EADDRNOTAVAIL
SOCKET_ENETDOWN
SOCKET_ENETUNREACH
SOCKET_ENETRESET
SOCKET_ECONNABORTED
SOCKET_ECONNRESET
SOCKET_ENOBUFS
SOCKET_EISCONN
SOCKET_ENOTCONN
SOCKET_ESHUTDOWN
SOCKET_ETIMEDOUT
SOCKET_ECONNREFUSED
SOCKET_EHOSTDOWN
SOCKET_EHOSTUNREACH
SOCKET_EALREADY
SOCKET_EINPROGRESS
SOCKET_ENOPROTOOPT
SOCKET_EADDRINUSE
SOCKET_ETOOMYREFS
SOCKET_EPROCLIM
SOCKET_EDUOT
SOCKET_ESTALE
SOCKET_EDISCON
SOCKET_SYSNOTREADY
SOCKET_VERNOTSUPPORTED
SOCKET_NOTINITIALISED
SOCKET_HOST_NOT_FOUND
SOCKET_TRY_AGAIN
SOCKET_NO_RECOVERY
SOCKET_NO_DATA
SOCKET_NO_ADDRESS
SOCKET_EPERM
SOCKET_ENOENT
SOCKET_EIO
SOCKET_ENXIO
SOCKET_E2BIG
SOCKET_EAGAIN
SOCKET_ENOMEM
SOCKET_ENOTBLK
SOCKET_EBUSY
SOCKET_EEXIST
SOCKET_EXDEV
SOCKET_ENODEV
SOCKET_ENOTDIR
SOCKET_EISDIR
SOCKET_ENFILE
SOCKET_ENOTTY
SOCKET_ENOSPC
SOCKET_ESPIPE
SOCKET_EROFS
SOCKET_EMLINK
SOCKET_EPIPE
SOCKET_ENOLCK
SOCKET_ENOSYS
SOCKET_ENOMSG
SOCKET_EIDRM
SOCKET_ECHRNG
SOCKET_EL2NSYNC
SOCKET_EL3HLT
SOCKET_EL3RST
SOCKET_ELNRNG
SOCKET_EUNATCH
SOCKET_ENOCSI
SOCKET_EL2HLT
SOCKET_EBADE
SOCKET_EBADR
SOCKET_EXFULL
SOCKET_ENOANO
SOCKET_EBADRQC
SOCKET_EBADSLT
SOCKET_ENOSTR
SOCKET_ENODATA
SOCKET_ETIME
SOCKET_ENOSR
SOCKET_ENONET
SOCKET_ENOLINK
SOCKET_EADV
SOCKET_ESRMNT
SOCKET_ECOMM
SOCKET_EPROTO
SOCKET_EMULTIHOP
SOCKET_EBADMSG
SOCKET_ENOTUNIQ
SOCKET_EBADFD
SOCKET_EREMCHG
SOCKET_ERESTART
SOCKET_ESTRPIPE
SOCKET_EPROTOOPT
SOCKET_ADDRINUSE
SOCKET_ETOOMANYREFS
SOCKET_EISNAM
SOCKET_EREMOTEIO
SOCKET_EDQUOT
SOCKET_ENOMEDIUM
SOCKET_EMEDIUMTYPE
SCM_RIGHTS
SCM_CREDENTIALS
SCM_CREDS
SCM_CREDS2
LOCAL_CREDS
LOCAL_CREDS_PERSISTENT
SKF_AD_OFF
SKF_AD_PROTOCOL
SKF_AD_PKTTYPE
SKF_AD_IFINDEX
SKF_AD_NLATTR
SKF_AD_NLATTR_NEST
SKF_AD_MARK
SKF_AD_QUEUE
SKF_AD_HATYPE
SKF_AD_RXHASH
SKF_AD_CPU
SKF_AD_ALU_XOR_X
SKF_AD_VLAN_TAG
SKF_AD_VLAN_TAG_PRESENT
SKF_AD_PAY_OFFSET
SKF_AD_RANDOM
SKF_AD_VLAN_TPID
SKF_AD_MAX
AI_ADDRCONFIG
AI_ALL
AI_CANONIDN
AI_CANONNAME
AI_IDN
AI_NUMERICHOST
AI_NUMERICSERV
AI_PASSIVE
AI_V4MAPPED
FIL_ATTACH
FIL_DETACH
IPPROTO_IP
IPPROTO_IPV6
IPV6_HOPLIMIT
IPV6_MULTICAST_HOPS
IPV6_MULTICAST_IF
IPV6_MULTICAST_LOOP
IPV6_PKTINFO
IPV6_RECVHOPLIMIT
IPV6_RECVPKTINFO
IPV6_RECVTCLASS
IPV6_TCLASS
IPV6_UNICAST_HOPS
IPV6_V6ONLY
IP_MULTICAST_IF
IP_MULTICAST_LOOP
IP_MULTICAST_TTL
IP_PORTRANGE
IP_PORTRANGE_DEFAULT
IP_PORTRANGE_HIGH
IP_PORTRANGE_LOW
MCAST_BLOCK_SOURCE
MCAST_JOIN_GROUP
MCAST_JOIN_SOURCE_GROUP
MCAST_LEAVE_GROUP
MCAST_LEAVE_SOURCE_GROUP
MCAST_UNBLOCK_SOURCE
MSG_CMSG_CLOEXEC
MSG_CONFIRM
MSG_CTRUNC
MSG_DONTWAIT
MSG_ERRQUEUE
MSG_MORE
MSG_NOSIGNAL
MSG_TRUNC
MSG_WAITFORONE
SOL_LOCAL
SOMAXCONN
SO_BINDTODEVICE
SO_FAMILY
SO_LABEL
SO_LISTENQLEN
SO_LISTENQLIMIT
SO_PASSCRED
SO_PEERLABEL
SO_EXCLUSIVEADDRUSE
SO_EXCLBIND
SO_NOSIGPIPE
SO_LINGER_SEC
SO_BINDTOIFINDEX
SQLITE3_ASSOC
SQLITE3_NUM
SQLITE3_BOTH
SQLITE3_INTEGER
SQLITE3_FLOAT
SQLITE3_TEXT
SQLITE3_BLOB
SQLITE3_NULL
SQLITE3_OPEN_READONLY
SQLITE3_OPEN_READWRITE
SQLITE3_OPEN_CREATE
SQLITE3_DETERMINISTIC
TOKEN_PARSE
FORCE_GZIP
FORCE_DEFLATE
ZLIB_ENCODING_RAW
ZLIB_ENCODING_DEFLATE
ZLIB_ENCODING_GZIP
ZLIB_FILTERED
ZLIB_HUFFMAN_ONLY
ZLIB_FIXED
ZLIB_RLE
ZLIB_DEFAULT_STRATEGY
ZLIB_BLOCK
ZLIB_NO_FLUSH
ZLIB_PARTIAL_FLUSH
ZLIB_SYNC_FLUSH
ZLIB_FULL_FLUSH
ZLIB_FINISH
ZLIB_VERSION
ZLIB_VERNUM
ZLIB_OK
ZLIB_STREAM_END
ZLIB_NEED_DICT
ZLIB_ERRNO
ZLIB_STREAM_ERROR
ZLIB_DATA_ERROR
ZLIB_MEM_ERROR
ZLIB_BUF_ERROR
ZLIB_VERSION_ERROR
CURLALTSVC_H1
CURLALTSVC_H2
CURLALTSVC_H3
CURLALTSVC_READONLYFILE
CURLAUTH_ANY
CURLAUTH_ANYSAFE
CURLAUTH_AWS_SIGV4
CURLAUTH_BASIC
CURLAUTH_BEARER
CURLAUTH_DIGEST
CURLAUTH_DIGEST_IE
CURLAUTH_GSSAPI
CURLAUTH_GSSNEGOTIATE
CURLAUTH_NEGOTIATE
CURLAUTH_NONE
CURLAUTH_NTLM
CURLAUTH_NTLM_WB
CURLAUTH_ONLY
CURLFTPAUTH_DEFAULT
CURLFTPAUTH_SSL
CURLFTPAUTH_TLS
CURLFTPMETHOD_DEFAULT
CURLFTPMETHOD_MULTICWD
CURLFTPMETHOD_NOCWD
CURLFTPMETHOD_SINGLECWD
CURLFTPSSL_ALL
CURLFTPSSL_CCC_ACTIVE
CURLFTPSSL_CCC_NONE
CURLFTPSSL_CCC_PASSIVE
CURLFTPSSL_CONTROL
CURLFTPSSL_NONE
CURLFTPSSL_TRY
CURLFTP_CREATE_DIR
CURLFTP_CREATE_DIR_NONE
CURLFTP_CREATE_DIR_RETRY
CURLGSSAPI_DELEGATION_FLAG
CURLGSSAPI_DELEGATION_POLICY_FLAG
CURLHEADER_SEPARATE
CURLHEADER_UNIFIED
CURLHSTS_ENABLE
CURLHSTS_READONLYFILE
CURLKHMATCH_LAST
CURLKHMATCH_MISMATCH
CURLKHMATCH_MISSING
CURLKHMATCH_OK
CURLMIMEOPT_FORMESCAPE
CURLMSG_DONE
CURLPIPE_HTTP1
CURLPIPE_MULTIPLEX
CURLPIPE_NOTHING
CURLPROXY_HTTP
CURLPROXY_HTTPS
CURLPROXY_HTTP_1_0
CURLPROXY_SOCKS4
CURLPROXY_SOCKS4A
CURLPROXY_SOCKS5
CURLPROXY_SOCKS5_HOSTNAME
CURLPX_BAD_ADDRESS_TYPE
CURLPX_BAD_VERSION
CURLPX_CLOSED
CURLPX_GSSAPI
CURLPX_GSSAPI_PERMSG
CURLPX_GSSAPI_PROTECTION
CURLPX_IDENTD
CURLPX_IDENTD_DIFFER
CURLPX_LONG_HOSTNAME
CURLPX_LONG_PASSWD
CURLPX_LONG_USER
CURLPX_NO_AUTH
CURLPX_OK
CURLPX_RECV_ADDRESS
CURLPX_RECV_AUTH
CURLPX_RECV_CONNECT
CURLPX_RECV_REQACK
CURLPX_REPLY_ADDRESS_TYPE_NOT_SUPPORTED
CURLPX_REPLY_COMMAND_NOT_SUPPORTED
CURLPX_REPLY_CONNECTION_REFUSED
CURLPX_REPLY_GENERAL_SERVER_FAILURE
CURLPX_REPLY_HOST_UNREACHABLE
CURLPX_REPLY_NETWORK_UNREACHABLE
CURLPX_REPLY_NOT_ALLOWED
CURLPX_REPLY_TTL_EXPIRED
CURLPX_REPLY_UNASSIGNED
CURLPX_REQUEST_FAILED
CURLPX_RESOLVE_HOST
CURLPX_SEND_AUTH
CURLPX_SEND_CONNECT
CURLPX_SEND_REQUEST
CURLPX_UNKNOWN_FAIL
CURLPX_UNKNOWN_MODE
CURLPX_USER_REJECTED
CURLSSH_AUTH_AGENT
CURLSSH_AUTH_ANY
CURLSSH_AUTH_DEFAULT
CURLSSH_AUTH_GSSAPI
CURLSSH_AUTH_HOST
CURLSSH_AUTH_KEYBOARD
CURLSSH_AUTH_NONE
CURLSSH_AUTH_PASSWORD
CURLSSH_AUTH_PUBLICKEY
CURLSSLOPT_ALLOW_BEAST
CURLSSLOPT_AUTO_CLIENT_CERT
CURLSSLOPT_NATIVE_CA
CURLSSLOPT_NO_PARTIALCHAIN
CURLSSLOPT_NO_REVOKE
CURLSSLOPT_REVOKE_BEST_EFFORT
CURLUSESSL_ALL
CURLUSESSL_CONTROL
CURLUSESSL_NONE
CURLUSESSL_TRY
CURLVERSION_NOW
CURLWS_RAW_MODE
CURL_FNMATCHFUNC_FAIL
CURL_FNMATCHFUNC_MATCH
CURL_FNMATCHFUNC_NOMATCH
CURL_HTTP_VERSION_1_0
CURL_HTTP_VERSION_1_1
CURL_HTTP_VERSION_2
CURL_HTTP_VERSION_2TLS
CURL_HTTP_VERSION_2_0
CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE
CURL_HTTP_VERSION_3
CURL_HTTP_VERSION_3ONLY
CURL_HTTP_VERSION_NONE
CURL_IPRESOLVE_V4
CURL_IPRESOLVE_V6
CURL_IPRESOLVE_WHATEVER
CURL_MAX_READ_SIZE
CURL_NETRC_IGNORED
CURL_NETRC_OPTIONAL
CURL_NETRC_REQUIRED
CURL_PUSH_DENY
CURL_PUSH_OK
CURL_READFUNC_PAUSE
CURL_REDIR_POST_301
CURL_REDIR_POST_302
CURL_REDIR_POST_303
CURL_REDIR_POST_ALL
CURL_RTSPREQ_ANNOUNCE
CURL_RTSPREQ_DESCRIBE
CURL_RTSPREQ_GET_PARAMETER
CURL_RTSPREQ_OPTIONS
CURL_RTSPREQ_PAUSE
CURL_RTSPREQ_PLAY
CURL_RTSPREQ_RECEIVE
CURL_RTSPREQ_RECORD
CURL_RTSPREQ_SETUP
CURL_RTSPREQ_SET_PARAMETER
CURL_RTSPREQ_TEARDOWN
CURL_SSLVERSION_DEFAULT
CURL_SSLVERSION_MAX_DEFAULT
CURL_SSLVERSION_MAX_NONE
CURL_SSLVERSION_MAX_TLSv1_0
CURL_SSLVERSION_MAX_TLSv1_1
CURL_SSLVERSION_MAX_TLSv1_2
CURL_SSLVERSION_MAX_TLSv1_3
CURL_SSLVERSION_SSLv2
CURL_SSLVERSION_SSLv3
CURL_SSLVERSION_TLSv1
CURL_SSLVERSION_TLSv1_0
CURL_SSLVERSION_TLSv1_1
CURL_SSLVERSION_TLSv1_2
CURL_SSLVERSION_TLSv1_3
CURL_TIMECOND_IFMODSINCE
CURL_TIMECOND_IFUNMODSINCE
CURL_TIMECOND_LASTMOD
CURL_TIMECOND_NONE
CURL_TLSAUTH_SRP
CURL_VERSION_ALTSVC
CURL_VERSION_ASYNCHDNS
CURL_VERSION_BROTLI
CURL_VERSION_CONV
CURL_VERSION_CURLDEBUG
CURL_VERSION_DEBUG
CURL_VERSION_GSASL
CURL_VERSION_GSSAPI
CURL_VERSION_GSSNEGOTIATE
CURL_VERSION_HSTS
CURL_VERSION_HTTP2
CURL_VERSION_HTTP3
CURL_VERSION_HTTPS_PROXY
CURL_VERSION_IDN
CURL_VERSION_IPV6
CURL_VERSION_KERBEROS4
CURL_VERSION_KERBEROS5
CURL_VERSION_LARGEFILE
CURL_VERSION_LIBZ
CURL_VERSION_MULTI_SSL
CURL_VERSION_NTLM
CURL_VERSION_NTLM_WB
CURL_VERSION_PSL
CURL_VERSION_SPNEGO
CURL_VERSION_SSL
CURL_VERSION_SSPI
CURL_VERSION_TLSAUTH_SRP
CURL_VERSION_UNICODE
CURL_VERSION_UNIX_SOCKETS
CURL_VERSION_ZSTD
CURL_WRITEFUNC_PAUSE
CURL_PREREQFUNC_OK
CURL_PREREQFUNC_ABORT
XML_ELEMENT_NODE
XML_ATTRIBUTE_NODE
XML_TEXT_NODE
XML_CDATA_SECTION_NODE
XML_ENTITY_REF_NODE
XML_ENTITY_NODE
XML_PI_NODE
XML_COMMENT_NODE
XML_DOCUMENT_NODE
XML_DOCUMENT_TYPE_NODE
XML_DOCUMENT_FRAG_NODE
XML_NOTATION_NODE
XML_HTML_DOCUMENT_NODE
XML_DTD_NODE
XML_ELEMENT_DECL_NODE
XML_ATTRIBUTE_DECL_NODE
XML_ENTITY_DECL_NODE
XML_NAMESPACE_DECL_NODE
XML_ATTRIBUTE_CDATA
XML_ATTRIBUTE_ID
XML_ATTRIBUTE_IDREF
XML_ATTRIBUTE_IDREFS
XML_ATTRIBUTE_ENTITY
XML_ATTRIBUTE_NMTOKEN
XML_ATTRIBUTE_NMTOKENS
XML_ATTRIBUTE_ENUMERATION
XML_ATTRIBUTE_NOTATION
XML_LOCAL_NAMESPACE
Dom\HTML_NO_DEFAULT_NS
DOM_PHP_ERR
DOM_INDEX_SIZE_ERR
DOMSTRING_SIZE_ERR
DOM_HIERARCHY_REQUEST_ERR
DOM_WRONG_DOCUMENT_ERR
DOM_INVALID_CHARACTER_ERR
DOM_NO_DATA_ALLOWED_ERR
DOM_NO_MODIFICATION_ALLOWED_ERR
DOM_NOT_FOUND_ERR
DOM_NOT_SUPPORTED_ERR
DOM_INUSE_ATTRIBUTE_ERR
DOM_INVALID_STATE_ERR
DOM_SYNTAX_ERR
DOM_INVALID_MODIFICATION_ERR
DOM_NAMESPACE_ERR
DOM_INVALID_ACCESS_ERR
DOM_VALIDATION_ERR
LIBENCHANT_VERSION
ENCHANT_MYSPELL
ENCHANT_ISPELL
GMP_ROUND_ZERO
GMP_ROUND_PLUSINF
GMP_ROUND_MINUSINF
GMP_MSW_FIRST
GMP_LSW_FIRST
GMP_LITTLE_ENDIAN
GMP_BIG_ENDIAN
GMP_NATIVE_ENDIAN
GMP_VERSION
GMP_MPIR_VERSION
LDAP_DEREF_NEVER
LDAP_DEREF_SEARCHING
LDAP_DEREF_FINDING
LDAP_DEREF_ALWAYS
LDAP_OPT_DEREF
LDAP_OPT_SIZELIMIT
LDAP_OPT_TIMELIMIT
LDAP_OPT_NETWORK_TIMEOUT
LDAP_OPT_PROTOCOL_VERSION
LDAP_OPT_ERROR_NUMBER
LDAP_OPT_REFERRALS
LDAP_OPT_RESTART
LDAP_OPT_HOST_NAME
LDAP_OPT_ERROR_STRING
LDAP_OPT_DIAGNOSTIC_MESSAGE
LDAP_OPT_MATCHED_DN
LDAP_OPT_SERVER_CONTROLS
LDAP_OPT_CLIENT_CONTROLS
LDAP_OPT_DEBUG_LEVEL
LDAP_OPT_X_KEEPALIVE_IDLE
LDAP_OPT_X_KEEPALIVE_PROBES
LDAP_OPT_X_KEEPALIVE_INTERVAL
LDAP_OPT_X_TLS_CACERTDIR
LDAP_OPT_X_TLS_CACERTFILE
LDAP_OPT_X_TLS_CERTFILE
LDAP_OPT_X_TLS_CIPHER_SUITE
LDAP_OPT_X_TLS_CRLCHECK
LDAP_OPT_X_TLS_CRLFILE
LDAP_OPT_X_TLS_DHFILE
LDAP_OPT_X_TLS_KEYFILE
LDAP_OPT_X_TLS_PROTOCOL_MIN
LDAP_OPT_X_TLS_RANDOM_FILE
LDAP_OPT_X_TLS_REQUIRE_CERT
GSLC_SSL_NO_AUTH
GSLC_SSL_ONEWAY_AUTH
GSLC_SSL_TWOWAY_AUTH
LDAP_EXOP_START_TLS
LDAP_EXOP_MODIFY_PASSWD
LDAP_EXOP_REFRESH
LDAP_EXOP_WHO_AM_I
LDAP_EXOP_TURN
LDAP_CONTROL_MANAGEDSAIT
LDAP_CONTROL_PROXY_AUTHZ
LDAP_CONTROL_SUBENTRIES
LDAP_CONTROL_VALUESRETURNFILTER
LDAP_CONTROL_ASSERT
LDAP_CONTROL_PRE_READ
LDAP_CONTROL_POST_READ
LDAP_CONTROL_SORTREQUEST
LDAP_CONTROL_SORTRESPONSE
LDAP_CONTROL_PAGEDRESULTS
LDAP_CONTROL_AUTHZID_REQUEST
LDAP_CONTROL_AUTHZID_RESPONSE
LDAP_CONTROL_SYNC
LDAP_CONTROL_SYNC_STATE
LDAP_CONTROL_SYNC_DONE
LDAP_CONTROL_DONTUSECOPY
LDAP_CONTROL_PASSWORDPOLICYREQUEST
LDAP_CONTROL_PASSWORDPOLICYRESPONSE
LDAP_CONTROL_X_INCREMENTAL_VALUES
LDAP_CONTROL_X_DOMAIN_SCOPE
LDAP_CONTROL_X_PERMISSIVE_MODIFY
LDAP_CONTROL_X_SEARCH_OPTIONS
LDAP_CONTROL_X_TREE_DELETE
LDAP_CONTROL_X_EXTENDED_DN
LDAP_CONTROL_VLVREQUEST
LDAP_CONTROL_VLVRESPONSE
LDAP_ESCAPE_DN
LDAP_ESCAPE_FILTER
LDAP_MODIFY_BATCH_ATTRIB
LDAP_MODIFY_BATCH_MODTYPE
LDAP_MODIFY_BATCH_VALUES
LDAP_MODIFY_BATCH_ADD
LDAP_MODIFY_BATCH_REMOVE
LDAP_MODIFY_BATCH_REMOVE_ALL
LDAP_MODIFY_BATCH_REPLACE
LDAP_OPT_TIMEOUT
LDAP_OPT_X_SASL_AUTHCID
LDAP_OPT_X_SASL_AUTHZID
LDAP_OPT_X_SASL_MECH
LDAP_OPT_X_SASL_NOCANON
LDAP_OPT_X_SASL_REALM
LDAP_OPT_X_SASL_USERNAME
LDAP_OPT_X_TLS_ALLOW
LDAP_OPT_X_TLS_DEMAND
LDAP_OPT_X_TLS_HARD
LDAP_OPT_X_TLS_NEVER
LDAP_OPT_X_TLS_TRY
LDAP_OPT_X_TLS_CRL_ALL
LDAP_OPT_X_TLS_CRL_NONE
LDAP_OPT_X_TLS_CRL_PEER
LDAP_OPT_X_TLS_PACKAGE
LDAP_OPT_X_TLS_PROTOCOL_SSL2
LDAP_OPT_X_TLS_PROTOCOL_SSL3
LDAP_OPT_X_TLS_PROTOCOL_TLS1_0
LDAP_OPT_X_TLS_PROTOCOL_TLS1_1
LDAP_OPT_X_TLS_PROTOCOL_TLS1_2
LIBXML_BIGLINES
LIBXML_COMPACT
LIBXML_DTDATTR
LIBXML_DTDLOAD
LIBXML_DTDVALID
LIBXML_HTML_NOIMPLIED
LIBXML_HTML_NODEFDTD
LIBXML_LOADED_VERSION
LIBXML_NOBLANKS
LIBXML_NOCDATA
LIBXML_NOEMPTYTAG
LIBXML_NOENT
LIBXML_NOERROR
LIBXML_NONET
LIBXML_NOWARNING
LIBXML_NOXMLDECL
LIBXML_NO_XXE
LIBXML_NSCLEAN
LIBXML_PARSEHUGE
LIBXML_PEDANTIC
LIBXML_RECOVER
LIBXML_XINCLUDE
LIBXML_ERR_ERROR
LIBXML_ERR_FATAL
LIBXML_ERR_NONE
LIBXML_ERR_WARNING
LIBXML_VERSION
LIBXML_DOTTED_VERSION
LIBXML_SCHEMA_CREATE
MYSQLI_READ_DEFAULT_GROUP
MYSQLI_READ_DEFAULT_FILE
MYSQLI_OPT_CAN_HANDLE_EXPIRED_PASSWORDS
MYSQLI_OPT_LOAD_DATA_LOCAL_DIR
MYSQLI_OPT_CONNECT_TIMEOUT
MYSQLI_OPT_READ_TIMEOUT
MYSQLI_OPT_LOCAL_INFILE
MYSQLI_OPT_INT_AND_FLOAT_NATIVE
MYSQLI_OPT_NET_CMD_BUFFER_SIZE
MYSQLI_OPT_NET_READ_BUFFER_SIZE
MYSQLI_OPT_SSL_VERIFY_SERVER_CERT
MYSQLI_INIT_COMMAND
MYSQLI_CLIENT_CAN_HANDLE_EXPIRED_PASSWORDS
MYSQLI_CLIENT_FOUND_ROWS
MYSQLI_CLIENT_SSL_VERIFY_SERVER_CERT
MYSQLI_CLIENT_SSL
MYSQLI_CLIENT_COMPRESS
MYSQLI_CLIENT_INTERACTIVE
MYSQLI_CLIENT_IGNORE_SPACE
MYSQLI_CLIENT_NO_SCHEMA
MYSQLI_CLIENT_MULTI_QUERIES
MYSQLI_STORE_RESULT
MYSQLI_STORE_RESULT_COPY_DATA
MYSQLI_USE_RESULT
MYSQLI_ASSOC
MYSQLI_NUM
MYSQLI_BOTH
MYSQLI_NOT_NULL_FLAG
MYSQLI_PRI_KEY_FLAG
MYSQLI_UNIQUE_KEY_FLAG
MYSQLI_MULTIPLE_KEY_FLAG
MYSQLI_BLOB_FLAG
MYSQLI_UNSIGNED_FLAG
MYSQLI_ZEROFILL_FLAG
MYSQLI_AUTO_INCREMENT_FLAG
MYSQLI_TIMESTAMP_FLAG
MYSQLI_SET_FLAG
MYSQLI_NUM_FLAG
MYSQLI_PART_KEY_FLAG
MYSQLI_GROUP_FLAG
MYSQLI_NO_DEFAULT_VALUE_FLAG
MYSQLI_TYPE_DECIMAL
MYSQLI_TYPE_NEWDECIMAL
MYSQLI_TYPE_BIT
MYSQLI_TYPE_TINY
MYSQLI_TYPE_SHORT
MYSQLI_TYPE_LONG
MYSQLI_TYPE_FLOAT
MYSQLI_TYPE_DOUBLE
MYSQLI_TYPE_NULL
MYSQLI_TYPE_TIMESTAMP
MYSQLI_TYPE_LONGLONG
MYSQLI_TYPE_INT24
MYSQLI_TYPE_DATE
MYSQLI_TYPE_TIME
MYSQLI_TYPE_DATETIME
MYSQLI_TYPE_YEAR
MYSQLI_TYPE_NEWDATE
MYSQLI_TYPE_INTERVAL
MYSQLI_TYPE_ENUM
MYSQLI_TYPE_SET
MYSQLI_TYPE_TINY_BLOB
MYSQLI_TYPE_MEDIUM_BLOB
MYSQLI_TYPE_LONG_BLOB
MYSQLI_TYPE_BLOB
MYSQLI_TYPE_VAR_STRING
MYSQLI_TYPE_STRING
MYSQLI_TYPE_CHAR
MYSQLI_TYPE_GEOMETRY
MYSQLI_TYPE_JSON
MYSQLI_TYPE_VECTOR
MYSQLI_NEED_DATA
MYSQLI_ENUM_FLAG
MYSQLI_BINARY_FLAG
MYSQLI_CURSOR_TYPE_FOR_UPDATE
MYSQLI_CURSOR_TYPE_NO_CURSOR
MYSQLI_CURSOR_TYPE_READ_ONLY
MYSQLI_CURSOR_TYPE_SCROLLABLE
MYSQLI_STMT_ATTR_CURSOR_TYPE
MYSQLI_STMT_ATTR_PREFETCH_ROWS
MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH
MYSQLI_SET_CHARSET_NAME
MYSQLI_REPORT_INDEX
MYSQLI_REPORT_ERROR
MYSQLI_REPORT_STRICT
MYSQLI_REPORT_ALL
MYSQLI_REPORT_OFF
MYSQLI_DEBUG_TRACE_ENABLED
MYSQLI_SERVER_PUBLIC_KEY
MYSQLI_REFRESH_GRANT
MYSQLI_REFRESH_LOG
MYSQLI_REFRESH_TABLES
MYSQLI_REFRESH_HOSTS
MYSQLI_REFRESH_REPLICA
MYSQLI_REFRESH_STATUS
MYSQLI_REFRESH_THREADS
MYSQLI_REFRESH_SLAVE
MYSQLI_REFRESH_MASTER
MYSQLI_REFRESH_BACKUP_LOG
MYSQLI_TRANS_COR_AND_CHAIN
MYSQLI_TRANS_COR_AND_NO_CHAIN
MYSQLI_TRANS_COR_RELEASE
MYSQLI_TRANS_COR_NO_RELEASE
MYSQLI_TRANS_START_READ_ONLY
MYSQLI_TRANS_START_READ_WRITE
MYSQLI_TRANS_START_WITH_CONSISTENT_SNAPSHOT
MYSQLI_CLIENT_SSL_DONT_VERIFY_SERVER_CERT
MYSQLI_IS_MARIADB
MYSQLI_ASYNC
MYSQLI_ON_UPDATE_NOW_FLAG
X509_PURPOSE_SSL_CLIENT
X509_PURPOSE_SSL_SERVER
X509_PURPOSE_NS_SSL_SERVER
X509_PURPOSE_SMIME_SIGN
X509_PURPOSE_SMIME_ENCRYPT
X509_PURPOSE_CRL_SIGN
X509_PURPOSE_ANY
OPENSSL_PKCS1_PADDING
OPENSSL_SSLV23_PADDING
OPENSSL_NO_PADDING
OPENSSL_PKCS1_OAEP_PADDING
OPENSSL_KEYTYPE_RSA
OPENSSL_KEYTYPE_DSA
OPENSSL_KEYTYPE_DH
OPENSSL_KEYTYPE_EC
OPENSSL_KEYTYPE_X25519
OPENSSL_KEYTYPE_ED25519
OPENSSL_KEYTYPE_X448
OPENSSL_KEYTYPE_ED448
OPENSSL_ALGO_DSS1
OPENSSL_ALGO_SHA1
OPENSSL_ALGO_SHA224
OPENSSL_ALGO_SHA256
OPENSSL_ALGO_SHA384
OPENSSL_ALGO_SHA512
OPENSSL_ALGO_RMD160
OPENSSL_ALGO_MD5
OPENSSL_ALGO_MD4
OPENSSL_ALGO_MD2
OPENSSL_DEFAULT_STREAM_CIPHERS
OPENSSL_CIPHER_RC2_40
OPENSSL_CIPHER_RC2_128
OPENSSL_CIPHER_RC2_64
OPENSSL_CIPHER_DES
OPENSSL_CIPHER_3DES
OPENSSL_CIPHER_AES_128_CBC
OPENSSL_CIPHER_AES_192_CBC
OPENSSL_CIPHER_AES_256_CBC
OPENSSL_VERSION_TEXT
OPENSSL_VERSION_NUMBER
OPENSSL_TLSEXT_SERVER_NAME
OPENSSL_RAW_DATA
OPENSSL_DONT_ZERO_PAD_KEY
OPENSSL_ZERO_PADDING
OPENSSL_ENCODING_SMIME
OPENSSL_ENCODING_DER
OPENSSL_ENCODING_PEM
PKCS7_TEXT
PKCS7_BINARY
PKCS7_NOINTERN
PKCS7_NOVERIFY
PKCS7_NOCHAIN
PKCS7_NOCERTS
PKCS7_NOATTR
PKCS7_DETACHED
PKCS7_NOSIGS
PKCS7_NOOLDMIMETYPE
OPENSSL_CMS_TEXT
OPENSSL_CMS_BINARY
OPENSSL_CMS_NOINTERN
OPENSSL_CMS_NOVERIFY
OPENSSL_CMS_NOCERTS
OPENSSL_CMS_NOATTR
OPENSSL_CMS_DETACHED
OPENSSL_CMS_NOSIGS
OPENSSL_CMS_OLDMIMETYPE
PDO::FB_ATTR_DATE_FORMAT
PDO::FB_ATTR_TIME_FORMAT
PDO::FB_ATTR_TIMESTAMP_FORMAT
PDO::MYSQL_ATTR_USE_BUFFERED_QUERY
PDO::MYSQL_ATTR_LOCAL_INFILE
PDO::MYSQL_ATTR_LOCAL_INFILE_DIRECTORY
PDO::MYSQL_ATTR_INIT_COMMAND
PDO::MYSQL_ATTR_READ_DEFAULT_FILE
PDO::MYSQL_ATTR_READ_DEFAULT_GROUP
PDO::MYSQL_ATTR_MAX_BUFFER_SIZE
PDO::MYSQL_ATTR_DIRECT_QUERY
PDO::MYSQL_ATTR_FOUND_ROWS
PDO::MYSQL_ATTR_IGNORE_SPACE
PDO::MYSQL_ATTR_COMPRESS
PDO::MYSQL_ATTR_SERVER_PUBLIC_KEY
PDO::MYSQL_ATTR_SSL_CA
PDO::MYSQL_ATTR_SSL_CAPATH
PDO::MYSQL_ATTR_SSL_CERT
PDO::MYSQL_ATTR_SSL_CIPHER
PDO::MYSQL_ATTR_SSL_KEY
PDO::MYSQL_ATTR_SSL_VERIFY_SERVER_CERT
PDO::MYSQL_ATTR_MULTI_STATEMENTS
PDO_ODBC_TYPE
PDO::ODBC_ATTR_USE_CURSOR_LIBRARY
PDO::ODBC_SQL_USE_IF_NEEDED
PDO::ODBC_SQL_USE_DRIVER
PDO::ODBC_SQL_USE_ODBC
PDO::ODBC_ATTR_ASSUME_UTF8
PDO::PGSQL_ATTR_DISABLE_PREPARES
PGSQL_LIBPQ_VERSION
PGSQL_LIBPQ_VERSION_STR
PGSQL_ASSOC
PGSQL_NUM
PGSQL_BOTH
PGSQL_CONNECT_FORCE_NEW
PGSQL_CONNECT_ASYNC
PGSQL_CONNECTION_AUTH_OK
PGSQL_CONNECTION_AWAITING_RESPONSE
PGSQL_CONNECTION_BAD
PGSQL_CONNECTION_MADE
PGSQL_CONNECTION_OK
PGSQL_CONNECTION_SETENV
PGSQL_CONNECTION_SSL_STARTUP
PGSQL_CONNECTION_STARTED
PGSQL_SEEK_SET
PGSQL_SEEK_CUR
PGSQL_SEEK_END
PGSQL_EMPTY_QUERY
PGSQL_COMMAND_OK
PGSQL_TUPLES_OK
PGSQL_TUPLES_CHUNK
PGSQL_COPY_OUT
PGSQL_COPY_IN
PGSQL_BAD_RESPONSE
PGSQL_NONFATAL_ERROR
PGSQL_FATAL_ERROR
PGSQL_TRANSACTION_IDLE
PGSQL_TRANSACTION_ACTIVE
PGSQL_TRANSACTION_INTRANS
PGSQL_TRANSACTION_INERROR
PGSQL_TRANSACTION_UNKNOWN
PGSQL_DIAG_SEVERITY
PGSQL_DIAG_SQLSTATE
PGSQL_DIAG_MESSAGE_PRIMARY
PGSQL_DIAG_MESSAGE_DETAIL
PGSQL_DIAG_MESSAGE_HINT
PGSQL_DIAG_STATEMENT_POSITION
PGSQL_DIAG_INTERNAL_POSITION
PGSQL_DIAG_INTERNAL_QUERY
PGSQL_DIAG_CONTEXT
PGSQL_DIAG_SOURCE_FILE
PGSQL_DIAG_SOURCE_LINE
PGSQL_DIAG_SOURCE_FUNCTION
PGSQL_DIAG_SCHEMA_NAME
PGSQL_DIAG_TABLE_NAME
PGSQL_DIAG_COLUMN_NAME
PGSQL_DIAG_DATATYPE_NAME
PGSQL_DIAG_CONSTRAINT_NAME
PGSQL_ERRORS_TERSE
PGSQL_ERRORS_DEFAULT
PGSQL_ERRORS_VERBOSE
PGSQL_ERRORS_SQLSTATE
PGSQL_NOTICE_LAST
PGSQL_NOTICE_ALL
PGSQL_NOTICE_CLEAR
PGSQL_STATUS_LONG
PGSQL_STATUS_STRING
PGSQL_CONV_IGNORE_DEFAULT
PGSQL_CONV_FORCE_NULL
PGSQL_CONV_IGNORE_NOT_NULL
PGSQL_DML_NO_CONV
PGSQL_DML_EXEC
PGSQL_DML_ASYNC
PGSQL_DML_STRING
PGSQL_DML_ESCAPE
PGSQL_POLLING_FAILED
PGSQL_POLLING_READING
PGSQL_POLLING_WRITING
PGSQL_POLLING_OK
PGSQL_POLLING_ACTIVE
PGSQL_DIAG_SEVERITY_NONLOCALIZED
PGSQL_SHOW_CONTEXT_NEVER
PGSQL_SHOW_CONTEXT_ERRORS
PGSQL_SHOW_CONTEXT_ALWAYS
PGSQL_TRACE_SUPPRESS_TIMESTAMPS
PGSQL_TRACE_REGRESS_MODE
READLINE_LIB
SNMP_OID_OUTPUT_SUFFIX
SNMP_OID_OUTPUT_MODULE
SNMP_OID_OUTPUT_FULL
SNMP_OID_OUTPUT_NUMERIC
SNMP_OID_OUTPUT_UCD
SNMP_OID_OUTPUT_NONE
SNMP_VALUE_LIBRARY
SNMP_VALUE_PLAIN
SNMP_VALUE_OBJECT
SNMP_BIT_STR
SNMP_OCTET_STR
SNMP_OPAQUE
SNMP_NULL
SNMP_OBJECT_ID
SNMP_IPADDRESS
SNMP_COUNTER
SNMP_UNSIGNED
SNMP_TIMETICKS
SNMP_UINTEGER
SNMP_INTEGER
SNMP_COUNTER64
SOAP_1_1
SOAP_1_2
SOAP_PERSISTENCE_SESSION
SOAP_PERSISTENCE_REQUEST
SOAP_FUNCTIONS_ALL
SOAP_ENCODED
SOAP_LITERAL
SOAP_RPC
SOAP_DOCUMENT
SOAP_ACTOR_NEXT
SOAP_ACTOR_NONE
SOAP_ACTOR_UNLIMATERECEIVER
SOAP_COMPRESSION_ACCEPT
SOAP_COMPRESSION_GZIP
SOAP_COMPRESSION_DEFLATE
SOAP_AUTHENTICATION_BASIC
SOAP_AUTHENTICATION_DIGEST
SOAP_SSL_METHOD_TLS
SOAP_SSL_METHOD_SSLv2
SOAP_SSL_METHOD_SSLv3
SOAP_SSL_METHOD_SSLv23
UNKNOWN_TYPE
XSD_STRING
XSD_BOOLEAN
XSD_DECIMAL
XSD_FLOAT
XSD_DOUBLE
XSD_DURATION
XSD_DATETIME
XSD_TIME
XSD_DATE
XSD_GYEARMONTH
XSD_GYEAR
XSD_GMONTHDAY
XSD_GDAY
XSD_GMONTH
XSD_HEXBINARY
XSD_BASE64BINARY
XSD_ANYURI
XSD_QNAME
XSD_NOTATION
XSD_NORMALIZEDSTRING
XSD_TOKEN
XSD_LANGUAGE
XSD_NMTOKEN
XSD_NAME
XSD_NCNAME
XSD_ID
XSD_IDREF
XSD_IDREFS
XSD_ENTITY
XSD_ENTITIES
XSD_INTEGER
XSD_NONPOSITIVEINTEGER
XSD_NEGATIVEINTEGER
XSD_LONG
XSD_INT
XSD_SHORT
XSD_BYTE
XSD_NONNEGATIVEINTEGER
XSD_UNSIGNEDLONG
XSD_UNSIGNEDINT
XSD_UNSIGNEDSHORT
XSD_UNSIGNEDBYTE
XSD_POSITIVEINTEGER
XSD_NMTOKENS
XSD_ANYTYPE
XSD_ANYXML
APACHE_MAP
SOAP_ENC_OBJECT
SOAP_ENC_ARRAY
XSD_1999_TIMEINSTANT
XSD_NAMESPACE
XSD_1999_NAMESPACE
SOAP_SINGLE_ELEMENT_ARRAYS
SOAP_WAIT_ONE_WAY_CALLS
SOAP_USE_XSI_ARRAY_TYPE
WSDL_CACHE_NONE
WSDL_CACHE_DISK
WSDL_CACHE_MEMORY
WSDL_CACHE_BOTH
SODIUM_LIBRARY_VERSION
SODIUM_LIBRARY_MAJOR_VERSION
SODIUM_LIBRARY_MINOR_VERSION
SODIUM_BASE64_VARIANT_ORIGINAL
SODIUM_BASE64_VARIANT_ORIGINAL_NO_PADDING
SODIUM_BASE64_VARIANT_URLSAFE
SODIUM_BASE64_VARIANT_URLSAFE_NO_PADDING
SODIUM_CRYPTO_AEAD_AEGIS128L_KEYBYTES
SODIUM_CRYPTO_AEAD_AEGIS128L_NSECBYTES
SODIUM_CRYPTO_AEAD_AEGIS128L_NPUBBYTES
SODIUM_CRYPTO_AEAD_AEGIS128L_ABYTES
SODIUM_CRYPTO_AEAD_AEGIS256_KEYBYTES
SODIUM_CRYPTO_AEAD_AEGIS256_NSECBYTES
SODIUM_CRYPTO_AEAD_AEGIS256_NPUBBYTES
SODIUM_CRYPTO_AEAD_AEGIS256_ABYTES
SODIUM_CRYPTO_AEAD_AES256GCM_KEYBYTES
SODIUM_CRYPTO_AEAD_AES256GCM_NSECBYTES
SODIUM_CRYPTO_AEAD_AES256GCM_NPUBBYTES
SODIUM_CRYPTO_AEAD_AES256GCM_ABYTES
SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_KEYBYTES
SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_NSECBYTES
SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_NPUBBYTES
SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_ABYTES
SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_KEYBYTES
SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_NSECBYTES
SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_NPUBBYTES
SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_ABYTES
SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_ABYTES
SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_KEYBYTES
SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_NPUBBYTES
SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_NSECBYTES
SODIUM_CRYPTO_AUTH_BYTES
SODIUM_CRYPTO_AUTH_KEYBYTES
SODIUM_CRYPTO_BOX_SEALBYTES
SODIUM_CRYPTO_BOX_SECRETKEYBYTES
SODIUM_CRYPTO_BOX_PUBLICKEYBYTES
SODIUM_CRYPTO_BOX_KEYPAIRBYTES
SODIUM_CRYPTO_BOX_MACBYTES
SODIUM_CRYPTO_BOX_NONCEBYTES
SODIUM_CRYPTO_BOX_SEEDBYTES
SODIUM_CRYPTO_KDF_BYTES_MIN
SODIUM_CRYPTO_KDF_BYTES_MAX
SODIUM_CRYPTO_KDF_CONTEXTBYTES
SODIUM_CRYPTO_KDF_KEYBYTES
SODIUM_CRYPTO_KX_SEEDBYTES
SODIUM_CRYPTO_KX_SESSIONKEYBYTES
SODIUM_CRYPTO_KX_PUBLICKEYBYTES
SODIUM_CRYPTO_KX_SECRETKEYBYTES
SODIUM_CRYPTO_KX_KEYPAIRBYTES
SODIUM_CRYPTO_GENERICHASH_BYTES
SODIUM_CRYPTO_GENERICHASH_BYTES_MIN
SODIUM_CRYPTO_GENERICHASH_BYTES_MAX
SODIUM_CRYPTO_GENERICHASH_KEYBYTES
SODIUM_CRYPTO_GENERICHASH_KEYBYTES_MIN
SODIUM_CRYPTO_GENERICHASH_KEYBYTES_MAX
SODIUM_CRYPTO_PWHASH_ALG_ARGON2I13
SODIUM_CRYPTO_PWHASH_ALG_ARGON2ID13
SODIUM_CRYPTO_PWHASH_ALG_DEFAULT
SODIUM_CRYPTO_PWHASH_SALTBYTES
SODIUM_CRYPTO_PWHASH_STRPREFIX
SODIUM_CRYPTO_PWHASH_OPSLIMIT_INTERACTIVE
SODIUM_CRYPTO_PWHASH_MEMLIMIT_INTERACTIVE
SODIUM_CRYPTO_PWHASH_OPSLIMIT_MODERATE
SODIUM_CRYPTO_PWHASH_MEMLIMIT_MODERATE
SODIUM_CRYPTO_PWHASH_OPSLIMIT_SENSITIVE
SODIUM_CRYPTO_PWHASH_MEMLIMIT_SENSITIVE
SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_SALTBYTES
SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_STRPREFIX
SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_OPSLIMIT_INTERACTIVE
SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_MEMLIMIT_INTERACTIVE
SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_OPSLIMIT_SENSITIVE
SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_MEMLIMIT_SENSITIVE
SODIUM_CRYPTO_CORE_RISTRETTO255_BYTES
SODIUM_CRYPTO_CORE_RISTRETTO255_HASHBYTES
SODIUM_CRYPTO_CORE_RISTRETTO255_NONREDUCEDSCALARBYTES
SODIUM_CRYPTO_CORE_RISTRETTO255_SCALARBYTES
SODIUM_CRYPTO_SCALARMULT_BYTES
SODIUM_CRYPTO_SCALARMULT_SCALARBYTES
SODIUM_CRYPTO_SCALARMULT_RISTRETTO255_BYTES
SODIUM_CRYPTO_SCALARMULT_RISTRETTO255_SCALARBYTES
SODIUM_CRYPTO_SHORTHASH_BYTES
SODIUM_CRYPTO_SHORTHASH_KEYBYTES
SODIUM_CRYPTO_SECRETBOX_KEYBYTES
SODIUM_CRYPTO_SECRETBOX_MACBYTES
SODIUM_CRYPTO_SECRETBOX_NONCEBYTES
SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES
SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES
SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_KEYBYTES
SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_MESSAGEBYTES_MAX
SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_TAG_FINAL
SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_TAG_MESSAGE
SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_TAG_PUSH
SODIUM_CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_TAG_REKEY
SODIUM_CRYPTO_SIGN_BYTES
SODIUM_CRYPTO_SIGN_SEEDBYTES
SODIUM_CRYPTO_SIGN_PUBLICKEYBYTES
SODIUM_CRYPTO_SIGN_SECRETKEYBYTES
SODIUM_CRYPTO_SIGN_KEYPAIRBYTES
SODIUM_CRYPTO_STREAM_NONCEBYTES
SODIUM_CRYPTO_STREAM_KEYBYTES
SODIUM_CRYPTO_STREAM_XCHACHA20_KEYBYTES
SODIUM_CRYPTO_STREAM_XCHACHA20_NONCEBYTES
TIDY_TAG_UNKNOWN
TIDY_TAG_A
TIDY_TAG_ABBR
TIDY_TAG_ACRONYM
TIDY_TAG_ADDRESS
TIDY_TAG_ALIGN
TIDY_TAG_APPLET
TIDY_TAG_AREA
TIDY_TAG_ARTICLE
TIDY_TAG_ASIDE
TIDY_TAG_AUDIO
TIDY_TAG_B
TIDY_TAG_BASE
TIDY_TAG_BASEFONT
TIDY_TAG_BDI
TIDY_TAG_BDO
TIDY_TAG_BGSOUND
TIDY_TAG_BIG
TIDY_TAG_BLINK
TIDY_TAG_BLOCKQUOTE
TIDY_TAG_BODY
TIDY_TAG_BR
TIDY_TAG_BUTTON
TIDY_TAG_CANVAS
TIDY_TAG_CAPTION
TIDY_TAG_CENTER
TIDY_TAG_CITE
TIDY_TAG_CODE
TIDY_TAG_COL
TIDY_TAG_COLGROUP
TIDY_TAG_COMMAND
TIDY_TAG_COMMENT
TIDY_TAG_DATALIST
TIDY_TAG_DD
TIDY_TAG_DEL
TIDY_TAG_DETAILS
TIDY_TAG_DFN
TIDY_TAG_DIALOG
TIDY_TAG_DIR
TIDY_TAG_DIV
TIDY_TAG_DL
TIDY_TAG_DT
TIDY_TAG_EM
TIDY_TAG_EMBED
TIDY_TAG_FIELDSET
TIDY_TAG_FIGCAPTION
TIDY_TAG_FIGURE
TIDY_TAG_FONT
TIDY_TAG_FOOTER
TIDY_TAG_FORM
TIDY_TAG_FRAME
TIDY_TAG_FRAMESET
TIDY_TAG_H1
TIDY_TAG_H2
TIDY_TAG_H3
TIDY_TAG_H4
TIDY_TAG_H5
TIDY_TAG_H6
TIDY_TAG_HEAD
TIDY_TAG_HEADER
TIDY_TAG_HGROUP
TIDY_TAG_HR
TIDY_TAG_HTML
TIDY_TAG_I
TIDY_TAG_IFRAME
TIDY_TAG_ILAYER
TIDY_TAG_IMG
TIDY_TAG_INPUT
TIDY_TAG_INS
TIDY_TAG_ISINDEX
TIDY_TAG_KBD
TIDY_TAG_KEYGEN
TIDY_TAG_LABEL
TIDY_TAG_LAYER
TIDY_TAG_LEGEND
TIDY_TAG_LI
TIDY_TAG_LINK
TIDY_TAG_LISTING
TIDY_TAG_MAIN
TIDY_TAG_MAP
TIDY_TAG_MARK
TIDY_TAG_MARQUEE
TIDY_TAG_MENU
TIDY_TAG_MENUITEM
TIDY_TAG_META
TIDY_TAG_METER
TIDY_TAG_MULTICOL
TIDY_TAG_NAV
TIDY_TAG_NOBR
TIDY_TAG_NOEMBED
TIDY_TAG_NOFRAMES
TIDY_TAG_NOLAYER
TIDY_TAG_NOSAVE
TIDY_TAG_NOSCRIPT
TIDY_TAG_OBJECT
TIDY_TAG_OL
TIDY_TAG_OPTGROUP
TIDY_TAG_OPTION
TIDY_TAG_OUTPUT
TIDY_TAG_P
TIDY_TAG_PARAM
TIDY_TAG_PLAINTEXT
TIDY_TAG_PRE
TIDY_TAG_PROGRESS
TIDY_TAG_Q
TIDY_TAG_RB
TIDY_TAG_RBC
TIDY_TAG_RP
TIDY_TAG_RT
TIDY_TAG_RTC
TIDY_TAG_RUBY
TIDY_TAG_S
TIDY_TAG_SAMP
TIDY_TAG_SCRIPT
TIDY_TAG_SECTION
TIDY_TAG_SELECT
TIDY_TAG_SERVER
TIDY_TAG_SERVLET
TIDY_TAG_SMALL
TIDY_TAG_SOURCE
TIDY_TAG_SPACER
TIDY_TAG_SPAN
TIDY_TAG_STRIKE
TIDY_TAG_STRONG
TIDY_TAG_STYLE
TIDY_TAG_SUB
TIDY_TAG_SUMMARY
TIDY_TAG_SUP
TIDY_TAG_TABLE
TIDY_TAG_TBODY
TIDY_TAG_TD
TIDY_TAG_TEMPLATE
TIDY_TAG_TEXTAREA
TIDY_TAG_TFOOT
TIDY_TAG_TH
TIDY_TAG_THEAD
TIDY_TAG_TIME
TIDY_TAG_TITLE
TIDY_TAG_TR
TIDY_TAG_TRACK
TIDY_TAG_TT
TIDY_TAG_U
TIDY_TAG_UL
TIDY_TAG_VAR
TIDY_TAG_VIDEO
TIDY_TAG_WBR
TIDY_TAG_XMP
TIDY_NODETYPE_ROOT
TIDY_NODETYPE_DOCTYPE
TIDY_NODETYPE_COMMENT
TIDY_NODETYPE_PROCINS
TIDY_NODETYPE_TEXT
TIDY_NODETYPE_START
TIDY_NODETYPE_END
TIDY_NODETYPE_STARTEND
TIDY_NODETYPE_CDATA
TIDY_NODETYPE_SECTION
TIDY_NODETYPE_ASP
TIDY_NODETYPE_JSTE
TIDY_NODETYPE_PHP
TIDY_NODETYPE_XMLDECL
ODBC_TYPE
ODBC_BINMODE_PASSTHRU
ODBC_BINMODE_RETURN
ODBC_BINMODE_CONVERT
SQL_ODBC_CURSORS
SQL_CUR_USE_DRIVER
SQL_CUR_USE_IF_NEEDED
SQL_CUR_USE_ODBC
SQL_CONCURRENCY
SQL_CONCUR_READ_ONLY
SQL_CONCUR_LOCK
SQL_CONCUR_ROWVER
SQL_CONCUR_VALUES
SQL_CURSOR_TYPE
SQL_CURSOR_FORWARD_ONLY
SQL_CURSOR_KEYSET_DRIVEN
SQL_CURSOR_DYNAMIC
SQL_CURSOR_STATIC
SQL_KEYSET_SIZE
SQL_CHAR
SQL_VARCHAR
SQL_LONGVARCHAR
SQL_WCHAR
SQL_WVARCHAR
SQL_WLONGVARCHAR
SQL_DECIMAL
SQL_NUMERIC
SQL_BIT
SQL_TINYINT
SQL_SMALLINT
SQL_INTEGER
SQL_BIGINT
SQL_REAL
SQL_FLOAT
SQL_DOUBLE
SQL_BINARY
SQL_VARBINARY
SQL_LONGVARBINARY
SQL_DATE
SQL_TIME
SQL_TIMESTAMP
SQL_TYPE_DATE
SQL_TYPE_TIME
SQL_TYPE_TIMESTAMP
SQL_BEST_ROWID
SQL_ROWVER
SQL_SCOPE_CURROW
SQL_SCOPE_TRANSACTION
SQL_SCOPE_SESSION
SQL_NO_NULLS
SQL_NULLABLE
SQL_INDEX_UNIQUE
SQL_INDEX_ALL
SQL_ENSURE
SQL_QUICK
SQL_FETCH_FIRST
SQL_FETCH_NEXT
XML_ERROR_NONE
XML_ERROR_NO_MEMORY
XML_ERROR_SYNTAX
XML_ERROR_NO_ELEMENTS
XML_ERROR_INVALID_TOKEN
XML_ERROR_UNCLOSED_TOKEN
XML_ERROR_PARTIAL_CHAR
XML_ERROR_TAG_MISMATCH
XML_ERROR_DUPLICATE_ATTRIBUTE
XML_ERROR_JUNK_AFTER_DOC_ELEMENT
XML_ERROR_PARAM_ENTITY_REF
XML_ERROR_UNDEFINED_ENTITY
XML_ERROR_RECURSIVE_ENTITY_REF
XML_ERROR_ASYNC_ENTITY
XML_ERROR_BAD_CHAR_REF
XML_ERROR_BINARY_ENTITY_REF
XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF
XML_ERROR_MISPLACED_XML_PI
XML_ERROR_UNKNOWN_ENCODING
XML_ERROR_INCORRECT_ENCODING
XML_ERROR_UNCLOSED_CDATA_SECTION
XML_ERROR_EXTERNAL_ENTITY_HANDLING
XML_OPTION_CASE_FOLDING
XML_OPTION_PARSE_HUGE
XML_OPTION_TARGET_ENCODING
XML_OPTION_SKIP_TAGSTART
XML_OPTION_SKIP_WHITE
XML_SAX_IMPL
XSL_CLONE_AUTO
XSL_CLONE_NEVER
XSL_CLONE_ALWAYS
LIBXSLT_VERSION
LIBXSLT_DOTTED_VERSION
LIBEXSLT_VERSION
LIBEXSLT_DOTTED_VERSION
XSL_SECPREF_NONE
XSL_SECPREF_READ_FILE
XSL_SECPREF_WRITE_FILE
XSL_SECPREF_CREATE_DIRECTORY
XSL_SECPREF_READ_NETWORK
XSL_SECPREF_WRITE_NETWORK
XSL_SECPREF_DEFAULT
ZipArchive::CREATE
ZipArchive::OVERWRITE
ZipArchive::EXCL
ZipArchive::RDONLY
ZipArchive::CHECKCONS
ZipArchive::AFL_RDONLY
ZipArchive::AFL_IS_TORRENTZIP
ZipArchive::AFL_WANT_TORRENTZIP
ZipArchive::AFL_CREATE_OR_KEEP_FILE_FOR_EMPTY_ARCHIVE
ZipArchive::FL_NOCASE
ZipArchive::FL_NODIR
ZipArchive::FL_COMPRESSED
ZipArchive::FL_UNCHANGED
ZipArchive::FL_RECOMPRESS
ZipArchive::FL_ENCRYPTED
ZipArchive::FL_OVERWRITE
ZipArchive::FL_LOCAL
ZipArchive::FL_CENTRAL
ZipArchive::FL_ENC_GUESS
ZipArchive::FL_ENC_RAW
ZipArchive::FL_ENC_STRICT
ZipArchive::FL_ENC_UTF_8
ZipArchive::FL_ENC_CP437
ZipArchive::FL_OPEN_FILE_NOW
ZipArchive::CM_DEFAULT
ZipArchive::CM_STORE
ZipArchive::CM_SHRINK
ZipArchive::CM_REDUCE_1
ZipArchive::CM_REDUCE_2
ZipArchive::CM_REDUCE_3
ZipArchive::CM_REDUCE_4
ZipArchive::CM_IMPLODE
ZipArchive::CM_DEFLATE
ZipArchive::CM_DEFLATE64
ZipArchive::CM_PKWARE_IMPLODE
ZipArchive::CM_BZIP2
ZipArchive::CM_LZMA
ZipArchive::CM_LZMA2
ZipArchive::CM_ZSTD
ZipArchive::CM_XZ
ZipArchive::CM_TERSE
ZipArchive::CM_LZ77
ZipArchive::CM_WAVPACK
ZipArchive::CM_PPMD
ZipArchive::ER_OK
ZipArchive::ER_MULTIDISK
ZipArchive::ER_RENAME
ZipArchive::ER_CLOSE
ZipArchive::ER_SEEK
ZipArchive::ER_READ
ZipArchive::ER_WRITE
ZipArchive::ER_CRC
ZipArchive::ER_ZIPCLOSED
ZipArchive::ER_NOENT
ZipArchive::ER_EXISTS
ZipArchive::ER_OPEN
ZipArchive::ER_TMPOPEN
ZipArchive::ER_ZLIB
ZipArchive::ER_MEMORY
ZipArchive::ER_CHANGED
ZipArchive::ER_COMPNOTSUPP
ZipArchive::ER_EOF
ZipArchive::ER_INVAL
ZipArchive::ER_NOZIP
ZipArchive::ER_INTERNAL
ZipArchive::ER_INCONS
ZipArchive::ER_REMOVE
ZipArchive::ER_DELETED
ZipArchive::ER_ENCRNOTSUPP
ZipArchive::ER_RDONLY
ZipArchive::ER_NOPASSWD
ZipArchive::ER_WRONGPASSWD
ZipArchive::ER_OPNOTSUPP
ZipArchive::ER_INUSE
ZipArchive::ER_TELL
ZipArchive::ER_COMPRESSED_DATA
ZipArchive::ER_CANCELLED
ZipArchive::ER_DATA_LENGTH
ZipArchive::ER_NOT_ALLOWED
ZipArchive::ER_TRUNCATED_ZIP
ZipArchive::EM_NONE
ZipArchive::EM_TRAD_PKWARE
ZipArchive::EM_AES_128
ZipArchive::EM_AES_192
ZipArchive::EM_AES_256
ZipArchive::EM_UNKNOWN
ZipArchive::LENGTH_TO_END
ZipArchive::LENGTH_UNCHECKED
ZipArchive::LIBZIP_VERSION
ZipArchive::OPSYS_DOS
ZipArchive::OPSYS_AMIGA
ZipArchive::OPSYS_OPENVMS
ZipArchive::OPSYS_UNIX
ZipArchive::OPSYS_VM_CMS
ZipArchive::OPSYS_ATARI_ST
ZipArchive::OPSYS_OS_2
ZipArchive::OPSYS_MACINTOSH
ZipArchive::OPSYS_Z_SYSTEM
ZipArchive::OPSYS_CPM
ZipArchive::OPSYS_WINDOWS_NTFS
ZipArchive::OPSYS_MVS
ZipArchive::OPSYS_VSE
ZipArchive::OPSYS_ACORN_RISC
ZipArchive::OPSYS_VFAT
ZipArchive::OPSYS_ALTERNATE_MVS
ZipArchive::OPSYS_BEOS
ZipArchive::OPSYS_TANDEM
ZipArchive::OPSYS_OS_400
ZipArchive::OPSYS_OS_X
ZipArchive::OPSYS_DEFAULT
